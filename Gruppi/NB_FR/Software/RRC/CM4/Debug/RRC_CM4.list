
RRC_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef0  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08104188  08104188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08104198  08104198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810419c  0810419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  081041a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000178  10000010  081041b0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000188  081041b0  00020188  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001070f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001dac  00000000  00000000  0003074f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d48  00000000  00000000  00032500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000c70  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039df9  00000000  00000000  00033eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ed3b  00000000  00000000  0006dcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00186c00  00000000  00000000  0007c9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  002035ec  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003800  00000000  00000000  0020363c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08104170 	.word	0x08104170

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08104170 	.word	0x08104170

081002d8 <__aeabi_drsub>:
 81002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002dc:	e002      	b.n	81002e4 <__adddf3>
 81002de:	bf00      	nop

081002e0 <__aeabi_dsub>:
 81002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002e4 <__adddf3>:
 81002e4:	b530      	push	{r4, r5, lr}
 81002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81002ee:	ea94 0f05 	teq	r4, r5
 81002f2:	bf08      	it	eq
 81002f4:	ea90 0f02 	teqeq	r0, r2
 81002f8:	bf1f      	itttt	ne
 81002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 81002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8100306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810030a:	f000 80e2 	beq.w	81004d2 <__adddf3+0x1ee>
 810030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8100316:	bfb8      	it	lt
 8100318:	426d      	neglt	r5, r5
 810031a:	dd0c      	ble.n	8100336 <__adddf3+0x52>
 810031c:	442c      	add	r4, r5
 810031e:	ea80 0202 	eor.w	r2, r0, r2
 8100322:	ea81 0303 	eor.w	r3, r1, r3
 8100326:	ea82 0000 	eor.w	r0, r2, r0
 810032a:	ea83 0101 	eor.w	r1, r3, r1
 810032e:	ea80 0202 	eor.w	r2, r0, r2
 8100332:	ea81 0303 	eor.w	r3, r1, r3
 8100336:	2d36      	cmp	r5, #54	; 0x36
 8100338:	bf88      	it	hi
 810033a:	bd30      	pophi	{r4, r5, pc}
 810033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 810034c:	d002      	beq.n	8100354 <__adddf3+0x70>
 810034e:	4240      	negs	r0, r0
 8100350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 810035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100360:	d002      	beq.n	8100368 <__adddf3+0x84>
 8100362:	4252      	negs	r2, r2
 8100364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100368:	ea94 0f05 	teq	r4, r5
 810036c:	f000 80a7 	beq.w	81004be <__adddf3+0x1da>
 8100370:	f1a4 0401 	sub.w	r4, r4, #1
 8100374:	f1d5 0e20 	rsbs	lr, r5, #32
 8100378:	db0d      	blt.n	8100396 <__adddf3+0xb2>
 810037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 810037e:	fa22 f205 	lsr.w	r2, r2, r5
 8100382:	1880      	adds	r0, r0, r2
 8100384:	f141 0100 	adc.w	r1, r1, #0
 8100388:	fa03 f20e 	lsl.w	r2, r3, lr
 810038c:	1880      	adds	r0, r0, r2
 810038e:	fa43 f305 	asr.w	r3, r3, r5
 8100392:	4159      	adcs	r1, r3
 8100394:	e00e      	b.n	81003b4 <__adddf3+0xd0>
 8100396:	f1a5 0520 	sub.w	r5, r5, #32
 810039a:	f10e 0e20 	add.w	lr, lr, #32
 810039e:	2a01      	cmp	r2, #1
 81003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003a4:	bf28      	it	cs
 81003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003aa:	fa43 f305 	asr.w	r3, r3, r5
 81003ae:	18c0      	adds	r0, r0, r3
 81003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003b8:	d507      	bpl.n	81003ca <__adddf3+0xe6>
 81003ba:	f04f 0e00 	mov.w	lr, #0
 81003be:	f1dc 0c00 	rsbs	ip, ip, #0
 81003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 81003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003ce:	d31b      	bcc.n	8100408 <__adddf3+0x124>
 81003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003d4:	d30c      	bcc.n	81003f0 <__adddf3+0x10c>
 81003d6:	0849      	lsrs	r1, r1, #1
 81003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 81003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003e0:	f104 0401 	add.w	r4, r4, #1
 81003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81003ec:	f080 809a 	bcs.w	8100524 <__adddf3+0x240>
 81003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81003f4:	bf08      	it	eq
 81003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81003fa:	f150 0000 	adcs.w	r0, r0, #0
 81003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100402:	ea41 0105 	orr.w	r1, r1, r5
 8100406:	bd30      	pop	{r4, r5, pc}
 8100408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 810040c:	4140      	adcs	r0, r0
 810040e:	eb41 0101 	adc.w	r1, r1, r1
 8100412:	3c01      	subs	r4, #1
 8100414:	bf28      	it	cs
 8100416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810041a:	d2e9      	bcs.n	81003f0 <__adddf3+0x10c>
 810041c:	f091 0f00 	teq	r1, #0
 8100420:	bf04      	itt	eq
 8100422:	4601      	moveq	r1, r0
 8100424:	2000      	moveq	r0, #0
 8100426:	fab1 f381 	clz	r3, r1
 810042a:	bf08      	it	eq
 810042c:	3320      	addeq	r3, #32
 810042e:	f1a3 030b 	sub.w	r3, r3, #11
 8100432:	f1b3 0220 	subs.w	r2, r3, #32
 8100436:	da0c      	bge.n	8100452 <__adddf3+0x16e>
 8100438:	320c      	adds	r2, #12
 810043a:	dd08      	ble.n	810044e <__adddf3+0x16a>
 810043c:	f102 0c14 	add.w	ip, r2, #20
 8100440:	f1c2 020c 	rsb	r2, r2, #12
 8100444:	fa01 f00c 	lsl.w	r0, r1, ip
 8100448:	fa21 f102 	lsr.w	r1, r1, r2
 810044c:	e00c      	b.n	8100468 <__adddf3+0x184>
 810044e:	f102 0214 	add.w	r2, r2, #20
 8100452:	bfd8      	it	le
 8100454:	f1c2 0c20 	rsble	ip, r2, #32
 8100458:	fa01 f102 	lsl.w	r1, r1, r2
 810045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100460:	bfdc      	itt	le
 8100462:	ea41 010c 	orrle.w	r1, r1, ip
 8100466:	4090      	lslle	r0, r2
 8100468:	1ae4      	subs	r4, r4, r3
 810046a:	bfa2      	ittt	ge
 810046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100470:	4329      	orrge	r1, r5
 8100472:	bd30      	popge	{r4, r5, pc}
 8100474:	ea6f 0404 	mvn.w	r4, r4
 8100478:	3c1f      	subs	r4, #31
 810047a:	da1c      	bge.n	81004b6 <__adddf3+0x1d2>
 810047c:	340c      	adds	r4, #12
 810047e:	dc0e      	bgt.n	810049e <__adddf3+0x1ba>
 8100480:	f104 0414 	add.w	r4, r4, #20
 8100484:	f1c4 0220 	rsb	r2, r4, #32
 8100488:	fa20 f004 	lsr.w	r0, r0, r4
 810048c:	fa01 f302 	lsl.w	r3, r1, r2
 8100490:	ea40 0003 	orr.w	r0, r0, r3
 8100494:	fa21 f304 	lsr.w	r3, r1, r4
 8100498:	ea45 0103 	orr.w	r1, r5, r3
 810049c:	bd30      	pop	{r4, r5, pc}
 810049e:	f1c4 040c 	rsb	r4, r4, #12
 81004a2:	f1c4 0220 	rsb	r2, r4, #32
 81004a6:	fa20 f002 	lsr.w	r0, r0, r2
 81004aa:	fa01 f304 	lsl.w	r3, r1, r4
 81004ae:	ea40 0003 	orr.w	r0, r0, r3
 81004b2:	4629      	mov	r1, r5
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	fa21 f004 	lsr.w	r0, r1, r4
 81004ba:	4629      	mov	r1, r5
 81004bc:	bd30      	pop	{r4, r5, pc}
 81004be:	f094 0f00 	teq	r4, #0
 81004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004c6:	bf06      	itte	eq
 81004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004cc:	3401      	addeq	r4, #1
 81004ce:	3d01      	subne	r5, #1
 81004d0:	e74e      	b.n	8100370 <__adddf3+0x8c>
 81004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004d6:	bf18      	it	ne
 81004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004dc:	d029      	beq.n	8100532 <__adddf3+0x24e>
 81004de:	ea94 0f05 	teq	r4, r5
 81004e2:	bf08      	it	eq
 81004e4:	ea90 0f02 	teqeq	r0, r2
 81004e8:	d005      	beq.n	81004f6 <__adddf3+0x212>
 81004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 81004ee:	bf04      	itt	eq
 81004f0:	4619      	moveq	r1, r3
 81004f2:	4610      	moveq	r0, r2
 81004f4:	bd30      	pop	{r4, r5, pc}
 81004f6:	ea91 0f03 	teq	r1, r3
 81004fa:	bf1e      	ittt	ne
 81004fc:	2100      	movne	r1, #0
 81004fe:	2000      	movne	r0, #0
 8100500:	bd30      	popne	{r4, r5, pc}
 8100502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8100506:	d105      	bne.n	8100514 <__adddf3+0x230>
 8100508:	0040      	lsls	r0, r0, #1
 810050a:	4149      	adcs	r1, r1
 810050c:	bf28      	it	cs
 810050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100512:	bd30      	pop	{r4, r5, pc}
 8100514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100518:	bf3c      	itt	cc
 810051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 810051e:	bd30      	popcc	{r4, r5, pc}
 8100520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810052c:	f04f 0000 	mov.w	r0, #0
 8100530:	bd30      	pop	{r4, r5, pc}
 8100532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8100536:	bf1a      	itte	ne
 8100538:	4619      	movne	r1, r3
 810053a:	4610      	movne	r0, r2
 810053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100540:	bf1c      	itt	ne
 8100542:	460b      	movne	r3, r1
 8100544:	4602      	movne	r2, r0
 8100546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810054a:	bf06      	itte	eq
 810054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100550:	ea91 0f03 	teqeq	r1, r3
 8100554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100558:	bd30      	pop	{r4, r5, pc}
 810055a:	bf00      	nop

0810055c <__aeabi_ui2d>:
 810055c:	f090 0f00 	teq	r0, #0
 8100560:	bf04      	itt	eq
 8100562:	2100      	moveq	r1, #0
 8100564:	4770      	bxeq	lr
 8100566:	b530      	push	{r4, r5, lr}
 8100568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100570:	f04f 0500 	mov.w	r5, #0
 8100574:	f04f 0100 	mov.w	r1, #0
 8100578:	e750      	b.n	810041c <__adddf3+0x138>
 810057a:	bf00      	nop

0810057c <__aeabi_i2d>:
 810057c:	f090 0f00 	teq	r0, #0
 8100580:	bf04      	itt	eq
 8100582:	2100      	moveq	r1, #0
 8100584:	4770      	bxeq	lr
 8100586:	b530      	push	{r4, r5, lr}
 8100588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8100594:	bf48      	it	mi
 8100596:	4240      	negmi	r0, r0
 8100598:	f04f 0100 	mov.w	r1, #0
 810059c:	e73e      	b.n	810041c <__adddf3+0x138>
 810059e:	bf00      	nop

081005a0 <__aeabi_f2d>:
 81005a0:	0042      	lsls	r2, r0, #1
 81005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 81005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005ae:	bf1f      	itttt	ne
 81005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005bc:	4770      	bxne	lr
 81005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005c2:	bf08      	it	eq
 81005c4:	4770      	bxeq	lr
 81005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005ca:	bf04      	itt	eq
 81005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005d0:	4770      	bxeq	lr
 81005d2:	b530      	push	{r4, r5, lr}
 81005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005e0:	e71c      	b.n	810041c <__adddf3+0x138>
 81005e2:	bf00      	nop

081005e4 <__aeabi_ul2d>:
 81005e4:	ea50 0201 	orrs.w	r2, r0, r1
 81005e8:	bf08      	it	eq
 81005ea:	4770      	bxeq	lr
 81005ec:	b530      	push	{r4, r5, lr}
 81005ee:	f04f 0500 	mov.w	r5, #0
 81005f2:	e00a      	b.n	810060a <__aeabi_l2d+0x16>

081005f4 <__aeabi_l2d>:
 81005f4:	ea50 0201 	orrs.w	r2, r0, r1
 81005f8:	bf08      	it	eq
 81005fa:	4770      	bxeq	lr
 81005fc:	b530      	push	{r4, r5, lr}
 81005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100602:	d502      	bpl.n	810060a <__aeabi_l2d+0x16>
 8100604:	4240      	negs	r0, r0
 8100606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 810060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8100616:	f43f aed8 	beq.w	81003ca <__adddf3+0xe6>
 810061a:	f04f 0203 	mov.w	r2, #3
 810061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100622:	bf18      	it	ne
 8100624:	3203      	addne	r2, #3
 8100626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810062a:	bf18      	it	ne
 810062c:	3203      	addne	r2, #3
 810062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100632:	f1c2 0320 	rsb	r3, r2, #32
 8100636:	fa00 fc03 	lsl.w	ip, r0, r3
 810063a:	fa20 f002 	lsr.w	r0, r0, r2
 810063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8100642:	ea40 000e 	orr.w	r0, r0, lr
 8100646:	fa21 f102 	lsr.w	r1, r1, r2
 810064a:	4414      	add	r4, r2
 810064c:	e6bd      	b.n	81003ca <__adddf3+0xe6>
 810064e:	bf00      	nop

08100650 <__aeabi_d2f>:
 8100650:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100654:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100658:	bf24      	itt	cs
 810065a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 810065e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100662:	d90d      	bls.n	8100680 <__aeabi_d2f+0x30>
 8100664:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100668:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 810066c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100670:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100674:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100678:	bf08      	it	eq
 810067a:	f020 0001 	biceq.w	r0, r0, #1
 810067e:	4770      	bx	lr
 8100680:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100684:	d121      	bne.n	81006ca <__aeabi_d2f+0x7a>
 8100686:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 810068a:	bfbc      	itt	lt
 810068c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100690:	4770      	bxlt	lr
 8100692:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100696:	ea4f 5252 	mov.w	r2, r2, lsr #21
 810069a:	f1c2 0218 	rsb	r2, r2, #24
 810069e:	f1c2 0c20 	rsb	ip, r2, #32
 81006a2:	fa10 f30c 	lsls.w	r3, r0, ip
 81006a6:	fa20 f002 	lsr.w	r0, r0, r2
 81006aa:	bf18      	it	ne
 81006ac:	f040 0001 	orrne.w	r0, r0, #1
 81006b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 81006b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 81006b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 81006bc:	ea40 000c 	orr.w	r0, r0, ip
 81006c0:	fa23 f302 	lsr.w	r3, r3, r2
 81006c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 81006c8:	e7cc      	b.n	8100664 <__aeabi_d2f+0x14>
 81006ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 81006ce:	d107      	bne.n	81006e0 <__aeabi_d2f+0x90>
 81006d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 81006d4:	bf1e      	ittt	ne
 81006d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 81006da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 81006de:	4770      	bxne	lr
 81006e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 81006e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 81006e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 81006ec:	4770      	bx	lr
 81006ee:	bf00      	nop

081006f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81006f0:	b480      	push	{r7}
 81006f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81006f4:	4b09      	ldr	r3, [pc, #36]	; (810071c <SystemInit+0x2c>)
 81006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81006fa:	4a08      	ldr	r2, [pc, #32]	; (810071c <SystemInit+0x2c>)
 81006fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100704:	4b05      	ldr	r3, [pc, #20]	; (810071c <SystemInit+0x2c>)
 8100706:	691b      	ldr	r3, [r3, #16]
 8100708:	4a04      	ldr	r2, [pc, #16]	; (810071c <SystemInit+0x2c>)
 810070a:	f043 0310 	orr.w	r3, r3, #16
 810070e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100710:	bf00      	nop
 8100712:	46bd      	mov	sp, r7
 8100714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100718:	4770      	bx	lr
 810071a:	bf00      	nop
 810071c:	e000ed00 	.word	0xe000ed00

08100720 <Receiver_Init>:




void Receiver_Init (ChannelForFrequency_Data* ch, ChannelForDuty_Data chDuty[], int ne)
{
 8100720:	b480      	push	{r7}
 8100722:	b087      	sub	sp, #28
 8100724:	af00      	add	r7, sp, #0
 8100726:	60f8      	str	r0, [r7, #12]
 8100728:	60b9      	str	r1, [r7, #8]
 810072a:	607a      	str	r2, [r7, #4]
	int i = 0;
 810072c:	2300      	movs	r3, #0
 810072e:	617b      	str	r3, [r7, #20]

	ch->firstCaptured = 0;
 8100730:	68fb      	ldr	r3, [r7, #12]
 8100732:	2200      	movs	r2, #0
 8100734:	605a      	str	r2, [r3, #4]

	for(i = 0; i<ne; i++)
 8100736:	2300      	movs	r3, #0
 8100738:	617b      	str	r3, [r7, #20]
 810073a:	e00f      	b.n	810075c <Receiver_Init+0x3c>
	{
		chDuty[i].firstCaptured = 0;
 810073c:	697b      	ldr	r3, [r7, #20]
 810073e:	011b      	lsls	r3, r3, #4
 8100740:	68ba      	ldr	r2, [r7, #8]
 8100742:	4413      	add	r3, r2
 8100744:	2200      	movs	r2, #0
 8100746:	605a      	str	r2, [r3, #4]
		chDuty[i].duty = 0;
 8100748:	697b      	ldr	r3, [r7, #20]
 810074a:	011b      	lsls	r3, r3, #4
 810074c:	68ba      	ldr	r2, [r7, #8]
 810074e:	4413      	add	r3, r2
 8100750:	f04f 0200 	mov.w	r2, #0
 8100754:	60da      	str	r2, [r3, #12]
	for(i = 0; i<ne; i++)
 8100756:	697b      	ldr	r3, [r7, #20]
 8100758:	3301      	adds	r3, #1
 810075a:	617b      	str	r3, [r7, #20]
 810075c:	697a      	ldr	r2, [r7, #20]
 810075e:	687b      	ldr	r3, [r7, #4]
 8100760:	429a      	cmp	r2, r3
 8100762:	dbeb      	blt.n	810073c <Receiver_Init+0x1c>
	}

	ch->flagFirstFrequency = 1;
 8100764:	68fb      	ldr	r3, [r7, #12]
 8100766:	2201      	movs	r2, #1
 8100768:	609a      	str	r2, [r3, #8]
	ch->frequency = 0;
 810076a:	68fb      	ldr	r3, [r7, #12]
 810076c:	f04f 0200 	mov.w	r2, #0
 8100770:	60da      	str	r2, [r3, #12]
}
 8100772:	bf00      	nop
 8100774:	371c      	adds	r7, #28
 8100776:	46bd      	mov	sp, r7
 8100778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810077c:	4770      	bx	lr

0810077e <correctThrottle>:



float correctThrottle (float throttle, float maxThrottleOff)
{
 810077e:	b480      	push	{r7}
 8100780:	b083      	sub	sp, #12
 8100782:	af00      	add	r7, sp, #0
 8100784:	ed87 0a01 	vstr	s0, [r7, #4]
 8100788:	edc7 0a00 	vstr	s1, [r7]
	if(throttle < maxThrottleOff)
 810078c:	ed97 7a01 	vldr	s14, [r7, #4]
 8100790:	edd7 7a00 	vldr	s15, [r7]
 8100794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8100798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810079c:	d503      	bpl.n	81007a6 <correctThrottle+0x28>
		throttle = 0;
 810079e:	f04f 0300 	mov.w	r3, #0
 81007a2:	607b      	str	r3, [r7, #4]
 81007a4:	e007      	b.n	81007b6 <correctThrottle+0x38>
	else
		throttle -= maxThrottleOff;
 81007a6:	ed97 7a01 	vldr	s14, [r7, #4]
 81007aa:	edd7 7a00 	vldr	s15, [r7]
 81007ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 81007b2:	edc7 7a01 	vstr	s15, [r7, #4]

	return throttle;
 81007b6:	687b      	ldr	r3, [r7, #4]
 81007b8:	ee07 3a90 	vmov	s15, r3
}
 81007bc:	eeb0 0a67 	vmov.f32	s0, s15
 81007c0:	370c      	adds	r7, #12
 81007c2:	46bd      	mov	sp, r7
 81007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007c8:	4770      	bx	lr

081007ca <correctAngle>:



float correctAngle(float angle, float error)
{
 81007ca:	b480      	push	{r7}
 81007cc:	b083      	sub	sp, #12
 81007ce:	af00      	add	r7, sp, #0
 81007d0:	ed87 0a01 	vstr	s0, [r7, #4]
 81007d4:	edc7 0a00 	vstr	s1, [r7]
	if(angle > -error && angle < error)
 81007d8:	edd7 7a00 	vldr	s15, [r7]
 81007dc:	eef1 7a67 	vneg.f32	s15, s15
 81007e0:	ed97 7a01 	vldr	s14, [r7, #4]
 81007e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81007e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81007ec:	dd0b      	ble.n	8100806 <correctAngle+0x3c>
 81007ee:	ed97 7a01 	vldr	s14, [r7, #4]
 81007f2:	edd7 7a00 	vldr	s15, [r7]
 81007f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81007fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81007fe:	d502      	bpl.n	8100806 <correctAngle+0x3c>
		angle = 0;
 8100800:	f04f 0300 	mov.w	r3, #0
 8100804:	607b      	str	r3, [r7, #4]

	return angle;
 8100806:	687b      	ldr	r3, [r7, #4]
 8100808:	ee07 3a90 	vmov	s15, r3
}
 810080c:	eeb0 0a67 	vmov.f32	s0, s15
 8100810:	370c      	adds	r7, #12
 8100812:	46bd      	mov	sp, r7
 8100814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100818:	4770      	bx	lr
	...

0810081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810081c:	b580      	push	{r7, lr}
 810081e:	b082      	sub	sp, #8
 8100820:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8100822:	4b3e      	ldr	r3, [pc, #248]	; (810091c <main+0x100>)
 8100824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100828:	4a3c      	ldr	r2, [pc, #240]	; (810091c <main+0x100>)
 810082a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810082e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100832:	4b3a      	ldr	r3, [pc, #232]	; (810091c <main+0x100>)
 8100834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810083c:	607b      	str	r3, [r7, #4]
 810083e:	687b      	ldr	r3, [r7, #4]
	/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100840:	2001      	movs	r0, #1
 8100842:	f001 fba9 	bl	8101f98 <HAL_HSEM_ActivateNotification>
	/*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
	 */
	HAL_PWREx_ClearPendingEvent();
 8100846:	f001 fc33 	bl	81020b0 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810084a:	2201      	movs	r2, #1
 810084c:	2102      	movs	r1, #2
 810084e:	2000      	movs	r0, #0
 8100850:	f001 fbb4 	bl	8101fbc <HAL_PWREx_EnterSTOPMode>
	/* Clear HSEM flag */
	__HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100854:	4b32      	ldr	r3, [pc, #200]	; (8100920 <main+0x104>)
 8100856:	681b      	ldr	r3, [r3, #0]
 8100858:	091b      	lsrs	r3, r3, #4
 810085a:	f003 030f 	and.w	r3, r3, #15
 810085e:	2b07      	cmp	r3, #7
 8100860:	d108      	bne.n	8100874 <main+0x58>
 8100862:	4b30      	ldr	r3, [pc, #192]	; (8100924 <main+0x108>)
 8100864:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100868:	4a2e      	ldr	r2, [pc, #184]	; (8100924 <main+0x108>)
 810086a:	f043 0301 	orr.w	r3, r3, #1
 810086e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100872:	e007      	b.n	8100884 <main+0x68>
 8100874:	4b2b      	ldr	r3, [pc, #172]	; (8100924 <main+0x108>)
 8100876:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810087a:	4a2a      	ldr	r2, [pc, #168]	; (8100924 <main+0x108>)
 810087c:	f043 0301 	orr.w	r3, r3, #1
 8100880:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100884:	f000 ffdc 	bl	8101840 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100888:	f000 fa00 	bl	8100c8c <MX_GPIO_Init>
  MX_TIM2_Init();
 810088c:	f000 f854 	bl	8100938 <MX_TIM2_Init>
  MX_TIM5_Init();
 8100890:	f000 f97e 	bl	8100b90 <MX_TIM5_Init>
  MX_TIM3_Init();
 8100894:	f000 f8e4 	bl	8100a60 <MX_TIM3_Init>


  /* USER CODE BEGIN 2 */

  Receiver_Init(&chFrequency, chDuty, NUMBER_CHANNELS);
 8100898:	2205      	movs	r2, #5
 810089a:	4923      	ldr	r1, [pc, #140]	; (8100928 <main+0x10c>)
 810089c:	4823      	ldr	r0, [pc, #140]	; (810092c <main+0x110>)
 810089e:	f7ff ff3f 	bl	8100720 <Receiver_Init>

  waitingForGettingFrequency();
 81008a2:	f000 fb95 	bl	8100fd0 <waitingForGettingFrequency>
  jumpHalfPeriod(chFrequency.frequency);
 81008a6:	4b21      	ldr	r3, [pc, #132]	; (810092c <main+0x110>)
 81008a8:	edd3 7a03 	vldr	s15, [r3, #12]
 81008ac:	eeb0 0a67 	vmov.f32	s0, s15
 81008b0:	f000 fb74 	bl	8100f9c <jumpHalfPeriod>
  startInputCaptureInterruptDutyCycle();
 81008b4:	f000 fa22 	bl	8100cfc <startInputCaptureInterruptDutyCycle>

  //si attende di ottenere i primi valori dal radiocomando, prima di entrare nel loop
  waitingForFirstValues(chDuty, NUMBER_CHANNELS);
 81008b8:	2105      	movs	r1, #5
 81008ba:	481b      	ldr	r0, [pc, #108]	; (8100928 <main+0x10c>)
 81008bc:	f000 fbb6 	bl	810102c <waitingForFirstValues>

  startPwmMotors();
 81008c0:	f000 fa38 	bl	8100d34 <startPwmMotors>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//desired angles
		calculateRadioControlValues();
 81008c4:	f000 fa40 	bl	8100d48 <calculateRadioControlValues>


		switch(level)
 81008c8:	4b19      	ldr	r3, [pc, #100]	; (8100930 <main+0x114>)
 81008ca:	681b      	ldr	r3, [r3, #0]
 81008cc:	2b03      	cmp	r3, #3
 81008ce:	d020      	beq.n	8100912 <main+0xf6>
 81008d0:	2b03      	cmp	r3, #3
 81008d2:	dcf7      	bgt.n	81008c4 <main+0xa8>
 81008d4:	2b01      	cmp	r3, #1
 81008d6:	d002      	beq.n	81008de <main+0xc2>
 81008d8:	2b02      	cmp	r3, #2
 81008da:	d003      	beq.n	81008e4 <main+0xc8>
 81008dc:	e01c      	b.n	8100918 <main+0xfc>
		{
			//arms
			case 1:
				armMotors();
 81008de:	f000 fbcd 	bl	810107c <armMotors>
				break;
 81008e2:	e019      	b.n	8100918 <main+0xfc>

			//move
			case 2:
				if(throttle == 0)
 81008e4:	4b13      	ldr	r3, [pc, #76]	; (8100934 <main+0x118>)
 81008e6:	edd3 7a00 	vldr	s15, [r3]
 81008ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 81008ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81008f2:	d102      	bne.n	81008fa <main+0xde>
					stopMotors();
 81008f4:	f000 fbf6 	bl	81010e4 <stopMotors>
				else
					moveMotors(throttle);
				break;
 81008f8:	e00e      	b.n	8100918 <main+0xfc>
					moveMotors(throttle);
 81008fa:	4b0e      	ldr	r3, [pc, #56]	; (8100934 <main+0x118>)
 81008fc:	681b      	ldr	r3, [r3, #0]
 81008fe:	4618      	mov	r0, r3
 8100900:	f7ff fe4e 	bl	81005a0 <__aeabi_f2d>
 8100904:	4602      	mov	r2, r0
 8100906:	460b      	mov	r3, r1
 8100908:	ec43 2b10 	vmov	d0, r2, r3
 810090c:	f000 fbc4 	bl	8101098 <moveMotors>
				break;
 8100910:	e002      	b.n	8100918 <main+0xfc>

			//stop
			case 3:
				stopMotors();
 8100912:	f000 fbe7 	bl	81010e4 <stopMotors>
				break;
 8100916:	bf00      	nop
		calculateRadioControlValues();
 8100918:	e7d4      	b.n	81008c4 <main+0xa8>
 810091a:	bf00      	nop
 810091c:	58024400 	.word	0x58024400
 8100920:	e000ed00 	.word	0xe000ed00
 8100924:	58026400 	.word	0x58026400
 8100928:	10000110 	.word	0x10000110
 810092c:	10000160 	.word	0x10000160
 8100930:	10000180 	.word	0x10000180
 8100934:	1000017c 	.word	0x1000017c

08100938 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8100938:	b580      	push	{r7, lr}
 810093a:	b08c      	sub	sp, #48	; 0x30
 810093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810093e:	f107 0320 	add.w	r3, r7, #32
 8100942:	2200      	movs	r2, #0
 8100944:	601a      	str	r2, [r3, #0]
 8100946:	605a      	str	r2, [r3, #4]
 8100948:	609a      	str	r2, [r3, #8]
 810094a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810094c:	f107 0314 	add.w	r3, r7, #20
 8100950:	2200      	movs	r2, #0
 8100952:	601a      	str	r2, [r3, #0]
 8100954:	605a      	str	r2, [r3, #4]
 8100956:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8100958:	1d3b      	adds	r3, r7, #4
 810095a:	2200      	movs	r2, #0
 810095c:	601a      	str	r2, [r3, #0]
 810095e:	605a      	str	r2, [r3, #4]
 8100960:	609a      	str	r2, [r3, #8]
 8100962:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8100964:	4b3d      	ldr	r3, [pc, #244]	; (8100a5c <MX_TIM2_Init+0x124>)
 8100966:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 810096a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240;
 810096c:	4b3b      	ldr	r3, [pc, #236]	; (8100a5c <MX_TIM2_Init+0x124>)
 810096e:	22f0      	movs	r2, #240	; 0xf0
 8100970:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100972:	4b3a      	ldr	r3, [pc, #232]	; (8100a5c <MX_TIM2_Init+0x124>)
 8100974:	2200      	movs	r2, #0
 8100976:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8100978:	4b38      	ldr	r3, [pc, #224]	; (8100a5c <MX_TIM2_Init+0x124>)
 810097a:	f04f 32ff 	mov.w	r2, #4294967295
 810097e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100980:	4b36      	ldr	r3, [pc, #216]	; (8100a5c <MX_TIM2_Init+0x124>)
 8100982:	2200      	movs	r2, #0
 8100984:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100986:	4b35      	ldr	r3, [pc, #212]	; (8100a5c <MX_TIM2_Init+0x124>)
 8100988:	2200      	movs	r2, #0
 810098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 810098c:	4833      	ldr	r0, [pc, #204]	; (8100a5c <MX_TIM2_Init+0x124>)
 810098e:	f001 fd17 	bl	81023c0 <HAL_TIM_Base_Init>
 8100992:	4603      	mov	r3, r0
 8100994:	2b00      	cmp	r3, #0
 8100996:	d001      	beq.n	810099c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8100998:	f000 fd86 	bl	81014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81009a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 81009a2:	f107 0320 	add.w	r3, r7, #32
 81009a6:	4619      	mov	r1, r3
 81009a8:	482c      	ldr	r0, [pc, #176]	; (8100a5c <MX_TIM2_Init+0x124>)
 81009aa:	f002 fc0f 	bl	81031cc <HAL_TIM_ConfigClockSource>
 81009ae:	4603      	mov	r3, r0
 81009b0:	2b00      	cmp	r3, #0
 81009b2:	d001      	beq.n	81009b8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 81009b4:	f000 fd78 	bl	81014a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 81009b8:	4828      	ldr	r0, [pc, #160]	; (8100a5c <MX_TIM2_Init+0x124>)
 81009ba:	f001 fec7 	bl	810274c <HAL_TIM_IC_Init>
 81009be:	4603      	mov	r3, r0
 81009c0:	2b00      	cmp	r3, #0
 81009c2:	d001      	beq.n	81009c8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 81009c4:	f000 fd70 	bl	81014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81009c8:	2300      	movs	r3, #0
 81009ca:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81009cc:	2300      	movs	r3, #0
 81009ce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 81009d0:	f107 0314 	add.w	r3, r7, #20
 81009d4:	4619      	mov	r1, r3
 81009d6:	4821      	ldr	r0, [pc, #132]	; (8100a5c <MX_TIM2_Init+0x124>)
 81009d8:	f003 fab8 	bl	8103f4c <HAL_TIMEx_MasterConfigSynchronization>
 81009dc:	4603      	mov	r3, r0
 81009de:	2b00      	cmp	r3, #0
 81009e0:	d001      	beq.n	81009e6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 81009e2:	f000 fd61 	bl	81014a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 81009e6:	230a      	movs	r3, #10
 81009e8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 81009ea:	2301      	movs	r3, #1
 81009ec:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 81009ee:	2300      	movs	r3, #0
 81009f0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 81009f2:	2300      	movs	r3, #0
 81009f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 81009f6:	1d3b      	adds	r3, r7, #4
 81009f8:	2200      	movs	r2, #0
 81009fa:	4619      	mov	r1, r3
 81009fc:	4817      	ldr	r0, [pc, #92]	; (8100a5c <MX_TIM2_Init+0x124>)
 81009fe:	f002 fa34 	bl	8102e6a <HAL_TIM_IC_ConfigChannel>
 8100a02:	4603      	mov	r3, r0
 8100a04:	2b00      	cmp	r3, #0
 8100a06:	d001      	beq.n	8100a0c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8100a08:	f000 fd4e 	bl	81014a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8100a0c:	2302      	movs	r3, #2
 8100a0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8100a10:	1d3b      	adds	r3, r7, #4
 8100a12:	2204      	movs	r2, #4
 8100a14:	4619      	mov	r1, r3
 8100a16:	4811      	ldr	r0, [pc, #68]	; (8100a5c <MX_TIM2_Init+0x124>)
 8100a18:	f002 fa27 	bl	8102e6a <HAL_TIM_IC_ConfigChannel>
 8100a1c:	4603      	mov	r3, r0
 8100a1e:	2b00      	cmp	r3, #0
 8100a20:	d001      	beq.n	8100a26 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8100a22:	f000 fd41 	bl	81014a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8100a26:	1d3b      	adds	r3, r7, #4
 8100a28:	2208      	movs	r2, #8
 8100a2a:	4619      	mov	r1, r3
 8100a2c:	480b      	ldr	r0, [pc, #44]	; (8100a5c <MX_TIM2_Init+0x124>)
 8100a2e:	f002 fa1c 	bl	8102e6a <HAL_TIM_IC_ConfigChannel>
 8100a32:	4603      	mov	r3, r0
 8100a34:	2b00      	cmp	r3, #0
 8100a36:	d001      	beq.n	8100a3c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8100a38:	f000 fd36 	bl	81014a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8100a3c:	1d3b      	adds	r3, r7, #4
 8100a3e:	220c      	movs	r2, #12
 8100a40:	4619      	mov	r1, r3
 8100a42:	4806      	ldr	r0, [pc, #24]	; (8100a5c <MX_TIM2_Init+0x124>)
 8100a44:	f002 fa11 	bl	8102e6a <HAL_TIM_IC_ConfigChannel>
 8100a48:	4603      	mov	r3, r0
 8100a4a:	2b00      	cmp	r3, #0
 8100a4c:	d001      	beq.n	8100a52 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8100a4e:	f000 fd2b 	bl	81014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8100a52:	bf00      	nop
 8100a54:	3730      	adds	r7, #48	; 0x30
 8100a56:	46bd      	mov	sp, r7
 8100a58:	bd80      	pop	{r7, pc}
 8100a5a:	bf00      	nop
 8100a5c:	1000002c 	.word	0x1000002c

08100a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8100a60:	b580      	push	{r7, lr}
 8100a62:	b08e      	sub	sp, #56	; 0x38
 8100a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8100a6a:	2200      	movs	r2, #0
 8100a6c:	601a      	str	r2, [r3, #0]
 8100a6e:	605a      	str	r2, [r3, #4]
 8100a70:	609a      	str	r2, [r3, #8]
 8100a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100a74:	f107 031c 	add.w	r3, r7, #28
 8100a78:	2200      	movs	r2, #0
 8100a7a:	601a      	str	r2, [r3, #0]
 8100a7c:	605a      	str	r2, [r3, #4]
 8100a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100a80:	463b      	mov	r3, r7
 8100a82:	2200      	movs	r2, #0
 8100a84:	601a      	str	r2, [r3, #0]
 8100a86:	605a      	str	r2, [r3, #4]
 8100a88:	609a      	str	r2, [r3, #8]
 8100a8a:	60da      	str	r2, [r3, #12]
 8100a8c:	611a      	str	r2, [r3, #16]
 8100a8e:	615a      	str	r2, [r3, #20]
 8100a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8100a92:	4b3d      	ldr	r3, [pc, #244]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100a94:	4a3d      	ldr	r2, [pc, #244]	; (8100b8c <MX_TIM3_Init+0x12c>)
 8100a96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8100a98:	4b3b      	ldr	r3, [pc, #236]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100a9a:	22ef      	movs	r2, #239	; 0xef
 8100a9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100a9e:	4b3a      	ldr	r3, [pc, #232]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100aa0:	2200      	movs	r2, #0
 8100aa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8100aa4:	4b38      	ldr	r3, [pc, #224]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100aa6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8100aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100aac:	4b36      	ldr	r3, [pc, #216]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100aae:	2200      	movs	r2, #0
 8100ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100ab2:	4b35      	ldr	r3, [pc, #212]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100ab4:	2200      	movs	r2, #0
 8100ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8100ab8:	4833      	ldr	r0, [pc, #204]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100aba:	f001 fc81 	bl	81023c0 <HAL_TIM_Base_Init>
 8100abe:	4603      	mov	r3, r0
 8100ac0:	2b00      	cmp	r3, #0
 8100ac2:	d001      	beq.n	8100ac8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8100ac4:	f000 fcf0 	bl	81014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8100ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100acc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8100ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8100ad2:	4619      	mov	r1, r3
 8100ad4:	482c      	ldr	r0, [pc, #176]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100ad6:	f002 fb79 	bl	81031cc <HAL_TIM_ConfigClockSource>
 8100ada:	4603      	mov	r3, r0
 8100adc:	2b00      	cmp	r3, #0
 8100ade:	d001      	beq.n	8100ae4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8100ae0:	f000 fce2 	bl	81014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8100ae4:	4828      	ldr	r0, [pc, #160]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100ae6:	f001 fcc2 	bl	810246e <HAL_TIM_PWM_Init>
 8100aea:	4603      	mov	r3, r0
 8100aec:	2b00      	cmp	r3, #0
 8100aee:	d001      	beq.n	8100af4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8100af0:	f000 fcda 	bl	81014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100af4:	2300      	movs	r3, #0
 8100af6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100af8:	2300      	movs	r3, #0
 8100afa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8100afc:	f107 031c 	add.w	r3, r7, #28
 8100b00:	4619      	mov	r1, r3
 8100b02:	4821      	ldr	r0, [pc, #132]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100b04:	f003 fa22 	bl	8103f4c <HAL_TIMEx_MasterConfigSynchronization>
 8100b08:	4603      	mov	r3, r0
 8100b0a:	2b00      	cmp	r3, #0
 8100b0c:	d001      	beq.n	8100b12 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8100b0e:	f000 fccb 	bl	81014a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100b12:	2360      	movs	r3, #96	; 0x60
 8100b14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8100b16:	2300      	movs	r3, #0
 8100b18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100b1a:	2300      	movs	r3, #0
 8100b1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100b1e:	2300      	movs	r3, #0
 8100b20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100b22:	463b      	mov	r3, r7
 8100b24:	2200      	movs	r2, #0
 8100b26:	4619      	mov	r1, r3
 8100b28:	4817      	ldr	r0, [pc, #92]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100b2a:	f002 fa3b 	bl	8102fa4 <HAL_TIM_PWM_ConfigChannel>
 8100b2e:	4603      	mov	r3, r0
 8100b30:	2b00      	cmp	r3, #0
 8100b32:	d001      	beq.n	8100b38 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8100b34:	f000 fcb8 	bl	81014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100b38:	463b      	mov	r3, r7
 8100b3a:	2204      	movs	r2, #4
 8100b3c:	4619      	mov	r1, r3
 8100b3e:	4812      	ldr	r0, [pc, #72]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100b40:	f002 fa30 	bl	8102fa4 <HAL_TIM_PWM_ConfigChannel>
 8100b44:	4603      	mov	r3, r0
 8100b46:	2b00      	cmp	r3, #0
 8100b48:	d001      	beq.n	8100b4e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8100b4a:	f000 fcad 	bl	81014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8100b4e:	463b      	mov	r3, r7
 8100b50:	2208      	movs	r2, #8
 8100b52:	4619      	mov	r1, r3
 8100b54:	480c      	ldr	r0, [pc, #48]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100b56:	f002 fa25 	bl	8102fa4 <HAL_TIM_PWM_ConfigChannel>
 8100b5a:	4603      	mov	r3, r0
 8100b5c:	2b00      	cmp	r3, #0
 8100b5e:	d001      	beq.n	8100b64 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8100b60:	f000 fca2 	bl	81014a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8100b64:	463b      	mov	r3, r7
 8100b66:	220c      	movs	r2, #12
 8100b68:	4619      	mov	r1, r3
 8100b6a:	4807      	ldr	r0, [pc, #28]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100b6c:	f002 fa1a 	bl	8102fa4 <HAL_TIM_PWM_ConfigChannel>
 8100b70:	4603      	mov	r3, r0
 8100b72:	2b00      	cmp	r3, #0
 8100b74:	d001      	beq.n	8100b7a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8100b76:	f000 fc97 	bl	81014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8100b7a:	4803      	ldr	r0, [pc, #12]	; (8100b88 <MX_TIM3_Init+0x128>)
 8100b7c:	f000 fd7a 	bl	8101674 <HAL_TIM_MspPostInit>

}
 8100b80:	bf00      	nop
 8100b82:	3738      	adds	r7, #56	; 0x38
 8100b84:	46bd      	mov	sp, r7
 8100b86:	bd80      	pop	{r7, pc}
 8100b88:	10000078 	.word	0x10000078
 8100b8c:	40000400 	.word	0x40000400

08100b90 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8100b90:	b580      	push	{r7, lr}
 8100b92:	b08c      	sub	sp, #48	; 0x30
 8100b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100b96:	f107 0320 	add.w	r3, r7, #32
 8100b9a:	2200      	movs	r2, #0
 8100b9c:	601a      	str	r2, [r3, #0]
 8100b9e:	605a      	str	r2, [r3, #4]
 8100ba0:	609a      	str	r2, [r3, #8]
 8100ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100ba4:	f107 0314 	add.w	r3, r7, #20
 8100ba8:	2200      	movs	r2, #0
 8100baa:	601a      	str	r2, [r3, #0]
 8100bac:	605a      	str	r2, [r3, #4]
 8100bae:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8100bb0:	1d3b      	adds	r3, r7, #4
 8100bb2:	2200      	movs	r2, #0
 8100bb4:	601a      	str	r2, [r3, #0]
 8100bb6:	605a      	str	r2, [r3, #4]
 8100bb8:	609a      	str	r2, [r3, #8]
 8100bba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8100bbc:	4b31      	ldr	r3, [pc, #196]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100bbe:	4a32      	ldr	r2, [pc, #200]	; (8100c88 <MX_TIM5_Init+0xf8>)
 8100bc0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240;
 8100bc2:	4b30      	ldr	r3, [pc, #192]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100bc4:	22f0      	movs	r2, #240	; 0xf0
 8100bc6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100bc8:	4b2e      	ldr	r3, [pc, #184]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100bca:	2200      	movs	r2, #0
 8100bcc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8100bce:	4b2d      	ldr	r3, [pc, #180]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8100bd4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100bd6:	4b2b      	ldr	r3, [pc, #172]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100bd8:	2200      	movs	r2, #0
 8100bda:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100bdc:	4b29      	ldr	r3, [pc, #164]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100bde:	2200      	movs	r2, #0
 8100be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8100be2:	4828      	ldr	r0, [pc, #160]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100be4:	f001 fbec 	bl	81023c0 <HAL_TIM_Base_Init>
 8100be8:	4603      	mov	r3, r0
 8100bea:	2b00      	cmp	r3, #0
 8100bec:	d001      	beq.n	8100bf2 <MX_TIM5_Init+0x62>
  {
    Error_Handler();
 8100bee:	f000 fc5b 	bl	81014a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8100bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100bf6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8100bf8:	f107 0320 	add.w	r3, r7, #32
 8100bfc:	4619      	mov	r1, r3
 8100bfe:	4821      	ldr	r0, [pc, #132]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100c00:	f002 fae4 	bl	81031cc <HAL_TIM_ConfigClockSource>
 8100c04:	4603      	mov	r3, r0
 8100c06:	2b00      	cmp	r3, #0
 8100c08:	d001      	beq.n	8100c0e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8100c0a:	f000 fc4d 	bl	81014a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8100c0e:	481d      	ldr	r0, [pc, #116]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100c10:	f001 fd9c 	bl	810274c <HAL_TIM_IC_Init>
 8100c14:	4603      	mov	r3, r0
 8100c16:	2b00      	cmp	r3, #0
 8100c18:	d001      	beq.n	8100c1e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8100c1a:	f000 fc45 	bl	81014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100c1e:	2300      	movs	r3, #0
 8100c20:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100c22:	2300      	movs	r3, #0
 8100c24:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8100c26:	f107 0314 	add.w	r3, r7, #20
 8100c2a:	4619      	mov	r1, r3
 8100c2c:	4815      	ldr	r0, [pc, #84]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100c2e:	f003 f98d 	bl	8103f4c <HAL_TIMEx_MasterConfigSynchronization>
 8100c32:	4603      	mov	r3, r0
 8100c34:	2b00      	cmp	r3, #0
 8100c36:	d001      	beq.n	8100c3c <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8100c38:	f000 fc36 	bl	81014a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8100c3c:	2300      	movs	r3, #0
 8100c3e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8100c40:	2301      	movs	r3, #1
 8100c42:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8100c44:	2300      	movs	r3, #0
 8100c46:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8100c48:	2300      	movs	r3, #0
 8100c4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8100c4c:	1d3b      	adds	r3, r7, #4
 8100c4e:	2200      	movs	r2, #0
 8100c50:	4619      	mov	r1, r3
 8100c52:	480c      	ldr	r0, [pc, #48]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100c54:	f002 f909 	bl	8102e6a <HAL_TIM_IC_ConfigChannel>
 8100c58:	4603      	mov	r3, r0
 8100c5a:	2b00      	cmp	r3, #0
 8100c5c:	d001      	beq.n	8100c62 <MX_TIM5_Init+0xd2>
  {
    Error_Handler();
 8100c5e:	f000 fc23 	bl	81014a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8100c62:	230a      	movs	r3, #10
 8100c64:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8100c66:	1d3b      	adds	r3, r7, #4
 8100c68:	220c      	movs	r2, #12
 8100c6a:	4619      	mov	r1, r3
 8100c6c:	4805      	ldr	r0, [pc, #20]	; (8100c84 <MX_TIM5_Init+0xf4>)
 8100c6e:	f002 f8fc 	bl	8102e6a <HAL_TIM_IC_ConfigChannel>
 8100c72:	4603      	mov	r3, r0
 8100c74:	2b00      	cmp	r3, #0
 8100c76:	d001      	beq.n	8100c7c <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8100c78:	f000 fc16 	bl	81014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8100c7c:	bf00      	nop
 8100c7e:	3730      	adds	r7, #48	; 0x30
 8100c80:	46bd      	mov	sp, r7
 8100c82:	bd80      	pop	{r7, pc}
 8100c84:	100000c4 	.word	0x100000c4
 8100c88:	40000c00 	.word	0x40000c00

08100c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100c8c:	b480      	push	{r7}
 8100c8e:	b085      	sub	sp, #20
 8100c90:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100c92:	4b19      	ldr	r3, [pc, #100]	; (8100cf8 <MX_GPIO_Init+0x6c>)
 8100c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c98:	4a17      	ldr	r2, [pc, #92]	; (8100cf8 <MX_GPIO_Init+0x6c>)
 8100c9a:	f043 0301 	orr.w	r3, r3, #1
 8100c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ca2:	4b15      	ldr	r3, [pc, #84]	; (8100cf8 <MX_GPIO_Init+0x6c>)
 8100ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ca8:	f003 0301 	and.w	r3, r3, #1
 8100cac:	60fb      	str	r3, [r7, #12]
 8100cae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100cb0:	4b11      	ldr	r3, [pc, #68]	; (8100cf8 <MX_GPIO_Init+0x6c>)
 8100cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cb6:	4a10      	ldr	r2, [pc, #64]	; (8100cf8 <MX_GPIO_Init+0x6c>)
 8100cb8:	f043 0302 	orr.w	r3, r3, #2
 8100cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cc0:	4b0d      	ldr	r3, [pc, #52]	; (8100cf8 <MX_GPIO_Init+0x6c>)
 8100cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cc6:	f003 0302 	and.w	r3, r3, #2
 8100cca:	60bb      	str	r3, [r7, #8]
 8100ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100cce:	4b0a      	ldr	r3, [pc, #40]	; (8100cf8 <MX_GPIO_Init+0x6c>)
 8100cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cd4:	4a08      	ldr	r2, [pc, #32]	; (8100cf8 <MX_GPIO_Init+0x6c>)
 8100cd6:	f043 0304 	orr.w	r3, r3, #4
 8100cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cde:	4b06      	ldr	r3, [pc, #24]	; (8100cf8 <MX_GPIO_Init+0x6c>)
 8100ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ce4:	f003 0304 	and.w	r3, r3, #4
 8100ce8:	607b      	str	r3, [r7, #4]
 8100cea:	687b      	ldr	r3, [r7, #4]

}
 8100cec:	bf00      	nop
 8100cee:	3714      	adds	r7, #20
 8100cf0:	46bd      	mov	sp, r7
 8100cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cf6:	4770      	bx	lr
 8100cf8:	58024400 	.word	0x58024400

08100cfc <startInputCaptureInterruptDutyCycle>:

/* USER CODE BEGIN 4 */

void startInputCaptureInterruptDutyCycle()
{
 8100cfc:	b580      	push	{r7, lr}
 8100cfe:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//ch1
 8100d00:	2100      	movs	r1, #0
 8100d02:	480a      	ldr	r0, [pc, #40]	; (8100d2c <startInputCaptureInterruptDutyCycle+0x30>)
 8100d04:	f001 fd84 	bl	8102810 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2); //ch2
 8100d08:	2104      	movs	r1, #4
 8100d0a:	4808      	ldr	r0, [pc, #32]	; (8100d2c <startInputCaptureInterruptDutyCycle+0x30>)
 8100d0c:	f001 fd80 	bl	8102810 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3); //ch3
 8100d10:	2108      	movs	r1, #8
 8100d12:	4806      	ldr	r0, [pc, #24]	; (8100d2c <startInputCaptureInterruptDutyCycle+0x30>)
 8100d14:	f001 fd7c 	bl	8102810 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4); //ch4
 8100d18:	210c      	movs	r1, #12
 8100d1a:	4804      	ldr	r0, [pc, #16]	; (8100d2c <startInputCaptureInterruptDutyCycle+0x30>)
 8100d1c:	f001 fd78 	bl	8102810 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_4); //ch5
 8100d20:	210c      	movs	r1, #12
 8100d22:	4803      	ldr	r0, [pc, #12]	; (8100d30 <startInputCaptureInterruptDutyCycle+0x34>)
 8100d24:	f001 fd74 	bl	8102810 <HAL_TIM_IC_Start_IT>
}
 8100d28:	bf00      	nop
 8100d2a:	bd80      	pop	{r7, pc}
 8100d2c:	1000002c 	.word	0x1000002c
 8100d30:	100000c4 	.word	0x100000c4

08100d34 <startPwmMotors>:

void startPwmMotors()
{
 8100d34:	b580      	push	{r7, lr}
 8100d36:	af00      	add	r7, sp, #0
 	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	//motore
 8100d38:	2100      	movs	r1, #0
 8100d3a:	4802      	ldr	r0, [pc, #8]	; (8100d44 <startPwmMotors+0x10>)
 8100d3c:	f001 fbf8 	bl	8102530 <HAL_TIM_PWM_Start>
 	/*
 	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 	*/
}
 8100d40:	bf00      	nop
 8100d42:	bd80      	pop	{r7, pc}
 8100d44:	10000078 	.word	0x10000078

08100d48 <calculateRadioControlValues>:



void calculateRadioControlValues()
{
 8100d48:	b580      	push	{r7, lr}
 8100d4a:	af00      	add	r7, sp, #0
	desiredPitch = map(chDuty[IC_CHANNEL1].duty, MIN_RANGE_DUTY, MAX_RANGE_DUTY, -MAX_ANGLE, MAX_ANGLE);
 8100d4c:	4b49      	ldr	r3, [pc, #292]	; (8100e74 <calculateRadioControlValues+0x12c>)
 8100d4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8100d52:	ed9f 2a49 	vldr	s4, [pc, #292]	; 8100e78 <calculateRadioControlValues+0x130>
 8100d56:	eddf 1a49 	vldr	s3, [pc, #292]	; 8100e7c <calculateRadioControlValues+0x134>
 8100d5a:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8100e80 <calculateRadioControlValues+0x138>
 8100d5e:	eddf 0a49 	vldr	s1, [pc, #292]	; 8100e84 <calculateRadioControlValues+0x13c>
 8100d62:	eeb0 0a67 	vmov.f32	s0, s15
 8100d66:	f000 f8ea 	bl	8100f3e <map>
 8100d6a:	eef0 7a40 	vmov.f32	s15, s0
 8100d6e:	4b46      	ldr	r3, [pc, #280]	; (8100e88 <calculateRadioControlValues+0x140>)
 8100d70:	edc3 7a00 	vstr	s15, [r3]
	desiredRoll = map(chDuty[IC_CHANNEL2].duty, MIN_RANGE_DUTY, MAX_RANGE_DUTY, -MAX_ANGLE, MAX_ANGLE) ;
 8100d74:	4b3f      	ldr	r3, [pc, #252]	; (8100e74 <calculateRadioControlValues+0x12c>)
 8100d76:	edd3 7a07 	vldr	s15, [r3, #28]
 8100d7a:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 8100e78 <calculateRadioControlValues+0x130>
 8100d7e:	eddf 1a3f 	vldr	s3, [pc, #252]	; 8100e7c <calculateRadioControlValues+0x134>
 8100d82:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8100e80 <calculateRadioControlValues+0x138>
 8100d86:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8100e84 <calculateRadioControlValues+0x13c>
 8100d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8100d8e:	f000 f8d6 	bl	8100f3e <map>
 8100d92:	eef0 7a40 	vmov.f32	s15, s0
 8100d96:	4b3d      	ldr	r3, [pc, #244]	; (8100e8c <calculateRadioControlValues+0x144>)
 8100d98:	edc3 7a00 	vstr	s15, [r3]
	throttle = map(chDuty[IC_CHANNEL3].duty, MIN_RANGE_DUTY, MAX_RANGE_DUTY, 0, MAX_THROTTLE);
 8100d9c:	4b35      	ldr	r3, [pc, #212]	; (8100e74 <calculateRadioControlValues+0x12c>)
 8100d9e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8100da2:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 8100e90 <calculateRadioControlValues+0x148>
 8100da6:	eddf 1a3b 	vldr	s3, [pc, #236]	; 8100e94 <calculateRadioControlValues+0x14c>
 8100daa:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8100e80 <calculateRadioControlValues+0x138>
 8100dae:	eddf 0a35 	vldr	s1, [pc, #212]	; 8100e84 <calculateRadioControlValues+0x13c>
 8100db2:	eeb0 0a67 	vmov.f32	s0, s15
 8100db6:	f000 f8c2 	bl	8100f3e <map>
 8100dba:	eef0 7a40 	vmov.f32	s15, s0
 8100dbe:	4b36      	ldr	r3, [pc, #216]	; (8100e98 <calculateRadioControlValues+0x150>)
 8100dc0:	edc3 7a00 	vstr	s15, [r3]
	desiredYaw = map(chDuty[IC_CHANNEL4].duty, MIN_RANGE_DUTY, MAX_RANGE_DUTY, -MAX_YAW_SPEED, MAX_YAW_SPEED);
 8100dc4:	4b2b      	ldr	r3, [pc, #172]	; (8100e74 <calculateRadioControlValues+0x12c>)
 8100dc6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8100dca:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 8100dce:	eefa 1a04 	vmov.f32	s3, #164	; 0xc1200000 -10.0
 8100dd2:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8100e80 <calculateRadioControlValues+0x138>
 8100dd6:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8100e84 <calculateRadioControlValues+0x13c>
 8100dda:	eeb0 0a67 	vmov.f32	s0, s15
 8100dde:	f000 f8ae 	bl	8100f3e <map>
 8100de2:	eef0 7a40 	vmov.f32	s15, s0
 8100de6:	4b2d      	ldr	r3, [pc, #180]	; (8100e9c <calculateRadioControlValues+0x154>)
 8100de8:	edc3 7a00 	vstr	s15, [r3]
	level = getLevel(chDuty[IC_CHANNEL5].duty);
 8100dec:	4b21      	ldr	r3, [pc, #132]	; (8100e74 <calculateRadioControlValues+0x12c>)
 8100dee:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8100df2:	eeb0 0a67 	vmov.f32	s0, s15
 8100df6:	f000 f859 	bl	8100eac <getLevel>
 8100dfa:	4603      	mov	r3, r0
 8100dfc:	4a28      	ldr	r2, [pc, #160]	; (8100ea0 <calculateRadioControlValues+0x158>)
 8100dfe:	6013      	str	r3, [r2, #0]


	desiredPitch = correctAngle(desiredPitch, MAX_ERROR_STABILIZATION);
 8100e00:	4b21      	ldr	r3, [pc, #132]	; (8100e88 <calculateRadioControlValues+0x140>)
 8100e02:	edd3 7a00 	vldr	s15, [r3]
 8100e06:	eddf 0a27 	vldr	s1, [pc, #156]	; 8100ea4 <calculateRadioControlValues+0x15c>
 8100e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8100e0e:	f7ff fcdc 	bl	81007ca <correctAngle>
 8100e12:	eef0 7a40 	vmov.f32	s15, s0
 8100e16:	4b1c      	ldr	r3, [pc, #112]	; (8100e88 <calculateRadioControlValues+0x140>)
 8100e18:	edc3 7a00 	vstr	s15, [r3]
	desiredRoll = correctAngle(desiredRoll, MAX_ERROR_STABILIZATION);
 8100e1c:	4b1b      	ldr	r3, [pc, #108]	; (8100e8c <calculateRadioControlValues+0x144>)
 8100e1e:	edd3 7a00 	vldr	s15, [r3]
 8100e22:	eddf 0a20 	vldr	s1, [pc, #128]	; 8100ea4 <calculateRadioControlValues+0x15c>
 8100e26:	eeb0 0a67 	vmov.f32	s0, s15
 8100e2a:	f7ff fcce 	bl	81007ca <correctAngle>
 8100e2e:	eef0 7a40 	vmov.f32	s15, s0
 8100e32:	4b16      	ldr	r3, [pc, #88]	; (8100e8c <calculateRadioControlValues+0x144>)
 8100e34:	edc3 7a00 	vstr	s15, [r3]
	throttle = correctThrottle(throttle, MAX_THROTTLE_OFF);
 8100e38:	4b17      	ldr	r3, [pc, #92]	; (8100e98 <calculateRadioControlValues+0x150>)
 8100e3a:	edd3 7a00 	vldr	s15, [r3]
 8100e3e:	eef3 0a00 	vmov.f32	s1, #48	; 0x41800000  16.0
 8100e42:	eeb0 0a67 	vmov.f32	s0, s15
 8100e46:	f7ff fc9a 	bl	810077e <correctThrottle>
 8100e4a:	eef0 7a40 	vmov.f32	s15, s0
 8100e4e:	4b12      	ldr	r3, [pc, #72]	; (8100e98 <calculateRadioControlValues+0x150>)
 8100e50:	edc3 7a00 	vstr	s15, [r3]
	desiredYaw = correctAngle(desiredYaw, MAX_ERROR_YAW);
 8100e54:	4b11      	ldr	r3, [pc, #68]	; (8100e9c <calculateRadioControlValues+0x154>)
 8100e56:	edd3 7a00 	vldr	s15, [r3]
 8100e5a:	eddf 0a13 	vldr	s1, [pc, #76]	; 8100ea8 <calculateRadioControlValues+0x160>
 8100e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8100e62:	f7ff fcb2 	bl	81007ca <correctAngle>
 8100e66:	eef0 7a40 	vmov.f32	s15, s0
 8100e6a:	4b0c      	ldr	r3, [pc, #48]	; (8100e9c <calculateRadioControlValues+0x154>)
 8100e6c:	edc3 7a00 	vstr	s15, [r3]
}
 8100e70:	bf00      	nop
 8100e72:	bd80      	pop	{r7, pc}
 8100e74:	10000110 	.word	0x10000110
 8100e78:	420c0000 	.word	0x420c0000
 8100e7c:	c20c0000 	.word	0xc20c0000
 8100e80:	41766666 	.word	0x41766666
 8100e84:	40c66666 	.word	0x40c66666
 8100e88:	10000170 	.word	0x10000170
 8100e8c:	10000174 	.word	0x10000174
 8100e90:	42c80000 	.word	0x42c80000
 8100e94:	00000000 	.word	0x00000000
 8100e98:	1000017c 	.word	0x1000017c
 8100e9c:	10000178 	.word	0x10000178
 8100ea0:	10000180 	.word	0x10000180
 8100ea4:	3eb33333 	.word	0x3eb33333
 8100ea8:	3e4ccccd 	.word	0x3e4ccccd

08100eac <getLevel>:




int getLevel(float dutyLevel)
{
 8100eac:	b480      	push	{r7}
 8100eae:	b085      	sub	sp, #20
 8100eb0:	af00      	add	r7, sp, #0
 8100eb2:	ed87 0a01 	vstr	s0, [r7, #4]
	int level;

	if(dutyLevel > LEVEL1_DUTY - error_level && dutyLevel < LEVEL1_DUTY + error_level)
 8100eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8100eba:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8100ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8100ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100ec6:	dd0b      	ble.n	8100ee0 <getLevel+0x34>
 8100ec8:	edd7 7a01 	vldr	s15, [r7, #4]
 8100ecc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8100ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8100ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100ed8:	d502      	bpl.n	8100ee0 <getLevel+0x34>
		level = 1;
 8100eda:	2301      	movs	r3, #1
 8100edc:	60fb      	str	r3, [r7, #12]
 8100ede:	e013      	b.n	8100f08 <getLevel+0x5c>
	else if(dutyLevel > LEVEL2_DUTY - error_level && dutyLevel < LEVEL2_DUTY + error_level)
 8100ee0:	edd7 7a01 	vldr	s15, [r7, #4]
 8100ee4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8100ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8100eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100ef0:	dd0a      	ble.n	8100f08 <getLevel+0x5c>
 8100ef2:	edd7 7a01 	vldr	s15, [r7, #4]
 8100ef6:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8100efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8100efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100f02:	d501      	bpl.n	8100f08 <getLevel+0x5c>
		level = 2;
 8100f04:	2302      	movs	r3, #2
 8100f06:	60fb      	str	r3, [r7, #12]
	if(dutyLevel > LEVEL3_DUTY - error_level && dutyLevel < LEVEL3_DUTY + error_level)
 8100f08:	edd7 7a01 	vldr	s15, [r7, #4]
 8100f0c:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8100f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8100f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100f18:	dd0a      	ble.n	8100f30 <getLevel+0x84>
 8100f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8100f1e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8100f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8100f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100f2a:	d501      	bpl.n	8100f30 <getLevel+0x84>
		level = 3;
 8100f2c:	2303      	movs	r3, #3
 8100f2e:	60fb      	str	r3, [r7, #12]

	return level;
 8100f30:	68fb      	ldr	r3, [r7, #12]
}
 8100f32:	4618      	mov	r0, r3
 8100f34:	3714      	adds	r7, #20
 8100f36:	46bd      	mov	sp, r7
 8100f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f3c:	4770      	bx	lr

08100f3e <map>:



float map(float val, float from_src, float to_src, float from_dst, float to_dst)
{
 8100f3e:	b480      	push	{r7}
 8100f40:	b087      	sub	sp, #28
 8100f42:	af00      	add	r7, sp, #0
 8100f44:	ed87 0a05 	vstr	s0, [r7, #20]
 8100f48:	edc7 0a04 	vstr	s1, [r7, #16]
 8100f4c:	ed87 1a03 	vstr	s2, [r7, #12]
 8100f50:	edc7 1a02 	vstr	s3, [r7, #8]
 8100f54:	ed87 2a01 	vstr	s4, [r7, #4]
	return (((to_dst-from_dst)/(to_src-from_src))*(val-from_src)) + from_dst;
 8100f58:	ed97 7a01 	vldr	s14, [r7, #4]
 8100f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8100f60:	ee77 6a67 	vsub.f32	s13, s14, s15
 8100f64:	ed97 7a03 	vldr	s14, [r7, #12]
 8100f68:	edd7 7a04 	vldr	s15, [r7, #16]
 8100f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8100f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f74:	edd7 6a05 	vldr	s13, [r7, #20]
 8100f78:	edd7 7a04 	vldr	s15, [r7, #16]
 8100f7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8100f80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8100f84:	edd7 7a02 	vldr	s15, [r7, #8]
 8100f88:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8100f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8100f90:	371c      	adds	r7, #28
 8100f92:	46bd      	mov	sp, r7
 8100f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f98:	4770      	bx	lr
	...

08100f9c <jumpHalfPeriod>:



void jumpHalfPeriod (float frequency)
{
 8100f9c:	b580      	push	{r7, lr}
 8100f9e:	b082      	sub	sp, #8
 8100fa0:	af00      	add	r7, sp, #0
 8100fa2:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_Delay(1000/(2*frequency));
 8100fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8100faa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8100fae:	eddf 6a07 	vldr	s13, [pc, #28]	; 8100fcc <jumpHalfPeriod+0x30>
 8100fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100fba:	ee17 0a90 	vmov	r0, s15
 8100fbe:	f000 fcf3 	bl	81019a8 <HAL_Delay>
}
 8100fc2:	bf00      	nop
 8100fc4:	3708      	adds	r7, #8
 8100fc6:	46bd      	mov	sp, r7
 8100fc8:	bd80      	pop	{r7, pc}
 8100fca:	bf00      	nop
 8100fcc:	447a0000 	.word	0x447a0000

08100fd0 <waitingForGettingFrequency>:


float waitingForGettingFrequency()
{
 8100fd0:	b580      	push	{r7, lr}
 8100fd2:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8100fd4:	2100      	movs	r1, #0
 8100fd6:	4812      	ldr	r0, [pc, #72]	; (8101020 <waitingForGettingFrequency+0x50>)
 8100fd8:	f001 fc1a 	bl	8102810 <HAL_TIM_IC_Start_IT>

	while (chFrequency.frequency == 0 || chFrequency.frequency > 100 || chFrequency.flagFirstFrequency == 1) { }
 8100fdc:	bf00      	nop
 8100fde:	4b11      	ldr	r3, [pc, #68]	; (8101024 <waitingForGettingFrequency+0x54>)
 8100fe0:	edd3 7a03 	vldr	s15, [r3, #12]
 8100fe4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8100fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100fec:	d0f7      	beq.n	8100fde <waitingForGettingFrequency+0xe>
 8100fee:	4b0d      	ldr	r3, [pc, #52]	; (8101024 <waitingForGettingFrequency+0x54>)
 8100ff0:	edd3 7a03 	vldr	s15, [r3, #12]
 8100ff4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8101028 <waitingForGettingFrequency+0x58>
 8100ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8100ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101000:	dced      	bgt.n	8100fde <waitingForGettingFrequency+0xe>
 8101002:	4b08      	ldr	r3, [pc, #32]	; (8101024 <waitingForGettingFrequency+0x54>)
 8101004:	689b      	ldr	r3, [r3, #8]
 8101006:	2b01      	cmp	r3, #1
 8101008:	d0e9      	beq.n	8100fde <waitingForGettingFrequency+0xe>

	HAL_TIM_IC_Stop_IT(&htim5, TIM_CHANNEL_1);
 810100a:	2100      	movs	r1, #0
 810100c:	4804      	ldr	r0, [pc, #16]	; (8101020 <waitingForGettingFrequency+0x50>)
 810100e:	f001 fd4f 	bl	8102ab0 <HAL_TIM_IC_Stop_IT>

	return chFrequency.frequency;
 8101012:	4b04      	ldr	r3, [pc, #16]	; (8101024 <waitingForGettingFrequency+0x54>)
 8101014:	68db      	ldr	r3, [r3, #12]
 8101016:	ee07 3a90 	vmov	s15, r3
}
 810101a:	eeb0 0a67 	vmov.f32	s0, s15
 810101e:	bd80      	pop	{r7, pc}
 8101020:	100000c4 	.word	0x100000c4
 8101024:	10000160 	.word	0x10000160
 8101028:	42c80000 	.word	0x42c80000

0810102c <waitingForFirstValues>:



void waitingForFirstValues(ChannelForDuty_Data values[], int ne)
{
 810102c:	b480      	push	{r7}
 810102e:	b085      	sub	sp, #20
 8101030:	af00      	add	r7, sp, #0
 8101032:	6078      	str	r0, [r7, #4]
 8101034:	6039      	str	r1, [r7, #0]
	int i;
	do
	{
		for(i=0; i<ne; i++)
 8101036:	2300      	movs	r3, #0
 8101038:	60fb      	str	r3, [r7, #12]
 810103a:	e00d      	b.n	8101058 <waitingForFirstValues+0x2c>
		{
			if(values[i].duty == 0)
 810103c:	68fb      	ldr	r3, [r7, #12]
 810103e:	011b      	lsls	r3, r3, #4
 8101040:	687a      	ldr	r2, [r7, #4]
 8101042:	4413      	add	r3, r2
 8101044:	edd3 7a03 	vldr	s15, [r3, #12]
 8101048:	eef5 7a40 	vcmp.f32	s15, #0.0
 810104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101050:	d007      	beq.n	8101062 <waitingForFirstValues+0x36>
		for(i=0; i<ne; i++)
 8101052:	68fb      	ldr	r3, [r7, #12]
 8101054:	3301      	adds	r3, #1
 8101056:	60fb      	str	r3, [r7, #12]
 8101058:	68fa      	ldr	r2, [r7, #12]
 810105a:	683b      	ldr	r3, [r7, #0]
 810105c:	429a      	cmp	r2, r3
 810105e:	dbed      	blt.n	810103c <waitingForFirstValues+0x10>
 8101060:	e000      	b.n	8101064 <waitingForFirstValues+0x38>
				break;
 8101062:	bf00      	nop
		}
	}while(i != ne);
 8101064:	68fa      	ldr	r2, [r7, #12]
 8101066:	683b      	ldr	r3, [r7, #0]
 8101068:	429a      	cmp	r2, r3
 810106a:	d1e4      	bne.n	8101036 <waitingForFirstValues+0xa>
}
 810106c:	bf00      	nop
 810106e:	bf00      	nop
 8101070:	3714      	adds	r7, #20
 8101072:	46bd      	mov	sp, r7
 8101074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101078:	4770      	bx	lr
	...

0810107c <armMotors>:




void armMotors()
{
 810107c:	b480      	push	{r7}
 810107e:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 900;
 8101080:	4b04      	ldr	r3, [pc, #16]	; (8101094 <armMotors+0x18>)
 8101082:	f44f 7261 	mov.w	r2, #900	; 0x384
 8101086:	635a      	str	r2, [r3, #52]	; 0x34
	/*
	TIM3->CCR2 = 900;
	TIM3->CCR3 = 900;
	TIM3->CCR4 = 900;
	*/
}
 8101088:	bf00      	nop
 810108a:	46bd      	mov	sp, r7
 810108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101090:	4770      	bx	lr
 8101092:	bf00      	nop
 8101094:	40000400 	.word	0x40000400

08101098 <moveMotors>:

//RAGAZZI PID
//funziona per il brushless sul banco di prova
void moveMotors()
{
 8101098:	b480      	push	{r7}
 810109a:	af00      	add	r7, sp, #0
	TIM3->CCR1 = MIN_VALUE_MOTOR + (throttle/100)*(MAX_VALUE_MOTOR - MIN_VALUE_MOTOR);
 810109c:	4b0c      	ldr	r3, [pc, #48]	; (81010d0 <moveMotors+0x38>)
 810109e:	ed93 7a00 	vldr	s14, [r3]
 81010a2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 81010d4 <moveMotors+0x3c>
 81010a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81010aa:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 81010d8 <moveMotors+0x40>
 81010ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 81010b2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 81010dc <moveMotors+0x44>
 81010b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 81010ba:	4b09      	ldr	r3, [pc, #36]	; (81010e0 <moveMotors+0x48>)
 81010bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81010c0:	ee17 2a90 	vmov	r2, s15
 81010c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 81010c6:	bf00      	nop
 81010c8:	46bd      	mov	sp, r7
 81010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ce:	4770      	bx	lr
 81010d0:	1000017c 	.word	0x1000017c
 81010d4:	42c80000 	.word	0x42c80000
 81010d8:	44480000 	.word	0x44480000
 81010dc:	447a0000 	.word	0x447a0000
 81010e0:	40000400 	.word	0x40000400

081010e4 <stopMotors>:



void stopMotors()
{
 81010e4:	b480      	push	{r7}
 81010e6:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 900;
 81010e8:	4b04      	ldr	r3, [pc, #16]	; (81010fc <stopMotors+0x18>)
 81010ea:	f44f 7261 	mov.w	r2, #900	; 0x384
 81010ee:	635a      	str	r2, [r3, #52]	; 0x34
	/*
	TIM3->CCR2 = 900;
	TIM3->CCR3 = 900;
	TIM3->CCR4 = 900;
	*/
}
 81010f0:	bf00      	nop
 81010f2:	46bd      	mov	sp, r7
 81010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010f8:	4770      	bx	lr
 81010fa:	bf00      	nop
 81010fc:	40000400 	.word	0x40000400

08101100 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8101100:	b580      	push	{r7, lr}
 8101102:	b082      	sub	sp, #8
 8101104:	af00      	add	r7, sp, #0
 8101106:	6078      	str	r0, [r7, #4]

	if(htim == &htim5)
 8101108:	687b      	ldr	r3, [r7, #4]
 810110a:	4a52      	ldr	r2, [pc, #328]	; (8101254 <HAL_TIM_IC_CaptureCallback+0x154>)
 810110c:	4293      	cmp	r3, r2
 810110e:	f040 808b 	bne.w	8101228 <HAL_TIM_IC_CaptureCallback+0x128>
	{

		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8101112:	687b      	ldr	r3, [r7, #4]
 8101114:	7f1b      	ldrb	r3, [r3, #28]
 8101116:	2b01      	cmp	r3, #1
 8101118:	d136      	bne.n	8101188 <HAL_TIM_IC_CaptureCallback+0x88>
		{

			if (chFrequency.firstCaptured == 0) // if the first value is not captured
 810111a:	4b4f      	ldr	r3, [pc, #316]	; (8101258 <HAL_TIM_IC_CaptureCallback+0x158>)
 810111c:	685b      	ldr	r3, [r3, #4]
 810111e:	2b00      	cmp	r3, #0
 8101120:	d107      	bne.n	8101132 <HAL_TIM_IC_CaptureCallback+0x32>
			{
				chFrequency.firstCaptured = 1;  // set the first captured as true
 8101122:	4b4d      	ldr	r3, [pc, #308]	; (8101258 <HAL_TIM_IC_CaptureCallback+0x158>)
 8101124:	2201      	movs	r2, #1
 8101126:	605a      	str	r2, [r3, #4]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8101128:	687b      	ldr	r3, [r7, #4]
 810112a:	681b      	ldr	r3, [r3, #0]
 810112c:	2200      	movs	r2, #0
 810112e:	625a      	str	r2, [r3, #36]	; 0x24
 8101130:	e02a      	b.n	8101188 <HAL_TIM_IC_CaptureCallback+0x88>
			}

			else   // if the first is already captured
			{
				chFrequency.val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8101132:	2100      	movs	r1, #0
 8101134:	6878      	ldr	r0, [r7, #4]
 8101136:	f002 f941 	bl	81033bc <HAL_TIM_ReadCapturedValue>
 810113a:	4603      	mov	r3, r0
 810113c:	4a46      	ldr	r2, [pc, #280]	; (8101258 <HAL_TIM_IC_CaptureCallback+0x158>)
 810113e:	6013      	str	r3, [r2, #0]

				chFrequency.frequency = (float)refClock/chFrequency.val;
 8101140:	4b45      	ldr	r3, [pc, #276]	; (8101258 <HAL_TIM_IC_CaptureCallback+0x158>)
 8101142:	681b      	ldr	r3, [r3, #0]
 8101144:	ee07 3a90 	vmov	s15, r3
 8101148:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810114c:	eddf 6a43 	vldr	s13, [pc, #268]	; 810125c <HAL_TIM_IC_CaptureCallback+0x15c>
 8101150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101154:	4b40      	ldr	r3, [pc, #256]	; (8101258 <HAL_TIM_IC_CaptureCallback+0x158>)
 8101156:	edc3 7a03 	vstr	s15, [r3, #12]

				chFrequency.firstCaptured = 0; // set it back to false
 810115a:	4b3f      	ldr	r3, [pc, #252]	; (8101258 <HAL_TIM_IC_CaptureCallback+0x158>)
 810115c:	2200      	movs	r2, #0
 810115e:	605a      	str	r2, [r3, #4]

				chFrequency.frequency = floorf(chFrequency.frequency * 100) / 100;
 8101160:	4b3d      	ldr	r3, [pc, #244]	; (8101258 <HAL_TIM_IC_CaptureCallback+0x158>)
 8101162:	edd3 7a03 	vldr	s15, [r3, #12]
 8101166:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8101260 <HAL_TIM_IC_CaptureCallback+0x160>
 810116a:	ee67 7a87 	vmul.f32	s15, s15, s14
 810116e:	eeb0 0a67 	vmov.f32	s0, s15
 8101172:	f002 ffbb 	bl	81040ec <floorf>
 8101176:	eeb0 7a40 	vmov.f32	s14, s0
 810117a:	eddf 6a39 	vldr	s13, [pc, #228]	; 8101260 <HAL_TIM_IC_CaptureCallback+0x160>
 810117e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101182:	4b35      	ldr	r3, [pc, #212]	; (8101258 <HAL_TIM_IC_CaptureCallback+0x158>)
 8101184:	edc3 7a03 	vstr	s15, [r3, #12]

			}
		}


		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) // if the interrupt source is channel1
 8101188:	687b      	ldr	r3, [r7, #4]
 810118a:	7f1b      	ldrb	r3, [r3, #28]
 810118c:	2b08      	cmp	r3, #8
 810118e:	f040 8177 	bne.w	8101480 <HAL_TIM_IC_CaptureCallback+0x380>
		{

			if (chDuty[IC_CHANNEL5].firstCaptured == 0) // if the first value is not captured
 8101192:	4b34      	ldr	r3, [pc, #208]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 8101194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101196:	2b00      	cmp	r3, #0
 8101198:	d107      	bne.n	81011aa <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				chDuty[IC_CHANNEL5].firstCaptured = 1; // set the first captured as true
 810119a:	4b32      	ldr	r3, [pc, #200]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 810119c:	2201      	movs	r2, #1
 810119e:	645a      	str	r2, [r3, #68]	; 0x44
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 81011a0:	687b      	ldr	r3, [r7, #4]
 81011a2:	681b      	ldr	r3, [r3, #0]
 81011a4:	2200      	movs	r2, #0
 81011a6:	625a      	str	r2, [r3, #36]	; 0x24
			chDuty[IC_CHANNEL4].duty = chDuty[IC_CHANNEL4].usWidth * chFrequency.frequency * 100;
			chDuty[IC_CHANNEL4].duty = floorf(chDuty[IC_CHANNEL4].duty * 100) / 100;
		}
	}

}
 81011a8:	e16a      	b.n	8101480 <HAL_TIM_IC_CaptureCallback+0x380>
				chDuty[IC_CHANNEL5].val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 81011aa:	210c      	movs	r1, #12
 81011ac:	6878      	ldr	r0, [r7, #4]
 81011ae:	f002 f905 	bl	81033bc <HAL_TIM_ReadCapturedValue>
 81011b2:	4603      	mov	r3, r0
 81011b4:	4a2b      	ldr	r2, [pc, #172]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 81011b6:	6413      	str	r3, [r2, #64]	; 0x40
				chDuty[IC_CHANNEL5].usWidth = (float) (chDuty[IC_CHANNEL5].val) / refClock;
 81011b8:	4b2a      	ldr	r3, [pc, #168]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 81011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81011bc:	ee07 3a90 	vmov	s15, r3
 81011c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81011c4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8101268 <HAL_TIM_IC_CaptureCallback+0x168>
 81011c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81011cc:	eddf 6a27 	vldr	s13, [pc, #156]	; 810126c <HAL_TIM_IC_CaptureCallback+0x16c>
 81011d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81011d4:	4b23      	ldr	r3, [pc, #140]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 81011d6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
				chDuty[IC_CHANNEL5].duty = chDuty[IC_CHANNEL5].usWidth * chFrequency.frequency * 100;
 81011da:	4b22      	ldr	r3, [pc, #136]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 81011dc:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 81011e0:	4b1d      	ldr	r3, [pc, #116]	; (8101258 <HAL_TIM_IC_CaptureCallback+0x158>)
 81011e2:	edd3 7a03 	vldr	s15, [r3, #12]
 81011e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8101260 <HAL_TIM_IC_CaptureCallback+0x160>
 81011ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 81011f2:	4b1c      	ldr	r3, [pc, #112]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 81011f4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
				chDuty[IC_CHANNEL5].duty = floorf(chDuty[IC_CHANNEL5].duty * 100) / 100;
 81011f8:	4b1a      	ldr	r3, [pc, #104]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 81011fa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 81011fe:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8101260 <HAL_TIM_IC_CaptureCallback+0x160>
 8101202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101206:	eeb0 0a67 	vmov.f32	s0, s15
 810120a:	f002 ff6f 	bl	81040ec <floorf>
 810120e:	eeb0 7a40 	vmov.f32	s14, s0
 8101212:	eddf 6a13 	vldr	s13, [pc, #76]	; 8101260 <HAL_TIM_IC_CaptureCallback+0x160>
 8101216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810121a:	4b12      	ldr	r3, [pc, #72]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 810121c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
				chDuty[IC_CHANNEL5].firstCaptured = 0; // set it back to false
 8101220:	4b10      	ldr	r3, [pc, #64]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 8101222:	2200      	movs	r2, #0
 8101224:	645a      	str	r2, [r3, #68]	; 0x44
}
 8101226:	e12b      	b.n	8101480 <HAL_TIM_IC_CaptureCallback+0x380>
	else if(htim == &htim2)
 8101228:	687b      	ldr	r3, [r7, #4]
 810122a:	4a11      	ldr	r2, [pc, #68]	; (8101270 <HAL_TIM_IC_CaptureCallback+0x170>)
 810122c:	4293      	cmp	r3, r2
 810122e:	f040 8127 	bne.w	8101480 <HAL_TIM_IC_CaptureCallback+0x380>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )  // if the interrupt source is channel1
 8101232:	687b      	ldr	r3, [r7, #4]
 8101234:	7f1b      	ldrb	r3, [r3, #28]
 8101236:	2b01      	cmp	r3, #1
 8101238:	d15a      	bne.n	81012f0 <HAL_TIM_IC_CaptureCallback+0x1f0>
			if (chDuty[IC_CHANNEL1].firstCaptured == 0) // if the first value is not captured
 810123a:	4b0a      	ldr	r3, [pc, #40]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 810123c:	685b      	ldr	r3, [r3, #4]
 810123e:	2b00      	cmp	r3, #0
 8101240:	d118      	bne.n	8101274 <HAL_TIM_IC_CaptureCallback+0x174>
				chDuty[IC_CHANNEL1].firstCaptured = 1;  // set the first captured as true
 8101242:	4b08      	ldr	r3, [pc, #32]	; (8101264 <HAL_TIM_IC_CaptureCallback+0x164>)
 8101244:	2201      	movs	r2, #1
 8101246:	605a      	str	r2, [r3, #4]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8101248:	687b      	ldr	r3, [r7, #4]
 810124a:	681b      	ldr	r3, [r3, #0]
 810124c:	2200      	movs	r2, #0
 810124e:	625a      	str	r2, [r3, #36]	; 0x24
 8101250:	e04e      	b.n	81012f0 <HAL_TIM_IC_CaptureCallback+0x1f0>
 8101252:	bf00      	nop
 8101254:	100000c4 	.word	0x100000c4
 8101258:	10000160 	.word	0x10000160
 810125c:	49742400 	.word	0x49742400
 8101260:	42c80000 	.word	0x42c80000
 8101264:	10000110 	.word	0x10000110
 8101268:	4d64e1c0 	.word	0x4d64e1c0
 810126c:	43700000 	.word	0x43700000
 8101270:	1000002c 	.word	0x1000002c
				chDuty[IC_CHANNEL1].val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8101274:	2100      	movs	r1, #0
 8101276:	6878      	ldr	r0, [r7, #4]
 8101278:	f002 f8a0 	bl	81033bc <HAL_TIM_ReadCapturedValue>
 810127c:	4603      	mov	r3, r0
 810127e:	4a84      	ldr	r2, [pc, #528]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101280:	6013      	str	r3, [r2, #0]
				chDuty[IC_CHANNEL1].usWidth = (float)(chDuty[IC_CHANNEL1].val) / refClock;
 8101282:	4b83      	ldr	r3, [pc, #524]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101284:	681b      	ldr	r3, [r3, #0]
 8101286:	ee07 3a90 	vmov	s15, r3
 810128a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810128e:	eddf 6a81 	vldr	s13, [pc, #516]	; 8101494 <HAL_TIM_IC_CaptureCallback+0x394>
 8101292:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8101296:	eddf 6a80 	vldr	s13, [pc, #512]	; 8101498 <HAL_TIM_IC_CaptureCallback+0x398>
 810129a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810129e:	4b7c      	ldr	r3, [pc, #496]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81012a0:	edc3 7a02 	vstr	s15, [r3, #8]
				chDuty[IC_CHANNEL1].duty = (chDuty[IC_CHANNEL1].usWidth * chFrequency.frequency * 100);
 81012a4:	4b7a      	ldr	r3, [pc, #488]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81012a6:	ed93 7a02 	vldr	s14, [r3, #8]
 81012aa:	4b7c      	ldr	r3, [pc, #496]	; (810149c <HAL_TIM_IC_CaptureCallback+0x39c>)
 81012ac:	edd3 7a03 	vldr	s15, [r3, #12]
 81012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012b4:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 81012b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 81012bc:	4b74      	ldr	r3, [pc, #464]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81012be:	edc3 7a03 	vstr	s15, [r3, #12]
				chDuty[IC_CHANNEL1].duty = floorf(chDuty[IC_CHANNEL1].duty * 100) / 100;
 81012c2:	4b73      	ldr	r3, [pc, #460]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81012c4:	edd3 7a03 	vldr	s15, [r3, #12]
 81012c8:	ed9f 7a75 	vldr	s14, [pc, #468]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 81012cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 81012d0:	eeb0 0a67 	vmov.f32	s0, s15
 81012d4:	f002 ff0a 	bl	81040ec <floorf>
 81012d8:	eeb0 7a40 	vmov.f32	s14, s0
 81012dc:	eddf 6a70 	vldr	s13, [pc, #448]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 81012e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81012e4:	4b6a      	ldr	r3, [pc, #424]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81012e6:	edc3 7a03 	vstr	s15, [r3, #12]
				chDuty[IC_CHANNEL1].firstCaptured = 0; // set it back to false
 81012ea:	4b69      	ldr	r3, [pc, #420]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81012ec:	2200      	movs	r2, #0
 81012ee:	605a      	str	r2, [r3, #4]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 )  // if the interrupt source is channel1
 81012f0:	687b      	ldr	r3, [r7, #4]
 81012f2:	7f1b      	ldrb	r3, [r3, #28]
 81012f4:	2b02      	cmp	r3, #2
 81012f6:	d149      	bne.n	810138c <HAL_TIM_IC_CaptureCallback+0x28c>
			chDuty[IC_CHANNEL2].val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 81012f8:	2104      	movs	r1, #4
 81012fa:	6878      	ldr	r0, [r7, #4]
 81012fc:	f002 f85e 	bl	81033bc <HAL_TIM_ReadCapturedValue>
 8101300:	4603      	mov	r3, r0
 8101302:	4a63      	ldr	r2, [pc, #396]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101304:	6113      	str	r3, [r2, #16]
			chDuty[IC_CHANNEL2].usWidth = (float)(chDuty[IC_CHANNEL2].val ) / refClock;
 8101306:	4b62      	ldr	r3, [pc, #392]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101308:	691b      	ldr	r3, [r3, #16]
 810130a:	ee07 3a90 	vmov	s15, r3
 810130e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101312:	eddf 6a60 	vldr	s13, [pc, #384]	; 8101494 <HAL_TIM_IC_CaptureCallback+0x394>
 8101316:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 810131a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8101498 <HAL_TIM_IC_CaptureCallback+0x398>
 810131e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101322:	4b5b      	ldr	r3, [pc, #364]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101324:	edc3 7a06 	vstr	s15, [r3, #24]
			chDuty[IC_CHANNEL2].duty = chDuty[IC_CHANNEL2].usWidth * chFrequency.frequency * 100 + roll_error_calibration;
 8101328:	4b59      	ldr	r3, [pc, #356]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 810132a:	ed93 7a06 	vldr	s14, [r3, #24]
 810132e:	4b5b      	ldr	r3, [pc, #364]	; (810149c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8101330:	edd3 7a03 	vldr	s15, [r3, #12]
 8101334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101338:	ed9f 7a59 	vldr	s14, [pc, #356]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 810133c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101340:	ee17 0a90 	vmov	r0, s15
 8101344:	f7ff f92c 	bl	81005a0 <__aeabi_f2d>
 8101348:	a34f      	add	r3, pc, #316	; (adr r3, 8101488 <HAL_TIM_IC_CaptureCallback+0x388>)
 810134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810134e:	f7fe ffc9 	bl	81002e4 <__adddf3>
 8101352:	4602      	mov	r2, r0
 8101354:	460b      	mov	r3, r1
 8101356:	4610      	mov	r0, r2
 8101358:	4619      	mov	r1, r3
 810135a:	f7ff f979 	bl	8100650 <__aeabi_d2f>
 810135e:	4603      	mov	r3, r0
 8101360:	4a4b      	ldr	r2, [pc, #300]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101362:	61d3      	str	r3, [r2, #28]
			chDuty[IC_CHANNEL2].duty = floorf(chDuty[IC_CHANNEL2].duty * 100) / 100;
 8101364:	4b4a      	ldr	r3, [pc, #296]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101366:	edd3 7a07 	vldr	s15, [r3, #28]
 810136a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 810136e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101372:	eeb0 0a67 	vmov.f32	s0, s15
 8101376:	f002 feb9 	bl	81040ec <floorf>
 810137a:	eeb0 7a40 	vmov.f32	s14, s0
 810137e:	eddf 6a48 	vldr	s13, [pc, #288]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 8101382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101386:	4b42      	ldr	r3, [pc, #264]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101388:	edc3 7a07 	vstr	s15, [r3, #28]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 )  // if the interrupt source is channel1
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	7f1b      	ldrb	r3, [r3, #28]
 8101390:	2b04      	cmp	r3, #4
 8101392:	d13a      	bne.n	810140a <HAL_TIM_IC_CaptureCallback+0x30a>
			chDuty[IC_CHANNEL3].val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8101394:	2108      	movs	r1, #8
 8101396:	6878      	ldr	r0, [r7, #4]
 8101398:	f002 f810 	bl	81033bc <HAL_TIM_ReadCapturedValue>
 810139c:	4603      	mov	r3, r0
 810139e:	4a3c      	ldr	r2, [pc, #240]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81013a0:	6213      	str	r3, [r2, #32]
			chDuty[IC_CHANNEL3].usWidth = (float)(chDuty[IC_CHANNEL3].val ) / refClock;
 81013a2:	4b3b      	ldr	r3, [pc, #236]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81013a4:	6a1b      	ldr	r3, [r3, #32]
 81013a6:	ee07 3a90 	vmov	s15, r3
 81013aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013ae:	eddf 6a39 	vldr	s13, [pc, #228]	; 8101494 <HAL_TIM_IC_CaptureCallback+0x394>
 81013b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 81013b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101498 <HAL_TIM_IC_CaptureCallback+0x398>
 81013ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81013be:	4b34      	ldr	r3, [pc, #208]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81013c0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			chDuty[IC_CHANNEL3].duty = chDuty[IC_CHANNEL3].usWidth * chFrequency.frequency * 100;
 81013c4:	4b32      	ldr	r3, [pc, #200]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81013c6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 81013ca:	4b34      	ldr	r3, [pc, #208]	; (810149c <HAL_TIM_IC_CaptureCallback+0x39c>)
 81013cc:	edd3 7a03 	vldr	s15, [r3, #12]
 81013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013d4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 81013d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 81013dc:	4b2c      	ldr	r3, [pc, #176]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81013de:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			chDuty[IC_CHANNEL3].duty = floorf(chDuty[IC_CHANNEL3].duty * 100) / 100;
 81013e2:	4b2b      	ldr	r3, [pc, #172]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 81013e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 81013e8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 81013ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 81013f0:	eeb0 0a67 	vmov.f32	s0, s15
 81013f4:	f002 fe7a 	bl	81040ec <floorf>
 81013f8:	eeb0 7a40 	vmov.f32	s14, s0
 81013fc:	eddf 6a28 	vldr	s13, [pc, #160]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 8101400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101404:	4b22      	ldr	r3, [pc, #136]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101406:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4 )  // if the interrupt source is channel1
 810140a:	687b      	ldr	r3, [r7, #4]
 810140c:	7f1b      	ldrb	r3, [r3, #28]
 810140e:	2b08      	cmp	r3, #8
 8101410:	d136      	bne.n	8101480 <HAL_TIM_IC_CaptureCallback+0x380>
			chDuty[IC_CHANNEL4].val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8101412:	210c      	movs	r1, #12
 8101414:	6878      	ldr	r0, [r7, #4]
 8101416:	f001 ffd1 	bl	81033bc <HAL_TIM_ReadCapturedValue>
 810141a:	4603      	mov	r3, r0
 810141c:	4a1c      	ldr	r2, [pc, #112]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 810141e:	6313      	str	r3, [r2, #48]	; 0x30
			chDuty[IC_CHANNEL4].usWidth = (float)(chDuty[IC_CHANNEL4].val )/1000000;
 8101420:	4b1b      	ldr	r3, [pc, #108]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101424:	ee07 3a90 	vmov	s15, r3
 8101428:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810142c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 81014a4 <HAL_TIM_IC_CaptureCallback+0x3a4>
 8101430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101434:	4b16      	ldr	r3, [pc, #88]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101436:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			chDuty[IC_CHANNEL4].duty = chDuty[IC_CHANNEL4].usWidth * chFrequency.frequency * 100;
 810143a:	4b15      	ldr	r3, [pc, #84]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 810143c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8101440:	4b16      	ldr	r3, [pc, #88]	; (810149c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8101442:	edd3 7a03 	vldr	s15, [r3, #12]
 8101446:	ee67 7a27 	vmul.f32	s15, s14, s15
 810144a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 810144e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101452:	4b0f      	ldr	r3, [pc, #60]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 8101454:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			chDuty[IC_CHANNEL4].duty = floorf(chDuty[IC_CHANNEL4].duty * 100) / 100;
 8101458:	4b0d      	ldr	r3, [pc, #52]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 810145a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 810145e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 8101462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101466:	eeb0 0a67 	vmov.f32	s0, s15
 810146a:	f002 fe3f 	bl	81040ec <floorf>
 810146e:	eeb0 7a40 	vmov.f32	s14, s0
 8101472:	eddf 6a0b 	vldr	s13, [pc, #44]	; 81014a0 <HAL_TIM_IC_CaptureCallback+0x3a0>
 8101476:	eec7 7a26 	vdiv.f32	s15, s14, s13
 810147a:	4b05      	ldr	r3, [pc, #20]	; (8101490 <HAL_TIM_IC_CaptureCallback+0x390>)
 810147c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8101480:	bf00      	nop
 8101482:	3708      	adds	r7, #8
 8101484:	46bd      	mov	sp, r7
 8101486:	bd80      	pop	{r7, pc}
 8101488:	9999999a 	.word	0x9999999a
 810148c:	3fc99999 	.word	0x3fc99999
 8101490:	10000110 	.word	0x10000110
 8101494:	4d64e1c0 	.word	0x4d64e1c0
 8101498:	43700000 	.word	0x43700000
 810149c:	10000160 	.word	0x10000160
 81014a0:	42c80000 	.word	0x42c80000
 81014a4:	49742400 	.word	0x49742400

081014a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81014a8:	b480      	push	{r7}
 81014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81014ac:	b672      	cpsid	i
}
 81014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 81014b0:	e7fe      	b.n	81014b0 <Error_Handler+0x8>
	...

081014b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81014b4:	b480      	push	{r7}
 81014b6:	b083      	sub	sp, #12
 81014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81014ba:	4b0a      	ldr	r3, [pc, #40]	; (81014e4 <HAL_MspInit+0x30>)
 81014bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014c0:	4a08      	ldr	r2, [pc, #32]	; (81014e4 <HAL_MspInit+0x30>)
 81014c2:	f043 0302 	orr.w	r3, r3, #2
 81014c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81014ca:	4b06      	ldr	r3, [pc, #24]	; (81014e4 <HAL_MspInit+0x30>)
 81014cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81014d0:	f003 0302 	and.w	r3, r3, #2
 81014d4:	607b      	str	r3, [r7, #4]
 81014d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81014d8:	bf00      	nop
 81014da:	370c      	adds	r7, #12
 81014dc:	46bd      	mov	sp, r7
 81014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e2:	4770      	bx	lr
 81014e4:	58024400 	.word	0x58024400

081014e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81014e8:	b580      	push	{r7, lr}
 81014ea:	b08e      	sub	sp, #56	; 0x38
 81014ec:	af00      	add	r7, sp, #0
 81014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81014f4:	2200      	movs	r2, #0
 81014f6:	601a      	str	r2, [r3, #0]
 81014f8:	605a      	str	r2, [r3, #4]
 81014fa:	609a      	str	r2, [r3, #8]
 81014fc:	60da      	str	r2, [r3, #12]
 81014fe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8101500:	687b      	ldr	r3, [r7, #4]
 8101502:	681b      	ldr	r3, [r3, #0]
 8101504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101508:	d156      	bne.n	81015b8 <HAL_TIM_Base_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 810150a:	4b55      	ldr	r3, [pc, #340]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 810150c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101510:	4a53      	ldr	r2, [pc, #332]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 8101512:	f043 0301 	orr.w	r3, r3, #1
 8101516:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810151a:	4b51      	ldr	r3, [pc, #324]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 810151c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101520:	f003 0301 	and.w	r3, r3, #1
 8101524:	623b      	str	r3, [r7, #32]
 8101526:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101528:	4b4d      	ldr	r3, [pc, #308]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 810152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810152e:	4a4c      	ldr	r2, [pc, #304]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 8101530:	f043 0301 	orr.w	r3, r3, #1
 8101534:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101538:	4b49      	ldr	r3, [pc, #292]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 810153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810153e:	f003 0301 	and.w	r3, r3, #1
 8101542:	61fb      	str	r3, [r7, #28]
 8101544:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101546:	4b46      	ldr	r3, [pc, #280]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 8101548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810154c:	4a44      	ldr	r2, [pc, #272]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 810154e:	f043 0302 	orr.w	r3, r3, #2
 8101552:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101556:	4b42      	ldr	r3, [pc, #264]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 8101558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810155c:	f003 0302 	and.w	r3, r3, #2
 8101560:	61bb      	str	r3, [r7, #24]
 8101562:	69bb      	ldr	r3, [r7, #24]
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101564:	2320      	movs	r3, #32
 8101566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101568:	2302      	movs	r3, #2
 810156a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810156c:	2300      	movs	r3, #0
 810156e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101570:	2300      	movs	r3, #0
 8101572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101574:	2301      	movs	r3, #1
 8101576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810157c:	4619      	mov	r1, r3
 810157e:	4839      	ldr	r0, [pc, #228]	; (8101664 <HAL_TIM_Base_MspInit+0x17c>)
 8101580:	f000 fb5a 	bl	8101c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8101584:	f640 4308 	movw	r3, #3080	; 0xc08
 8101588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810158a:	2302      	movs	r3, #2
 810158c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810158e:	2300      	movs	r3, #0
 8101590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101592:	2300      	movs	r3, #0
 8101594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8101596:	2301      	movs	r3, #1
 8101598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810159e:	4619      	mov	r1, r3
 81015a0:	4831      	ldr	r0, [pc, #196]	; (8101668 <HAL_TIM_Base_MspInit+0x180>)
 81015a2:	f000 fb49 	bl	8101c38 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 81015a6:	2200      	movs	r2, #0
 81015a8:	2100      	movs	r1, #0
 81015aa:	201c      	movs	r0, #28
 81015ac:	f000 fafb 	bl	8101ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 81015b0:	201c      	movs	r0, #28
 81015b2:	f000 fb12 	bl	8101bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 81015b6:	e04f      	b.n	8101658 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM3)
 81015b8:	687b      	ldr	r3, [r7, #4]
 81015ba:	681b      	ldr	r3, [r3, #0]
 81015bc:	4a2b      	ldr	r2, [pc, #172]	; (810166c <HAL_TIM_Base_MspInit+0x184>)
 81015be:	4293      	cmp	r3, r2
 81015c0:	d10f      	bne.n	81015e2 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 81015c2:	4b27      	ldr	r3, [pc, #156]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 81015c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015c8:	4a25      	ldr	r2, [pc, #148]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 81015ca:	f043 0302 	orr.w	r3, r3, #2
 81015ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81015d2:	4b23      	ldr	r3, [pc, #140]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 81015d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015d8:	f003 0302 	and.w	r3, r3, #2
 81015dc:	617b      	str	r3, [r7, #20]
 81015de:	697b      	ldr	r3, [r7, #20]
}
 81015e0:	e03a      	b.n	8101658 <HAL_TIM_Base_MspInit+0x170>
  else if(htim_base->Instance==TIM5)
 81015e2:	687b      	ldr	r3, [r7, #4]
 81015e4:	681b      	ldr	r3, [r3, #0]
 81015e6:	4a22      	ldr	r2, [pc, #136]	; (8101670 <HAL_TIM_Base_MspInit+0x188>)
 81015e8:	4293      	cmp	r3, r2
 81015ea:	d135      	bne.n	8101658 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM5_CLK_ENABLE();
 81015ec:	4b1c      	ldr	r3, [pc, #112]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 81015ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015f2:	4a1b      	ldr	r2, [pc, #108]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 81015f4:	f043 0308 	orr.w	r3, r3, #8
 81015f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81015fc:	4b18      	ldr	r3, [pc, #96]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 81015fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101602:	f003 0308 	and.w	r3, r3, #8
 8101606:	613b      	str	r3, [r7, #16]
 8101608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810160a:	4b15      	ldr	r3, [pc, #84]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 810160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101610:	4a13      	ldr	r2, [pc, #76]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 8101612:	f043 0301 	orr.w	r3, r3, #1
 8101616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810161a:	4b11      	ldr	r3, [pc, #68]	; (8101660 <HAL_TIM_Base_MspInit+0x178>)
 810161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101620:	f003 0301 	and.w	r3, r3, #1
 8101624:	60fb      	str	r3, [r7, #12]
 8101626:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8101628:	2309      	movs	r3, #9
 810162a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810162c:	2302      	movs	r3, #2
 810162e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101630:	2300      	movs	r3, #0
 8101632:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101634:	2300      	movs	r3, #0
 8101636:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8101638:	2302      	movs	r3, #2
 810163a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101640:	4619      	mov	r1, r3
 8101642:	4808      	ldr	r0, [pc, #32]	; (8101664 <HAL_TIM_Base_MspInit+0x17c>)
 8101644:	f000 faf8 	bl	8101c38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8101648:	2200      	movs	r2, #0
 810164a:	2100      	movs	r1, #0
 810164c:	2032      	movs	r0, #50	; 0x32
 810164e:	f000 faaa 	bl	8101ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8101652:	2032      	movs	r0, #50	; 0x32
 8101654:	f000 fac1 	bl	8101bda <HAL_NVIC_EnableIRQ>
}
 8101658:	bf00      	nop
 810165a:	3738      	adds	r7, #56	; 0x38
 810165c:	46bd      	mov	sp, r7
 810165e:	bd80      	pop	{r7, pc}
 8101660:	58024400 	.word	0x58024400
 8101664:	58020000 	.word	0x58020000
 8101668:	58020400 	.word	0x58020400
 810166c:	40000400 	.word	0x40000400
 8101670:	40000c00 	.word	0x40000c00

08101674 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101674:	b580      	push	{r7, lr}
 8101676:	b08a      	sub	sp, #40	; 0x28
 8101678:	af00      	add	r7, sp, #0
 810167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810167c:	f107 0314 	add.w	r3, r7, #20
 8101680:	2200      	movs	r2, #0
 8101682:	601a      	str	r2, [r3, #0]
 8101684:	605a      	str	r2, [r3, #4]
 8101686:	609a      	str	r2, [r3, #8]
 8101688:	60da      	str	r2, [r3, #12]
 810168a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 810168c:	687b      	ldr	r3, [r7, #4]
 810168e:	681b      	ldr	r3, [r3, #0]
 8101690:	4a32      	ldr	r2, [pc, #200]	; (810175c <HAL_TIM_MspPostInit+0xe8>)
 8101692:	4293      	cmp	r3, r2
 8101694:	d15d      	bne.n	8101752 <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101696:	4b32      	ldr	r3, [pc, #200]	; (8101760 <HAL_TIM_MspPostInit+0xec>)
 8101698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810169c:	4a30      	ldr	r2, [pc, #192]	; (8101760 <HAL_TIM_MspPostInit+0xec>)
 810169e:	f043 0301 	orr.w	r3, r3, #1
 81016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016a6:	4b2e      	ldr	r3, [pc, #184]	; (8101760 <HAL_TIM_MspPostInit+0xec>)
 81016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016ac:	f003 0301 	and.w	r3, r3, #1
 81016b0:	613b      	str	r3, [r7, #16]
 81016b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81016b4:	4b2a      	ldr	r3, [pc, #168]	; (8101760 <HAL_TIM_MspPostInit+0xec>)
 81016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016ba:	4a29      	ldr	r2, [pc, #164]	; (8101760 <HAL_TIM_MspPostInit+0xec>)
 81016bc:	f043 0302 	orr.w	r3, r3, #2
 81016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016c4:	4b26      	ldr	r3, [pc, #152]	; (8101760 <HAL_TIM_MspPostInit+0xec>)
 81016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016ca:	f003 0302 	and.w	r3, r3, #2
 81016ce:	60fb      	str	r3, [r7, #12]
 81016d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81016d2:	4b23      	ldr	r3, [pc, #140]	; (8101760 <HAL_TIM_MspPostInit+0xec>)
 81016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016d8:	4a21      	ldr	r2, [pc, #132]	; (8101760 <HAL_TIM_MspPostInit+0xec>)
 81016da:	f043 0304 	orr.w	r3, r3, #4
 81016de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016e2:	4b1f      	ldr	r3, [pc, #124]	; (8101760 <HAL_TIM_MspPostInit+0xec>)
 81016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016e8:	f003 0304 	and.w	r3, r3, #4
 81016ec:	60bb      	str	r3, [r7, #8]
 81016ee:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81016f0:	2340      	movs	r3, #64	; 0x40
 81016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016f4:	2302      	movs	r3, #2
 81016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016f8:	2300      	movs	r3, #0
 81016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016fc:	2300      	movs	r3, #0
 81016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101700:	2302      	movs	r3, #2
 8101702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101704:	f107 0314 	add.w	r3, r7, #20
 8101708:	4619      	mov	r1, r3
 810170a:	4816      	ldr	r0, [pc, #88]	; (8101764 <HAL_TIM_MspPostInit+0xf0>)
 810170c:	f000 fa94 	bl	8101c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8101710:	2302      	movs	r3, #2
 8101712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101714:	2302      	movs	r3, #2
 8101716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101718:	2300      	movs	r3, #0
 810171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810171c:	2300      	movs	r3, #0
 810171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101720:	2302      	movs	r3, #2
 8101722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101724:	f107 0314 	add.w	r3, r7, #20
 8101728:	4619      	mov	r1, r3
 810172a:	480f      	ldr	r0, [pc, #60]	; (8101768 <HAL_TIM_MspPostInit+0xf4>)
 810172c:	f000 fa84 	bl	8101c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8101730:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8101734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101736:	2302      	movs	r3, #2
 8101738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810173a:	2300      	movs	r3, #0
 810173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810173e:	2300      	movs	r3, #0
 8101740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101742:	2302      	movs	r3, #2
 8101744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101746:	f107 0314 	add.w	r3, r7, #20
 810174a:	4619      	mov	r1, r3
 810174c:	4807      	ldr	r0, [pc, #28]	; (810176c <HAL_TIM_MspPostInit+0xf8>)
 810174e:	f000 fa73 	bl	8101c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8101752:	bf00      	nop
 8101754:	3728      	adds	r7, #40	; 0x28
 8101756:	46bd      	mov	sp, r7
 8101758:	bd80      	pop	{r7, pc}
 810175a:	bf00      	nop
 810175c:	40000400 	.word	0x40000400
 8101760:	58024400 	.word	0x58024400
 8101764:	58020000 	.word	0x58020000
 8101768:	58020400 	.word	0x58020400
 810176c:	58020800 	.word	0x58020800

08101770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101770:	b480      	push	{r7}
 8101772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101774:	e7fe      	b.n	8101774 <NMI_Handler+0x4>

08101776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101776:	b480      	push	{r7}
 8101778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810177a:	e7fe      	b.n	810177a <HardFault_Handler+0x4>

0810177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810177c:	b480      	push	{r7}
 810177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101780:	e7fe      	b.n	8101780 <MemManage_Handler+0x4>

08101782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101782:	b480      	push	{r7}
 8101784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101786:	e7fe      	b.n	8101786 <BusFault_Handler+0x4>

08101788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101788:	b480      	push	{r7}
 810178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810178c:	e7fe      	b.n	810178c <UsageFault_Handler+0x4>

0810178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810178e:	b480      	push	{r7}
 8101790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101792:	bf00      	nop
 8101794:	46bd      	mov	sp, r7
 8101796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810179a:	4770      	bx	lr

0810179c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810179c:	b480      	push	{r7}
 810179e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81017a0:	bf00      	nop
 81017a2:	46bd      	mov	sp, r7
 81017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a8:	4770      	bx	lr

081017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81017aa:	b480      	push	{r7}
 81017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81017ae:	bf00      	nop
 81017b0:	46bd      	mov	sp, r7
 81017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017b6:	4770      	bx	lr

081017b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81017b8:	b580      	push	{r7, lr}
 81017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81017bc:	f000 f8d4 	bl	8101968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81017c0:	bf00      	nop
 81017c2:	bd80      	pop	{r7, pc}

081017c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81017c4:	b580      	push	{r7, lr}
 81017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81017c8:	4802      	ldr	r0, [pc, #8]	; (81017d4 <TIM2_IRQHandler+0x10>)
 81017ca:	f001 fa2f 	bl	8102c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81017ce:	bf00      	nop
 81017d0:	bd80      	pop	{r7, pc}
 81017d2:	bf00      	nop
 81017d4:	1000002c 	.word	0x1000002c

081017d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 81017d8:	b580      	push	{r7, lr}
 81017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 81017dc:	4802      	ldr	r0, [pc, #8]	; (81017e8 <TIM5_IRQHandler+0x10>)
 81017de:	f001 fa25 	bl	8102c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 81017e2:	bf00      	nop
 81017e4:	bd80      	pop	{r7, pc}
 81017e6:	bf00      	nop
 81017e8:	100000c4 	.word	0x100000c4

081017ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81017ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101824 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81017f0:	f7fe ff7e 	bl	81006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81017f4:	480c      	ldr	r0, [pc, #48]	; (8101828 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81017f6:	490d      	ldr	r1, [pc, #52]	; (810182c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81017f8:	4a0d      	ldr	r2, [pc, #52]	; (8101830 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81017fc:	e002      	b.n	8101804 <LoopCopyDataInit>

081017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101802:	3304      	adds	r3, #4

08101804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101808:	d3f9      	bcc.n	81017fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810180a:	4a0a      	ldr	r2, [pc, #40]	; (8101834 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810180c:	4c0a      	ldr	r4, [pc, #40]	; (8101838 <LoopFillZerobss+0x22>)
  movs r3, #0
 810180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101810:	e001      	b.n	8101816 <LoopFillZerobss>

08101812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101814:	3204      	adds	r2, #4

08101816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101818:	d3fb      	bcc.n	8101812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810181a:	f002 fc43 	bl	81040a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810181e:	f7fe fffd 	bl	810081c <main>
  bx  lr
 8101822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101824:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101828:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810182c:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101830:	081041a0 	.word	0x081041a0
  ldr r2, =_sbss
 8101834:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8101838:	10000188 	.word	0x10000188

0810183c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810183c:	e7fe      	b.n	810183c <ADC3_IRQHandler>
	...

08101840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101840:	b580      	push	{r7, lr}
 8101842:	b082      	sub	sp, #8
 8101844:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101846:	4b28      	ldr	r3, [pc, #160]	; (81018e8 <HAL_Init+0xa8>)
 8101848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810184c:	4a26      	ldr	r2, [pc, #152]	; (81018e8 <HAL_Init+0xa8>)
 810184e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101852:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101856:	4b24      	ldr	r3, [pc, #144]	; (81018e8 <HAL_Init+0xa8>)
 8101858:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810185c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101860:	603b      	str	r3, [r7, #0]
 8101862:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101864:	4b21      	ldr	r3, [pc, #132]	; (81018ec <HAL_Init+0xac>)
 8101866:	681b      	ldr	r3, [r3, #0]
 8101868:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810186c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101870:	4a1e      	ldr	r2, [pc, #120]	; (81018ec <HAL_Init+0xac>)
 8101872:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101876:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101878:	4b1c      	ldr	r3, [pc, #112]	; (81018ec <HAL_Init+0xac>)
 810187a:	681b      	ldr	r3, [r3, #0]
 810187c:	4a1b      	ldr	r2, [pc, #108]	; (81018ec <HAL_Init+0xac>)
 810187e:	f043 0301 	orr.w	r3, r3, #1
 8101882:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101884:	2003      	movs	r0, #3
 8101886:	f000 f983 	bl	8101b90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810188a:	f000 fc1f 	bl	81020cc <HAL_RCC_GetSysClockFreq>
 810188e:	4602      	mov	r2, r0
 8101890:	4b15      	ldr	r3, [pc, #84]	; (81018e8 <HAL_Init+0xa8>)
 8101892:	699b      	ldr	r3, [r3, #24]
 8101894:	0a1b      	lsrs	r3, r3, #8
 8101896:	f003 030f 	and.w	r3, r3, #15
 810189a:	4915      	ldr	r1, [pc, #84]	; (81018f0 <HAL_Init+0xb0>)
 810189c:	5ccb      	ldrb	r3, [r1, r3]
 810189e:	f003 031f 	and.w	r3, r3, #31
 81018a2:	fa22 f303 	lsr.w	r3, r2, r3
 81018a6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81018a8:	4b0f      	ldr	r3, [pc, #60]	; (81018e8 <HAL_Init+0xa8>)
 81018aa:	699b      	ldr	r3, [r3, #24]
 81018ac:	f003 030f 	and.w	r3, r3, #15
 81018b0:	4a0f      	ldr	r2, [pc, #60]	; (81018f0 <HAL_Init+0xb0>)
 81018b2:	5cd3      	ldrb	r3, [r2, r3]
 81018b4:	f003 031f 	and.w	r3, r3, #31
 81018b8:	687a      	ldr	r2, [r7, #4]
 81018ba:	fa22 f303 	lsr.w	r3, r2, r3
 81018be:	4a0d      	ldr	r2, [pc, #52]	; (81018f4 <HAL_Init+0xb4>)
 81018c0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81018c2:	4b0c      	ldr	r3, [pc, #48]	; (81018f4 <HAL_Init+0xb4>)
 81018c4:	681b      	ldr	r3, [r3, #0]
 81018c6:	4a0c      	ldr	r2, [pc, #48]	; (81018f8 <HAL_Init+0xb8>)
 81018c8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81018ca:	2000      	movs	r0, #0
 81018cc:	f000 f816 	bl	81018fc <HAL_InitTick>
 81018d0:	4603      	mov	r3, r0
 81018d2:	2b00      	cmp	r3, #0
 81018d4:	d001      	beq.n	81018da <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81018d6:	2301      	movs	r3, #1
 81018d8:	e002      	b.n	81018e0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81018da:	f7ff fdeb 	bl	81014b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81018de:	2300      	movs	r3, #0
}
 81018e0:	4618      	mov	r0, r3
 81018e2:	3708      	adds	r7, #8
 81018e4:	46bd      	mov	sp, r7
 81018e6:	bd80      	pop	{r7, pc}
 81018e8:	58024400 	.word	0x58024400
 81018ec:	40024400 	.word	0x40024400
 81018f0:	08104188 	.word	0x08104188
 81018f4:	10000004 	.word	0x10000004
 81018f8:	10000000 	.word	0x10000000

081018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81018fc:	b580      	push	{r7, lr}
 81018fe:	b082      	sub	sp, #8
 8101900:	af00      	add	r7, sp, #0
 8101902:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101904:	4b15      	ldr	r3, [pc, #84]	; (810195c <HAL_InitTick+0x60>)
 8101906:	781b      	ldrb	r3, [r3, #0]
 8101908:	2b00      	cmp	r3, #0
 810190a:	d101      	bne.n	8101910 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810190c:	2301      	movs	r3, #1
 810190e:	e021      	b.n	8101954 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101910:	4b13      	ldr	r3, [pc, #76]	; (8101960 <HAL_InitTick+0x64>)
 8101912:	681a      	ldr	r2, [r3, #0]
 8101914:	4b11      	ldr	r3, [pc, #68]	; (810195c <HAL_InitTick+0x60>)
 8101916:	781b      	ldrb	r3, [r3, #0]
 8101918:	4619      	mov	r1, r3
 810191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8101922:	fbb2 f3f3 	udiv	r3, r2, r3
 8101926:	4618      	mov	r0, r3
 8101928:	f000 f965 	bl	8101bf6 <HAL_SYSTICK_Config>
 810192c:	4603      	mov	r3, r0
 810192e:	2b00      	cmp	r3, #0
 8101930:	d001      	beq.n	8101936 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101932:	2301      	movs	r3, #1
 8101934:	e00e      	b.n	8101954 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	2b0f      	cmp	r3, #15
 810193a:	d80a      	bhi.n	8101952 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810193c:	2200      	movs	r2, #0
 810193e:	6879      	ldr	r1, [r7, #4]
 8101940:	f04f 30ff 	mov.w	r0, #4294967295
 8101944:	f000 f92f 	bl	8101ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101948:	4a06      	ldr	r2, [pc, #24]	; (8101964 <HAL_InitTick+0x68>)
 810194a:	687b      	ldr	r3, [r7, #4]
 810194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810194e:	2300      	movs	r3, #0
 8101950:	e000      	b.n	8101954 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101952:	2301      	movs	r3, #1
}
 8101954:	4618      	mov	r0, r3
 8101956:	3708      	adds	r7, #8
 8101958:	46bd      	mov	sp, r7
 810195a:	bd80      	pop	{r7, pc}
 810195c:	1000000c 	.word	0x1000000c
 8101960:	10000000 	.word	0x10000000
 8101964:	10000008 	.word	0x10000008

08101968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101968:	b480      	push	{r7}
 810196a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810196c:	4b06      	ldr	r3, [pc, #24]	; (8101988 <HAL_IncTick+0x20>)
 810196e:	781b      	ldrb	r3, [r3, #0]
 8101970:	461a      	mov	r2, r3
 8101972:	4b06      	ldr	r3, [pc, #24]	; (810198c <HAL_IncTick+0x24>)
 8101974:	681b      	ldr	r3, [r3, #0]
 8101976:	4413      	add	r3, r2
 8101978:	4a04      	ldr	r2, [pc, #16]	; (810198c <HAL_IncTick+0x24>)
 810197a:	6013      	str	r3, [r2, #0]
}
 810197c:	bf00      	nop
 810197e:	46bd      	mov	sp, r7
 8101980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101984:	4770      	bx	lr
 8101986:	bf00      	nop
 8101988:	1000000c 	.word	0x1000000c
 810198c:	10000184 	.word	0x10000184

08101990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101990:	b480      	push	{r7}
 8101992:	af00      	add	r7, sp, #0
  return uwTick;
 8101994:	4b03      	ldr	r3, [pc, #12]	; (81019a4 <HAL_GetTick+0x14>)
 8101996:	681b      	ldr	r3, [r3, #0]
}
 8101998:	4618      	mov	r0, r3
 810199a:	46bd      	mov	sp, r7
 810199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019a0:	4770      	bx	lr
 81019a2:	bf00      	nop
 81019a4:	10000184 	.word	0x10000184

081019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81019a8:	b580      	push	{r7, lr}
 81019aa:	b084      	sub	sp, #16
 81019ac:	af00      	add	r7, sp, #0
 81019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81019b0:	f7ff ffee 	bl	8101990 <HAL_GetTick>
 81019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81019b6:	687b      	ldr	r3, [r7, #4]
 81019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81019ba:	68fb      	ldr	r3, [r7, #12]
 81019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81019c0:	d005      	beq.n	81019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81019c2:	4b0a      	ldr	r3, [pc, #40]	; (81019ec <HAL_Delay+0x44>)
 81019c4:	781b      	ldrb	r3, [r3, #0]
 81019c6:	461a      	mov	r2, r3
 81019c8:	68fb      	ldr	r3, [r7, #12]
 81019ca:	4413      	add	r3, r2
 81019cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81019ce:	bf00      	nop
 81019d0:	f7ff ffde 	bl	8101990 <HAL_GetTick>
 81019d4:	4602      	mov	r2, r0
 81019d6:	68bb      	ldr	r3, [r7, #8]
 81019d8:	1ad3      	subs	r3, r2, r3
 81019da:	68fa      	ldr	r2, [r7, #12]
 81019dc:	429a      	cmp	r2, r3
 81019de:	d8f7      	bhi.n	81019d0 <HAL_Delay+0x28>
  {
  }
}
 81019e0:	bf00      	nop
 81019e2:	bf00      	nop
 81019e4:	3710      	adds	r7, #16
 81019e6:	46bd      	mov	sp, r7
 81019e8:	bd80      	pop	{r7, pc}
 81019ea:	bf00      	nop
 81019ec:	1000000c 	.word	0x1000000c

081019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81019f0:	b480      	push	{r7}
 81019f2:	b085      	sub	sp, #20
 81019f4:	af00      	add	r7, sp, #0
 81019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81019f8:	687b      	ldr	r3, [r7, #4]
 81019fa:	f003 0307 	and.w	r3, r3, #7
 81019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101a00:	4b0c      	ldr	r3, [pc, #48]	; (8101a34 <__NVIC_SetPriorityGrouping+0x44>)
 8101a02:	68db      	ldr	r3, [r3, #12]
 8101a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101a06:	68ba      	ldr	r2, [r7, #8]
 8101a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101a0c:	4013      	ands	r3, r2
 8101a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101a10:	68fb      	ldr	r3, [r7, #12]
 8101a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101a14:	68bb      	ldr	r3, [r7, #8]
 8101a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101a22:	4a04      	ldr	r2, [pc, #16]	; (8101a34 <__NVIC_SetPriorityGrouping+0x44>)
 8101a24:	68bb      	ldr	r3, [r7, #8]
 8101a26:	60d3      	str	r3, [r2, #12]
}
 8101a28:	bf00      	nop
 8101a2a:	3714      	adds	r7, #20
 8101a2c:	46bd      	mov	sp, r7
 8101a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a32:	4770      	bx	lr
 8101a34:	e000ed00 	.word	0xe000ed00

08101a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101a38:	b480      	push	{r7}
 8101a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101a3c:	4b04      	ldr	r3, [pc, #16]	; (8101a50 <__NVIC_GetPriorityGrouping+0x18>)
 8101a3e:	68db      	ldr	r3, [r3, #12]
 8101a40:	0a1b      	lsrs	r3, r3, #8
 8101a42:	f003 0307 	and.w	r3, r3, #7
}
 8101a46:	4618      	mov	r0, r3
 8101a48:	46bd      	mov	sp, r7
 8101a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a4e:	4770      	bx	lr
 8101a50:	e000ed00 	.word	0xe000ed00

08101a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101a54:	b480      	push	{r7}
 8101a56:	b083      	sub	sp, #12
 8101a58:	af00      	add	r7, sp, #0
 8101a5a:	4603      	mov	r3, r0
 8101a5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a62:	2b00      	cmp	r3, #0
 8101a64:	db0b      	blt.n	8101a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101a66:	88fb      	ldrh	r3, [r7, #6]
 8101a68:	f003 021f 	and.w	r2, r3, #31
 8101a6c:	4907      	ldr	r1, [pc, #28]	; (8101a8c <__NVIC_EnableIRQ+0x38>)
 8101a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101a72:	095b      	lsrs	r3, r3, #5
 8101a74:	2001      	movs	r0, #1
 8101a76:	fa00 f202 	lsl.w	r2, r0, r2
 8101a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101a7e:	bf00      	nop
 8101a80:	370c      	adds	r7, #12
 8101a82:	46bd      	mov	sp, r7
 8101a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a88:	4770      	bx	lr
 8101a8a:	bf00      	nop
 8101a8c:	e000e100 	.word	0xe000e100

08101a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101a90:	b480      	push	{r7}
 8101a92:	b083      	sub	sp, #12
 8101a94:	af00      	add	r7, sp, #0
 8101a96:	4603      	mov	r3, r0
 8101a98:	6039      	str	r1, [r7, #0]
 8101a9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101aa0:	2b00      	cmp	r3, #0
 8101aa2:	db0a      	blt.n	8101aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101aa4:	683b      	ldr	r3, [r7, #0]
 8101aa6:	b2da      	uxtb	r2, r3
 8101aa8:	490c      	ldr	r1, [pc, #48]	; (8101adc <__NVIC_SetPriority+0x4c>)
 8101aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101aae:	0112      	lsls	r2, r2, #4
 8101ab0:	b2d2      	uxtb	r2, r2
 8101ab2:	440b      	add	r3, r1
 8101ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101ab8:	e00a      	b.n	8101ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101aba:	683b      	ldr	r3, [r7, #0]
 8101abc:	b2da      	uxtb	r2, r3
 8101abe:	4908      	ldr	r1, [pc, #32]	; (8101ae0 <__NVIC_SetPriority+0x50>)
 8101ac0:	88fb      	ldrh	r3, [r7, #6]
 8101ac2:	f003 030f 	and.w	r3, r3, #15
 8101ac6:	3b04      	subs	r3, #4
 8101ac8:	0112      	lsls	r2, r2, #4
 8101aca:	b2d2      	uxtb	r2, r2
 8101acc:	440b      	add	r3, r1
 8101ace:	761a      	strb	r2, [r3, #24]
}
 8101ad0:	bf00      	nop
 8101ad2:	370c      	adds	r7, #12
 8101ad4:	46bd      	mov	sp, r7
 8101ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ada:	4770      	bx	lr
 8101adc:	e000e100 	.word	0xe000e100
 8101ae0:	e000ed00 	.word	0xe000ed00

08101ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101ae4:	b480      	push	{r7}
 8101ae6:	b089      	sub	sp, #36	; 0x24
 8101ae8:	af00      	add	r7, sp, #0
 8101aea:	60f8      	str	r0, [r7, #12]
 8101aec:	60b9      	str	r1, [r7, #8]
 8101aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101af0:	68fb      	ldr	r3, [r7, #12]
 8101af2:	f003 0307 	and.w	r3, r3, #7
 8101af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101af8:	69fb      	ldr	r3, [r7, #28]
 8101afa:	f1c3 0307 	rsb	r3, r3, #7
 8101afe:	2b04      	cmp	r3, #4
 8101b00:	bf28      	it	cs
 8101b02:	2304      	movcs	r3, #4
 8101b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101b06:	69fb      	ldr	r3, [r7, #28]
 8101b08:	3304      	adds	r3, #4
 8101b0a:	2b06      	cmp	r3, #6
 8101b0c:	d902      	bls.n	8101b14 <NVIC_EncodePriority+0x30>
 8101b0e:	69fb      	ldr	r3, [r7, #28]
 8101b10:	3b03      	subs	r3, #3
 8101b12:	e000      	b.n	8101b16 <NVIC_EncodePriority+0x32>
 8101b14:	2300      	movs	r3, #0
 8101b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101b18:	f04f 32ff 	mov.w	r2, #4294967295
 8101b1c:	69bb      	ldr	r3, [r7, #24]
 8101b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8101b22:	43da      	mvns	r2, r3
 8101b24:	68bb      	ldr	r3, [r7, #8]
 8101b26:	401a      	ands	r2, r3
 8101b28:	697b      	ldr	r3, [r7, #20]
 8101b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8101b30:	697b      	ldr	r3, [r7, #20]
 8101b32:	fa01 f303 	lsl.w	r3, r1, r3
 8101b36:	43d9      	mvns	r1, r3
 8101b38:	687b      	ldr	r3, [r7, #4]
 8101b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101b3c:	4313      	orrs	r3, r2
         );
}
 8101b3e:	4618      	mov	r0, r3
 8101b40:	3724      	adds	r7, #36	; 0x24
 8101b42:	46bd      	mov	sp, r7
 8101b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b48:	4770      	bx	lr
	...

08101b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101b4c:	b580      	push	{r7, lr}
 8101b4e:	b082      	sub	sp, #8
 8101b50:	af00      	add	r7, sp, #0
 8101b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	3b01      	subs	r3, #1
 8101b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101b5c:	d301      	bcc.n	8101b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101b5e:	2301      	movs	r3, #1
 8101b60:	e00f      	b.n	8101b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101b62:	4a0a      	ldr	r2, [pc, #40]	; (8101b8c <SysTick_Config+0x40>)
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	3b01      	subs	r3, #1
 8101b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101b6a:	210f      	movs	r1, #15
 8101b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8101b70:	f7ff ff8e 	bl	8101a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101b74:	4b05      	ldr	r3, [pc, #20]	; (8101b8c <SysTick_Config+0x40>)
 8101b76:	2200      	movs	r2, #0
 8101b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101b7a:	4b04      	ldr	r3, [pc, #16]	; (8101b8c <SysTick_Config+0x40>)
 8101b7c:	2207      	movs	r2, #7
 8101b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101b80:	2300      	movs	r3, #0
}
 8101b82:	4618      	mov	r0, r3
 8101b84:	3708      	adds	r7, #8
 8101b86:	46bd      	mov	sp, r7
 8101b88:	bd80      	pop	{r7, pc}
 8101b8a:	bf00      	nop
 8101b8c:	e000e010 	.word	0xe000e010

08101b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101b90:	b580      	push	{r7, lr}
 8101b92:	b082      	sub	sp, #8
 8101b94:	af00      	add	r7, sp, #0
 8101b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101b98:	6878      	ldr	r0, [r7, #4]
 8101b9a:	f7ff ff29 	bl	81019f0 <__NVIC_SetPriorityGrouping>
}
 8101b9e:	bf00      	nop
 8101ba0:	3708      	adds	r7, #8
 8101ba2:	46bd      	mov	sp, r7
 8101ba4:	bd80      	pop	{r7, pc}

08101ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101ba6:	b580      	push	{r7, lr}
 8101ba8:	b086      	sub	sp, #24
 8101baa:	af00      	add	r7, sp, #0
 8101bac:	4603      	mov	r3, r0
 8101bae:	60b9      	str	r1, [r7, #8]
 8101bb0:	607a      	str	r2, [r7, #4]
 8101bb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101bb4:	f7ff ff40 	bl	8101a38 <__NVIC_GetPriorityGrouping>
 8101bb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101bba:	687a      	ldr	r2, [r7, #4]
 8101bbc:	68b9      	ldr	r1, [r7, #8]
 8101bbe:	6978      	ldr	r0, [r7, #20]
 8101bc0:	f7ff ff90 	bl	8101ae4 <NVIC_EncodePriority>
 8101bc4:	4602      	mov	r2, r0
 8101bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101bca:	4611      	mov	r1, r2
 8101bcc:	4618      	mov	r0, r3
 8101bce:	f7ff ff5f 	bl	8101a90 <__NVIC_SetPriority>
}
 8101bd2:	bf00      	nop
 8101bd4:	3718      	adds	r7, #24
 8101bd6:	46bd      	mov	sp, r7
 8101bd8:	bd80      	pop	{r7, pc}

08101bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101bda:	b580      	push	{r7, lr}
 8101bdc:	b082      	sub	sp, #8
 8101bde:	af00      	add	r7, sp, #0
 8101be0:	4603      	mov	r3, r0
 8101be2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101be8:	4618      	mov	r0, r3
 8101bea:	f7ff ff33 	bl	8101a54 <__NVIC_EnableIRQ>
}
 8101bee:	bf00      	nop
 8101bf0:	3708      	adds	r7, #8
 8101bf2:	46bd      	mov	sp, r7
 8101bf4:	bd80      	pop	{r7, pc}

08101bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101bf6:	b580      	push	{r7, lr}
 8101bf8:	b082      	sub	sp, #8
 8101bfa:	af00      	add	r7, sp, #0
 8101bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101bfe:	6878      	ldr	r0, [r7, #4]
 8101c00:	f7ff ffa4 	bl	8101b4c <SysTick_Config>
 8101c04:	4603      	mov	r3, r0
}
 8101c06:	4618      	mov	r0, r3
 8101c08:	3708      	adds	r7, #8
 8101c0a:	46bd      	mov	sp, r7
 8101c0c:	bd80      	pop	{r7, pc}
	...

08101c10 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101c10:	b480      	push	{r7}
 8101c12:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101c14:	4b07      	ldr	r3, [pc, #28]	; (8101c34 <HAL_GetCurrentCPUID+0x24>)
 8101c16:	681b      	ldr	r3, [r3, #0]
 8101c18:	091b      	lsrs	r3, r3, #4
 8101c1a:	f003 030f 	and.w	r3, r3, #15
 8101c1e:	2b07      	cmp	r3, #7
 8101c20:	d101      	bne.n	8101c26 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101c22:	2303      	movs	r3, #3
 8101c24:	e000      	b.n	8101c28 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101c26:	2301      	movs	r3, #1
  }
}
 8101c28:	4618      	mov	r0, r3
 8101c2a:	46bd      	mov	sp, r7
 8101c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c30:	4770      	bx	lr
 8101c32:	bf00      	nop
 8101c34:	e000ed00 	.word	0xe000ed00

08101c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101c38:	b480      	push	{r7}
 8101c3a:	b089      	sub	sp, #36	; 0x24
 8101c3c:	af00      	add	r7, sp, #0
 8101c3e:	6078      	str	r0, [r7, #4]
 8101c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101c42:	2300      	movs	r3, #0
 8101c44:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101c46:	4b89      	ldr	r3, [pc, #548]	; (8101e6c <HAL_GPIO_Init+0x234>)
 8101c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101c4a:	e194      	b.n	8101f76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101c4c:	683b      	ldr	r3, [r7, #0]
 8101c4e:	681a      	ldr	r2, [r3, #0]
 8101c50:	2101      	movs	r1, #1
 8101c52:	69fb      	ldr	r3, [r7, #28]
 8101c54:	fa01 f303 	lsl.w	r3, r1, r3
 8101c58:	4013      	ands	r3, r2
 8101c5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101c5c:	693b      	ldr	r3, [r7, #16]
 8101c5e:	2b00      	cmp	r3, #0
 8101c60:	f000 8186 	beq.w	8101f70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101c64:	683b      	ldr	r3, [r7, #0]
 8101c66:	685b      	ldr	r3, [r3, #4]
 8101c68:	f003 0303 	and.w	r3, r3, #3
 8101c6c:	2b01      	cmp	r3, #1
 8101c6e:	d005      	beq.n	8101c7c <HAL_GPIO_Init+0x44>
 8101c70:	683b      	ldr	r3, [r7, #0]
 8101c72:	685b      	ldr	r3, [r3, #4]
 8101c74:	f003 0303 	and.w	r3, r3, #3
 8101c78:	2b02      	cmp	r3, #2
 8101c7a:	d130      	bne.n	8101cde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	689b      	ldr	r3, [r3, #8]
 8101c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101c82:	69fb      	ldr	r3, [r7, #28]
 8101c84:	005b      	lsls	r3, r3, #1
 8101c86:	2203      	movs	r2, #3
 8101c88:	fa02 f303 	lsl.w	r3, r2, r3
 8101c8c:	43db      	mvns	r3, r3
 8101c8e:	69ba      	ldr	r2, [r7, #24]
 8101c90:	4013      	ands	r3, r2
 8101c92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101c94:	683b      	ldr	r3, [r7, #0]
 8101c96:	68da      	ldr	r2, [r3, #12]
 8101c98:	69fb      	ldr	r3, [r7, #28]
 8101c9a:	005b      	lsls	r3, r3, #1
 8101c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8101ca0:	69ba      	ldr	r2, [r7, #24]
 8101ca2:	4313      	orrs	r3, r2
 8101ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	69ba      	ldr	r2, [r7, #24]
 8101caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101cac:	687b      	ldr	r3, [r7, #4]
 8101cae:	685b      	ldr	r3, [r3, #4]
 8101cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101cb2:	2201      	movs	r2, #1
 8101cb4:	69fb      	ldr	r3, [r7, #28]
 8101cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8101cba:	43db      	mvns	r3, r3
 8101cbc:	69ba      	ldr	r2, [r7, #24]
 8101cbe:	4013      	ands	r3, r2
 8101cc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101cc2:	683b      	ldr	r3, [r7, #0]
 8101cc4:	685b      	ldr	r3, [r3, #4]
 8101cc6:	091b      	lsrs	r3, r3, #4
 8101cc8:	f003 0201 	and.w	r2, r3, #1
 8101ccc:	69fb      	ldr	r3, [r7, #28]
 8101cce:	fa02 f303 	lsl.w	r3, r2, r3
 8101cd2:	69ba      	ldr	r2, [r7, #24]
 8101cd4:	4313      	orrs	r3, r2
 8101cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101cd8:	687b      	ldr	r3, [r7, #4]
 8101cda:	69ba      	ldr	r2, [r7, #24]
 8101cdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101cde:	683b      	ldr	r3, [r7, #0]
 8101ce0:	685b      	ldr	r3, [r3, #4]
 8101ce2:	f003 0303 	and.w	r3, r3, #3
 8101ce6:	2b03      	cmp	r3, #3
 8101ce8:	d017      	beq.n	8101d1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101cea:	687b      	ldr	r3, [r7, #4]
 8101cec:	68db      	ldr	r3, [r3, #12]
 8101cee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101cf0:	69fb      	ldr	r3, [r7, #28]
 8101cf2:	005b      	lsls	r3, r3, #1
 8101cf4:	2203      	movs	r2, #3
 8101cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8101cfa:	43db      	mvns	r3, r3
 8101cfc:	69ba      	ldr	r2, [r7, #24]
 8101cfe:	4013      	ands	r3, r2
 8101d00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101d02:	683b      	ldr	r3, [r7, #0]
 8101d04:	689a      	ldr	r2, [r3, #8]
 8101d06:	69fb      	ldr	r3, [r7, #28]
 8101d08:	005b      	lsls	r3, r3, #1
 8101d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8101d0e:	69ba      	ldr	r2, [r7, #24]
 8101d10:	4313      	orrs	r3, r2
 8101d12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101d14:	687b      	ldr	r3, [r7, #4]
 8101d16:	69ba      	ldr	r2, [r7, #24]
 8101d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101d1a:	683b      	ldr	r3, [r7, #0]
 8101d1c:	685b      	ldr	r3, [r3, #4]
 8101d1e:	f003 0303 	and.w	r3, r3, #3
 8101d22:	2b02      	cmp	r3, #2
 8101d24:	d123      	bne.n	8101d6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101d26:	69fb      	ldr	r3, [r7, #28]
 8101d28:	08da      	lsrs	r2, r3, #3
 8101d2a:	687b      	ldr	r3, [r7, #4]
 8101d2c:	3208      	adds	r2, #8
 8101d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101d34:	69fb      	ldr	r3, [r7, #28]
 8101d36:	f003 0307 	and.w	r3, r3, #7
 8101d3a:	009b      	lsls	r3, r3, #2
 8101d3c:	220f      	movs	r2, #15
 8101d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8101d42:	43db      	mvns	r3, r3
 8101d44:	69ba      	ldr	r2, [r7, #24]
 8101d46:	4013      	ands	r3, r2
 8101d48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101d4a:	683b      	ldr	r3, [r7, #0]
 8101d4c:	691a      	ldr	r2, [r3, #16]
 8101d4e:	69fb      	ldr	r3, [r7, #28]
 8101d50:	f003 0307 	and.w	r3, r3, #7
 8101d54:	009b      	lsls	r3, r3, #2
 8101d56:	fa02 f303 	lsl.w	r3, r2, r3
 8101d5a:	69ba      	ldr	r2, [r7, #24]
 8101d5c:	4313      	orrs	r3, r2
 8101d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101d60:	69fb      	ldr	r3, [r7, #28]
 8101d62:	08da      	lsrs	r2, r3, #3
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	3208      	adds	r2, #8
 8101d68:	69b9      	ldr	r1, [r7, #24]
 8101d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101d6e:	687b      	ldr	r3, [r7, #4]
 8101d70:	681b      	ldr	r3, [r3, #0]
 8101d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101d74:	69fb      	ldr	r3, [r7, #28]
 8101d76:	005b      	lsls	r3, r3, #1
 8101d78:	2203      	movs	r2, #3
 8101d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8101d7e:	43db      	mvns	r3, r3
 8101d80:	69ba      	ldr	r2, [r7, #24]
 8101d82:	4013      	ands	r3, r2
 8101d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101d86:	683b      	ldr	r3, [r7, #0]
 8101d88:	685b      	ldr	r3, [r3, #4]
 8101d8a:	f003 0203 	and.w	r2, r3, #3
 8101d8e:	69fb      	ldr	r3, [r7, #28]
 8101d90:	005b      	lsls	r3, r3, #1
 8101d92:	fa02 f303 	lsl.w	r3, r2, r3
 8101d96:	69ba      	ldr	r2, [r7, #24]
 8101d98:	4313      	orrs	r3, r2
 8101d9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	69ba      	ldr	r2, [r7, #24]
 8101da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101da2:	683b      	ldr	r3, [r7, #0]
 8101da4:	685b      	ldr	r3, [r3, #4]
 8101da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101daa:	2b00      	cmp	r3, #0
 8101dac:	f000 80e0 	beq.w	8101f70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101db0:	4b2f      	ldr	r3, [pc, #188]	; (8101e70 <HAL_GPIO_Init+0x238>)
 8101db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101db6:	4a2e      	ldr	r2, [pc, #184]	; (8101e70 <HAL_GPIO_Init+0x238>)
 8101db8:	f043 0302 	orr.w	r3, r3, #2
 8101dbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101dc0:	4b2b      	ldr	r3, [pc, #172]	; (8101e70 <HAL_GPIO_Init+0x238>)
 8101dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101dc6:	f003 0302 	and.w	r3, r3, #2
 8101dca:	60fb      	str	r3, [r7, #12]
 8101dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101dce:	4a29      	ldr	r2, [pc, #164]	; (8101e74 <HAL_GPIO_Init+0x23c>)
 8101dd0:	69fb      	ldr	r3, [r7, #28]
 8101dd2:	089b      	lsrs	r3, r3, #2
 8101dd4:	3302      	adds	r3, #2
 8101dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101ddc:	69fb      	ldr	r3, [r7, #28]
 8101dde:	f003 0303 	and.w	r3, r3, #3
 8101de2:	009b      	lsls	r3, r3, #2
 8101de4:	220f      	movs	r2, #15
 8101de6:	fa02 f303 	lsl.w	r3, r2, r3
 8101dea:	43db      	mvns	r3, r3
 8101dec:	69ba      	ldr	r2, [r7, #24]
 8101dee:	4013      	ands	r3, r2
 8101df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101df2:	687b      	ldr	r3, [r7, #4]
 8101df4:	4a20      	ldr	r2, [pc, #128]	; (8101e78 <HAL_GPIO_Init+0x240>)
 8101df6:	4293      	cmp	r3, r2
 8101df8:	d052      	beq.n	8101ea0 <HAL_GPIO_Init+0x268>
 8101dfa:	687b      	ldr	r3, [r7, #4]
 8101dfc:	4a1f      	ldr	r2, [pc, #124]	; (8101e7c <HAL_GPIO_Init+0x244>)
 8101dfe:	4293      	cmp	r3, r2
 8101e00:	d031      	beq.n	8101e66 <HAL_GPIO_Init+0x22e>
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	4a1e      	ldr	r2, [pc, #120]	; (8101e80 <HAL_GPIO_Init+0x248>)
 8101e06:	4293      	cmp	r3, r2
 8101e08:	d02b      	beq.n	8101e62 <HAL_GPIO_Init+0x22a>
 8101e0a:	687b      	ldr	r3, [r7, #4]
 8101e0c:	4a1d      	ldr	r2, [pc, #116]	; (8101e84 <HAL_GPIO_Init+0x24c>)
 8101e0e:	4293      	cmp	r3, r2
 8101e10:	d025      	beq.n	8101e5e <HAL_GPIO_Init+0x226>
 8101e12:	687b      	ldr	r3, [r7, #4]
 8101e14:	4a1c      	ldr	r2, [pc, #112]	; (8101e88 <HAL_GPIO_Init+0x250>)
 8101e16:	4293      	cmp	r3, r2
 8101e18:	d01f      	beq.n	8101e5a <HAL_GPIO_Init+0x222>
 8101e1a:	687b      	ldr	r3, [r7, #4]
 8101e1c:	4a1b      	ldr	r2, [pc, #108]	; (8101e8c <HAL_GPIO_Init+0x254>)
 8101e1e:	4293      	cmp	r3, r2
 8101e20:	d019      	beq.n	8101e56 <HAL_GPIO_Init+0x21e>
 8101e22:	687b      	ldr	r3, [r7, #4]
 8101e24:	4a1a      	ldr	r2, [pc, #104]	; (8101e90 <HAL_GPIO_Init+0x258>)
 8101e26:	4293      	cmp	r3, r2
 8101e28:	d013      	beq.n	8101e52 <HAL_GPIO_Init+0x21a>
 8101e2a:	687b      	ldr	r3, [r7, #4]
 8101e2c:	4a19      	ldr	r2, [pc, #100]	; (8101e94 <HAL_GPIO_Init+0x25c>)
 8101e2e:	4293      	cmp	r3, r2
 8101e30:	d00d      	beq.n	8101e4e <HAL_GPIO_Init+0x216>
 8101e32:	687b      	ldr	r3, [r7, #4]
 8101e34:	4a18      	ldr	r2, [pc, #96]	; (8101e98 <HAL_GPIO_Init+0x260>)
 8101e36:	4293      	cmp	r3, r2
 8101e38:	d007      	beq.n	8101e4a <HAL_GPIO_Init+0x212>
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	4a17      	ldr	r2, [pc, #92]	; (8101e9c <HAL_GPIO_Init+0x264>)
 8101e3e:	4293      	cmp	r3, r2
 8101e40:	d101      	bne.n	8101e46 <HAL_GPIO_Init+0x20e>
 8101e42:	2309      	movs	r3, #9
 8101e44:	e02d      	b.n	8101ea2 <HAL_GPIO_Init+0x26a>
 8101e46:	230a      	movs	r3, #10
 8101e48:	e02b      	b.n	8101ea2 <HAL_GPIO_Init+0x26a>
 8101e4a:	2308      	movs	r3, #8
 8101e4c:	e029      	b.n	8101ea2 <HAL_GPIO_Init+0x26a>
 8101e4e:	2307      	movs	r3, #7
 8101e50:	e027      	b.n	8101ea2 <HAL_GPIO_Init+0x26a>
 8101e52:	2306      	movs	r3, #6
 8101e54:	e025      	b.n	8101ea2 <HAL_GPIO_Init+0x26a>
 8101e56:	2305      	movs	r3, #5
 8101e58:	e023      	b.n	8101ea2 <HAL_GPIO_Init+0x26a>
 8101e5a:	2304      	movs	r3, #4
 8101e5c:	e021      	b.n	8101ea2 <HAL_GPIO_Init+0x26a>
 8101e5e:	2303      	movs	r3, #3
 8101e60:	e01f      	b.n	8101ea2 <HAL_GPIO_Init+0x26a>
 8101e62:	2302      	movs	r3, #2
 8101e64:	e01d      	b.n	8101ea2 <HAL_GPIO_Init+0x26a>
 8101e66:	2301      	movs	r3, #1
 8101e68:	e01b      	b.n	8101ea2 <HAL_GPIO_Init+0x26a>
 8101e6a:	bf00      	nop
 8101e6c:	580000c0 	.word	0x580000c0
 8101e70:	58024400 	.word	0x58024400
 8101e74:	58000400 	.word	0x58000400
 8101e78:	58020000 	.word	0x58020000
 8101e7c:	58020400 	.word	0x58020400
 8101e80:	58020800 	.word	0x58020800
 8101e84:	58020c00 	.word	0x58020c00
 8101e88:	58021000 	.word	0x58021000
 8101e8c:	58021400 	.word	0x58021400
 8101e90:	58021800 	.word	0x58021800
 8101e94:	58021c00 	.word	0x58021c00
 8101e98:	58022000 	.word	0x58022000
 8101e9c:	58022400 	.word	0x58022400
 8101ea0:	2300      	movs	r3, #0
 8101ea2:	69fa      	ldr	r2, [r7, #28]
 8101ea4:	f002 0203 	and.w	r2, r2, #3
 8101ea8:	0092      	lsls	r2, r2, #2
 8101eaa:	4093      	lsls	r3, r2
 8101eac:	69ba      	ldr	r2, [r7, #24]
 8101eae:	4313      	orrs	r3, r2
 8101eb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101eb2:	4938      	ldr	r1, [pc, #224]	; (8101f94 <HAL_GPIO_Init+0x35c>)
 8101eb4:	69fb      	ldr	r3, [r7, #28]
 8101eb6:	089b      	lsrs	r3, r3, #2
 8101eb8:	3302      	adds	r3, #2
 8101eba:	69ba      	ldr	r2, [r7, #24]
 8101ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101ec4:	681b      	ldr	r3, [r3, #0]
 8101ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ec8:	693b      	ldr	r3, [r7, #16]
 8101eca:	43db      	mvns	r3, r3
 8101ecc:	69ba      	ldr	r2, [r7, #24]
 8101ece:	4013      	ands	r3, r2
 8101ed0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101ed2:	683b      	ldr	r3, [r7, #0]
 8101ed4:	685b      	ldr	r3, [r3, #4]
 8101ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101eda:	2b00      	cmp	r3, #0
 8101edc:	d003      	beq.n	8101ee6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101ede:	69ba      	ldr	r2, [r7, #24]
 8101ee0:	693b      	ldr	r3, [r7, #16]
 8101ee2:	4313      	orrs	r3, r2
 8101ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101eea:	69bb      	ldr	r3, [r7, #24]
 8101eec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101ef2:	685b      	ldr	r3, [r3, #4]
 8101ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ef6:	693b      	ldr	r3, [r7, #16]
 8101ef8:	43db      	mvns	r3, r3
 8101efa:	69ba      	ldr	r2, [r7, #24]
 8101efc:	4013      	ands	r3, r2
 8101efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101f00:	683b      	ldr	r3, [r7, #0]
 8101f02:	685b      	ldr	r3, [r3, #4]
 8101f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101f08:	2b00      	cmp	r3, #0
 8101f0a:	d003      	beq.n	8101f14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101f0c:	69ba      	ldr	r2, [r7, #24]
 8101f0e:	693b      	ldr	r3, [r7, #16]
 8101f10:	4313      	orrs	r3, r2
 8101f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101f18:	69bb      	ldr	r3, [r7, #24]
 8101f1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101f1c:	697b      	ldr	r3, [r7, #20]
 8101f1e:	685b      	ldr	r3, [r3, #4]
 8101f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101f22:	693b      	ldr	r3, [r7, #16]
 8101f24:	43db      	mvns	r3, r3
 8101f26:	69ba      	ldr	r2, [r7, #24]
 8101f28:	4013      	ands	r3, r2
 8101f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101f2c:	683b      	ldr	r3, [r7, #0]
 8101f2e:	685b      	ldr	r3, [r3, #4]
 8101f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101f34:	2b00      	cmp	r3, #0
 8101f36:	d003      	beq.n	8101f40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101f38:	69ba      	ldr	r2, [r7, #24]
 8101f3a:	693b      	ldr	r3, [r7, #16]
 8101f3c:	4313      	orrs	r3, r2
 8101f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101f40:	697b      	ldr	r3, [r7, #20]
 8101f42:	69ba      	ldr	r2, [r7, #24]
 8101f44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101f46:	697b      	ldr	r3, [r7, #20]
 8101f48:	681b      	ldr	r3, [r3, #0]
 8101f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101f4c:	693b      	ldr	r3, [r7, #16]
 8101f4e:	43db      	mvns	r3, r3
 8101f50:	69ba      	ldr	r2, [r7, #24]
 8101f52:	4013      	ands	r3, r2
 8101f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101f56:	683b      	ldr	r3, [r7, #0]
 8101f58:	685b      	ldr	r3, [r3, #4]
 8101f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101f5e:	2b00      	cmp	r3, #0
 8101f60:	d003      	beq.n	8101f6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101f62:	69ba      	ldr	r2, [r7, #24]
 8101f64:	693b      	ldr	r3, [r7, #16]
 8101f66:	4313      	orrs	r3, r2
 8101f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101f6a:	697b      	ldr	r3, [r7, #20]
 8101f6c:	69ba      	ldr	r2, [r7, #24]
 8101f6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101f70:	69fb      	ldr	r3, [r7, #28]
 8101f72:	3301      	adds	r3, #1
 8101f74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101f76:	683b      	ldr	r3, [r7, #0]
 8101f78:	681a      	ldr	r2, [r3, #0]
 8101f7a:	69fb      	ldr	r3, [r7, #28]
 8101f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8101f80:	2b00      	cmp	r3, #0
 8101f82:	f47f ae63 	bne.w	8101c4c <HAL_GPIO_Init+0x14>
  }
}
 8101f86:	bf00      	nop
 8101f88:	bf00      	nop
 8101f8a:	3724      	adds	r7, #36	; 0x24
 8101f8c:	46bd      	mov	sp, r7
 8101f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f92:	4770      	bx	lr
 8101f94:	58000400 	.word	0x58000400

08101f98 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101f98:	b480      	push	{r7}
 8101f9a:	b083      	sub	sp, #12
 8101f9c:	af00      	add	r7, sp, #0
 8101f9e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101fa0:	4b05      	ldr	r3, [pc, #20]	; (8101fb8 <HAL_HSEM_ActivateNotification+0x20>)
 8101fa2:	681a      	ldr	r2, [r3, #0]
 8101fa4:	4904      	ldr	r1, [pc, #16]	; (8101fb8 <HAL_HSEM_ActivateNotification+0x20>)
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	4313      	orrs	r3, r2
 8101faa:	600b      	str	r3, [r1, #0]
#endif
}
 8101fac:	bf00      	nop
 8101fae:	370c      	adds	r7, #12
 8101fb0:	46bd      	mov	sp, r7
 8101fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fb6:	4770      	bx	lr
 8101fb8:	58026510 	.word	0x58026510

08101fbc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101fbc:	b580      	push	{r7, lr}
 8101fbe:	b084      	sub	sp, #16
 8101fc0:	af00      	add	r7, sp, #0
 8101fc2:	60f8      	str	r0, [r7, #12]
 8101fc4:	460b      	mov	r3, r1
 8101fc6:	607a      	str	r2, [r7, #4]
 8101fc8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101fca:	4b37      	ldr	r3, [pc, #220]	; (81020a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101fcc:	681b      	ldr	r3, [r3, #0]
 8101fce:	f023 0201 	bic.w	r2, r3, #1
 8101fd2:	4935      	ldr	r1, [pc, #212]	; (81020a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101fd4:	68fb      	ldr	r3, [r7, #12]
 8101fd6:	4313      	orrs	r3, r2
 8101fd8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	2b00      	cmp	r3, #0
 8101fde:	d123      	bne.n	8102028 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101fe0:	f7ff fe16 	bl	8101c10 <HAL_GetCurrentCPUID>
 8101fe4:	4603      	mov	r3, r0
 8101fe6:	2b03      	cmp	r3, #3
 8101fe8:	d158      	bne.n	810209c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101fea:	4b2f      	ldr	r3, [pc, #188]	; (81020a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101fec:	691b      	ldr	r3, [r3, #16]
 8101fee:	4a2e      	ldr	r2, [pc, #184]	; (81020a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ff0:	f023 0301 	bic.w	r3, r3, #1
 8101ff4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101ff6:	4b2d      	ldr	r3, [pc, #180]	; (81020ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ff8:	691b      	ldr	r3, [r3, #16]
 8101ffa:	4a2c      	ldr	r2, [pc, #176]	; (81020ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ffc:	f043 0304 	orr.w	r3, r3, #4
 8102000:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102002:	f3bf 8f4f 	dsb	sy
}
 8102006:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102008:	f3bf 8f6f 	isb	sy
}
 810200c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810200e:	7afb      	ldrb	r3, [r7, #11]
 8102010:	2b01      	cmp	r3, #1
 8102012:	d101      	bne.n	8102018 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102014:	bf30      	wfi
 8102016:	e000      	b.n	810201a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102018:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810201a:	4b24      	ldr	r3, [pc, #144]	; (81020ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810201c:	691b      	ldr	r3, [r3, #16]
 810201e:	4a23      	ldr	r2, [pc, #140]	; (81020ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102020:	f023 0304 	bic.w	r3, r3, #4
 8102024:	6113      	str	r3, [r2, #16]
 8102026:	e03c      	b.n	81020a2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102028:	687b      	ldr	r3, [r7, #4]
 810202a:	2b01      	cmp	r3, #1
 810202c:	d123      	bne.n	8102076 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810202e:	f7ff fdef 	bl	8101c10 <HAL_GetCurrentCPUID>
 8102032:	4603      	mov	r3, r0
 8102034:	2b01      	cmp	r3, #1
 8102036:	d133      	bne.n	81020a0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102038:	4b1b      	ldr	r3, [pc, #108]	; (81020a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810203a:	695b      	ldr	r3, [r3, #20]
 810203c:	4a1a      	ldr	r2, [pc, #104]	; (81020a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810203e:	f023 0302 	bic.w	r3, r3, #2
 8102042:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102044:	4b19      	ldr	r3, [pc, #100]	; (81020ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102046:	691b      	ldr	r3, [r3, #16]
 8102048:	4a18      	ldr	r2, [pc, #96]	; (81020ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810204a:	f043 0304 	orr.w	r3, r3, #4
 810204e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102050:	f3bf 8f4f 	dsb	sy
}
 8102054:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102056:	f3bf 8f6f 	isb	sy
}
 810205a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810205c:	7afb      	ldrb	r3, [r7, #11]
 810205e:	2b01      	cmp	r3, #1
 8102060:	d101      	bne.n	8102066 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102062:	bf30      	wfi
 8102064:	e000      	b.n	8102068 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102066:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102068:	4b10      	ldr	r3, [pc, #64]	; (81020ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810206a:	691b      	ldr	r3, [r3, #16]
 810206c:	4a0f      	ldr	r2, [pc, #60]	; (81020ac <HAL_PWREx_EnterSTOPMode+0xf0>)
 810206e:	f023 0304 	bic.w	r3, r3, #4
 8102072:	6113      	str	r3, [r2, #16]
 8102074:	e015      	b.n	81020a2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102076:	f7ff fdcb 	bl	8101c10 <HAL_GetCurrentCPUID>
 810207a:	4603      	mov	r3, r0
 810207c:	2b03      	cmp	r3, #3
 810207e:	d106      	bne.n	810208e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102080:	4b09      	ldr	r3, [pc, #36]	; (81020a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102082:	691b      	ldr	r3, [r3, #16]
 8102084:	4a08      	ldr	r2, [pc, #32]	; (81020a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102086:	f023 0304 	bic.w	r3, r3, #4
 810208a:	6113      	str	r3, [r2, #16]
 810208c:	e009      	b.n	81020a2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810208e:	4b06      	ldr	r3, [pc, #24]	; (81020a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102090:	695b      	ldr	r3, [r3, #20]
 8102092:	4a05      	ldr	r2, [pc, #20]	; (81020a8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102094:	f023 0304 	bic.w	r3, r3, #4
 8102098:	6153      	str	r3, [r2, #20]
 810209a:	e002      	b.n	81020a2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810209c:	bf00      	nop
 810209e:	e000      	b.n	81020a2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81020a0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81020a2:	3710      	adds	r7, #16
 81020a4:	46bd      	mov	sp, r7
 81020a6:	bd80      	pop	{r7, pc}
 81020a8:	58024800 	.word	0x58024800
 81020ac:	e000ed00 	.word	0xe000ed00

081020b0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81020b0:	b580      	push	{r7, lr}
 81020b2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81020b4:	f7ff fdac 	bl	8101c10 <HAL_GetCurrentCPUID>
 81020b8:	4603      	mov	r3, r0
 81020ba:	2b03      	cmp	r3, #3
 81020bc:	d101      	bne.n	81020c2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81020be:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81020c0:	e001      	b.n	81020c6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81020c2:	bf40      	sev
    __WFE ();
 81020c4:	bf20      	wfe
}
 81020c6:	bf00      	nop
 81020c8:	bd80      	pop	{r7, pc}
	...

081020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81020cc:	b480      	push	{r7}
 81020ce:	b089      	sub	sp, #36	; 0x24
 81020d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81020d2:	4bb3      	ldr	r3, [pc, #716]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81020d4:	691b      	ldr	r3, [r3, #16]
 81020d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81020da:	2b18      	cmp	r3, #24
 81020dc:	f200 8155 	bhi.w	810238a <HAL_RCC_GetSysClockFreq+0x2be>
 81020e0:	a201      	add	r2, pc, #4	; (adr r2, 81020e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81020e6:	bf00      	nop
 81020e8:	0810214d 	.word	0x0810214d
 81020ec:	0810238b 	.word	0x0810238b
 81020f0:	0810238b 	.word	0x0810238b
 81020f4:	0810238b 	.word	0x0810238b
 81020f8:	0810238b 	.word	0x0810238b
 81020fc:	0810238b 	.word	0x0810238b
 8102100:	0810238b 	.word	0x0810238b
 8102104:	0810238b 	.word	0x0810238b
 8102108:	08102173 	.word	0x08102173
 810210c:	0810238b 	.word	0x0810238b
 8102110:	0810238b 	.word	0x0810238b
 8102114:	0810238b 	.word	0x0810238b
 8102118:	0810238b 	.word	0x0810238b
 810211c:	0810238b 	.word	0x0810238b
 8102120:	0810238b 	.word	0x0810238b
 8102124:	0810238b 	.word	0x0810238b
 8102128:	08102179 	.word	0x08102179
 810212c:	0810238b 	.word	0x0810238b
 8102130:	0810238b 	.word	0x0810238b
 8102134:	0810238b 	.word	0x0810238b
 8102138:	0810238b 	.word	0x0810238b
 810213c:	0810238b 	.word	0x0810238b
 8102140:	0810238b 	.word	0x0810238b
 8102144:	0810238b 	.word	0x0810238b
 8102148:	0810217f 	.word	0x0810217f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810214c:	4b94      	ldr	r3, [pc, #592]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810214e:	681b      	ldr	r3, [r3, #0]
 8102150:	f003 0320 	and.w	r3, r3, #32
 8102154:	2b00      	cmp	r3, #0
 8102156:	d009      	beq.n	810216c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102158:	4b91      	ldr	r3, [pc, #580]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810215a:	681b      	ldr	r3, [r3, #0]
 810215c:	08db      	lsrs	r3, r3, #3
 810215e:	f003 0303 	and.w	r3, r3, #3
 8102162:	4a90      	ldr	r2, [pc, #576]	; (81023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102164:	fa22 f303 	lsr.w	r3, r2, r3
 8102168:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810216a:	e111      	b.n	8102390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810216c:	4b8d      	ldr	r3, [pc, #564]	; (81023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810216e:	61bb      	str	r3, [r7, #24]
    break;
 8102170:	e10e      	b.n	8102390 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8102172:	4b8d      	ldr	r3, [pc, #564]	; (81023a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102174:	61bb      	str	r3, [r7, #24]
    break;
 8102176:	e10b      	b.n	8102390 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102178:	4b8c      	ldr	r3, [pc, #560]	; (81023ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 810217a:	61bb      	str	r3, [r7, #24]
    break;
 810217c:	e108      	b.n	8102390 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810217e:	4b88      	ldr	r3, [pc, #544]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102182:	f003 0303 	and.w	r3, r3, #3
 8102186:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102188:	4b85      	ldr	r3, [pc, #532]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810218a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810218c:	091b      	lsrs	r3, r3, #4
 810218e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102192:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102194:	4b82      	ldr	r3, [pc, #520]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102198:	f003 0301 	and.w	r3, r3, #1
 810219c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810219e:	4b80      	ldr	r3, [pc, #512]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81021a2:	08db      	lsrs	r3, r3, #3
 81021a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81021a8:	68fa      	ldr	r2, [r7, #12]
 81021aa:	fb02 f303 	mul.w	r3, r2, r3
 81021ae:	ee07 3a90 	vmov	s15, r3
 81021b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81021b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81021ba:	693b      	ldr	r3, [r7, #16]
 81021bc:	2b00      	cmp	r3, #0
 81021be:	f000 80e1 	beq.w	8102384 <HAL_RCC_GetSysClockFreq+0x2b8>
 81021c2:	697b      	ldr	r3, [r7, #20]
 81021c4:	2b02      	cmp	r3, #2
 81021c6:	f000 8083 	beq.w	81022d0 <HAL_RCC_GetSysClockFreq+0x204>
 81021ca:	697b      	ldr	r3, [r7, #20]
 81021cc:	2b02      	cmp	r3, #2
 81021ce:	f200 80a1 	bhi.w	8102314 <HAL_RCC_GetSysClockFreq+0x248>
 81021d2:	697b      	ldr	r3, [r7, #20]
 81021d4:	2b00      	cmp	r3, #0
 81021d6:	d003      	beq.n	81021e0 <HAL_RCC_GetSysClockFreq+0x114>
 81021d8:	697b      	ldr	r3, [r7, #20]
 81021da:	2b01      	cmp	r3, #1
 81021dc:	d056      	beq.n	810228c <HAL_RCC_GetSysClockFreq+0x1c0>
 81021de:	e099      	b.n	8102314 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81021e0:	4b6f      	ldr	r3, [pc, #444]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021e2:	681b      	ldr	r3, [r3, #0]
 81021e4:	f003 0320 	and.w	r3, r3, #32
 81021e8:	2b00      	cmp	r3, #0
 81021ea:	d02d      	beq.n	8102248 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81021ec:	4b6c      	ldr	r3, [pc, #432]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021ee:	681b      	ldr	r3, [r3, #0]
 81021f0:	08db      	lsrs	r3, r3, #3
 81021f2:	f003 0303 	and.w	r3, r3, #3
 81021f6:	4a6b      	ldr	r2, [pc, #428]	; (81023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81021f8:	fa22 f303 	lsr.w	r3, r2, r3
 81021fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	ee07 3a90 	vmov	s15, r3
 8102204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102208:	693b      	ldr	r3, [r7, #16]
 810220a:	ee07 3a90 	vmov	s15, r3
 810220e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102216:	4b62      	ldr	r3, [pc, #392]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810221a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810221e:	ee07 3a90 	vmov	s15, r3
 8102222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102226:	ed97 6a02 	vldr	s12, [r7, #8]
 810222a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810222e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810223a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810223e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102242:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102246:	e087      	b.n	8102358 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102248:	693b      	ldr	r3, [r7, #16]
 810224a:	ee07 3a90 	vmov	s15, r3
 810224e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102252:	eddf 6a58 	vldr	s13, [pc, #352]	; 81023b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810225a:	4b51      	ldr	r3, [pc, #324]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810225e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102262:	ee07 3a90 	vmov	s15, r3
 8102266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810226a:	ed97 6a02 	vldr	s12, [r7, #8]
 810226e:	eddf 5a50 	vldr	s11, [pc, #320]	; 81023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810227a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810227e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810228a:	e065      	b.n	8102358 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810228c:	693b      	ldr	r3, [r7, #16]
 810228e:	ee07 3a90 	vmov	s15, r3
 8102292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102296:	eddf 6a48 	vldr	s13, [pc, #288]	; 81023b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 810229a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810229e:	4b40      	ldr	r3, [pc, #256]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81022a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81022a6:	ee07 3a90 	vmov	s15, r3
 81022aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81022ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81022b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81022b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81022ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81022be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81022c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81022ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81022ce:	e043      	b.n	8102358 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81022d0:	693b      	ldr	r3, [r7, #16]
 81022d2:	ee07 3a90 	vmov	s15, r3
 81022d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81022da:	eddf 6a38 	vldr	s13, [pc, #224]	; 81023bc <HAL_RCC_GetSysClockFreq+0x2f0>
 81022de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81022e2:	4b2f      	ldr	r3, [pc, #188]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81022e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81022ea:	ee07 3a90 	vmov	s15, r3
 81022ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81022f2:	ed97 6a02 	vldr	s12, [r7, #8]
 81022f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81022fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81022fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810230a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810230e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102312:	e021      	b.n	8102358 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102314:	693b      	ldr	r3, [r7, #16]
 8102316:	ee07 3a90 	vmov	s15, r3
 810231a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810231e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81023b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102326:	4b1e      	ldr	r3, [pc, #120]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810232a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810232e:	ee07 3a90 	vmov	s15, r3
 8102332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102336:	ed97 6a02 	vldr	s12, [r7, #8]
 810233a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810233e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810234a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810234e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102356:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102358:	4b11      	ldr	r3, [pc, #68]	; (81023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810235c:	0a5b      	lsrs	r3, r3, #9
 810235e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102362:	3301      	adds	r3, #1
 8102364:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102366:	683b      	ldr	r3, [r7, #0]
 8102368:	ee07 3a90 	vmov	s15, r3
 810236c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102370:	edd7 6a07 	vldr	s13, [r7, #28]
 8102374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810237c:	ee17 3a90 	vmov	r3, s15
 8102380:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102382:	e005      	b.n	8102390 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102384:	2300      	movs	r3, #0
 8102386:	61bb      	str	r3, [r7, #24]
    break;
 8102388:	e002      	b.n	8102390 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810238a:	4b07      	ldr	r3, [pc, #28]	; (81023a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810238c:	61bb      	str	r3, [r7, #24]
    break;
 810238e:	bf00      	nop
  }

  return sysclockfreq;
 8102390:	69bb      	ldr	r3, [r7, #24]
}
 8102392:	4618      	mov	r0, r3
 8102394:	3724      	adds	r7, #36	; 0x24
 8102396:	46bd      	mov	sp, r7
 8102398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810239c:	4770      	bx	lr
 810239e:	bf00      	nop
 81023a0:	58024400 	.word	0x58024400
 81023a4:	03d09000 	.word	0x03d09000
 81023a8:	003d0900 	.word	0x003d0900
 81023ac:	007a1200 	.word	0x007a1200
 81023b0:	46000000 	.word	0x46000000
 81023b4:	4c742400 	.word	0x4c742400
 81023b8:	4a742400 	.word	0x4a742400
 81023bc:	4af42400 	.word	0x4af42400

081023c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81023c0:	b580      	push	{r7, lr}
 81023c2:	b082      	sub	sp, #8
 81023c4:	af00      	add	r7, sp, #0
 81023c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81023c8:	687b      	ldr	r3, [r7, #4]
 81023ca:	2b00      	cmp	r3, #0
 81023cc:	d101      	bne.n	81023d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81023ce:	2301      	movs	r3, #1
 81023d0:	e049      	b.n	8102466 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81023d8:	b2db      	uxtb	r3, r3
 81023da:	2b00      	cmp	r3, #0
 81023dc:	d106      	bne.n	81023ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	2200      	movs	r2, #0
 81023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81023e6:	6878      	ldr	r0, [r7, #4]
 81023e8:	f7ff f87e 	bl	81014e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	2202      	movs	r2, #2
 81023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81023f4:	687b      	ldr	r3, [r7, #4]
 81023f6:	681a      	ldr	r2, [r3, #0]
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	3304      	adds	r3, #4
 81023fc:	4619      	mov	r1, r3
 81023fe:	4610      	mov	r0, r2
 8102400:	f001 f848 	bl	8103494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8102404:	687b      	ldr	r3, [r7, #4]
 8102406:	2201      	movs	r2, #1
 8102408:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	2201      	movs	r2, #1
 8102410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8102414:	687b      	ldr	r3, [r7, #4]
 8102416:	2201      	movs	r2, #1
 8102418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	2201      	movs	r2, #1
 8102420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8102424:	687b      	ldr	r3, [r7, #4]
 8102426:	2201      	movs	r2, #1
 8102428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	2201      	movs	r2, #1
 8102430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	2201      	movs	r2, #1
 8102438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	2201      	movs	r2, #1
 8102440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	2201      	movs	r2, #1
 8102448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	2201      	movs	r2, #1
 8102450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	2201      	movs	r2, #1
 8102458:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	2201      	movs	r2, #1
 8102460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8102464:	2300      	movs	r3, #0
}
 8102466:	4618      	mov	r0, r3
 8102468:	3708      	adds	r7, #8
 810246a:	46bd      	mov	sp, r7
 810246c:	bd80      	pop	{r7, pc}

0810246e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 810246e:	b580      	push	{r7, lr}
 8102470:	b082      	sub	sp, #8
 8102472:	af00      	add	r7, sp, #0
 8102474:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8102476:	687b      	ldr	r3, [r7, #4]
 8102478:	2b00      	cmp	r3, #0
 810247a:	d101      	bne.n	8102480 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810247c:	2301      	movs	r3, #1
 810247e:	e049      	b.n	8102514 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8102486:	b2db      	uxtb	r3, r3
 8102488:	2b00      	cmp	r3, #0
 810248a:	d106      	bne.n	810249a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	2200      	movs	r2, #0
 8102490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8102494:	6878      	ldr	r0, [r7, #4]
 8102496:	f000 f841 	bl	810251c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	2202      	movs	r2, #2
 810249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	681a      	ldr	r2, [r3, #0]
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	3304      	adds	r3, #4
 81024aa:	4619      	mov	r1, r3
 81024ac:	4610      	mov	r0, r2
 81024ae:	f000 fff1 	bl	8103494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81024b2:	687b      	ldr	r3, [r7, #4]
 81024b4:	2201      	movs	r2, #1
 81024b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	2201      	movs	r2, #1
 81024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81024c2:	687b      	ldr	r3, [r7, #4]
 81024c4:	2201      	movs	r2, #1
 81024c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	2201      	movs	r2, #1
 81024ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	2201      	movs	r2, #1
 81024d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	2201      	movs	r2, #1
 81024de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	2201      	movs	r2, #1
 81024e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81024ea:	687b      	ldr	r3, [r7, #4]
 81024ec:	2201      	movs	r2, #1
 81024ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81024f2:	687b      	ldr	r3, [r7, #4]
 81024f4:	2201      	movs	r2, #1
 81024f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	2201      	movs	r2, #1
 81024fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	2201      	movs	r2, #1
 8102506:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	2201      	movs	r2, #1
 810250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8102512:	2300      	movs	r3, #0
}
 8102514:	4618      	mov	r0, r3
 8102516:	3708      	adds	r7, #8
 8102518:	46bd      	mov	sp, r7
 810251a:	bd80      	pop	{r7, pc}

0810251c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810251c:	b480      	push	{r7}
 810251e:	b083      	sub	sp, #12
 8102520:	af00      	add	r7, sp, #0
 8102522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8102524:	bf00      	nop
 8102526:	370c      	adds	r7, #12
 8102528:	46bd      	mov	sp, r7
 810252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810252e:	4770      	bx	lr

08102530 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8102530:	b580      	push	{r7, lr}
 8102532:	b084      	sub	sp, #16
 8102534:	af00      	add	r7, sp, #0
 8102536:	6078      	str	r0, [r7, #4]
 8102538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810253a:	683b      	ldr	r3, [r7, #0]
 810253c:	2b00      	cmp	r3, #0
 810253e:	d109      	bne.n	8102554 <HAL_TIM_PWM_Start+0x24>
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8102546:	b2db      	uxtb	r3, r3
 8102548:	2b01      	cmp	r3, #1
 810254a:	bf14      	ite	ne
 810254c:	2301      	movne	r3, #1
 810254e:	2300      	moveq	r3, #0
 8102550:	b2db      	uxtb	r3, r3
 8102552:	e03c      	b.n	81025ce <HAL_TIM_PWM_Start+0x9e>
 8102554:	683b      	ldr	r3, [r7, #0]
 8102556:	2b04      	cmp	r3, #4
 8102558:	d109      	bne.n	810256e <HAL_TIM_PWM_Start+0x3e>
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8102560:	b2db      	uxtb	r3, r3
 8102562:	2b01      	cmp	r3, #1
 8102564:	bf14      	ite	ne
 8102566:	2301      	movne	r3, #1
 8102568:	2300      	moveq	r3, #0
 810256a:	b2db      	uxtb	r3, r3
 810256c:	e02f      	b.n	81025ce <HAL_TIM_PWM_Start+0x9e>
 810256e:	683b      	ldr	r3, [r7, #0]
 8102570:	2b08      	cmp	r3, #8
 8102572:	d109      	bne.n	8102588 <HAL_TIM_PWM_Start+0x58>
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810257a:	b2db      	uxtb	r3, r3
 810257c:	2b01      	cmp	r3, #1
 810257e:	bf14      	ite	ne
 8102580:	2301      	movne	r3, #1
 8102582:	2300      	moveq	r3, #0
 8102584:	b2db      	uxtb	r3, r3
 8102586:	e022      	b.n	81025ce <HAL_TIM_PWM_Start+0x9e>
 8102588:	683b      	ldr	r3, [r7, #0]
 810258a:	2b0c      	cmp	r3, #12
 810258c:	d109      	bne.n	81025a2 <HAL_TIM_PWM_Start+0x72>
 810258e:	687b      	ldr	r3, [r7, #4]
 8102590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102594:	b2db      	uxtb	r3, r3
 8102596:	2b01      	cmp	r3, #1
 8102598:	bf14      	ite	ne
 810259a:	2301      	movne	r3, #1
 810259c:	2300      	moveq	r3, #0
 810259e:	b2db      	uxtb	r3, r3
 81025a0:	e015      	b.n	81025ce <HAL_TIM_PWM_Start+0x9e>
 81025a2:	683b      	ldr	r3, [r7, #0]
 81025a4:	2b10      	cmp	r3, #16
 81025a6:	d109      	bne.n	81025bc <HAL_TIM_PWM_Start+0x8c>
 81025a8:	687b      	ldr	r3, [r7, #4]
 81025aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81025ae:	b2db      	uxtb	r3, r3
 81025b0:	2b01      	cmp	r3, #1
 81025b2:	bf14      	ite	ne
 81025b4:	2301      	movne	r3, #1
 81025b6:	2300      	moveq	r3, #0
 81025b8:	b2db      	uxtb	r3, r3
 81025ba:	e008      	b.n	81025ce <HAL_TIM_PWM_Start+0x9e>
 81025bc:	687b      	ldr	r3, [r7, #4]
 81025be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81025c2:	b2db      	uxtb	r3, r3
 81025c4:	2b01      	cmp	r3, #1
 81025c6:	bf14      	ite	ne
 81025c8:	2301      	movne	r3, #1
 81025ca:	2300      	moveq	r3, #0
 81025cc:	b2db      	uxtb	r3, r3
 81025ce:	2b00      	cmp	r3, #0
 81025d0:	d001      	beq.n	81025d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81025d2:	2301      	movs	r3, #1
 81025d4:	e0a1      	b.n	810271a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81025d6:	683b      	ldr	r3, [r7, #0]
 81025d8:	2b00      	cmp	r3, #0
 81025da:	d104      	bne.n	81025e6 <HAL_TIM_PWM_Start+0xb6>
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	2202      	movs	r2, #2
 81025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81025e4:	e023      	b.n	810262e <HAL_TIM_PWM_Start+0xfe>
 81025e6:	683b      	ldr	r3, [r7, #0]
 81025e8:	2b04      	cmp	r3, #4
 81025ea:	d104      	bne.n	81025f6 <HAL_TIM_PWM_Start+0xc6>
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	2202      	movs	r2, #2
 81025f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81025f4:	e01b      	b.n	810262e <HAL_TIM_PWM_Start+0xfe>
 81025f6:	683b      	ldr	r3, [r7, #0]
 81025f8:	2b08      	cmp	r3, #8
 81025fa:	d104      	bne.n	8102606 <HAL_TIM_PWM_Start+0xd6>
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	2202      	movs	r2, #2
 8102600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8102604:	e013      	b.n	810262e <HAL_TIM_PWM_Start+0xfe>
 8102606:	683b      	ldr	r3, [r7, #0]
 8102608:	2b0c      	cmp	r3, #12
 810260a:	d104      	bne.n	8102616 <HAL_TIM_PWM_Start+0xe6>
 810260c:	687b      	ldr	r3, [r7, #4]
 810260e:	2202      	movs	r2, #2
 8102610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8102614:	e00b      	b.n	810262e <HAL_TIM_PWM_Start+0xfe>
 8102616:	683b      	ldr	r3, [r7, #0]
 8102618:	2b10      	cmp	r3, #16
 810261a:	d104      	bne.n	8102626 <HAL_TIM_PWM_Start+0xf6>
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	2202      	movs	r2, #2
 8102620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8102624:	e003      	b.n	810262e <HAL_TIM_PWM_Start+0xfe>
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	2202      	movs	r2, #2
 810262a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	681b      	ldr	r3, [r3, #0]
 8102632:	2201      	movs	r2, #1
 8102634:	6839      	ldr	r1, [r7, #0]
 8102636:	4618      	mov	r0, r3
 8102638:	f001 fc62 	bl	8103f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	681b      	ldr	r3, [r3, #0]
 8102640:	4a38      	ldr	r2, [pc, #224]	; (8102724 <HAL_TIM_PWM_Start+0x1f4>)
 8102642:	4293      	cmp	r3, r2
 8102644:	d013      	beq.n	810266e <HAL_TIM_PWM_Start+0x13e>
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	681b      	ldr	r3, [r3, #0]
 810264a:	4a37      	ldr	r2, [pc, #220]	; (8102728 <HAL_TIM_PWM_Start+0x1f8>)
 810264c:	4293      	cmp	r3, r2
 810264e:	d00e      	beq.n	810266e <HAL_TIM_PWM_Start+0x13e>
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	681b      	ldr	r3, [r3, #0]
 8102654:	4a35      	ldr	r2, [pc, #212]	; (810272c <HAL_TIM_PWM_Start+0x1fc>)
 8102656:	4293      	cmp	r3, r2
 8102658:	d009      	beq.n	810266e <HAL_TIM_PWM_Start+0x13e>
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	681b      	ldr	r3, [r3, #0]
 810265e:	4a34      	ldr	r2, [pc, #208]	; (8102730 <HAL_TIM_PWM_Start+0x200>)
 8102660:	4293      	cmp	r3, r2
 8102662:	d004      	beq.n	810266e <HAL_TIM_PWM_Start+0x13e>
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	4a32      	ldr	r2, [pc, #200]	; (8102734 <HAL_TIM_PWM_Start+0x204>)
 810266a:	4293      	cmp	r3, r2
 810266c:	d101      	bne.n	8102672 <HAL_TIM_PWM_Start+0x142>
 810266e:	2301      	movs	r3, #1
 8102670:	e000      	b.n	8102674 <HAL_TIM_PWM_Start+0x144>
 8102672:	2300      	movs	r3, #0
 8102674:	2b00      	cmp	r3, #0
 8102676:	d007      	beq.n	8102688 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8102678:	687b      	ldr	r3, [r7, #4]
 810267a:	681b      	ldr	r3, [r3, #0]
 810267c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	681b      	ldr	r3, [r3, #0]
 8102682:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8102686:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8102688:	687b      	ldr	r3, [r7, #4]
 810268a:	681b      	ldr	r3, [r3, #0]
 810268c:	4a25      	ldr	r2, [pc, #148]	; (8102724 <HAL_TIM_PWM_Start+0x1f4>)
 810268e:	4293      	cmp	r3, r2
 8102690:	d022      	beq.n	81026d8 <HAL_TIM_PWM_Start+0x1a8>
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810269a:	d01d      	beq.n	81026d8 <HAL_TIM_PWM_Start+0x1a8>
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	4a25      	ldr	r2, [pc, #148]	; (8102738 <HAL_TIM_PWM_Start+0x208>)
 81026a2:	4293      	cmp	r3, r2
 81026a4:	d018      	beq.n	81026d8 <HAL_TIM_PWM_Start+0x1a8>
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	4a24      	ldr	r2, [pc, #144]	; (810273c <HAL_TIM_PWM_Start+0x20c>)
 81026ac:	4293      	cmp	r3, r2
 81026ae:	d013      	beq.n	81026d8 <HAL_TIM_PWM_Start+0x1a8>
 81026b0:	687b      	ldr	r3, [r7, #4]
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	4a22      	ldr	r2, [pc, #136]	; (8102740 <HAL_TIM_PWM_Start+0x210>)
 81026b6:	4293      	cmp	r3, r2
 81026b8:	d00e      	beq.n	81026d8 <HAL_TIM_PWM_Start+0x1a8>
 81026ba:	687b      	ldr	r3, [r7, #4]
 81026bc:	681b      	ldr	r3, [r3, #0]
 81026be:	4a1a      	ldr	r2, [pc, #104]	; (8102728 <HAL_TIM_PWM_Start+0x1f8>)
 81026c0:	4293      	cmp	r3, r2
 81026c2:	d009      	beq.n	81026d8 <HAL_TIM_PWM_Start+0x1a8>
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	4a1e      	ldr	r2, [pc, #120]	; (8102744 <HAL_TIM_PWM_Start+0x214>)
 81026ca:	4293      	cmp	r3, r2
 81026cc:	d004      	beq.n	81026d8 <HAL_TIM_PWM_Start+0x1a8>
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	681b      	ldr	r3, [r3, #0]
 81026d2:	4a16      	ldr	r2, [pc, #88]	; (810272c <HAL_TIM_PWM_Start+0x1fc>)
 81026d4:	4293      	cmp	r3, r2
 81026d6:	d115      	bne.n	8102704 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81026d8:	687b      	ldr	r3, [r7, #4]
 81026da:	681b      	ldr	r3, [r3, #0]
 81026dc:	689a      	ldr	r2, [r3, #8]
 81026de:	4b1a      	ldr	r3, [pc, #104]	; (8102748 <HAL_TIM_PWM_Start+0x218>)
 81026e0:	4013      	ands	r3, r2
 81026e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81026e4:	68fb      	ldr	r3, [r7, #12]
 81026e6:	2b06      	cmp	r3, #6
 81026e8:	d015      	beq.n	8102716 <HAL_TIM_PWM_Start+0x1e6>
 81026ea:	68fb      	ldr	r3, [r7, #12]
 81026ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81026f0:	d011      	beq.n	8102716 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 81026f2:	687b      	ldr	r3, [r7, #4]
 81026f4:	681b      	ldr	r3, [r3, #0]
 81026f6:	681a      	ldr	r2, [r3, #0]
 81026f8:	687b      	ldr	r3, [r7, #4]
 81026fa:	681b      	ldr	r3, [r3, #0]
 81026fc:	f042 0201 	orr.w	r2, r2, #1
 8102700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102702:	e008      	b.n	8102716 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	681b      	ldr	r3, [r3, #0]
 8102708:	681a      	ldr	r2, [r3, #0]
 810270a:	687b      	ldr	r3, [r7, #4]
 810270c:	681b      	ldr	r3, [r3, #0]
 810270e:	f042 0201 	orr.w	r2, r2, #1
 8102712:	601a      	str	r2, [r3, #0]
 8102714:	e000      	b.n	8102718 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102716:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8102718:	2300      	movs	r3, #0
}
 810271a:	4618      	mov	r0, r3
 810271c:	3710      	adds	r7, #16
 810271e:	46bd      	mov	sp, r7
 8102720:	bd80      	pop	{r7, pc}
 8102722:	bf00      	nop
 8102724:	40010000 	.word	0x40010000
 8102728:	40010400 	.word	0x40010400
 810272c:	40014000 	.word	0x40014000
 8102730:	40014400 	.word	0x40014400
 8102734:	40014800 	.word	0x40014800
 8102738:	40000400 	.word	0x40000400
 810273c:	40000800 	.word	0x40000800
 8102740:	40000c00 	.word	0x40000c00
 8102744:	40001800 	.word	0x40001800
 8102748:	00010007 	.word	0x00010007

0810274c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 810274c:	b580      	push	{r7, lr}
 810274e:	b082      	sub	sp, #8
 8102750:	af00      	add	r7, sp, #0
 8102752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	2b00      	cmp	r3, #0
 8102758:	d101      	bne.n	810275e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 810275a:	2301      	movs	r3, #1
 810275c:	e049      	b.n	81027f2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8102764:	b2db      	uxtb	r3, r3
 8102766:	2b00      	cmp	r3, #0
 8102768:	d106      	bne.n	8102778 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810276a:	687b      	ldr	r3, [r7, #4]
 810276c:	2200      	movs	r2, #0
 810276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8102772:	6878      	ldr	r0, [r7, #4]
 8102774:	f000 f841 	bl	81027fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	2202      	movs	r2, #2
 810277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	681a      	ldr	r2, [r3, #0]
 8102784:	687b      	ldr	r3, [r7, #4]
 8102786:	3304      	adds	r3, #4
 8102788:	4619      	mov	r1, r3
 810278a:	4610      	mov	r0, r2
 810278c:	f000 fe82 	bl	8103494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	2201      	movs	r2, #1
 8102794:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	2201      	movs	r2, #1
 810279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	2201      	movs	r2, #1
 81027a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	2201      	movs	r2, #1
 81027ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	2201      	movs	r2, #1
 81027b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	2201      	movs	r2, #1
 81027bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	2201      	movs	r2, #1
 81027c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81027c8:	687b      	ldr	r3, [r7, #4]
 81027ca:	2201      	movs	r2, #1
 81027cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81027d0:	687b      	ldr	r3, [r7, #4]
 81027d2:	2201      	movs	r2, #1
 81027d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	2201      	movs	r2, #1
 81027dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	2201      	movs	r2, #1
 81027e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	2201      	movs	r2, #1
 81027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81027f0:	2300      	movs	r3, #0
}
 81027f2:	4618      	mov	r0, r3
 81027f4:	3708      	adds	r7, #8
 81027f6:	46bd      	mov	sp, r7
 81027f8:	bd80      	pop	{r7, pc}

081027fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 81027fa:	b480      	push	{r7}
 81027fc:	b083      	sub	sp, #12
 81027fe:	af00      	add	r7, sp, #0
 8102800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8102802:	bf00      	nop
 8102804:	370c      	adds	r7, #12
 8102806:	46bd      	mov	sp, r7
 8102808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810280c:	4770      	bx	lr
	...

08102810 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8102810:	b580      	push	{r7, lr}
 8102812:	b084      	sub	sp, #16
 8102814:	af00      	add	r7, sp, #0
 8102816:	6078      	str	r0, [r7, #4]
 8102818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810281a:	2300      	movs	r3, #0
 810281c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 810281e:	683b      	ldr	r3, [r7, #0]
 8102820:	2b00      	cmp	r3, #0
 8102822:	d104      	bne.n	810282e <HAL_TIM_IC_Start_IT+0x1e>
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810282a:	b2db      	uxtb	r3, r3
 810282c:	e023      	b.n	8102876 <HAL_TIM_IC_Start_IT+0x66>
 810282e:	683b      	ldr	r3, [r7, #0]
 8102830:	2b04      	cmp	r3, #4
 8102832:	d104      	bne.n	810283e <HAL_TIM_IC_Start_IT+0x2e>
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810283a:	b2db      	uxtb	r3, r3
 810283c:	e01b      	b.n	8102876 <HAL_TIM_IC_Start_IT+0x66>
 810283e:	683b      	ldr	r3, [r7, #0]
 8102840:	2b08      	cmp	r3, #8
 8102842:	d104      	bne.n	810284e <HAL_TIM_IC_Start_IT+0x3e>
 8102844:	687b      	ldr	r3, [r7, #4]
 8102846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810284a:	b2db      	uxtb	r3, r3
 810284c:	e013      	b.n	8102876 <HAL_TIM_IC_Start_IT+0x66>
 810284e:	683b      	ldr	r3, [r7, #0]
 8102850:	2b0c      	cmp	r3, #12
 8102852:	d104      	bne.n	810285e <HAL_TIM_IC_Start_IT+0x4e>
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810285a:	b2db      	uxtb	r3, r3
 810285c:	e00b      	b.n	8102876 <HAL_TIM_IC_Start_IT+0x66>
 810285e:	683b      	ldr	r3, [r7, #0]
 8102860:	2b10      	cmp	r3, #16
 8102862:	d104      	bne.n	810286e <HAL_TIM_IC_Start_IT+0x5e>
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810286a:	b2db      	uxtb	r3, r3
 810286c:	e003      	b.n	8102876 <HAL_TIM_IC_Start_IT+0x66>
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8102874:	b2db      	uxtb	r3, r3
 8102876:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8102878:	683b      	ldr	r3, [r7, #0]
 810287a:	2b00      	cmp	r3, #0
 810287c:	d104      	bne.n	8102888 <HAL_TIM_IC_Start_IT+0x78>
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102884:	b2db      	uxtb	r3, r3
 8102886:	e013      	b.n	81028b0 <HAL_TIM_IC_Start_IT+0xa0>
 8102888:	683b      	ldr	r3, [r7, #0]
 810288a:	2b04      	cmp	r3, #4
 810288c:	d104      	bne.n	8102898 <HAL_TIM_IC_Start_IT+0x88>
 810288e:	687b      	ldr	r3, [r7, #4]
 8102890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102894:	b2db      	uxtb	r3, r3
 8102896:	e00b      	b.n	81028b0 <HAL_TIM_IC_Start_IT+0xa0>
 8102898:	683b      	ldr	r3, [r7, #0]
 810289a:	2b08      	cmp	r3, #8
 810289c:	d104      	bne.n	81028a8 <HAL_TIM_IC_Start_IT+0x98>
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 81028a4:	b2db      	uxtb	r3, r3
 81028a6:	e003      	b.n	81028b0 <HAL_TIM_IC_Start_IT+0xa0>
 81028a8:	687b      	ldr	r3, [r7, #4]
 81028aa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 81028ae:	b2db      	uxtb	r3, r3
 81028b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 81028b2:	7bbb      	ldrb	r3, [r7, #14]
 81028b4:	2b01      	cmp	r3, #1
 81028b6:	d102      	bne.n	81028be <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 81028b8:	7b7b      	ldrb	r3, [r7, #13]
 81028ba:	2b01      	cmp	r3, #1
 81028bc:	d001      	beq.n	81028c2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 81028be:	2301      	movs	r3, #1
 81028c0:	e0e2      	b.n	8102a88 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81028c2:	683b      	ldr	r3, [r7, #0]
 81028c4:	2b00      	cmp	r3, #0
 81028c6:	d104      	bne.n	81028d2 <HAL_TIM_IC_Start_IT+0xc2>
 81028c8:	687b      	ldr	r3, [r7, #4]
 81028ca:	2202      	movs	r2, #2
 81028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81028d0:	e023      	b.n	810291a <HAL_TIM_IC_Start_IT+0x10a>
 81028d2:	683b      	ldr	r3, [r7, #0]
 81028d4:	2b04      	cmp	r3, #4
 81028d6:	d104      	bne.n	81028e2 <HAL_TIM_IC_Start_IT+0xd2>
 81028d8:	687b      	ldr	r3, [r7, #4]
 81028da:	2202      	movs	r2, #2
 81028dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81028e0:	e01b      	b.n	810291a <HAL_TIM_IC_Start_IT+0x10a>
 81028e2:	683b      	ldr	r3, [r7, #0]
 81028e4:	2b08      	cmp	r3, #8
 81028e6:	d104      	bne.n	81028f2 <HAL_TIM_IC_Start_IT+0xe2>
 81028e8:	687b      	ldr	r3, [r7, #4]
 81028ea:	2202      	movs	r2, #2
 81028ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81028f0:	e013      	b.n	810291a <HAL_TIM_IC_Start_IT+0x10a>
 81028f2:	683b      	ldr	r3, [r7, #0]
 81028f4:	2b0c      	cmp	r3, #12
 81028f6:	d104      	bne.n	8102902 <HAL_TIM_IC_Start_IT+0xf2>
 81028f8:	687b      	ldr	r3, [r7, #4]
 81028fa:	2202      	movs	r2, #2
 81028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8102900:	e00b      	b.n	810291a <HAL_TIM_IC_Start_IT+0x10a>
 8102902:	683b      	ldr	r3, [r7, #0]
 8102904:	2b10      	cmp	r3, #16
 8102906:	d104      	bne.n	8102912 <HAL_TIM_IC_Start_IT+0x102>
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	2202      	movs	r2, #2
 810290c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8102910:	e003      	b.n	810291a <HAL_TIM_IC_Start_IT+0x10a>
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	2202      	movs	r2, #2
 8102916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810291a:	683b      	ldr	r3, [r7, #0]
 810291c:	2b00      	cmp	r3, #0
 810291e:	d104      	bne.n	810292a <HAL_TIM_IC_Start_IT+0x11a>
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	2202      	movs	r2, #2
 8102924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102928:	e013      	b.n	8102952 <HAL_TIM_IC_Start_IT+0x142>
 810292a:	683b      	ldr	r3, [r7, #0]
 810292c:	2b04      	cmp	r3, #4
 810292e:	d104      	bne.n	810293a <HAL_TIM_IC_Start_IT+0x12a>
 8102930:	687b      	ldr	r3, [r7, #4]
 8102932:	2202      	movs	r2, #2
 8102934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102938:	e00b      	b.n	8102952 <HAL_TIM_IC_Start_IT+0x142>
 810293a:	683b      	ldr	r3, [r7, #0]
 810293c:	2b08      	cmp	r3, #8
 810293e:	d104      	bne.n	810294a <HAL_TIM_IC_Start_IT+0x13a>
 8102940:	687b      	ldr	r3, [r7, #4]
 8102942:	2202      	movs	r2, #2
 8102944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8102948:	e003      	b.n	8102952 <HAL_TIM_IC_Start_IT+0x142>
 810294a:	687b      	ldr	r3, [r7, #4]
 810294c:	2202      	movs	r2, #2
 810294e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8102952:	683b      	ldr	r3, [r7, #0]
 8102954:	2b0c      	cmp	r3, #12
 8102956:	d841      	bhi.n	81029dc <HAL_TIM_IC_Start_IT+0x1cc>
 8102958:	a201      	add	r2, pc, #4	; (adr r2, 8102960 <HAL_TIM_IC_Start_IT+0x150>)
 810295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810295e:	bf00      	nop
 8102960:	08102995 	.word	0x08102995
 8102964:	081029dd 	.word	0x081029dd
 8102968:	081029dd 	.word	0x081029dd
 810296c:	081029dd 	.word	0x081029dd
 8102970:	081029a7 	.word	0x081029a7
 8102974:	081029dd 	.word	0x081029dd
 8102978:	081029dd 	.word	0x081029dd
 810297c:	081029dd 	.word	0x081029dd
 8102980:	081029b9 	.word	0x081029b9
 8102984:	081029dd 	.word	0x081029dd
 8102988:	081029dd 	.word	0x081029dd
 810298c:	081029dd 	.word	0x081029dd
 8102990:	081029cb 	.word	0x081029cb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8102994:	687b      	ldr	r3, [r7, #4]
 8102996:	681b      	ldr	r3, [r3, #0]
 8102998:	68da      	ldr	r2, [r3, #12]
 810299a:	687b      	ldr	r3, [r7, #4]
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	f042 0202 	orr.w	r2, r2, #2
 81029a2:	60da      	str	r2, [r3, #12]
      break;
 81029a4:	e01d      	b.n	81029e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	681b      	ldr	r3, [r3, #0]
 81029aa:	68da      	ldr	r2, [r3, #12]
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	f042 0204 	orr.w	r2, r2, #4
 81029b4:	60da      	str	r2, [r3, #12]
      break;
 81029b6:	e014      	b.n	81029e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 81029b8:	687b      	ldr	r3, [r7, #4]
 81029ba:	681b      	ldr	r3, [r3, #0]
 81029bc:	68da      	ldr	r2, [r3, #12]
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	681b      	ldr	r3, [r3, #0]
 81029c2:	f042 0208 	orr.w	r2, r2, #8
 81029c6:	60da      	str	r2, [r3, #12]
      break;
 81029c8:	e00b      	b.n	81029e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	68da      	ldr	r2, [r3, #12]
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	681b      	ldr	r3, [r3, #0]
 81029d4:	f042 0210 	orr.w	r2, r2, #16
 81029d8:	60da      	str	r2, [r3, #12]
      break;
 81029da:	e002      	b.n	81029e2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 81029dc:	2301      	movs	r3, #1
 81029de:	73fb      	strb	r3, [r7, #15]
      break;
 81029e0:	bf00      	nop
  }

  if (status == HAL_OK)
 81029e2:	7bfb      	ldrb	r3, [r7, #15]
 81029e4:	2b00      	cmp	r3, #0
 81029e6:	d14e      	bne.n	8102a86 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81029e8:	687b      	ldr	r3, [r7, #4]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	2201      	movs	r2, #1
 81029ee:	6839      	ldr	r1, [r7, #0]
 81029f0:	4618      	mov	r0, r3
 81029f2:	f001 fa85 	bl	8103f00 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	681b      	ldr	r3, [r3, #0]
 81029fa:	4a25      	ldr	r2, [pc, #148]	; (8102a90 <HAL_TIM_IC_Start_IT+0x280>)
 81029fc:	4293      	cmp	r3, r2
 81029fe:	d022      	beq.n	8102a46 <HAL_TIM_IC_Start_IT+0x236>
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	681b      	ldr	r3, [r3, #0]
 8102a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102a08:	d01d      	beq.n	8102a46 <HAL_TIM_IC_Start_IT+0x236>
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	681b      	ldr	r3, [r3, #0]
 8102a0e:	4a21      	ldr	r2, [pc, #132]	; (8102a94 <HAL_TIM_IC_Start_IT+0x284>)
 8102a10:	4293      	cmp	r3, r2
 8102a12:	d018      	beq.n	8102a46 <HAL_TIM_IC_Start_IT+0x236>
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	681b      	ldr	r3, [r3, #0]
 8102a18:	4a1f      	ldr	r2, [pc, #124]	; (8102a98 <HAL_TIM_IC_Start_IT+0x288>)
 8102a1a:	4293      	cmp	r3, r2
 8102a1c:	d013      	beq.n	8102a46 <HAL_TIM_IC_Start_IT+0x236>
 8102a1e:	687b      	ldr	r3, [r7, #4]
 8102a20:	681b      	ldr	r3, [r3, #0]
 8102a22:	4a1e      	ldr	r2, [pc, #120]	; (8102a9c <HAL_TIM_IC_Start_IT+0x28c>)
 8102a24:	4293      	cmp	r3, r2
 8102a26:	d00e      	beq.n	8102a46 <HAL_TIM_IC_Start_IT+0x236>
 8102a28:	687b      	ldr	r3, [r7, #4]
 8102a2a:	681b      	ldr	r3, [r3, #0]
 8102a2c:	4a1c      	ldr	r2, [pc, #112]	; (8102aa0 <HAL_TIM_IC_Start_IT+0x290>)
 8102a2e:	4293      	cmp	r3, r2
 8102a30:	d009      	beq.n	8102a46 <HAL_TIM_IC_Start_IT+0x236>
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	681b      	ldr	r3, [r3, #0]
 8102a36:	4a1b      	ldr	r2, [pc, #108]	; (8102aa4 <HAL_TIM_IC_Start_IT+0x294>)
 8102a38:	4293      	cmp	r3, r2
 8102a3a:	d004      	beq.n	8102a46 <HAL_TIM_IC_Start_IT+0x236>
 8102a3c:	687b      	ldr	r3, [r7, #4]
 8102a3e:	681b      	ldr	r3, [r3, #0]
 8102a40:	4a19      	ldr	r2, [pc, #100]	; (8102aa8 <HAL_TIM_IC_Start_IT+0x298>)
 8102a42:	4293      	cmp	r3, r2
 8102a44:	d115      	bne.n	8102a72 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8102a46:	687b      	ldr	r3, [r7, #4]
 8102a48:	681b      	ldr	r3, [r3, #0]
 8102a4a:	689a      	ldr	r2, [r3, #8]
 8102a4c:	4b17      	ldr	r3, [pc, #92]	; (8102aac <HAL_TIM_IC_Start_IT+0x29c>)
 8102a4e:	4013      	ands	r3, r2
 8102a50:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102a52:	68bb      	ldr	r3, [r7, #8]
 8102a54:	2b06      	cmp	r3, #6
 8102a56:	d015      	beq.n	8102a84 <HAL_TIM_IC_Start_IT+0x274>
 8102a58:	68bb      	ldr	r3, [r7, #8]
 8102a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102a5e:	d011      	beq.n	8102a84 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	681b      	ldr	r3, [r3, #0]
 8102a64:	681a      	ldr	r2, [r3, #0]
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	681b      	ldr	r3, [r3, #0]
 8102a6a:	f042 0201 	orr.w	r2, r2, #1
 8102a6e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102a70:	e008      	b.n	8102a84 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	681b      	ldr	r3, [r3, #0]
 8102a76:	681a      	ldr	r2, [r3, #0]
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	681b      	ldr	r3, [r3, #0]
 8102a7c:	f042 0201 	orr.w	r2, r2, #1
 8102a80:	601a      	str	r2, [r3, #0]
 8102a82:	e000      	b.n	8102a86 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102a84:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8102a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8102a88:	4618      	mov	r0, r3
 8102a8a:	3710      	adds	r7, #16
 8102a8c:	46bd      	mov	sp, r7
 8102a8e:	bd80      	pop	{r7, pc}
 8102a90:	40010000 	.word	0x40010000
 8102a94:	40000400 	.word	0x40000400
 8102a98:	40000800 	.word	0x40000800
 8102a9c:	40000c00 	.word	0x40000c00
 8102aa0:	40010400 	.word	0x40010400
 8102aa4:	40001800 	.word	0x40001800
 8102aa8:	40014000 	.word	0x40014000
 8102aac:	00010007 	.word	0x00010007

08102ab0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8102ab0:	b580      	push	{r7, lr}
 8102ab2:	b084      	sub	sp, #16
 8102ab4:	af00      	add	r7, sp, #0
 8102ab6:	6078      	str	r0, [r7, #4]
 8102ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102aba:	2300      	movs	r3, #0
 8102abc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8102abe:	683b      	ldr	r3, [r7, #0]
 8102ac0:	2b0c      	cmp	r3, #12
 8102ac2:	d841      	bhi.n	8102b48 <HAL_TIM_IC_Stop_IT+0x98>
 8102ac4:	a201      	add	r2, pc, #4	; (adr r2, 8102acc <HAL_TIM_IC_Stop_IT+0x1c>)
 8102ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102aca:	bf00      	nop
 8102acc:	08102b01 	.word	0x08102b01
 8102ad0:	08102b49 	.word	0x08102b49
 8102ad4:	08102b49 	.word	0x08102b49
 8102ad8:	08102b49 	.word	0x08102b49
 8102adc:	08102b13 	.word	0x08102b13
 8102ae0:	08102b49 	.word	0x08102b49
 8102ae4:	08102b49 	.word	0x08102b49
 8102ae8:	08102b49 	.word	0x08102b49
 8102aec:	08102b25 	.word	0x08102b25
 8102af0:	08102b49 	.word	0x08102b49
 8102af4:	08102b49 	.word	0x08102b49
 8102af8:	08102b49 	.word	0x08102b49
 8102afc:	08102b37 	.word	0x08102b37
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8102b00:	687b      	ldr	r3, [r7, #4]
 8102b02:	681b      	ldr	r3, [r3, #0]
 8102b04:	68da      	ldr	r2, [r3, #12]
 8102b06:	687b      	ldr	r3, [r7, #4]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	f022 0202 	bic.w	r2, r2, #2
 8102b0e:	60da      	str	r2, [r3, #12]
      break;
 8102b10:	e01d      	b.n	8102b4e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8102b12:	687b      	ldr	r3, [r7, #4]
 8102b14:	681b      	ldr	r3, [r3, #0]
 8102b16:	68da      	ldr	r2, [r3, #12]
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	681b      	ldr	r3, [r3, #0]
 8102b1c:	f022 0204 	bic.w	r2, r2, #4
 8102b20:	60da      	str	r2, [r3, #12]
      break;
 8102b22:	e014      	b.n	8102b4e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8102b24:	687b      	ldr	r3, [r7, #4]
 8102b26:	681b      	ldr	r3, [r3, #0]
 8102b28:	68da      	ldr	r2, [r3, #12]
 8102b2a:	687b      	ldr	r3, [r7, #4]
 8102b2c:	681b      	ldr	r3, [r3, #0]
 8102b2e:	f022 0208 	bic.w	r2, r2, #8
 8102b32:	60da      	str	r2, [r3, #12]
      break;
 8102b34:	e00b      	b.n	8102b4e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8102b36:	687b      	ldr	r3, [r7, #4]
 8102b38:	681b      	ldr	r3, [r3, #0]
 8102b3a:	68da      	ldr	r2, [r3, #12]
 8102b3c:	687b      	ldr	r3, [r7, #4]
 8102b3e:	681b      	ldr	r3, [r3, #0]
 8102b40:	f022 0210 	bic.w	r2, r2, #16
 8102b44:	60da      	str	r2, [r3, #12]
      break;
 8102b46:	e002      	b.n	8102b4e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8102b48:	2301      	movs	r3, #1
 8102b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8102b4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8102b4e:	7bfb      	ldrb	r3, [r7, #15]
 8102b50:	2b00      	cmp	r3, #0
 8102b52:	d166      	bne.n	8102c22 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	2200      	movs	r2, #0
 8102b5a:	6839      	ldr	r1, [r7, #0]
 8102b5c:	4618      	mov	r0, r3
 8102b5e:	f001 f9cf 	bl	8103f00 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	681b      	ldr	r3, [r3, #0]
 8102b66:	6a1a      	ldr	r2, [r3, #32]
 8102b68:	f241 1311 	movw	r3, #4369	; 0x1111
 8102b6c:	4013      	ands	r3, r2
 8102b6e:	2b00      	cmp	r3, #0
 8102b70:	d10f      	bne.n	8102b92 <HAL_TIM_IC_Stop_IT+0xe2>
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	6a1a      	ldr	r2, [r3, #32]
 8102b78:	f240 4344 	movw	r3, #1092	; 0x444
 8102b7c:	4013      	ands	r3, r2
 8102b7e:	2b00      	cmp	r3, #0
 8102b80:	d107      	bne.n	8102b92 <HAL_TIM_IC_Stop_IT+0xe2>
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	681b      	ldr	r3, [r3, #0]
 8102b86:	681a      	ldr	r2, [r3, #0]
 8102b88:	687b      	ldr	r3, [r7, #4]
 8102b8a:	681b      	ldr	r3, [r3, #0]
 8102b8c:	f022 0201 	bic.w	r2, r2, #1
 8102b90:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8102b92:	683b      	ldr	r3, [r7, #0]
 8102b94:	2b00      	cmp	r3, #0
 8102b96:	d104      	bne.n	8102ba2 <HAL_TIM_IC_Stop_IT+0xf2>
 8102b98:	687b      	ldr	r3, [r7, #4]
 8102b9a:	2201      	movs	r2, #1
 8102b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8102ba0:	e023      	b.n	8102bea <HAL_TIM_IC_Stop_IT+0x13a>
 8102ba2:	683b      	ldr	r3, [r7, #0]
 8102ba4:	2b04      	cmp	r3, #4
 8102ba6:	d104      	bne.n	8102bb2 <HAL_TIM_IC_Stop_IT+0x102>
 8102ba8:	687b      	ldr	r3, [r7, #4]
 8102baa:	2201      	movs	r2, #1
 8102bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8102bb0:	e01b      	b.n	8102bea <HAL_TIM_IC_Stop_IT+0x13a>
 8102bb2:	683b      	ldr	r3, [r7, #0]
 8102bb4:	2b08      	cmp	r3, #8
 8102bb6:	d104      	bne.n	8102bc2 <HAL_TIM_IC_Stop_IT+0x112>
 8102bb8:	687b      	ldr	r3, [r7, #4]
 8102bba:	2201      	movs	r2, #1
 8102bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8102bc0:	e013      	b.n	8102bea <HAL_TIM_IC_Stop_IT+0x13a>
 8102bc2:	683b      	ldr	r3, [r7, #0]
 8102bc4:	2b0c      	cmp	r3, #12
 8102bc6:	d104      	bne.n	8102bd2 <HAL_TIM_IC_Stop_IT+0x122>
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	2201      	movs	r2, #1
 8102bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8102bd0:	e00b      	b.n	8102bea <HAL_TIM_IC_Stop_IT+0x13a>
 8102bd2:	683b      	ldr	r3, [r7, #0]
 8102bd4:	2b10      	cmp	r3, #16
 8102bd6:	d104      	bne.n	8102be2 <HAL_TIM_IC_Stop_IT+0x132>
 8102bd8:	687b      	ldr	r3, [r7, #4]
 8102bda:	2201      	movs	r2, #1
 8102bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8102be0:	e003      	b.n	8102bea <HAL_TIM_IC_Stop_IT+0x13a>
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	2201      	movs	r2, #1
 8102be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8102bea:	683b      	ldr	r3, [r7, #0]
 8102bec:	2b00      	cmp	r3, #0
 8102bee:	d104      	bne.n	8102bfa <HAL_TIM_IC_Stop_IT+0x14a>
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	2201      	movs	r2, #1
 8102bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102bf8:	e013      	b.n	8102c22 <HAL_TIM_IC_Stop_IT+0x172>
 8102bfa:	683b      	ldr	r3, [r7, #0]
 8102bfc:	2b04      	cmp	r3, #4
 8102bfe:	d104      	bne.n	8102c0a <HAL_TIM_IC_Stop_IT+0x15a>
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	2201      	movs	r2, #1
 8102c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8102c08:	e00b      	b.n	8102c22 <HAL_TIM_IC_Stop_IT+0x172>
 8102c0a:	683b      	ldr	r3, [r7, #0]
 8102c0c:	2b08      	cmp	r3, #8
 8102c0e:	d104      	bne.n	8102c1a <HAL_TIM_IC_Stop_IT+0x16a>
 8102c10:	687b      	ldr	r3, [r7, #4]
 8102c12:	2201      	movs	r2, #1
 8102c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8102c18:	e003      	b.n	8102c22 <HAL_TIM_IC_Stop_IT+0x172>
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	2201      	movs	r2, #1
 8102c1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8102c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8102c24:	4618      	mov	r0, r3
 8102c26:	3710      	adds	r7, #16
 8102c28:	46bd      	mov	sp, r7
 8102c2a:	bd80      	pop	{r7, pc}

08102c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8102c2c:	b580      	push	{r7, lr}
 8102c2e:	b082      	sub	sp, #8
 8102c30:	af00      	add	r7, sp, #0
 8102c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	691b      	ldr	r3, [r3, #16]
 8102c3a:	f003 0302 	and.w	r3, r3, #2
 8102c3e:	2b02      	cmp	r3, #2
 8102c40:	d122      	bne.n	8102c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	68db      	ldr	r3, [r3, #12]
 8102c48:	f003 0302 	and.w	r3, r3, #2
 8102c4c:	2b02      	cmp	r3, #2
 8102c4e:	d11b      	bne.n	8102c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8102c50:	687b      	ldr	r3, [r7, #4]
 8102c52:	681b      	ldr	r3, [r3, #0]
 8102c54:	f06f 0202 	mvn.w	r2, #2
 8102c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	2201      	movs	r2, #1
 8102c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	681b      	ldr	r3, [r3, #0]
 8102c64:	699b      	ldr	r3, [r3, #24]
 8102c66:	f003 0303 	and.w	r3, r3, #3
 8102c6a:	2b00      	cmp	r3, #0
 8102c6c:	d003      	beq.n	8102c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8102c6e:	6878      	ldr	r0, [r7, #4]
 8102c70:	f7fe fa46 	bl	8101100 <HAL_TIM_IC_CaptureCallback>
 8102c74:	e005      	b.n	8102c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8102c76:	6878      	ldr	r0, [r7, #4]
 8102c78:	f000 fbee 	bl	8103458 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102c7c:	6878      	ldr	r0, [r7, #4]
 8102c7e:	f000 fbf5 	bl	810346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	2200      	movs	r2, #0
 8102c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8102c88:	687b      	ldr	r3, [r7, #4]
 8102c8a:	681b      	ldr	r3, [r3, #0]
 8102c8c:	691b      	ldr	r3, [r3, #16]
 8102c8e:	f003 0304 	and.w	r3, r3, #4
 8102c92:	2b04      	cmp	r3, #4
 8102c94:	d122      	bne.n	8102cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8102c96:	687b      	ldr	r3, [r7, #4]
 8102c98:	681b      	ldr	r3, [r3, #0]
 8102c9a:	68db      	ldr	r3, [r3, #12]
 8102c9c:	f003 0304 	and.w	r3, r3, #4
 8102ca0:	2b04      	cmp	r3, #4
 8102ca2:	d11b      	bne.n	8102cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	f06f 0204 	mvn.w	r2, #4
 8102cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8102cae:	687b      	ldr	r3, [r7, #4]
 8102cb0:	2202      	movs	r2, #2
 8102cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	681b      	ldr	r3, [r3, #0]
 8102cb8:	699b      	ldr	r3, [r3, #24]
 8102cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102cbe:	2b00      	cmp	r3, #0
 8102cc0:	d003      	beq.n	8102cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102cc2:	6878      	ldr	r0, [r7, #4]
 8102cc4:	f7fe fa1c 	bl	8101100 <HAL_TIM_IC_CaptureCallback>
 8102cc8:	e005      	b.n	8102cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102cca:	6878      	ldr	r0, [r7, #4]
 8102ccc:	f000 fbc4 	bl	8103458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102cd0:	6878      	ldr	r0, [r7, #4]
 8102cd2:	f000 fbcb 	bl	810346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102cd6:	687b      	ldr	r3, [r7, #4]
 8102cd8:	2200      	movs	r2, #0
 8102cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8102cdc:	687b      	ldr	r3, [r7, #4]
 8102cde:	681b      	ldr	r3, [r3, #0]
 8102ce0:	691b      	ldr	r3, [r3, #16]
 8102ce2:	f003 0308 	and.w	r3, r3, #8
 8102ce6:	2b08      	cmp	r3, #8
 8102ce8:	d122      	bne.n	8102d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8102cea:	687b      	ldr	r3, [r7, #4]
 8102cec:	681b      	ldr	r3, [r3, #0]
 8102cee:	68db      	ldr	r3, [r3, #12]
 8102cf0:	f003 0308 	and.w	r3, r3, #8
 8102cf4:	2b08      	cmp	r3, #8
 8102cf6:	d11b      	bne.n	8102d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	681b      	ldr	r3, [r3, #0]
 8102cfc:	f06f 0208 	mvn.w	r2, #8
 8102d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8102d02:	687b      	ldr	r3, [r7, #4]
 8102d04:	2204      	movs	r2, #4
 8102d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8102d08:	687b      	ldr	r3, [r7, #4]
 8102d0a:	681b      	ldr	r3, [r3, #0]
 8102d0c:	69db      	ldr	r3, [r3, #28]
 8102d0e:	f003 0303 	and.w	r3, r3, #3
 8102d12:	2b00      	cmp	r3, #0
 8102d14:	d003      	beq.n	8102d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102d16:	6878      	ldr	r0, [r7, #4]
 8102d18:	f7fe f9f2 	bl	8101100 <HAL_TIM_IC_CaptureCallback>
 8102d1c:	e005      	b.n	8102d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102d1e:	6878      	ldr	r0, [r7, #4]
 8102d20:	f000 fb9a 	bl	8103458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102d24:	6878      	ldr	r0, [r7, #4]
 8102d26:	f000 fba1 	bl	810346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102d2a:	687b      	ldr	r3, [r7, #4]
 8102d2c:	2200      	movs	r2, #0
 8102d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	681b      	ldr	r3, [r3, #0]
 8102d34:	691b      	ldr	r3, [r3, #16]
 8102d36:	f003 0310 	and.w	r3, r3, #16
 8102d3a:	2b10      	cmp	r3, #16
 8102d3c:	d122      	bne.n	8102d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	68db      	ldr	r3, [r3, #12]
 8102d44:	f003 0310 	and.w	r3, r3, #16
 8102d48:	2b10      	cmp	r3, #16
 8102d4a:	d11b      	bne.n	8102d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	681b      	ldr	r3, [r3, #0]
 8102d50:	f06f 0210 	mvn.w	r2, #16
 8102d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	2208      	movs	r2, #8
 8102d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8102d5c:	687b      	ldr	r3, [r7, #4]
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	69db      	ldr	r3, [r3, #28]
 8102d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102d66:	2b00      	cmp	r3, #0
 8102d68:	d003      	beq.n	8102d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102d6a:	6878      	ldr	r0, [r7, #4]
 8102d6c:	f7fe f9c8 	bl	8101100 <HAL_TIM_IC_CaptureCallback>
 8102d70:	e005      	b.n	8102d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102d72:	6878      	ldr	r0, [r7, #4]
 8102d74:	f000 fb70 	bl	8103458 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102d78:	6878      	ldr	r0, [r7, #4]
 8102d7a:	f000 fb77 	bl	810346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	2200      	movs	r2, #0
 8102d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	691b      	ldr	r3, [r3, #16]
 8102d8a:	f003 0301 	and.w	r3, r3, #1
 8102d8e:	2b01      	cmp	r3, #1
 8102d90:	d10e      	bne.n	8102db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8102d92:	687b      	ldr	r3, [r7, #4]
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	68db      	ldr	r3, [r3, #12]
 8102d98:	f003 0301 	and.w	r3, r3, #1
 8102d9c:	2b01      	cmp	r3, #1
 8102d9e:	d107      	bne.n	8102db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	681b      	ldr	r3, [r3, #0]
 8102da4:	f06f 0201 	mvn.w	r2, #1
 8102da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8102daa:	6878      	ldr	r0, [r7, #4]
 8102dac:	f000 fb4a 	bl	8103444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	691b      	ldr	r3, [r3, #16]
 8102db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102dba:	2b80      	cmp	r3, #128	; 0x80
 8102dbc:	d10e      	bne.n	8102ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	68db      	ldr	r3, [r3, #12]
 8102dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102dc8:	2b80      	cmp	r3, #128	; 0x80
 8102dca:	d107      	bne.n	8102ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8102dcc:	687b      	ldr	r3, [r7, #4]
 8102dce:	681b      	ldr	r3, [r3, #0]
 8102dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8102dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8102dd6:	6878      	ldr	r0, [r7, #4]
 8102dd8:	f001 f950 	bl	810407c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	691b      	ldr	r3, [r3, #16]
 8102de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102dea:	d10e      	bne.n	8102e0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	681b      	ldr	r3, [r3, #0]
 8102df0:	68db      	ldr	r3, [r3, #12]
 8102df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102df6:	2b80      	cmp	r3, #128	; 0x80
 8102df8:	d107      	bne.n	8102e0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	681b      	ldr	r3, [r3, #0]
 8102dfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8102e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8102e04:	6878      	ldr	r0, [r7, #4]
 8102e06:	f001 f943 	bl	8104090 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8102e0a:	687b      	ldr	r3, [r7, #4]
 8102e0c:	681b      	ldr	r3, [r3, #0]
 8102e0e:	691b      	ldr	r3, [r3, #16]
 8102e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102e14:	2b40      	cmp	r3, #64	; 0x40
 8102e16:	d10e      	bne.n	8102e36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	681b      	ldr	r3, [r3, #0]
 8102e1c:	68db      	ldr	r3, [r3, #12]
 8102e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102e22:	2b40      	cmp	r3, #64	; 0x40
 8102e24:	d107      	bne.n	8102e36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8102e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8102e30:	6878      	ldr	r0, [r7, #4]
 8102e32:	f000 fb25 	bl	8103480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8102e36:	687b      	ldr	r3, [r7, #4]
 8102e38:	681b      	ldr	r3, [r3, #0]
 8102e3a:	691b      	ldr	r3, [r3, #16]
 8102e3c:	f003 0320 	and.w	r3, r3, #32
 8102e40:	2b20      	cmp	r3, #32
 8102e42:	d10e      	bne.n	8102e62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	68db      	ldr	r3, [r3, #12]
 8102e4a:	f003 0320 	and.w	r3, r3, #32
 8102e4e:	2b20      	cmp	r3, #32
 8102e50:	d107      	bne.n	8102e62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	f06f 0220 	mvn.w	r2, #32
 8102e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8102e5c:	6878      	ldr	r0, [r7, #4]
 8102e5e:	f001 f903 	bl	8104068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8102e62:	bf00      	nop
 8102e64:	3708      	adds	r7, #8
 8102e66:	46bd      	mov	sp, r7
 8102e68:	bd80      	pop	{r7, pc}

08102e6a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8102e6a:	b580      	push	{r7, lr}
 8102e6c:	b086      	sub	sp, #24
 8102e6e:	af00      	add	r7, sp, #0
 8102e70:	60f8      	str	r0, [r7, #12]
 8102e72:	60b9      	str	r1, [r7, #8]
 8102e74:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102e76:	2300      	movs	r3, #0
 8102e78:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8102e7a:	68fb      	ldr	r3, [r7, #12]
 8102e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102e80:	2b01      	cmp	r3, #1
 8102e82:	d101      	bne.n	8102e88 <HAL_TIM_IC_ConfigChannel+0x1e>
 8102e84:	2302      	movs	r3, #2
 8102e86:	e088      	b.n	8102f9a <HAL_TIM_IC_ConfigChannel+0x130>
 8102e88:	68fb      	ldr	r3, [r7, #12]
 8102e8a:	2201      	movs	r2, #1
 8102e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8102e90:	687b      	ldr	r3, [r7, #4]
 8102e92:	2b00      	cmp	r3, #0
 8102e94:	d11b      	bne.n	8102ece <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8102e96:	68fb      	ldr	r3, [r7, #12]
 8102e98:	6818      	ldr	r0, [r3, #0]
 8102e9a:	68bb      	ldr	r3, [r7, #8]
 8102e9c:	6819      	ldr	r1, [r3, #0]
 8102e9e:	68bb      	ldr	r3, [r7, #8]
 8102ea0:	685a      	ldr	r2, [r3, #4]
 8102ea2:	68bb      	ldr	r3, [r7, #8]
 8102ea4:	68db      	ldr	r3, [r3, #12]
 8102ea6:	f000 fe65 	bl	8103b74 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8102eaa:	68fb      	ldr	r3, [r7, #12]
 8102eac:	681b      	ldr	r3, [r3, #0]
 8102eae:	699a      	ldr	r2, [r3, #24]
 8102eb0:	68fb      	ldr	r3, [r7, #12]
 8102eb2:	681b      	ldr	r3, [r3, #0]
 8102eb4:	f022 020c 	bic.w	r2, r2, #12
 8102eb8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8102eba:	68fb      	ldr	r3, [r7, #12]
 8102ebc:	681b      	ldr	r3, [r3, #0]
 8102ebe:	6999      	ldr	r1, [r3, #24]
 8102ec0:	68bb      	ldr	r3, [r7, #8]
 8102ec2:	689a      	ldr	r2, [r3, #8]
 8102ec4:	68fb      	ldr	r3, [r7, #12]
 8102ec6:	681b      	ldr	r3, [r3, #0]
 8102ec8:	430a      	orrs	r2, r1
 8102eca:	619a      	str	r2, [r3, #24]
 8102ecc:	e060      	b.n	8102f90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8102ece:	687b      	ldr	r3, [r7, #4]
 8102ed0:	2b04      	cmp	r3, #4
 8102ed2:	d11c      	bne.n	8102f0e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8102ed4:	68fb      	ldr	r3, [r7, #12]
 8102ed6:	6818      	ldr	r0, [r3, #0]
 8102ed8:	68bb      	ldr	r3, [r7, #8]
 8102eda:	6819      	ldr	r1, [r3, #0]
 8102edc:	68bb      	ldr	r3, [r7, #8]
 8102ede:	685a      	ldr	r2, [r3, #4]
 8102ee0:	68bb      	ldr	r3, [r7, #8]
 8102ee2:	68db      	ldr	r3, [r3, #12]
 8102ee4:	f000 fee9 	bl	8103cba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8102ee8:	68fb      	ldr	r3, [r7, #12]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	699a      	ldr	r2, [r3, #24]
 8102eee:	68fb      	ldr	r3, [r7, #12]
 8102ef0:	681b      	ldr	r3, [r3, #0]
 8102ef2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8102ef6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8102ef8:	68fb      	ldr	r3, [r7, #12]
 8102efa:	681b      	ldr	r3, [r3, #0]
 8102efc:	6999      	ldr	r1, [r3, #24]
 8102efe:	68bb      	ldr	r3, [r7, #8]
 8102f00:	689b      	ldr	r3, [r3, #8]
 8102f02:	021a      	lsls	r2, r3, #8
 8102f04:	68fb      	ldr	r3, [r7, #12]
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	430a      	orrs	r2, r1
 8102f0a:	619a      	str	r2, [r3, #24]
 8102f0c:	e040      	b.n	8102f90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	2b08      	cmp	r3, #8
 8102f12:	d11b      	bne.n	8102f4c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8102f14:	68fb      	ldr	r3, [r7, #12]
 8102f16:	6818      	ldr	r0, [r3, #0]
 8102f18:	68bb      	ldr	r3, [r7, #8]
 8102f1a:	6819      	ldr	r1, [r3, #0]
 8102f1c:	68bb      	ldr	r3, [r7, #8]
 8102f1e:	685a      	ldr	r2, [r3, #4]
 8102f20:	68bb      	ldr	r3, [r7, #8]
 8102f22:	68db      	ldr	r3, [r3, #12]
 8102f24:	f000 ff36 	bl	8103d94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8102f28:	68fb      	ldr	r3, [r7, #12]
 8102f2a:	681b      	ldr	r3, [r3, #0]
 8102f2c:	69da      	ldr	r2, [r3, #28]
 8102f2e:	68fb      	ldr	r3, [r7, #12]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	f022 020c 	bic.w	r2, r2, #12
 8102f36:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8102f38:	68fb      	ldr	r3, [r7, #12]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	69d9      	ldr	r1, [r3, #28]
 8102f3e:	68bb      	ldr	r3, [r7, #8]
 8102f40:	689a      	ldr	r2, [r3, #8]
 8102f42:	68fb      	ldr	r3, [r7, #12]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	430a      	orrs	r2, r1
 8102f48:	61da      	str	r2, [r3, #28]
 8102f4a:	e021      	b.n	8102f90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	2b0c      	cmp	r3, #12
 8102f50:	d11c      	bne.n	8102f8c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8102f52:	68fb      	ldr	r3, [r7, #12]
 8102f54:	6818      	ldr	r0, [r3, #0]
 8102f56:	68bb      	ldr	r3, [r7, #8]
 8102f58:	6819      	ldr	r1, [r3, #0]
 8102f5a:	68bb      	ldr	r3, [r7, #8]
 8102f5c:	685a      	ldr	r2, [r3, #4]
 8102f5e:	68bb      	ldr	r3, [r7, #8]
 8102f60:	68db      	ldr	r3, [r3, #12]
 8102f62:	f000 ff53 	bl	8103e0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8102f66:	68fb      	ldr	r3, [r7, #12]
 8102f68:	681b      	ldr	r3, [r3, #0]
 8102f6a:	69da      	ldr	r2, [r3, #28]
 8102f6c:	68fb      	ldr	r3, [r7, #12]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8102f74:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8102f76:	68fb      	ldr	r3, [r7, #12]
 8102f78:	681b      	ldr	r3, [r3, #0]
 8102f7a:	69d9      	ldr	r1, [r3, #28]
 8102f7c:	68bb      	ldr	r3, [r7, #8]
 8102f7e:	689b      	ldr	r3, [r3, #8]
 8102f80:	021a      	lsls	r2, r3, #8
 8102f82:	68fb      	ldr	r3, [r7, #12]
 8102f84:	681b      	ldr	r3, [r3, #0]
 8102f86:	430a      	orrs	r2, r1
 8102f88:	61da      	str	r2, [r3, #28]
 8102f8a:	e001      	b.n	8102f90 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8102f8c:	2301      	movs	r3, #1
 8102f8e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8102f90:	68fb      	ldr	r3, [r7, #12]
 8102f92:	2200      	movs	r2, #0
 8102f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8102f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8102f9a:	4618      	mov	r0, r3
 8102f9c:	3718      	adds	r7, #24
 8102f9e:	46bd      	mov	sp, r7
 8102fa0:	bd80      	pop	{r7, pc}
	...

08102fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8102fa4:	b580      	push	{r7, lr}
 8102fa6:	b086      	sub	sp, #24
 8102fa8:	af00      	add	r7, sp, #0
 8102faa:	60f8      	str	r0, [r7, #12]
 8102fac:	60b9      	str	r1, [r7, #8]
 8102fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102fb0:	2300      	movs	r3, #0
 8102fb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8102fb4:	68fb      	ldr	r3, [r7, #12]
 8102fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102fba:	2b01      	cmp	r3, #1
 8102fbc:	d101      	bne.n	8102fc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8102fbe:	2302      	movs	r3, #2
 8102fc0:	e0ff      	b.n	81031c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8102fc2:	68fb      	ldr	r3, [r7, #12]
 8102fc4:	2201      	movs	r2, #1
 8102fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	2b14      	cmp	r3, #20
 8102fce:	f200 80f0 	bhi.w	81031b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8102fd2:	a201      	add	r2, pc, #4	; (adr r2, 8102fd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8102fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102fd8:	0810302d 	.word	0x0810302d
 8102fdc:	081031b3 	.word	0x081031b3
 8102fe0:	081031b3 	.word	0x081031b3
 8102fe4:	081031b3 	.word	0x081031b3
 8102fe8:	0810306d 	.word	0x0810306d
 8102fec:	081031b3 	.word	0x081031b3
 8102ff0:	081031b3 	.word	0x081031b3
 8102ff4:	081031b3 	.word	0x081031b3
 8102ff8:	081030af 	.word	0x081030af
 8102ffc:	081031b3 	.word	0x081031b3
 8103000:	081031b3 	.word	0x081031b3
 8103004:	081031b3 	.word	0x081031b3
 8103008:	081030ef 	.word	0x081030ef
 810300c:	081031b3 	.word	0x081031b3
 8103010:	081031b3 	.word	0x081031b3
 8103014:	081031b3 	.word	0x081031b3
 8103018:	08103131 	.word	0x08103131
 810301c:	081031b3 	.word	0x081031b3
 8103020:	081031b3 	.word	0x081031b3
 8103024:	081031b3 	.word	0x081031b3
 8103028:	08103171 	.word	0x08103171
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810302c:	68fb      	ldr	r3, [r7, #12]
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	68b9      	ldr	r1, [r7, #8]
 8103032:	4618      	mov	r0, r3
 8103034:	f000 fac8 	bl	81035c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8103038:	68fb      	ldr	r3, [r7, #12]
 810303a:	681b      	ldr	r3, [r3, #0]
 810303c:	699a      	ldr	r2, [r3, #24]
 810303e:	68fb      	ldr	r3, [r7, #12]
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	f042 0208 	orr.w	r2, r2, #8
 8103046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8103048:	68fb      	ldr	r3, [r7, #12]
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	699a      	ldr	r2, [r3, #24]
 810304e:	68fb      	ldr	r3, [r7, #12]
 8103050:	681b      	ldr	r3, [r3, #0]
 8103052:	f022 0204 	bic.w	r2, r2, #4
 8103056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8103058:	68fb      	ldr	r3, [r7, #12]
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	6999      	ldr	r1, [r3, #24]
 810305e:	68bb      	ldr	r3, [r7, #8]
 8103060:	691a      	ldr	r2, [r3, #16]
 8103062:	68fb      	ldr	r3, [r7, #12]
 8103064:	681b      	ldr	r3, [r3, #0]
 8103066:	430a      	orrs	r2, r1
 8103068:	619a      	str	r2, [r3, #24]
      break;
 810306a:	e0a5      	b.n	81031b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810306c:	68fb      	ldr	r3, [r7, #12]
 810306e:	681b      	ldr	r3, [r3, #0]
 8103070:	68b9      	ldr	r1, [r7, #8]
 8103072:	4618      	mov	r0, r3
 8103074:	f000 fb38 	bl	81036e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8103078:	68fb      	ldr	r3, [r7, #12]
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	699a      	ldr	r2, [r3, #24]
 810307e:	68fb      	ldr	r3, [r7, #12]
 8103080:	681b      	ldr	r3, [r3, #0]
 8103082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8103088:	68fb      	ldr	r3, [r7, #12]
 810308a:	681b      	ldr	r3, [r3, #0]
 810308c:	699a      	ldr	r2, [r3, #24]
 810308e:	68fb      	ldr	r3, [r7, #12]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8103096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8103098:	68fb      	ldr	r3, [r7, #12]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	6999      	ldr	r1, [r3, #24]
 810309e:	68bb      	ldr	r3, [r7, #8]
 81030a0:	691b      	ldr	r3, [r3, #16]
 81030a2:	021a      	lsls	r2, r3, #8
 81030a4:	68fb      	ldr	r3, [r7, #12]
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	430a      	orrs	r2, r1
 81030aa:	619a      	str	r2, [r3, #24]
      break;
 81030ac:	e084      	b.n	81031b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81030ae:	68fb      	ldr	r3, [r7, #12]
 81030b0:	681b      	ldr	r3, [r3, #0]
 81030b2:	68b9      	ldr	r1, [r7, #8]
 81030b4:	4618      	mov	r0, r3
 81030b6:	f000 fba1 	bl	81037fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81030ba:	68fb      	ldr	r3, [r7, #12]
 81030bc:	681b      	ldr	r3, [r3, #0]
 81030be:	69da      	ldr	r2, [r3, #28]
 81030c0:	68fb      	ldr	r3, [r7, #12]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	f042 0208 	orr.w	r2, r2, #8
 81030c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81030ca:	68fb      	ldr	r3, [r7, #12]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	69da      	ldr	r2, [r3, #28]
 81030d0:	68fb      	ldr	r3, [r7, #12]
 81030d2:	681b      	ldr	r3, [r3, #0]
 81030d4:	f022 0204 	bic.w	r2, r2, #4
 81030d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81030da:	68fb      	ldr	r3, [r7, #12]
 81030dc:	681b      	ldr	r3, [r3, #0]
 81030de:	69d9      	ldr	r1, [r3, #28]
 81030e0:	68bb      	ldr	r3, [r7, #8]
 81030e2:	691a      	ldr	r2, [r3, #16]
 81030e4:	68fb      	ldr	r3, [r7, #12]
 81030e6:	681b      	ldr	r3, [r3, #0]
 81030e8:	430a      	orrs	r2, r1
 81030ea:	61da      	str	r2, [r3, #28]
      break;
 81030ec:	e064      	b.n	81031b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81030ee:	68fb      	ldr	r3, [r7, #12]
 81030f0:	681b      	ldr	r3, [r3, #0]
 81030f2:	68b9      	ldr	r1, [r7, #8]
 81030f4:	4618      	mov	r0, r3
 81030f6:	f000 fc09 	bl	810390c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81030fa:	68fb      	ldr	r3, [r7, #12]
 81030fc:	681b      	ldr	r3, [r3, #0]
 81030fe:	69da      	ldr	r2, [r3, #28]
 8103100:	68fb      	ldr	r3, [r7, #12]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810310a:	68fb      	ldr	r3, [r7, #12]
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	69da      	ldr	r2, [r3, #28]
 8103110:	68fb      	ldr	r3, [r7, #12]
 8103112:	681b      	ldr	r3, [r3, #0]
 8103114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8103118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810311a:	68fb      	ldr	r3, [r7, #12]
 810311c:	681b      	ldr	r3, [r3, #0]
 810311e:	69d9      	ldr	r1, [r3, #28]
 8103120:	68bb      	ldr	r3, [r7, #8]
 8103122:	691b      	ldr	r3, [r3, #16]
 8103124:	021a      	lsls	r2, r3, #8
 8103126:	68fb      	ldr	r3, [r7, #12]
 8103128:	681b      	ldr	r3, [r3, #0]
 810312a:	430a      	orrs	r2, r1
 810312c:	61da      	str	r2, [r3, #28]
      break;
 810312e:	e043      	b.n	81031b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8103130:	68fb      	ldr	r3, [r7, #12]
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	68b9      	ldr	r1, [r7, #8]
 8103136:	4618      	mov	r0, r3
 8103138:	f000 fc52 	bl	81039e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810313c:	68fb      	ldr	r3, [r7, #12]
 810313e:	681b      	ldr	r3, [r3, #0]
 8103140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8103142:	68fb      	ldr	r3, [r7, #12]
 8103144:	681b      	ldr	r3, [r3, #0]
 8103146:	f042 0208 	orr.w	r2, r2, #8
 810314a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810314c:	68fb      	ldr	r3, [r7, #12]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8103152:	68fb      	ldr	r3, [r7, #12]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	f022 0204 	bic.w	r2, r2, #4
 810315a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810315c:	68fb      	ldr	r3, [r7, #12]
 810315e:	681b      	ldr	r3, [r3, #0]
 8103160:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8103162:	68bb      	ldr	r3, [r7, #8]
 8103164:	691a      	ldr	r2, [r3, #16]
 8103166:	68fb      	ldr	r3, [r7, #12]
 8103168:	681b      	ldr	r3, [r3, #0]
 810316a:	430a      	orrs	r2, r1
 810316c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810316e:	e023      	b.n	81031b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8103170:	68fb      	ldr	r3, [r7, #12]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	68b9      	ldr	r1, [r7, #8]
 8103176:	4618      	mov	r0, r3
 8103178:	f000 fc96 	bl	8103aa8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810317c:	68fb      	ldr	r3, [r7, #12]
 810317e:	681b      	ldr	r3, [r3, #0]
 8103180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8103182:	68fb      	ldr	r3, [r7, #12]
 8103184:	681b      	ldr	r3, [r3, #0]
 8103186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810318a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810318c:	68fb      	ldr	r3, [r7, #12]
 810318e:	681b      	ldr	r3, [r3, #0]
 8103190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8103192:	68fb      	ldr	r3, [r7, #12]
 8103194:	681b      	ldr	r3, [r3, #0]
 8103196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810319a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810319c:	68fb      	ldr	r3, [r7, #12]
 810319e:	681b      	ldr	r3, [r3, #0]
 81031a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81031a2:	68bb      	ldr	r3, [r7, #8]
 81031a4:	691b      	ldr	r3, [r3, #16]
 81031a6:	021a      	lsls	r2, r3, #8
 81031a8:	68fb      	ldr	r3, [r7, #12]
 81031aa:	681b      	ldr	r3, [r3, #0]
 81031ac:	430a      	orrs	r2, r1
 81031ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81031b0:	e002      	b.n	81031b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81031b2:	2301      	movs	r3, #1
 81031b4:	75fb      	strb	r3, [r7, #23]
      break;
 81031b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81031b8:	68fb      	ldr	r3, [r7, #12]
 81031ba:	2200      	movs	r2, #0
 81031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81031c0:	7dfb      	ldrb	r3, [r7, #23]
}
 81031c2:	4618      	mov	r0, r3
 81031c4:	3718      	adds	r7, #24
 81031c6:	46bd      	mov	sp, r7
 81031c8:	bd80      	pop	{r7, pc}
 81031ca:	bf00      	nop

081031cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81031cc:	b580      	push	{r7, lr}
 81031ce:	b084      	sub	sp, #16
 81031d0:	af00      	add	r7, sp, #0
 81031d2:	6078      	str	r0, [r7, #4]
 81031d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81031d6:	2300      	movs	r3, #0
 81031d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81031da:	687b      	ldr	r3, [r7, #4]
 81031dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81031e0:	2b01      	cmp	r3, #1
 81031e2:	d101      	bne.n	81031e8 <HAL_TIM_ConfigClockSource+0x1c>
 81031e4:	2302      	movs	r3, #2
 81031e6:	e0de      	b.n	81033a6 <HAL_TIM_ConfigClockSource+0x1da>
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	2201      	movs	r2, #1
 81031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	2202      	movs	r2, #2
 81031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	681b      	ldr	r3, [r3, #0]
 81031fc:	689b      	ldr	r3, [r3, #8]
 81031fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8103200:	68bb      	ldr	r3, [r7, #8]
 8103202:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8103206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810320a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810320c:	68bb      	ldr	r3, [r7, #8]
 810320e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	681b      	ldr	r3, [r3, #0]
 8103218:	68ba      	ldr	r2, [r7, #8]
 810321a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810321c:	683b      	ldr	r3, [r7, #0]
 810321e:	681b      	ldr	r3, [r3, #0]
 8103220:	4a63      	ldr	r2, [pc, #396]	; (81033b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8103222:	4293      	cmp	r3, r2
 8103224:	f000 80a9 	beq.w	810337a <HAL_TIM_ConfigClockSource+0x1ae>
 8103228:	4a61      	ldr	r2, [pc, #388]	; (81033b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 810322a:	4293      	cmp	r3, r2
 810322c:	f200 80ae 	bhi.w	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 8103230:	4a60      	ldr	r2, [pc, #384]	; (81033b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8103232:	4293      	cmp	r3, r2
 8103234:	f000 80a1 	beq.w	810337a <HAL_TIM_ConfigClockSource+0x1ae>
 8103238:	4a5e      	ldr	r2, [pc, #376]	; (81033b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 810323a:	4293      	cmp	r3, r2
 810323c:	f200 80a6 	bhi.w	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 8103240:	4a5d      	ldr	r2, [pc, #372]	; (81033b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8103242:	4293      	cmp	r3, r2
 8103244:	f000 8099 	beq.w	810337a <HAL_TIM_ConfigClockSource+0x1ae>
 8103248:	4a5b      	ldr	r2, [pc, #364]	; (81033b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 810324a:	4293      	cmp	r3, r2
 810324c:	f200 809e 	bhi.w	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 8103250:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8103254:	f000 8091 	beq.w	810337a <HAL_TIM_ConfigClockSource+0x1ae>
 8103258:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810325c:	f200 8096 	bhi.w	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 8103260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103264:	f000 8089 	beq.w	810337a <HAL_TIM_ConfigClockSource+0x1ae>
 8103268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810326c:	f200 808e 	bhi.w	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 8103270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103274:	d03e      	beq.n	81032f4 <HAL_TIM_ConfigClockSource+0x128>
 8103276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810327a:	f200 8087 	bhi.w	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 810327e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103282:	f000 8086 	beq.w	8103392 <HAL_TIM_ConfigClockSource+0x1c6>
 8103286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810328a:	d87f      	bhi.n	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 810328c:	2b70      	cmp	r3, #112	; 0x70
 810328e:	d01a      	beq.n	81032c6 <HAL_TIM_ConfigClockSource+0xfa>
 8103290:	2b70      	cmp	r3, #112	; 0x70
 8103292:	d87b      	bhi.n	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 8103294:	2b60      	cmp	r3, #96	; 0x60
 8103296:	d050      	beq.n	810333a <HAL_TIM_ConfigClockSource+0x16e>
 8103298:	2b60      	cmp	r3, #96	; 0x60
 810329a:	d877      	bhi.n	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 810329c:	2b50      	cmp	r3, #80	; 0x50
 810329e:	d03c      	beq.n	810331a <HAL_TIM_ConfigClockSource+0x14e>
 81032a0:	2b50      	cmp	r3, #80	; 0x50
 81032a2:	d873      	bhi.n	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 81032a4:	2b40      	cmp	r3, #64	; 0x40
 81032a6:	d058      	beq.n	810335a <HAL_TIM_ConfigClockSource+0x18e>
 81032a8:	2b40      	cmp	r3, #64	; 0x40
 81032aa:	d86f      	bhi.n	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 81032ac:	2b30      	cmp	r3, #48	; 0x30
 81032ae:	d064      	beq.n	810337a <HAL_TIM_ConfigClockSource+0x1ae>
 81032b0:	2b30      	cmp	r3, #48	; 0x30
 81032b2:	d86b      	bhi.n	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 81032b4:	2b20      	cmp	r3, #32
 81032b6:	d060      	beq.n	810337a <HAL_TIM_ConfigClockSource+0x1ae>
 81032b8:	2b20      	cmp	r3, #32
 81032ba:	d867      	bhi.n	810338c <HAL_TIM_ConfigClockSource+0x1c0>
 81032bc:	2b00      	cmp	r3, #0
 81032be:	d05c      	beq.n	810337a <HAL_TIM_ConfigClockSource+0x1ae>
 81032c0:	2b10      	cmp	r3, #16
 81032c2:	d05a      	beq.n	810337a <HAL_TIM_ConfigClockSource+0x1ae>
 81032c4:	e062      	b.n	810338c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	6818      	ldr	r0, [r3, #0]
 81032ca:	683b      	ldr	r3, [r7, #0]
 81032cc:	6899      	ldr	r1, [r3, #8]
 81032ce:	683b      	ldr	r3, [r7, #0]
 81032d0:	685a      	ldr	r2, [r3, #4]
 81032d2:	683b      	ldr	r3, [r7, #0]
 81032d4:	68db      	ldr	r3, [r3, #12]
 81032d6:	f000 fdf3 	bl	8103ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	681b      	ldr	r3, [r3, #0]
 81032de:	689b      	ldr	r3, [r3, #8]
 81032e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81032e2:	68bb      	ldr	r3, [r7, #8]
 81032e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81032e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	681b      	ldr	r3, [r3, #0]
 81032ee:	68ba      	ldr	r2, [r7, #8]
 81032f0:	609a      	str	r2, [r3, #8]
      break;
 81032f2:	e04f      	b.n	8103394 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	6818      	ldr	r0, [r3, #0]
 81032f8:	683b      	ldr	r3, [r7, #0]
 81032fa:	6899      	ldr	r1, [r3, #8]
 81032fc:	683b      	ldr	r3, [r7, #0]
 81032fe:	685a      	ldr	r2, [r3, #4]
 8103300:	683b      	ldr	r3, [r7, #0]
 8103302:	68db      	ldr	r3, [r3, #12]
 8103304:	f000 fddc 	bl	8103ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	689a      	ldr	r2, [r3, #8]
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8103316:	609a      	str	r2, [r3, #8]
      break;
 8103318:	e03c      	b.n	8103394 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810331a:	687b      	ldr	r3, [r7, #4]
 810331c:	6818      	ldr	r0, [r3, #0]
 810331e:	683b      	ldr	r3, [r7, #0]
 8103320:	6859      	ldr	r1, [r3, #4]
 8103322:	683b      	ldr	r3, [r7, #0]
 8103324:	68db      	ldr	r3, [r3, #12]
 8103326:	461a      	mov	r2, r3
 8103328:	f000 fc98 	bl	8103c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	2150      	movs	r1, #80	; 0x50
 8103332:	4618      	mov	r0, r3
 8103334:	f000 fda7 	bl	8103e86 <TIM_ITRx_SetConfig>
      break;
 8103338:	e02c      	b.n	8103394 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	6818      	ldr	r0, [r3, #0]
 810333e:	683b      	ldr	r3, [r7, #0]
 8103340:	6859      	ldr	r1, [r3, #4]
 8103342:	683b      	ldr	r3, [r7, #0]
 8103344:	68db      	ldr	r3, [r3, #12]
 8103346:	461a      	mov	r2, r3
 8103348:	f000 fcf4 	bl	8103d34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	2160      	movs	r1, #96	; 0x60
 8103352:	4618      	mov	r0, r3
 8103354:	f000 fd97 	bl	8103e86 <TIM_ITRx_SetConfig>
      break;
 8103358:	e01c      	b.n	8103394 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	6818      	ldr	r0, [r3, #0]
 810335e:	683b      	ldr	r3, [r7, #0]
 8103360:	6859      	ldr	r1, [r3, #4]
 8103362:	683b      	ldr	r3, [r7, #0]
 8103364:	68db      	ldr	r3, [r3, #12]
 8103366:	461a      	mov	r2, r3
 8103368:	f000 fc78 	bl	8103c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810336c:	687b      	ldr	r3, [r7, #4]
 810336e:	681b      	ldr	r3, [r3, #0]
 8103370:	2140      	movs	r1, #64	; 0x40
 8103372:	4618      	mov	r0, r3
 8103374:	f000 fd87 	bl	8103e86 <TIM_ITRx_SetConfig>
      break;
 8103378:	e00c      	b.n	8103394 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681a      	ldr	r2, [r3, #0]
 810337e:	683b      	ldr	r3, [r7, #0]
 8103380:	681b      	ldr	r3, [r3, #0]
 8103382:	4619      	mov	r1, r3
 8103384:	4610      	mov	r0, r2
 8103386:	f000 fd7e 	bl	8103e86 <TIM_ITRx_SetConfig>
      break;
 810338a:	e003      	b.n	8103394 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810338c:	2301      	movs	r3, #1
 810338e:	73fb      	strb	r3, [r7, #15]
      break;
 8103390:	e000      	b.n	8103394 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8103392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8103394:	687b      	ldr	r3, [r7, #4]
 8103396:	2201      	movs	r2, #1
 8103398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810339c:	687b      	ldr	r3, [r7, #4]
 810339e:	2200      	movs	r2, #0
 81033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81033a4:	7bfb      	ldrb	r3, [r7, #15]
}
 81033a6:	4618      	mov	r0, r3
 81033a8:	3710      	adds	r7, #16
 81033aa:	46bd      	mov	sp, r7
 81033ac:	bd80      	pop	{r7, pc}
 81033ae:	bf00      	nop
 81033b0:	00100040 	.word	0x00100040
 81033b4:	00100030 	.word	0x00100030
 81033b8:	00100020 	.word	0x00100020

081033bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81033bc:	b480      	push	{r7}
 81033be:	b085      	sub	sp, #20
 81033c0:	af00      	add	r7, sp, #0
 81033c2:	6078      	str	r0, [r7, #4]
 81033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 81033c6:	2300      	movs	r3, #0
 81033c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 81033ca:	683b      	ldr	r3, [r7, #0]
 81033cc:	2b0c      	cmp	r3, #12
 81033ce:	d831      	bhi.n	8103434 <HAL_TIM_ReadCapturedValue+0x78>
 81033d0:	a201      	add	r2, pc, #4	; (adr r2, 81033d8 <HAL_TIM_ReadCapturedValue+0x1c>)
 81033d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033d6:	bf00      	nop
 81033d8:	0810340d 	.word	0x0810340d
 81033dc:	08103435 	.word	0x08103435
 81033e0:	08103435 	.word	0x08103435
 81033e4:	08103435 	.word	0x08103435
 81033e8:	08103417 	.word	0x08103417
 81033ec:	08103435 	.word	0x08103435
 81033f0:	08103435 	.word	0x08103435
 81033f4:	08103435 	.word	0x08103435
 81033f8:	08103421 	.word	0x08103421
 81033fc:	08103435 	.word	0x08103435
 8103400:	08103435 	.word	0x08103435
 8103404:	08103435 	.word	0x08103435
 8103408:	0810342b 	.word	0x0810342b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103412:	60fb      	str	r3, [r7, #12]

      break;
 8103414:	e00f      	b.n	8103436 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810341c:	60fb      	str	r3, [r7, #12]

      break;
 810341e:	e00a      	b.n	8103436 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	681b      	ldr	r3, [r3, #0]
 8103424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103426:	60fb      	str	r3, [r7, #12]

      break;
 8103428:	e005      	b.n	8103436 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 810342a:	687b      	ldr	r3, [r7, #4]
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103430:	60fb      	str	r3, [r7, #12]

      break;
 8103432:	e000      	b.n	8103436 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8103434:	bf00      	nop
  }

  return tmpreg;
 8103436:	68fb      	ldr	r3, [r7, #12]
}
 8103438:	4618      	mov	r0, r3
 810343a:	3714      	adds	r7, #20
 810343c:	46bd      	mov	sp, r7
 810343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103442:	4770      	bx	lr

08103444 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8103444:	b480      	push	{r7}
 8103446:	b083      	sub	sp, #12
 8103448:	af00      	add	r7, sp, #0
 810344a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 810344c:	bf00      	nop
 810344e:	370c      	adds	r7, #12
 8103450:	46bd      	mov	sp, r7
 8103452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103456:	4770      	bx	lr

08103458 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8103458:	b480      	push	{r7}
 810345a:	b083      	sub	sp, #12
 810345c:	af00      	add	r7, sp, #0
 810345e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8103460:	bf00      	nop
 8103462:	370c      	adds	r7, #12
 8103464:	46bd      	mov	sp, r7
 8103466:	f85d 7b04 	ldr.w	r7, [sp], #4
 810346a:	4770      	bx	lr

0810346c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810346c:	b480      	push	{r7}
 810346e:	b083      	sub	sp, #12
 8103470:	af00      	add	r7, sp, #0
 8103472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8103474:	bf00      	nop
 8103476:	370c      	adds	r7, #12
 8103478:	46bd      	mov	sp, r7
 810347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810347e:	4770      	bx	lr

08103480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8103480:	b480      	push	{r7}
 8103482:	b083      	sub	sp, #12
 8103484:	af00      	add	r7, sp, #0
 8103486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8103488:	bf00      	nop
 810348a:	370c      	adds	r7, #12
 810348c:	46bd      	mov	sp, r7
 810348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103492:	4770      	bx	lr

08103494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8103494:	b480      	push	{r7}
 8103496:	b085      	sub	sp, #20
 8103498:	af00      	add	r7, sp, #0
 810349a:	6078      	str	r0, [r7, #4]
 810349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	681b      	ldr	r3, [r3, #0]
 81034a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81034a4:	687b      	ldr	r3, [r7, #4]
 81034a6:	4a40      	ldr	r2, [pc, #256]	; (81035a8 <TIM_Base_SetConfig+0x114>)
 81034a8:	4293      	cmp	r3, r2
 81034aa:	d013      	beq.n	81034d4 <TIM_Base_SetConfig+0x40>
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81034b2:	d00f      	beq.n	81034d4 <TIM_Base_SetConfig+0x40>
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	4a3d      	ldr	r2, [pc, #244]	; (81035ac <TIM_Base_SetConfig+0x118>)
 81034b8:	4293      	cmp	r3, r2
 81034ba:	d00b      	beq.n	81034d4 <TIM_Base_SetConfig+0x40>
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	4a3c      	ldr	r2, [pc, #240]	; (81035b0 <TIM_Base_SetConfig+0x11c>)
 81034c0:	4293      	cmp	r3, r2
 81034c2:	d007      	beq.n	81034d4 <TIM_Base_SetConfig+0x40>
 81034c4:	687b      	ldr	r3, [r7, #4]
 81034c6:	4a3b      	ldr	r2, [pc, #236]	; (81035b4 <TIM_Base_SetConfig+0x120>)
 81034c8:	4293      	cmp	r3, r2
 81034ca:	d003      	beq.n	81034d4 <TIM_Base_SetConfig+0x40>
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	4a3a      	ldr	r2, [pc, #232]	; (81035b8 <TIM_Base_SetConfig+0x124>)
 81034d0:	4293      	cmp	r3, r2
 81034d2:	d108      	bne.n	81034e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81034d4:	68fb      	ldr	r3, [r7, #12]
 81034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81034dc:	683b      	ldr	r3, [r7, #0]
 81034de:	685b      	ldr	r3, [r3, #4]
 81034e0:	68fa      	ldr	r2, [r7, #12]
 81034e2:	4313      	orrs	r3, r2
 81034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	4a2f      	ldr	r2, [pc, #188]	; (81035a8 <TIM_Base_SetConfig+0x114>)
 81034ea:	4293      	cmp	r3, r2
 81034ec:	d01f      	beq.n	810352e <TIM_Base_SetConfig+0x9a>
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81034f4:	d01b      	beq.n	810352e <TIM_Base_SetConfig+0x9a>
 81034f6:	687b      	ldr	r3, [r7, #4]
 81034f8:	4a2c      	ldr	r2, [pc, #176]	; (81035ac <TIM_Base_SetConfig+0x118>)
 81034fa:	4293      	cmp	r3, r2
 81034fc:	d017      	beq.n	810352e <TIM_Base_SetConfig+0x9a>
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	4a2b      	ldr	r2, [pc, #172]	; (81035b0 <TIM_Base_SetConfig+0x11c>)
 8103502:	4293      	cmp	r3, r2
 8103504:	d013      	beq.n	810352e <TIM_Base_SetConfig+0x9a>
 8103506:	687b      	ldr	r3, [r7, #4]
 8103508:	4a2a      	ldr	r2, [pc, #168]	; (81035b4 <TIM_Base_SetConfig+0x120>)
 810350a:	4293      	cmp	r3, r2
 810350c:	d00f      	beq.n	810352e <TIM_Base_SetConfig+0x9a>
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	4a29      	ldr	r2, [pc, #164]	; (81035b8 <TIM_Base_SetConfig+0x124>)
 8103512:	4293      	cmp	r3, r2
 8103514:	d00b      	beq.n	810352e <TIM_Base_SetConfig+0x9a>
 8103516:	687b      	ldr	r3, [r7, #4]
 8103518:	4a28      	ldr	r2, [pc, #160]	; (81035bc <TIM_Base_SetConfig+0x128>)
 810351a:	4293      	cmp	r3, r2
 810351c:	d007      	beq.n	810352e <TIM_Base_SetConfig+0x9a>
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	4a27      	ldr	r2, [pc, #156]	; (81035c0 <TIM_Base_SetConfig+0x12c>)
 8103522:	4293      	cmp	r3, r2
 8103524:	d003      	beq.n	810352e <TIM_Base_SetConfig+0x9a>
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	4a26      	ldr	r2, [pc, #152]	; (81035c4 <TIM_Base_SetConfig+0x130>)
 810352a:	4293      	cmp	r3, r2
 810352c:	d108      	bne.n	8103540 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810352e:	68fb      	ldr	r3, [r7, #12]
 8103530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8103536:	683b      	ldr	r3, [r7, #0]
 8103538:	68db      	ldr	r3, [r3, #12]
 810353a:	68fa      	ldr	r2, [r7, #12]
 810353c:	4313      	orrs	r3, r2
 810353e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8103540:	68fb      	ldr	r3, [r7, #12]
 8103542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8103546:	683b      	ldr	r3, [r7, #0]
 8103548:	695b      	ldr	r3, [r3, #20]
 810354a:	4313      	orrs	r3, r2
 810354c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	68fa      	ldr	r2, [r7, #12]
 8103552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8103554:	683b      	ldr	r3, [r7, #0]
 8103556:	689a      	ldr	r2, [r3, #8]
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810355c:	683b      	ldr	r3, [r7, #0]
 810355e:	681a      	ldr	r2, [r3, #0]
 8103560:	687b      	ldr	r3, [r7, #4]
 8103562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	4a10      	ldr	r2, [pc, #64]	; (81035a8 <TIM_Base_SetConfig+0x114>)
 8103568:	4293      	cmp	r3, r2
 810356a:	d00f      	beq.n	810358c <TIM_Base_SetConfig+0xf8>
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	4a12      	ldr	r2, [pc, #72]	; (81035b8 <TIM_Base_SetConfig+0x124>)
 8103570:	4293      	cmp	r3, r2
 8103572:	d00b      	beq.n	810358c <TIM_Base_SetConfig+0xf8>
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	4a11      	ldr	r2, [pc, #68]	; (81035bc <TIM_Base_SetConfig+0x128>)
 8103578:	4293      	cmp	r3, r2
 810357a:	d007      	beq.n	810358c <TIM_Base_SetConfig+0xf8>
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	4a10      	ldr	r2, [pc, #64]	; (81035c0 <TIM_Base_SetConfig+0x12c>)
 8103580:	4293      	cmp	r3, r2
 8103582:	d003      	beq.n	810358c <TIM_Base_SetConfig+0xf8>
 8103584:	687b      	ldr	r3, [r7, #4]
 8103586:	4a0f      	ldr	r2, [pc, #60]	; (81035c4 <TIM_Base_SetConfig+0x130>)
 8103588:	4293      	cmp	r3, r2
 810358a:	d103      	bne.n	8103594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810358c:	683b      	ldr	r3, [r7, #0]
 810358e:	691a      	ldr	r2, [r3, #16]
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8103594:	687b      	ldr	r3, [r7, #4]
 8103596:	2201      	movs	r2, #1
 8103598:	615a      	str	r2, [r3, #20]
}
 810359a:	bf00      	nop
 810359c:	3714      	adds	r7, #20
 810359e:	46bd      	mov	sp, r7
 81035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035a4:	4770      	bx	lr
 81035a6:	bf00      	nop
 81035a8:	40010000 	.word	0x40010000
 81035ac:	40000400 	.word	0x40000400
 81035b0:	40000800 	.word	0x40000800
 81035b4:	40000c00 	.word	0x40000c00
 81035b8:	40010400 	.word	0x40010400
 81035bc:	40014000 	.word	0x40014000
 81035c0:	40014400 	.word	0x40014400
 81035c4:	40014800 	.word	0x40014800

081035c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81035c8:	b480      	push	{r7}
 81035ca:	b087      	sub	sp, #28
 81035cc:	af00      	add	r7, sp, #0
 81035ce:	6078      	str	r0, [r7, #4]
 81035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81035d2:	687b      	ldr	r3, [r7, #4]
 81035d4:	6a1b      	ldr	r3, [r3, #32]
 81035d6:	f023 0201 	bic.w	r2, r3, #1
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81035de:	687b      	ldr	r3, [r7, #4]
 81035e0:	6a1b      	ldr	r3, [r3, #32]
 81035e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	685b      	ldr	r3, [r3, #4]
 81035e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81035ea:	687b      	ldr	r3, [r7, #4]
 81035ec:	699b      	ldr	r3, [r3, #24]
 81035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81035f0:	68fb      	ldr	r3, [r7, #12]
 81035f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81035fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81035fc:	68fb      	ldr	r3, [r7, #12]
 81035fe:	f023 0303 	bic.w	r3, r3, #3
 8103602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103604:	683b      	ldr	r3, [r7, #0]
 8103606:	681b      	ldr	r3, [r3, #0]
 8103608:	68fa      	ldr	r2, [r7, #12]
 810360a:	4313      	orrs	r3, r2
 810360c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810360e:	697b      	ldr	r3, [r7, #20]
 8103610:	f023 0302 	bic.w	r3, r3, #2
 8103614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8103616:	683b      	ldr	r3, [r7, #0]
 8103618:	689b      	ldr	r3, [r3, #8]
 810361a:	697a      	ldr	r2, [r7, #20]
 810361c:	4313      	orrs	r3, r2
 810361e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	4a2c      	ldr	r2, [pc, #176]	; (81036d4 <TIM_OC1_SetConfig+0x10c>)
 8103624:	4293      	cmp	r3, r2
 8103626:	d00f      	beq.n	8103648 <TIM_OC1_SetConfig+0x80>
 8103628:	687b      	ldr	r3, [r7, #4]
 810362a:	4a2b      	ldr	r2, [pc, #172]	; (81036d8 <TIM_OC1_SetConfig+0x110>)
 810362c:	4293      	cmp	r3, r2
 810362e:	d00b      	beq.n	8103648 <TIM_OC1_SetConfig+0x80>
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	4a2a      	ldr	r2, [pc, #168]	; (81036dc <TIM_OC1_SetConfig+0x114>)
 8103634:	4293      	cmp	r3, r2
 8103636:	d007      	beq.n	8103648 <TIM_OC1_SetConfig+0x80>
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	4a29      	ldr	r2, [pc, #164]	; (81036e0 <TIM_OC1_SetConfig+0x118>)
 810363c:	4293      	cmp	r3, r2
 810363e:	d003      	beq.n	8103648 <TIM_OC1_SetConfig+0x80>
 8103640:	687b      	ldr	r3, [r7, #4]
 8103642:	4a28      	ldr	r2, [pc, #160]	; (81036e4 <TIM_OC1_SetConfig+0x11c>)
 8103644:	4293      	cmp	r3, r2
 8103646:	d10c      	bne.n	8103662 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8103648:	697b      	ldr	r3, [r7, #20]
 810364a:	f023 0308 	bic.w	r3, r3, #8
 810364e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8103650:	683b      	ldr	r3, [r7, #0]
 8103652:	68db      	ldr	r3, [r3, #12]
 8103654:	697a      	ldr	r2, [r7, #20]
 8103656:	4313      	orrs	r3, r2
 8103658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810365a:	697b      	ldr	r3, [r7, #20]
 810365c:	f023 0304 	bic.w	r3, r3, #4
 8103660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	4a1b      	ldr	r2, [pc, #108]	; (81036d4 <TIM_OC1_SetConfig+0x10c>)
 8103666:	4293      	cmp	r3, r2
 8103668:	d00f      	beq.n	810368a <TIM_OC1_SetConfig+0xc2>
 810366a:	687b      	ldr	r3, [r7, #4]
 810366c:	4a1a      	ldr	r2, [pc, #104]	; (81036d8 <TIM_OC1_SetConfig+0x110>)
 810366e:	4293      	cmp	r3, r2
 8103670:	d00b      	beq.n	810368a <TIM_OC1_SetConfig+0xc2>
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	4a19      	ldr	r2, [pc, #100]	; (81036dc <TIM_OC1_SetConfig+0x114>)
 8103676:	4293      	cmp	r3, r2
 8103678:	d007      	beq.n	810368a <TIM_OC1_SetConfig+0xc2>
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	4a18      	ldr	r2, [pc, #96]	; (81036e0 <TIM_OC1_SetConfig+0x118>)
 810367e:	4293      	cmp	r3, r2
 8103680:	d003      	beq.n	810368a <TIM_OC1_SetConfig+0xc2>
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	4a17      	ldr	r2, [pc, #92]	; (81036e4 <TIM_OC1_SetConfig+0x11c>)
 8103686:	4293      	cmp	r3, r2
 8103688:	d111      	bne.n	81036ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810368a:	693b      	ldr	r3, [r7, #16]
 810368c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8103692:	693b      	ldr	r3, [r7, #16]
 8103694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8103698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810369a:	683b      	ldr	r3, [r7, #0]
 810369c:	695b      	ldr	r3, [r3, #20]
 810369e:	693a      	ldr	r2, [r7, #16]
 81036a0:	4313      	orrs	r3, r2
 81036a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81036a4:	683b      	ldr	r3, [r7, #0]
 81036a6:	699b      	ldr	r3, [r3, #24]
 81036a8:	693a      	ldr	r2, [r7, #16]
 81036aa:	4313      	orrs	r3, r2
 81036ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81036ae:	687b      	ldr	r3, [r7, #4]
 81036b0:	693a      	ldr	r2, [r7, #16]
 81036b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	68fa      	ldr	r2, [r7, #12]
 81036b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81036ba:	683b      	ldr	r3, [r7, #0]
 81036bc:	685a      	ldr	r2, [r3, #4]
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81036c2:	687b      	ldr	r3, [r7, #4]
 81036c4:	697a      	ldr	r2, [r7, #20]
 81036c6:	621a      	str	r2, [r3, #32]
}
 81036c8:	bf00      	nop
 81036ca:	371c      	adds	r7, #28
 81036cc:	46bd      	mov	sp, r7
 81036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036d2:	4770      	bx	lr
 81036d4:	40010000 	.word	0x40010000
 81036d8:	40010400 	.word	0x40010400
 81036dc:	40014000 	.word	0x40014000
 81036e0:	40014400 	.word	0x40014400
 81036e4:	40014800 	.word	0x40014800

081036e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81036e8:	b480      	push	{r7}
 81036ea:	b087      	sub	sp, #28
 81036ec:	af00      	add	r7, sp, #0
 81036ee:	6078      	str	r0, [r7, #4]
 81036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	6a1b      	ldr	r3, [r3, #32]
 81036f6:	f023 0210 	bic.w	r2, r3, #16
 81036fa:	687b      	ldr	r3, [r7, #4]
 81036fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	6a1b      	ldr	r3, [r3, #32]
 8103702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	685b      	ldr	r3, [r3, #4]
 8103708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	699b      	ldr	r3, [r3, #24]
 810370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8103710:	68fb      	ldr	r3, [r7, #12]
 8103712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8103716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810371c:	68fb      	ldr	r3, [r7, #12]
 810371e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103724:	683b      	ldr	r3, [r7, #0]
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	021b      	lsls	r3, r3, #8
 810372a:	68fa      	ldr	r2, [r7, #12]
 810372c:	4313      	orrs	r3, r2
 810372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8103730:	697b      	ldr	r3, [r7, #20]
 8103732:	f023 0320 	bic.w	r3, r3, #32
 8103736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8103738:	683b      	ldr	r3, [r7, #0]
 810373a:	689b      	ldr	r3, [r3, #8]
 810373c:	011b      	lsls	r3, r3, #4
 810373e:	697a      	ldr	r2, [r7, #20]
 8103740:	4313      	orrs	r3, r2
 8103742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	4a28      	ldr	r2, [pc, #160]	; (81037e8 <TIM_OC2_SetConfig+0x100>)
 8103748:	4293      	cmp	r3, r2
 810374a:	d003      	beq.n	8103754 <TIM_OC2_SetConfig+0x6c>
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	4a27      	ldr	r2, [pc, #156]	; (81037ec <TIM_OC2_SetConfig+0x104>)
 8103750:	4293      	cmp	r3, r2
 8103752:	d10d      	bne.n	8103770 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8103754:	697b      	ldr	r3, [r7, #20]
 8103756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810375a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810375c:	683b      	ldr	r3, [r7, #0]
 810375e:	68db      	ldr	r3, [r3, #12]
 8103760:	011b      	lsls	r3, r3, #4
 8103762:	697a      	ldr	r2, [r7, #20]
 8103764:	4313      	orrs	r3, r2
 8103766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8103768:	697b      	ldr	r3, [r7, #20]
 810376a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810376e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103770:	687b      	ldr	r3, [r7, #4]
 8103772:	4a1d      	ldr	r2, [pc, #116]	; (81037e8 <TIM_OC2_SetConfig+0x100>)
 8103774:	4293      	cmp	r3, r2
 8103776:	d00f      	beq.n	8103798 <TIM_OC2_SetConfig+0xb0>
 8103778:	687b      	ldr	r3, [r7, #4]
 810377a:	4a1c      	ldr	r2, [pc, #112]	; (81037ec <TIM_OC2_SetConfig+0x104>)
 810377c:	4293      	cmp	r3, r2
 810377e:	d00b      	beq.n	8103798 <TIM_OC2_SetConfig+0xb0>
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	4a1b      	ldr	r2, [pc, #108]	; (81037f0 <TIM_OC2_SetConfig+0x108>)
 8103784:	4293      	cmp	r3, r2
 8103786:	d007      	beq.n	8103798 <TIM_OC2_SetConfig+0xb0>
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	4a1a      	ldr	r2, [pc, #104]	; (81037f4 <TIM_OC2_SetConfig+0x10c>)
 810378c:	4293      	cmp	r3, r2
 810378e:	d003      	beq.n	8103798 <TIM_OC2_SetConfig+0xb0>
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	4a19      	ldr	r2, [pc, #100]	; (81037f8 <TIM_OC2_SetConfig+0x110>)
 8103794:	4293      	cmp	r3, r2
 8103796:	d113      	bne.n	81037c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8103798:	693b      	ldr	r3, [r7, #16]
 810379a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810379e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81037a0:	693b      	ldr	r3, [r7, #16]
 81037a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81037a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81037a8:	683b      	ldr	r3, [r7, #0]
 81037aa:	695b      	ldr	r3, [r3, #20]
 81037ac:	009b      	lsls	r3, r3, #2
 81037ae:	693a      	ldr	r2, [r7, #16]
 81037b0:	4313      	orrs	r3, r2
 81037b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81037b4:	683b      	ldr	r3, [r7, #0]
 81037b6:	699b      	ldr	r3, [r3, #24]
 81037b8:	009b      	lsls	r3, r3, #2
 81037ba:	693a      	ldr	r2, [r7, #16]
 81037bc:	4313      	orrs	r3, r2
 81037be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	693a      	ldr	r2, [r7, #16]
 81037c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	68fa      	ldr	r2, [r7, #12]
 81037ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81037cc:	683b      	ldr	r3, [r7, #0]
 81037ce:	685a      	ldr	r2, [r3, #4]
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	697a      	ldr	r2, [r7, #20]
 81037d8:	621a      	str	r2, [r3, #32]
}
 81037da:	bf00      	nop
 81037dc:	371c      	adds	r7, #28
 81037de:	46bd      	mov	sp, r7
 81037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e4:	4770      	bx	lr
 81037e6:	bf00      	nop
 81037e8:	40010000 	.word	0x40010000
 81037ec:	40010400 	.word	0x40010400
 81037f0:	40014000 	.word	0x40014000
 81037f4:	40014400 	.word	0x40014400
 81037f8:	40014800 	.word	0x40014800

081037fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81037fc:	b480      	push	{r7}
 81037fe:	b087      	sub	sp, #28
 8103800:	af00      	add	r7, sp, #0
 8103802:	6078      	str	r0, [r7, #4]
 8103804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	6a1b      	ldr	r3, [r3, #32]
 810380a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	6a1b      	ldr	r3, [r3, #32]
 8103816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	685b      	ldr	r3, [r3, #4]
 810381c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	69db      	ldr	r3, [r3, #28]
 8103822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8103824:	68fb      	ldr	r3, [r7, #12]
 8103826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810382a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810382e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8103830:	68fb      	ldr	r3, [r7, #12]
 8103832:	f023 0303 	bic.w	r3, r3, #3
 8103836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103838:	683b      	ldr	r3, [r7, #0]
 810383a:	681b      	ldr	r3, [r3, #0]
 810383c:	68fa      	ldr	r2, [r7, #12]
 810383e:	4313      	orrs	r3, r2
 8103840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8103842:	697b      	ldr	r3, [r7, #20]
 8103844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8103848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810384a:	683b      	ldr	r3, [r7, #0]
 810384c:	689b      	ldr	r3, [r3, #8]
 810384e:	021b      	lsls	r3, r3, #8
 8103850:	697a      	ldr	r2, [r7, #20]
 8103852:	4313      	orrs	r3, r2
 8103854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	4a27      	ldr	r2, [pc, #156]	; (81038f8 <TIM_OC3_SetConfig+0xfc>)
 810385a:	4293      	cmp	r3, r2
 810385c:	d003      	beq.n	8103866 <TIM_OC3_SetConfig+0x6a>
 810385e:	687b      	ldr	r3, [r7, #4]
 8103860:	4a26      	ldr	r2, [pc, #152]	; (81038fc <TIM_OC3_SetConfig+0x100>)
 8103862:	4293      	cmp	r3, r2
 8103864:	d10d      	bne.n	8103882 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8103866:	697b      	ldr	r3, [r7, #20]
 8103868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810386c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810386e:	683b      	ldr	r3, [r7, #0]
 8103870:	68db      	ldr	r3, [r3, #12]
 8103872:	021b      	lsls	r3, r3, #8
 8103874:	697a      	ldr	r2, [r7, #20]
 8103876:	4313      	orrs	r3, r2
 8103878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810387a:	697b      	ldr	r3, [r7, #20]
 810387c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8103880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	4a1c      	ldr	r2, [pc, #112]	; (81038f8 <TIM_OC3_SetConfig+0xfc>)
 8103886:	4293      	cmp	r3, r2
 8103888:	d00f      	beq.n	81038aa <TIM_OC3_SetConfig+0xae>
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	4a1b      	ldr	r2, [pc, #108]	; (81038fc <TIM_OC3_SetConfig+0x100>)
 810388e:	4293      	cmp	r3, r2
 8103890:	d00b      	beq.n	81038aa <TIM_OC3_SetConfig+0xae>
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	4a1a      	ldr	r2, [pc, #104]	; (8103900 <TIM_OC3_SetConfig+0x104>)
 8103896:	4293      	cmp	r3, r2
 8103898:	d007      	beq.n	81038aa <TIM_OC3_SetConfig+0xae>
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	4a19      	ldr	r2, [pc, #100]	; (8103904 <TIM_OC3_SetConfig+0x108>)
 810389e:	4293      	cmp	r3, r2
 81038a0:	d003      	beq.n	81038aa <TIM_OC3_SetConfig+0xae>
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	4a18      	ldr	r2, [pc, #96]	; (8103908 <TIM_OC3_SetConfig+0x10c>)
 81038a6:	4293      	cmp	r3, r2
 81038a8:	d113      	bne.n	81038d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81038aa:	693b      	ldr	r3, [r7, #16]
 81038ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81038b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81038b2:	693b      	ldr	r3, [r7, #16]
 81038b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81038ba:	683b      	ldr	r3, [r7, #0]
 81038bc:	695b      	ldr	r3, [r3, #20]
 81038be:	011b      	lsls	r3, r3, #4
 81038c0:	693a      	ldr	r2, [r7, #16]
 81038c2:	4313      	orrs	r3, r2
 81038c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81038c6:	683b      	ldr	r3, [r7, #0]
 81038c8:	699b      	ldr	r3, [r3, #24]
 81038ca:	011b      	lsls	r3, r3, #4
 81038cc:	693a      	ldr	r2, [r7, #16]
 81038ce:	4313      	orrs	r3, r2
 81038d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	693a      	ldr	r2, [r7, #16]
 81038d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	68fa      	ldr	r2, [r7, #12]
 81038dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81038de:	683b      	ldr	r3, [r7, #0]
 81038e0:	685a      	ldr	r2, [r3, #4]
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81038e6:	687b      	ldr	r3, [r7, #4]
 81038e8:	697a      	ldr	r2, [r7, #20]
 81038ea:	621a      	str	r2, [r3, #32]
}
 81038ec:	bf00      	nop
 81038ee:	371c      	adds	r7, #28
 81038f0:	46bd      	mov	sp, r7
 81038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038f6:	4770      	bx	lr
 81038f8:	40010000 	.word	0x40010000
 81038fc:	40010400 	.word	0x40010400
 8103900:	40014000 	.word	0x40014000
 8103904:	40014400 	.word	0x40014400
 8103908:	40014800 	.word	0x40014800

0810390c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810390c:	b480      	push	{r7}
 810390e:	b087      	sub	sp, #28
 8103910:	af00      	add	r7, sp, #0
 8103912:	6078      	str	r0, [r7, #4]
 8103914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	6a1b      	ldr	r3, [r3, #32]
 810391a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	6a1b      	ldr	r3, [r3, #32]
 8103926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	685b      	ldr	r3, [r3, #4]
 810392c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	69db      	ldr	r3, [r3, #28]
 8103932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8103934:	68fb      	ldr	r3, [r7, #12]
 8103936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810393a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810393e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8103940:	68fb      	ldr	r3, [r7, #12]
 8103942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103948:	683b      	ldr	r3, [r7, #0]
 810394a:	681b      	ldr	r3, [r3, #0]
 810394c:	021b      	lsls	r3, r3, #8
 810394e:	68fa      	ldr	r2, [r7, #12]
 8103950:	4313      	orrs	r3, r2
 8103952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8103954:	693b      	ldr	r3, [r7, #16]
 8103956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810395a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810395c:	683b      	ldr	r3, [r7, #0]
 810395e:	689b      	ldr	r3, [r3, #8]
 8103960:	031b      	lsls	r3, r3, #12
 8103962:	693a      	ldr	r2, [r7, #16]
 8103964:	4313      	orrs	r3, r2
 8103966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	4a18      	ldr	r2, [pc, #96]	; (81039cc <TIM_OC4_SetConfig+0xc0>)
 810396c:	4293      	cmp	r3, r2
 810396e:	d00f      	beq.n	8103990 <TIM_OC4_SetConfig+0x84>
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	4a17      	ldr	r2, [pc, #92]	; (81039d0 <TIM_OC4_SetConfig+0xc4>)
 8103974:	4293      	cmp	r3, r2
 8103976:	d00b      	beq.n	8103990 <TIM_OC4_SetConfig+0x84>
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	4a16      	ldr	r2, [pc, #88]	; (81039d4 <TIM_OC4_SetConfig+0xc8>)
 810397c:	4293      	cmp	r3, r2
 810397e:	d007      	beq.n	8103990 <TIM_OC4_SetConfig+0x84>
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	4a15      	ldr	r2, [pc, #84]	; (81039d8 <TIM_OC4_SetConfig+0xcc>)
 8103984:	4293      	cmp	r3, r2
 8103986:	d003      	beq.n	8103990 <TIM_OC4_SetConfig+0x84>
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	4a14      	ldr	r2, [pc, #80]	; (81039dc <TIM_OC4_SetConfig+0xd0>)
 810398c:	4293      	cmp	r3, r2
 810398e:	d109      	bne.n	81039a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8103990:	697b      	ldr	r3, [r7, #20]
 8103992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8103996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8103998:	683b      	ldr	r3, [r7, #0]
 810399a:	695b      	ldr	r3, [r3, #20]
 810399c:	019b      	lsls	r3, r3, #6
 810399e:	697a      	ldr	r2, [r7, #20]
 81039a0:	4313      	orrs	r3, r2
 81039a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	697a      	ldr	r2, [r7, #20]
 81039a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	68fa      	ldr	r2, [r7, #12]
 81039ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81039b0:	683b      	ldr	r3, [r7, #0]
 81039b2:	685a      	ldr	r2, [r3, #4]
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81039b8:	687b      	ldr	r3, [r7, #4]
 81039ba:	693a      	ldr	r2, [r7, #16]
 81039bc:	621a      	str	r2, [r3, #32]
}
 81039be:	bf00      	nop
 81039c0:	371c      	adds	r7, #28
 81039c2:	46bd      	mov	sp, r7
 81039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039c8:	4770      	bx	lr
 81039ca:	bf00      	nop
 81039cc:	40010000 	.word	0x40010000
 81039d0:	40010400 	.word	0x40010400
 81039d4:	40014000 	.word	0x40014000
 81039d8:	40014400 	.word	0x40014400
 81039dc:	40014800 	.word	0x40014800

081039e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81039e0:	b480      	push	{r7}
 81039e2:	b087      	sub	sp, #28
 81039e4:	af00      	add	r7, sp, #0
 81039e6:	6078      	str	r0, [r7, #4]
 81039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	6a1b      	ldr	r3, [r3, #32]
 81039ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	6a1b      	ldr	r3, [r3, #32]
 81039fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	685b      	ldr	r3, [r3, #4]
 8103a00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8103a08:	68fb      	ldr	r3, [r7, #12]
 8103a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103a14:	683b      	ldr	r3, [r7, #0]
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	68fa      	ldr	r2, [r7, #12]
 8103a1a:	4313      	orrs	r3, r2
 8103a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8103a1e:	693b      	ldr	r3, [r7, #16]
 8103a20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8103a24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8103a26:	683b      	ldr	r3, [r7, #0]
 8103a28:	689b      	ldr	r3, [r3, #8]
 8103a2a:	041b      	lsls	r3, r3, #16
 8103a2c:	693a      	ldr	r2, [r7, #16]
 8103a2e:	4313      	orrs	r3, r2
 8103a30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	4a17      	ldr	r2, [pc, #92]	; (8103a94 <TIM_OC5_SetConfig+0xb4>)
 8103a36:	4293      	cmp	r3, r2
 8103a38:	d00f      	beq.n	8103a5a <TIM_OC5_SetConfig+0x7a>
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	4a16      	ldr	r2, [pc, #88]	; (8103a98 <TIM_OC5_SetConfig+0xb8>)
 8103a3e:	4293      	cmp	r3, r2
 8103a40:	d00b      	beq.n	8103a5a <TIM_OC5_SetConfig+0x7a>
 8103a42:	687b      	ldr	r3, [r7, #4]
 8103a44:	4a15      	ldr	r2, [pc, #84]	; (8103a9c <TIM_OC5_SetConfig+0xbc>)
 8103a46:	4293      	cmp	r3, r2
 8103a48:	d007      	beq.n	8103a5a <TIM_OC5_SetConfig+0x7a>
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	4a14      	ldr	r2, [pc, #80]	; (8103aa0 <TIM_OC5_SetConfig+0xc0>)
 8103a4e:	4293      	cmp	r3, r2
 8103a50:	d003      	beq.n	8103a5a <TIM_OC5_SetConfig+0x7a>
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	4a13      	ldr	r2, [pc, #76]	; (8103aa4 <TIM_OC5_SetConfig+0xc4>)
 8103a56:	4293      	cmp	r3, r2
 8103a58:	d109      	bne.n	8103a6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8103a5a:	697b      	ldr	r3, [r7, #20]
 8103a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103a60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8103a62:	683b      	ldr	r3, [r7, #0]
 8103a64:	695b      	ldr	r3, [r3, #20]
 8103a66:	021b      	lsls	r3, r3, #8
 8103a68:	697a      	ldr	r2, [r7, #20]
 8103a6a:	4313      	orrs	r3, r2
 8103a6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	697a      	ldr	r2, [r7, #20]
 8103a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	68fa      	ldr	r2, [r7, #12]
 8103a78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8103a7a:	683b      	ldr	r3, [r7, #0]
 8103a7c:	685a      	ldr	r2, [r3, #4]
 8103a7e:	687b      	ldr	r3, [r7, #4]
 8103a80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	693a      	ldr	r2, [r7, #16]
 8103a86:	621a      	str	r2, [r3, #32]
}
 8103a88:	bf00      	nop
 8103a8a:	371c      	adds	r7, #28
 8103a8c:	46bd      	mov	sp, r7
 8103a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a92:	4770      	bx	lr
 8103a94:	40010000 	.word	0x40010000
 8103a98:	40010400 	.word	0x40010400
 8103a9c:	40014000 	.word	0x40014000
 8103aa0:	40014400 	.word	0x40014400
 8103aa4:	40014800 	.word	0x40014800

08103aa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8103aa8:	b480      	push	{r7}
 8103aaa:	b087      	sub	sp, #28
 8103aac:	af00      	add	r7, sp, #0
 8103aae:	6078      	str	r0, [r7, #4]
 8103ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	6a1b      	ldr	r3, [r3, #32]
 8103ab6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	6a1b      	ldr	r3, [r3, #32]
 8103ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	685b      	ldr	r3, [r3, #4]
 8103ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8103ad0:	68fb      	ldr	r3, [r7, #12]
 8103ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8103ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8103ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103adc:	683b      	ldr	r3, [r7, #0]
 8103ade:	681b      	ldr	r3, [r3, #0]
 8103ae0:	021b      	lsls	r3, r3, #8
 8103ae2:	68fa      	ldr	r2, [r7, #12]
 8103ae4:	4313      	orrs	r3, r2
 8103ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8103ae8:	693b      	ldr	r3, [r7, #16]
 8103aea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8103aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8103af0:	683b      	ldr	r3, [r7, #0]
 8103af2:	689b      	ldr	r3, [r3, #8]
 8103af4:	051b      	lsls	r3, r3, #20
 8103af6:	693a      	ldr	r2, [r7, #16]
 8103af8:	4313      	orrs	r3, r2
 8103afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	4a18      	ldr	r2, [pc, #96]	; (8103b60 <TIM_OC6_SetConfig+0xb8>)
 8103b00:	4293      	cmp	r3, r2
 8103b02:	d00f      	beq.n	8103b24 <TIM_OC6_SetConfig+0x7c>
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	4a17      	ldr	r2, [pc, #92]	; (8103b64 <TIM_OC6_SetConfig+0xbc>)
 8103b08:	4293      	cmp	r3, r2
 8103b0a:	d00b      	beq.n	8103b24 <TIM_OC6_SetConfig+0x7c>
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	4a16      	ldr	r2, [pc, #88]	; (8103b68 <TIM_OC6_SetConfig+0xc0>)
 8103b10:	4293      	cmp	r3, r2
 8103b12:	d007      	beq.n	8103b24 <TIM_OC6_SetConfig+0x7c>
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	4a15      	ldr	r2, [pc, #84]	; (8103b6c <TIM_OC6_SetConfig+0xc4>)
 8103b18:	4293      	cmp	r3, r2
 8103b1a:	d003      	beq.n	8103b24 <TIM_OC6_SetConfig+0x7c>
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	4a14      	ldr	r2, [pc, #80]	; (8103b70 <TIM_OC6_SetConfig+0xc8>)
 8103b20:	4293      	cmp	r3, r2
 8103b22:	d109      	bne.n	8103b38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8103b24:	697b      	ldr	r3, [r7, #20]
 8103b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8103b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8103b2c:	683b      	ldr	r3, [r7, #0]
 8103b2e:	695b      	ldr	r3, [r3, #20]
 8103b30:	029b      	lsls	r3, r3, #10
 8103b32:	697a      	ldr	r2, [r7, #20]
 8103b34:	4313      	orrs	r3, r2
 8103b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	697a      	ldr	r2, [r7, #20]
 8103b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8103b3e:	687b      	ldr	r3, [r7, #4]
 8103b40:	68fa      	ldr	r2, [r7, #12]
 8103b42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8103b44:	683b      	ldr	r3, [r7, #0]
 8103b46:	685a      	ldr	r2, [r3, #4]
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	693a      	ldr	r2, [r7, #16]
 8103b50:	621a      	str	r2, [r3, #32]
}
 8103b52:	bf00      	nop
 8103b54:	371c      	adds	r7, #28
 8103b56:	46bd      	mov	sp, r7
 8103b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b5c:	4770      	bx	lr
 8103b5e:	bf00      	nop
 8103b60:	40010000 	.word	0x40010000
 8103b64:	40010400 	.word	0x40010400
 8103b68:	40014000 	.word	0x40014000
 8103b6c:	40014400 	.word	0x40014400
 8103b70:	40014800 	.word	0x40014800

08103b74 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8103b74:	b480      	push	{r7}
 8103b76:	b087      	sub	sp, #28
 8103b78:	af00      	add	r7, sp, #0
 8103b7a:	60f8      	str	r0, [r7, #12]
 8103b7c:	60b9      	str	r1, [r7, #8]
 8103b7e:	607a      	str	r2, [r7, #4]
 8103b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8103b82:	68fb      	ldr	r3, [r7, #12]
 8103b84:	6a1b      	ldr	r3, [r3, #32]
 8103b86:	f023 0201 	bic.w	r2, r3, #1
 8103b8a:	68fb      	ldr	r3, [r7, #12]
 8103b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8103b8e:	68fb      	ldr	r3, [r7, #12]
 8103b90:	699b      	ldr	r3, [r3, #24]
 8103b92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8103b94:	68fb      	ldr	r3, [r7, #12]
 8103b96:	6a1b      	ldr	r3, [r3, #32]
 8103b98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8103b9a:	68fb      	ldr	r3, [r7, #12]
 8103b9c:	4a28      	ldr	r2, [pc, #160]	; (8103c40 <TIM_TI1_SetConfig+0xcc>)
 8103b9e:	4293      	cmp	r3, r2
 8103ba0:	d01b      	beq.n	8103bda <TIM_TI1_SetConfig+0x66>
 8103ba2:	68fb      	ldr	r3, [r7, #12]
 8103ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103ba8:	d017      	beq.n	8103bda <TIM_TI1_SetConfig+0x66>
 8103baa:	68fb      	ldr	r3, [r7, #12]
 8103bac:	4a25      	ldr	r2, [pc, #148]	; (8103c44 <TIM_TI1_SetConfig+0xd0>)
 8103bae:	4293      	cmp	r3, r2
 8103bb0:	d013      	beq.n	8103bda <TIM_TI1_SetConfig+0x66>
 8103bb2:	68fb      	ldr	r3, [r7, #12]
 8103bb4:	4a24      	ldr	r2, [pc, #144]	; (8103c48 <TIM_TI1_SetConfig+0xd4>)
 8103bb6:	4293      	cmp	r3, r2
 8103bb8:	d00f      	beq.n	8103bda <TIM_TI1_SetConfig+0x66>
 8103bba:	68fb      	ldr	r3, [r7, #12]
 8103bbc:	4a23      	ldr	r2, [pc, #140]	; (8103c4c <TIM_TI1_SetConfig+0xd8>)
 8103bbe:	4293      	cmp	r3, r2
 8103bc0:	d00b      	beq.n	8103bda <TIM_TI1_SetConfig+0x66>
 8103bc2:	68fb      	ldr	r3, [r7, #12]
 8103bc4:	4a22      	ldr	r2, [pc, #136]	; (8103c50 <TIM_TI1_SetConfig+0xdc>)
 8103bc6:	4293      	cmp	r3, r2
 8103bc8:	d007      	beq.n	8103bda <TIM_TI1_SetConfig+0x66>
 8103bca:	68fb      	ldr	r3, [r7, #12]
 8103bcc:	4a21      	ldr	r2, [pc, #132]	; (8103c54 <TIM_TI1_SetConfig+0xe0>)
 8103bce:	4293      	cmp	r3, r2
 8103bd0:	d003      	beq.n	8103bda <TIM_TI1_SetConfig+0x66>
 8103bd2:	68fb      	ldr	r3, [r7, #12]
 8103bd4:	4a20      	ldr	r2, [pc, #128]	; (8103c58 <TIM_TI1_SetConfig+0xe4>)
 8103bd6:	4293      	cmp	r3, r2
 8103bd8:	d101      	bne.n	8103bde <TIM_TI1_SetConfig+0x6a>
 8103bda:	2301      	movs	r3, #1
 8103bdc:	e000      	b.n	8103be0 <TIM_TI1_SetConfig+0x6c>
 8103bde:	2300      	movs	r3, #0
 8103be0:	2b00      	cmp	r3, #0
 8103be2:	d008      	beq.n	8103bf6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8103be4:	697b      	ldr	r3, [r7, #20]
 8103be6:	f023 0303 	bic.w	r3, r3, #3
 8103bea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8103bec:	697a      	ldr	r2, [r7, #20]
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	4313      	orrs	r3, r2
 8103bf2:	617b      	str	r3, [r7, #20]
 8103bf4:	e003      	b.n	8103bfe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8103bf6:	697b      	ldr	r3, [r7, #20]
 8103bf8:	f043 0301 	orr.w	r3, r3, #1
 8103bfc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8103bfe:	697b      	ldr	r3, [r7, #20]
 8103c00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8103c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8103c06:	683b      	ldr	r3, [r7, #0]
 8103c08:	011b      	lsls	r3, r3, #4
 8103c0a:	b2db      	uxtb	r3, r3
 8103c0c:	697a      	ldr	r2, [r7, #20]
 8103c0e:	4313      	orrs	r3, r2
 8103c10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8103c12:	693b      	ldr	r3, [r7, #16]
 8103c14:	f023 030a 	bic.w	r3, r3, #10
 8103c18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8103c1a:	68bb      	ldr	r3, [r7, #8]
 8103c1c:	f003 030a 	and.w	r3, r3, #10
 8103c20:	693a      	ldr	r2, [r7, #16]
 8103c22:	4313      	orrs	r3, r2
 8103c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8103c26:	68fb      	ldr	r3, [r7, #12]
 8103c28:	697a      	ldr	r2, [r7, #20]
 8103c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8103c2c:	68fb      	ldr	r3, [r7, #12]
 8103c2e:	693a      	ldr	r2, [r7, #16]
 8103c30:	621a      	str	r2, [r3, #32]
}
 8103c32:	bf00      	nop
 8103c34:	371c      	adds	r7, #28
 8103c36:	46bd      	mov	sp, r7
 8103c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c3c:	4770      	bx	lr
 8103c3e:	bf00      	nop
 8103c40:	40010000 	.word	0x40010000
 8103c44:	40000400 	.word	0x40000400
 8103c48:	40000800 	.word	0x40000800
 8103c4c:	40000c00 	.word	0x40000c00
 8103c50:	40010400 	.word	0x40010400
 8103c54:	40001800 	.word	0x40001800
 8103c58:	40014000 	.word	0x40014000

08103c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8103c5c:	b480      	push	{r7}
 8103c5e:	b087      	sub	sp, #28
 8103c60:	af00      	add	r7, sp, #0
 8103c62:	60f8      	str	r0, [r7, #12]
 8103c64:	60b9      	str	r1, [r7, #8]
 8103c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8103c68:	68fb      	ldr	r3, [r7, #12]
 8103c6a:	6a1b      	ldr	r3, [r3, #32]
 8103c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8103c6e:	68fb      	ldr	r3, [r7, #12]
 8103c70:	6a1b      	ldr	r3, [r3, #32]
 8103c72:	f023 0201 	bic.w	r2, r3, #1
 8103c76:	68fb      	ldr	r3, [r7, #12]
 8103c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8103c7a:	68fb      	ldr	r3, [r7, #12]
 8103c7c:	699b      	ldr	r3, [r3, #24]
 8103c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8103c80:	693b      	ldr	r3, [r7, #16]
 8103c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8103c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	011b      	lsls	r3, r3, #4
 8103c8c:	693a      	ldr	r2, [r7, #16]
 8103c8e:	4313      	orrs	r3, r2
 8103c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8103c92:	697b      	ldr	r3, [r7, #20]
 8103c94:	f023 030a 	bic.w	r3, r3, #10
 8103c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8103c9a:	697a      	ldr	r2, [r7, #20]
 8103c9c:	68bb      	ldr	r3, [r7, #8]
 8103c9e:	4313      	orrs	r3, r2
 8103ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8103ca2:	68fb      	ldr	r3, [r7, #12]
 8103ca4:	693a      	ldr	r2, [r7, #16]
 8103ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8103ca8:	68fb      	ldr	r3, [r7, #12]
 8103caa:	697a      	ldr	r2, [r7, #20]
 8103cac:	621a      	str	r2, [r3, #32]
}
 8103cae:	bf00      	nop
 8103cb0:	371c      	adds	r7, #28
 8103cb2:	46bd      	mov	sp, r7
 8103cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cb8:	4770      	bx	lr

08103cba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8103cba:	b480      	push	{r7}
 8103cbc:	b087      	sub	sp, #28
 8103cbe:	af00      	add	r7, sp, #0
 8103cc0:	60f8      	str	r0, [r7, #12]
 8103cc2:	60b9      	str	r1, [r7, #8]
 8103cc4:	607a      	str	r2, [r7, #4]
 8103cc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8103cc8:	68fb      	ldr	r3, [r7, #12]
 8103cca:	6a1b      	ldr	r3, [r3, #32]
 8103ccc:	f023 0210 	bic.w	r2, r3, #16
 8103cd0:	68fb      	ldr	r3, [r7, #12]
 8103cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8103cd4:	68fb      	ldr	r3, [r7, #12]
 8103cd6:	699b      	ldr	r3, [r3, #24]
 8103cd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8103cda:	68fb      	ldr	r3, [r7, #12]
 8103cdc:	6a1b      	ldr	r3, [r3, #32]
 8103cde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8103ce0:	697b      	ldr	r3, [r7, #20]
 8103ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103ce6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	021b      	lsls	r3, r3, #8
 8103cec:	697a      	ldr	r2, [r7, #20]
 8103cee:	4313      	orrs	r3, r2
 8103cf0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8103cf2:	697b      	ldr	r3, [r7, #20]
 8103cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8103cf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8103cfa:	683b      	ldr	r3, [r7, #0]
 8103cfc:	031b      	lsls	r3, r3, #12
 8103cfe:	b29b      	uxth	r3, r3
 8103d00:	697a      	ldr	r2, [r7, #20]
 8103d02:	4313      	orrs	r3, r2
 8103d04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8103d06:	693b      	ldr	r3, [r7, #16]
 8103d08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8103d0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8103d0e:	68bb      	ldr	r3, [r7, #8]
 8103d10:	011b      	lsls	r3, r3, #4
 8103d12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8103d16:	693a      	ldr	r2, [r7, #16]
 8103d18:	4313      	orrs	r3, r2
 8103d1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8103d1c:	68fb      	ldr	r3, [r7, #12]
 8103d1e:	697a      	ldr	r2, [r7, #20]
 8103d20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8103d22:	68fb      	ldr	r3, [r7, #12]
 8103d24:	693a      	ldr	r2, [r7, #16]
 8103d26:	621a      	str	r2, [r3, #32]
}
 8103d28:	bf00      	nop
 8103d2a:	371c      	adds	r7, #28
 8103d2c:	46bd      	mov	sp, r7
 8103d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d32:	4770      	bx	lr

08103d34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8103d34:	b480      	push	{r7}
 8103d36:	b087      	sub	sp, #28
 8103d38:	af00      	add	r7, sp, #0
 8103d3a:	60f8      	str	r0, [r7, #12]
 8103d3c:	60b9      	str	r1, [r7, #8]
 8103d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8103d40:	68fb      	ldr	r3, [r7, #12]
 8103d42:	6a1b      	ldr	r3, [r3, #32]
 8103d44:	f023 0210 	bic.w	r2, r3, #16
 8103d48:	68fb      	ldr	r3, [r7, #12]
 8103d4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8103d4c:	68fb      	ldr	r3, [r7, #12]
 8103d4e:	699b      	ldr	r3, [r3, #24]
 8103d50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8103d52:	68fb      	ldr	r3, [r7, #12]
 8103d54:	6a1b      	ldr	r3, [r3, #32]
 8103d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8103d58:	697b      	ldr	r3, [r7, #20]
 8103d5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8103d5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	031b      	lsls	r3, r3, #12
 8103d64:	697a      	ldr	r2, [r7, #20]
 8103d66:	4313      	orrs	r3, r2
 8103d68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8103d6a:	693b      	ldr	r3, [r7, #16]
 8103d6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8103d70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8103d72:	68bb      	ldr	r3, [r7, #8]
 8103d74:	011b      	lsls	r3, r3, #4
 8103d76:	693a      	ldr	r2, [r7, #16]
 8103d78:	4313      	orrs	r3, r2
 8103d7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8103d7c:	68fb      	ldr	r3, [r7, #12]
 8103d7e:	697a      	ldr	r2, [r7, #20]
 8103d80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8103d82:	68fb      	ldr	r3, [r7, #12]
 8103d84:	693a      	ldr	r2, [r7, #16]
 8103d86:	621a      	str	r2, [r3, #32]
}
 8103d88:	bf00      	nop
 8103d8a:	371c      	adds	r7, #28
 8103d8c:	46bd      	mov	sp, r7
 8103d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d92:	4770      	bx	lr

08103d94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8103d94:	b480      	push	{r7}
 8103d96:	b087      	sub	sp, #28
 8103d98:	af00      	add	r7, sp, #0
 8103d9a:	60f8      	str	r0, [r7, #12]
 8103d9c:	60b9      	str	r1, [r7, #8]
 8103d9e:	607a      	str	r2, [r7, #4]
 8103da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8103da2:	68fb      	ldr	r3, [r7, #12]
 8103da4:	6a1b      	ldr	r3, [r3, #32]
 8103da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8103daa:	68fb      	ldr	r3, [r7, #12]
 8103dac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8103dae:	68fb      	ldr	r3, [r7, #12]
 8103db0:	69db      	ldr	r3, [r3, #28]
 8103db2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8103db4:	68fb      	ldr	r3, [r7, #12]
 8103db6:	6a1b      	ldr	r3, [r3, #32]
 8103db8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8103dba:	697b      	ldr	r3, [r7, #20]
 8103dbc:	f023 0303 	bic.w	r3, r3, #3
 8103dc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8103dc2:	697a      	ldr	r2, [r7, #20]
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	4313      	orrs	r3, r2
 8103dc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8103dca:	697b      	ldr	r3, [r7, #20]
 8103dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8103dd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8103dd2:	683b      	ldr	r3, [r7, #0]
 8103dd4:	011b      	lsls	r3, r3, #4
 8103dd6:	b2db      	uxtb	r3, r3
 8103dd8:	697a      	ldr	r2, [r7, #20]
 8103dda:	4313      	orrs	r3, r2
 8103ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8103dde:	693b      	ldr	r3, [r7, #16]
 8103de0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8103de4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8103de6:	68bb      	ldr	r3, [r7, #8]
 8103de8:	021b      	lsls	r3, r3, #8
 8103dea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8103dee:	693a      	ldr	r2, [r7, #16]
 8103df0:	4313      	orrs	r3, r2
 8103df2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8103df4:	68fb      	ldr	r3, [r7, #12]
 8103df6:	697a      	ldr	r2, [r7, #20]
 8103df8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8103dfa:	68fb      	ldr	r3, [r7, #12]
 8103dfc:	693a      	ldr	r2, [r7, #16]
 8103dfe:	621a      	str	r2, [r3, #32]
}
 8103e00:	bf00      	nop
 8103e02:	371c      	adds	r7, #28
 8103e04:	46bd      	mov	sp, r7
 8103e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e0a:	4770      	bx	lr

08103e0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8103e0c:	b480      	push	{r7}
 8103e0e:	b087      	sub	sp, #28
 8103e10:	af00      	add	r7, sp, #0
 8103e12:	60f8      	str	r0, [r7, #12]
 8103e14:	60b9      	str	r1, [r7, #8]
 8103e16:	607a      	str	r2, [r7, #4]
 8103e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8103e1a:	68fb      	ldr	r3, [r7, #12]
 8103e1c:	6a1b      	ldr	r3, [r3, #32]
 8103e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8103e22:	68fb      	ldr	r3, [r7, #12]
 8103e24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8103e26:	68fb      	ldr	r3, [r7, #12]
 8103e28:	69db      	ldr	r3, [r3, #28]
 8103e2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8103e2c:	68fb      	ldr	r3, [r7, #12]
 8103e2e:	6a1b      	ldr	r3, [r3, #32]
 8103e30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8103e32:	697b      	ldr	r3, [r7, #20]
 8103e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103e38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	021b      	lsls	r3, r3, #8
 8103e3e:	697a      	ldr	r2, [r7, #20]
 8103e40:	4313      	orrs	r3, r2
 8103e42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8103e44:	697b      	ldr	r3, [r7, #20]
 8103e46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8103e4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8103e4c:	683b      	ldr	r3, [r7, #0]
 8103e4e:	031b      	lsls	r3, r3, #12
 8103e50:	b29b      	uxth	r3, r3
 8103e52:	697a      	ldr	r2, [r7, #20]
 8103e54:	4313      	orrs	r3, r2
 8103e56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8103e58:	693b      	ldr	r3, [r7, #16]
 8103e5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8103e5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8103e60:	68bb      	ldr	r3, [r7, #8]
 8103e62:	031b      	lsls	r3, r3, #12
 8103e64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8103e68:	693a      	ldr	r2, [r7, #16]
 8103e6a:	4313      	orrs	r3, r2
 8103e6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8103e6e:	68fb      	ldr	r3, [r7, #12]
 8103e70:	697a      	ldr	r2, [r7, #20]
 8103e72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8103e74:	68fb      	ldr	r3, [r7, #12]
 8103e76:	693a      	ldr	r2, [r7, #16]
 8103e78:	621a      	str	r2, [r3, #32]
}
 8103e7a:	bf00      	nop
 8103e7c:	371c      	adds	r7, #28
 8103e7e:	46bd      	mov	sp, r7
 8103e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e84:	4770      	bx	lr

08103e86 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8103e86:	b480      	push	{r7}
 8103e88:	b085      	sub	sp, #20
 8103e8a:	af00      	add	r7, sp, #0
 8103e8c:	6078      	str	r0, [r7, #4]
 8103e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	689b      	ldr	r3, [r3, #8]
 8103e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8103e96:	68fb      	ldr	r3, [r7, #12]
 8103e98:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8103e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8103ea2:	683a      	ldr	r2, [r7, #0]
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	4313      	orrs	r3, r2
 8103ea8:	f043 0307 	orr.w	r3, r3, #7
 8103eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8103eae:	687b      	ldr	r3, [r7, #4]
 8103eb0:	68fa      	ldr	r2, [r7, #12]
 8103eb2:	609a      	str	r2, [r3, #8]
}
 8103eb4:	bf00      	nop
 8103eb6:	3714      	adds	r7, #20
 8103eb8:	46bd      	mov	sp, r7
 8103eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ebe:	4770      	bx	lr

08103ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8103ec0:	b480      	push	{r7}
 8103ec2:	b087      	sub	sp, #28
 8103ec4:	af00      	add	r7, sp, #0
 8103ec6:	60f8      	str	r0, [r7, #12]
 8103ec8:	60b9      	str	r1, [r7, #8]
 8103eca:	607a      	str	r2, [r7, #4]
 8103ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8103ece:	68fb      	ldr	r3, [r7, #12]
 8103ed0:	689b      	ldr	r3, [r3, #8]
 8103ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8103ed4:	697b      	ldr	r3, [r7, #20]
 8103ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8103edc:	683b      	ldr	r3, [r7, #0]
 8103ede:	021a      	lsls	r2, r3, #8
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	431a      	orrs	r2, r3
 8103ee4:	68bb      	ldr	r3, [r7, #8]
 8103ee6:	4313      	orrs	r3, r2
 8103ee8:	697a      	ldr	r2, [r7, #20]
 8103eea:	4313      	orrs	r3, r2
 8103eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8103eee:	68fb      	ldr	r3, [r7, #12]
 8103ef0:	697a      	ldr	r2, [r7, #20]
 8103ef2:	609a      	str	r2, [r3, #8]
}
 8103ef4:	bf00      	nop
 8103ef6:	371c      	adds	r7, #28
 8103ef8:	46bd      	mov	sp, r7
 8103efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103efe:	4770      	bx	lr

08103f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8103f00:	b480      	push	{r7}
 8103f02:	b087      	sub	sp, #28
 8103f04:	af00      	add	r7, sp, #0
 8103f06:	60f8      	str	r0, [r7, #12]
 8103f08:	60b9      	str	r1, [r7, #8]
 8103f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8103f0c:	68bb      	ldr	r3, [r7, #8]
 8103f0e:	f003 031f 	and.w	r3, r3, #31
 8103f12:	2201      	movs	r2, #1
 8103f14:	fa02 f303 	lsl.w	r3, r2, r3
 8103f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8103f1a:	68fb      	ldr	r3, [r7, #12]
 8103f1c:	6a1a      	ldr	r2, [r3, #32]
 8103f1e:	697b      	ldr	r3, [r7, #20]
 8103f20:	43db      	mvns	r3, r3
 8103f22:	401a      	ands	r2, r3
 8103f24:	68fb      	ldr	r3, [r7, #12]
 8103f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8103f28:	68fb      	ldr	r3, [r7, #12]
 8103f2a:	6a1a      	ldr	r2, [r3, #32]
 8103f2c:	68bb      	ldr	r3, [r7, #8]
 8103f2e:	f003 031f 	and.w	r3, r3, #31
 8103f32:	6879      	ldr	r1, [r7, #4]
 8103f34:	fa01 f303 	lsl.w	r3, r1, r3
 8103f38:	431a      	orrs	r2, r3
 8103f3a:	68fb      	ldr	r3, [r7, #12]
 8103f3c:	621a      	str	r2, [r3, #32]
}
 8103f3e:	bf00      	nop
 8103f40:	371c      	adds	r7, #28
 8103f42:	46bd      	mov	sp, r7
 8103f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f48:	4770      	bx	lr
	...

08103f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8103f4c:	b480      	push	{r7}
 8103f4e:	b085      	sub	sp, #20
 8103f50:	af00      	add	r7, sp, #0
 8103f52:	6078      	str	r0, [r7, #4]
 8103f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8103f56:	687b      	ldr	r3, [r7, #4]
 8103f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8103f5c:	2b01      	cmp	r3, #1
 8103f5e:	d101      	bne.n	8103f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8103f60:	2302      	movs	r3, #2
 8103f62:	e06d      	b.n	8104040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	2201      	movs	r2, #1
 8103f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103f6c:	687b      	ldr	r3, [r7, #4]
 8103f6e:	2202      	movs	r2, #2
 8103f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	681b      	ldr	r3, [r3, #0]
 8103f78:	685b      	ldr	r3, [r3, #4]
 8103f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	689b      	ldr	r3, [r3, #8]
 8103f82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8103f84:	687b      	ldr	r3, [r7, #4]
 8103f86:	681b      	ldr	r3, [r3, #0]
 8103f88:	4a30      	ldr	r2, [pc, #192]	; (810404c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8103f8a:	4293      	cmp	r3, r2
 8103f8c:	d004      	beq.n	8103f98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	681b      	ldr	r3, [r3, #0]
 8103f92:	4a2f      	ldr	r2, [pc, #188]	; (8104050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8103f94:	4293      	cmp	r3, r2
 8103f96:	d108      	bne.n	8103faa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8103f98:	68fb      	ldr	r3, [r7, #12]
 8103f9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8103f9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8103fa0:	683b      	ldr	r3, [r7, #0]
 8103fa2:	685b      	ldr	r3, [r3, #4]
 8103fa4:	68fa      	ldr	r2, [r7, #12]
 8103fa6:	4313      	orrs	r3, r2
 8103fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8103faa:	68fb      	ldr	r3, [r7, #12]
 8103fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103fb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8103fb2:	683b      	ldr	r3, [r7, #0]
 8103fb4:	681b      	ldr	r3, [r3, #0]
 8103fb6:	68fa      	ldr	r2, [r7, #12]
 8103fb8:	4313      	orrs	r3, r2
 8103fba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	68fa      	ldr	r2, [r7, #12]
 8103fc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8103fc4:	687b      	ldr	r3, [r7, #4]
 8103fc6:	681b      	ldr	r3, [r3, #0]
 8103fc8:	4a20      	ldr	r2, [pc, #128]	; (810404c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8103fca:	4293      	cmp	r3, r2
 8103fcc:	d022      	beq.n	8104014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8103fce:	687b      	ldr	r3, [r7, #4]
 8103fd0:	681b      	ldr	r3, [r3, #0]
 8103fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103fd6:	d01d      	beq.n	8104014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	681b      	ldr	r3, [r3, #0]
 8103fdc:	4a1d      	ldr	r2, [pc, #116]	; (8104054 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8103fde:	4293      	cmp	r3, r2
 8103fe0:	d018      	beq.n	8104014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	4a1c      	ldr	r2, [pc, #112]	; (8104058 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8103fe8:	4293      	cmp	r3, r2
 8103fea:	d013      	beq.n	8104014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	681b      	ldr	r3, [r3, #0]
 8103ff0:	4a1a      	ldr	r2, [pc, #104]	; (810405c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8103ff2:	4293      	cmp	r3, r2
 8103ff4:	d00e      	beq.n	8104014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8103ff6:	687b      	ldr	r3, [r7, #4]
 8103ff8:	681b      	ldr	r3, [r3, #0]
 8103ffa:	4a15      	ldr	r2, [pc, #84]	; (8104050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8103ffc:	4293      	cmp	r3, r2
 8103ffe:	d009      	beq.n	8104014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	4a16      	ldr	r2, [pc, #88]	; (8104060 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8104006:	4293      	cmp	r3, r2
 8104008:	d004      	beq.n	8104014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	681b      	ldr	r3, [r3, #0]
 810400e:	4a15      	ldr	r2, [pc, #84]	; (8104064 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8104010:	4293      	cmp	r3, r2
 8104012:	d10c      	bne.n	810402e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8104014:	68bb      	ldr	r3, [r7, #8]
 8104016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810401a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810401c:	683b      	ldr	r3, [r7, #0]
 810401e:	689b      	ldr	r3, [r3, #8]
 8104020:	68ba      	ldr	r2, [r7, #8]
 8104022:	4313      	orrs	r3, r2
 8104024:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	681b      	ldr	r3, [r3, #0]
 810402a:	68ba      	ldr	r2, [r7, #8]
 810402c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	2201      	movs	r2, #1
 8104032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	2200      	movs	r2, #0
 810403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810403e:	2300      	movs	r3, #0
}
 8104040:	4618      	mov	r0, r3
 8104042:	3714      	adds	r7, #20
 8104044:	46bd      	mov	sp, r7
 8104046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810404a:	4770      	bx	lr
 810404c:	40010000 	.word	0x40010000
 8104050:	40010400 	.word	0x40010400
 8104054:	40000400 	.word	0x40000400
 8104058:	40000800 	.word	0x40000800
 810405c:	40000c00 	.word	0x40000c00
 8104060:	40001800 	.word	0x40001800
 8104064:	40014000 	.word	0x40014000

08104068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8104068:	b480      	push	{r7}
 810406a:	b083      	sub	sp, #12
 810406c:	af00      	add	r7, sp, #0
 810406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8104070:	bf00      	nop
 8104072:	370c      	adds	r7, #12
 8104074:	46bd      	mov	sp, r7
 8104076:	f85d 7b04 	ldr.w	r7, [sp], #4
 810407a:	4770      	bx	lr

0810407c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810407c:	b480      	push	{r7}
 810407e:	b083      	sub	sp, #12
 8104080:	af00      	add	r7, sp, #0
 8104082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8104084:	bf00      	nop
 8104086:	370c      	adds	r7, #12
 8104088:	46bd      	mov	sp, r7
 810408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810408e:	4770      	bx	lr

08104090 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8104090:	b480      	push	{r7}
 8104092:	b083      	sub	sp, #12
 8104094:	af00      	add	r7, sp, #0
 8104096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8104098:	bf00      	nop
 810409a:	370c      	adds	r7, #12
 810409c:	46bd      	mov	sp, r7
 810409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040a2:	4770      	bx	lr

081040a4 <__libc_init_array>:
 81040a4:	b570      	push	{r4, r5, r6, lr}
 81040a6:	4d0d      	ldr	r5, [pc, #52]	; (81040dc <__libc_init_array+0x38>)
 81040a8:	4c0d      	ldr	r4, [pc, #52]	; (81040e0 <__libc_init_array+0x3c>)
 81040aa:	1b64      	subs	r4, r4, r5
 81040ac:	10a4      	asrs	r4, r4, #2
 81040ae:	2600      	movs	r6, #0
 81040b0:	42a6      	cmp	r6, r4
 81040b2:	d109      	bne.n	81040c8 <__libc_init_array+0x24>
 81040b4:	4d0b      	ldr	r5, [pc, #44]	; (81040e4 <__libc_init_array+0x40>)
 81040b6:	4c0c      	ldr	r4, [pc, #48]	; (81040e8 <__libc_init_array+0x44>)
 81040b8:	f000 f85a 	bl	8104170 <_init>
 81040bc:	1b64      	subs	r4, r4, r5
 81040be:	10a4      	asrs	r4, r4, #2
 81040c0:	2600      	movs	r6, #0
 81040c2:	42a6      	cmp	r6, r4
 81040c4:	d105      	bne.n	81040d2 <__libc_init_array+0x2e>
 81040c6:	bd70      	pop	{r4, r5, r6, pc}
 81040c8:	f855 3b04 	ldr.w	r3, [r5], #4
 81040cc:	4798      	blx	r3
 81040ce:	3601      	adds	r6, #1
 81040d0:	e7ee      	b.n	81040b0 <__libc_init_array+0xc>
 81040d2:	f855 3b04 	ldr.w	r3, [r5], #4
 81040d6:	4798      	blx	r3
 81040d8:	3601      	adds	r6, #1
 81040da:	e7f2      	b.n	81040c2 <__libc_init_array+0x1e>
 81040dc:	08104198 	.word	0x08104198
 81040e0:	08104198 	.word	0x08104198
 81040e4:	08104198 	.word	0x08104198
 81040e8:	0810419c 	.word	0x0810419c

081040ec <floorf>:
 81040ec:	ee10 3a10 	vmov	r3, s0
 81040f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 81040f4:	3a7f      	subs	r2, #127	; 0x7f
 81040f6:	2a16      	cmp	r2, #22
 81040f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81040fc:	dc2a      	bgt.n	8104154 <floorf+0x68>
 81040fe:	2a00      	cmp	r2, #0
 8104100:	da11      	bge.n	8104126 <floorf+0x3a>
 8104102:	eddf 7a18 	vldr	s15, [pc, #96]	; 8104164 <floorf+0x78>
 8104106:	ee30 0a27 	vadd.f32	s0, s0, s15
 810410a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 810410e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8104112:	dd05      	ble.n	8104120 <floorf+0x34>
 8104114:	2b00      	cmp	r3, #0
 8104116:	da23      	bge.n	8104160 <floorf+0x74>
 8104118:	4a13      	ldr	r2, [pc, #76]	; (8104168 <floorf+0x7c>)
 810411a:	2900      	cmp	r1, #0
 810411c:	bf18      	it	ne
 810411e:	4613      	movne	r3, r2
 8104120:	ee00 3a10 	vmov	s0, r3
 8104124:	4770      	bx	lr
 8104126:	4911      	ldr	r1, [pc, #68]	; (810416c <floorf+0x80>)
 8104128:	4111      	asrs	r1, r2
 810412a:	420b      	tst	r3, r1
 810412c:	d0fa      	beq.n	8104124 <floorf+0x38>
 810412e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8104164 <floorf+0x78>
 8104132:	ee30 0a27 	vadd.f32	s0, s0, s15
 8104136:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 810413a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810413e:	ddef      	ble.n	8104120 <floorf+0x34>
 8104140:	2b00      	cmp	r3, #0
 8104142:	bfbe      	ittt	lt
 8104144:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8104148:	fa40 f202 	asrlt.w	r2, r0, r2
 810414c:	189b      	addlt	r3, r3, r2
 810414e:	ea23 0301 	bic.w	r3, r3, r1
 8104152:	e7e5      	b.n	8104120 <floorf+0x34>
 8104154:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8104158:	d3e4      	bcc.n	8104124 <floorf+0x38>
 810415a:	ee30 0a00 	vadd.f32	s0, s0, s0
 810415e:	4770      	bx	lr
 8104160:	2300      	movs	r3, #0
 8104162:	e7dd      	b.n	8104120 <floorf+0x34>
 8104164:	7149f2ca 	.word	0x7149f2ca
 8104168:	bf800000 	.word	0xbf800000
 810416c:	007fffff 	.word	0x007fffff

08104170 <_init>:
 8104170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104172:	bf00      	nop
 8104174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104176:	bc08      	pop	{r3}
 8104178:	469e      	mov	lr, r3
 810417a:	4770      	bx	lr

0810417c <_fini>:
 810417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810417e:	bf00      	nop
 8104180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104182:	bc08      	pop	{r3}
 8104184:	469e      	mov	lr, r3
 8104186:	4770      	bx	lr

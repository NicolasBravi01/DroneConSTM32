
USART_NIC_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095cc  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08109870  08109870  00019870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08109950  08109950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08109958  08109958  00019958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810995c  0810995c  0001995c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  10000000  08109960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000017c  10000078  081099d8  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100001f4  081099d8  000201f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b9a0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a43  00000000  00000000  0003ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001500  00000000  00000000  0003e490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001408  00000000  00000000  0003f990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cd2b  00000000  00000000  00040d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019935  00000000  00000000  0007dac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019d9dc  00000000  00000000  000973f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00234dd4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000063cc  00000000  00000000  00234e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000078 	.word	0x10000078
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08109854 	.word	0x08109854

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000007c 	.word	0x1000007c
 81002dc:	08109854 	.word	0x08109854

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_uldivmod>:
 8100cf8:	b953      	cbnz	r3, 8100d10 <__aeabi_uldivmod+0x18>
 8100cfa:	b94a      	cbnz	r2, 8100d10 <__aeabi_uldivmod+0x18>
 8100cfc:	2900      	cmp	r1, #0
 8100cfe:	bf08      	it	eq
 8100d00:	2800      	cmpeq	r0, #0
 8100d02:	bf1c      	itt	ne
 8100d04:	f04f 31ff 	movne.w	r1, #4294967295
 8100d08:	f04f 30ff 	movne.w	r0, #4294967295
 8100d0c:	f000 b974 	b.w	8100ff8 <__aeabi_idiv0>
 8100d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100d18:	f000 f806 	bl	8100d28 <__udivmoddi4>
 8100d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d24:	b004      	add	sp, #16
 8100d26:	4770      	bx	lr

08100d28 <__udivmoddi4>:
 8100d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100d2c:	9d08      	ldr	r5, [sp, #32]
 8100d2e:	4604      	mov	r4, r0
 8100d30:	468e      	mov	lr, r1
 8100d32:	2b00      	cmp	r3, #0
 8100d34:	d14d      	bne.n	8100dd2 <__udivmoddi4+0xaa>
 8100d36:	428a      	cmp	r2, r1
 8100d38:	4694      	mov	ip, r2
 8100d3a:	d969      	bls.n	8100e10 <__udivmoddi4+0xe8>
 8100d3c:	fab2 f282 	clz	r2, r2
 8100d40:	b152      	cbz	r2, 8100d58 <__udivmoddi4+0x30>
 8100d42:	fa01 f302 	lsl.w	r3, r1, r2
 8100d46:	f1c2 0120 	rsb	r1, r2, #32
 8100d4a:	fa20 f101 	lsr.w	r1, r0, r1
 8100d4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8100d52:	ea41 0e03 	orr.w	lr, r1, r3
 8100d56:	4094      	lsls	r4, r2
 8100d58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100d5c:	0c21      	lsrs	r1, r4, #16
 8100d5e:	fbbe f6f8 	udiv	r6, lr, r8
 8100d62:	fa1f f78c 	uxth.w	r7, ip
 8100d66:	fb08 e316 	mls	r3, r8, r6, lr
 8100d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100d6e:	fb06 f107 	mul.w	r1, r6, r7
 8100d72:	4299      	cmp	r1, r3
 8100d74:	d90a      	bls.n	8100d8c <__udivmoddi4+0x64>
 8100d76:	eb1c 0303 	adds.w	r3, ip, r3
 8100d7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8100d7e:	f080 811f 	bcs.w	8100fc0 <__udivmoddi4+0x298>
 8100d82:	4299      	cmp	r1, r3
 8100d84:	f240 811c 	bls.w	8100fc0 <__udivmoddi4+0x298>
 8100d88:	3e02      	subs	r6, #2
 8100d8a:	4463      	add	r3, ip
 8100d8c:	1a5b      	subs	r3, r3, r1
 8100d8e:	b2a4      	uxth	r4, r4
 8100d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8100d94:	fb08 3310 	mls	r3, r8, r0, r3
 8100d98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100d9c:	fb00 f707 	mul.w	r7, r0, r7
 8100da0:	42a7      	cmp	r7, r4
 8100da2:	d90a      	bls.n	8100dba <__udivmoddi4+0x92>
 8100da4:	eb1c 0404 	adds.w	r4, ip, r4
 8100da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8100dac:	f080 810a 	bcs.w	8100fc4 <__udivmoddi4+0x29c>
 8100db0:	42a7      	cmp	r7, r4
 8100db2:	f240 8107 	bls.w	8100fc4 <__udivmoddi4+0x29c>
 8100db6:	4464      	add	r4, ip
 8100db8:	3802      	subs	r0, #2
 8100dba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100dbe:	1be4      	subs	r4, r4, r7
 8100dc0:	2600      	movs	r6, #0
 8100dc2:	b11d      	cbz	r5, 8100dcc <__udivmoddi4+0xa4>
 8100dc4:	40d4      	lsrs	r4, r2
 8100dc6:	2300      	movs	r3, #0
 8100dc8:	e9c5 4300 	strd	r4, r3, [r5]
 8100dcc:	4631      	mov	r1, r6
 8100dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100dd2:	428b      	cmp	r3, r1
 8100dd4:	d909      	bls.n	8100dea <__udivmoddi4+0xc2>
 8100dd6:	2d00      	cmp	r5, #0
 8100dd8:	f000 80ef 	beq.w	8100fba <__udivmoddi4+0x292>
 8100ddc:	2600      	movs	r6, #0
 8100dde:	e9c5 0100 	strd	r0, r1, [r5]
 8100de2:	4630      	mov	r0, r6
 8100de4:	4631      	mov	r1, r6
 8100de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100dea:	fab3 f683 	clz	r6, r3
 8100dee:	2e00      	cmp	r6, #0
 8100df0:	d14a      	bne.n	8100e88 <__udivmoddi4+0x160>
 8100df2:	428b      	cmp	r3, r1
 8100df4:	d302      	bcc.n	8100dfc <__udivmoddi4+0xd4>
 8100df6:	4282      	cmp	r2, r0
 8100df8:	f200 80f9 	bhi.w	8100fee <__udivmoddi4+0x2c6>
 8100dfc:	1a84      	subs	r4, r0, r2
 8100dfe:	eb61 0303 	sbc.w	r3, r1, r3
 8100e02:	2001      	movs	r0, #1
 8100e04:	469e      	mov	lr, r3
 8100e06:	2d00      	cmp	r5, #0
 8100e08:	d0e0      	beq.n	8100dcc <__udivmoddi4+0xa4>
 8100e0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8100e0e:	e7dd      	b.n	8100dcc <__udivmoddi4+0xa4>
 8100e10:	b902      	cbnz	r2, 8100e14 <__udivmoddi4+0xec>
 8100e12:	deff      	udf	#255	; 0xff
 8100e14:	fab2 f282 	clz	r2, r2
 8100e18:	2a00      	cmp	r2, #0
 8100e1a:	f040 8092 	bne.w	8100f42 <__udivmoddi4+0x21a>
 8100e1e:	eba1 010c 	sub.w	r1, r1, ip
 8100e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100e26:	fa1f fe8c 	uxth.w	lr, ip
 8100e2a:	2601      	movs	r6, #1
 8100e2c:	0c20      	lsrs	r0, r4, #16
 8100e2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8100e32:	fb07 1113 	mls	r1, r7, r3, r1
 8100e36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100e3a:	fb0e f003 	mul.w	r0, lr, r3
 8100e3e:	4288      	cmp	r0, r1
 8100e40:	d908      	bls.n	8100e54 <__udivmoddi4+0x12c>
 8100e42:	eb1c 0101 	adds.w	r1, ip, r1
 8100e46:	f103 38ff 	add.w	r8, r3, #4294967295
 8100e4a:	d202      	bcs.n	8100e52 <__udivmoddi4+0x12a>
 8100e4c:	4288      	cmp	r0, r1
 8100e4e:	f200 80cb 	bhi.w	8100fe8 <__udivmoddi4+0x2c0>
 8100e52:	4643      	mov	r3, r8
 8100e54:	1a09      	subs	r1, r1, r0
 8100e56:	b2a4      	uxth	r4, r4
 8100e58:	fbb1 f0f7 	udiv	r0, r1, r7
 8100e5c:	fb07 1110 	mls	r1, r7, r0, r1
 8100e60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100e64:	fb0e fe00 	mul.w	lr, lr, r0
 8100e68:	45a6      	cmp	lr, r4
 8100e6a:	d908      	bls.n	8100e7e <__udivmoddi4+0x156>
 8100e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8100e70:	f100 31ff 	add.w	r1, r0, #4294967295
 8100e74:	d202      	bcs.n	8100e7c <__udivmoddi4+0x154>
 8100e76:	45a6      	cmp	lr, r4
 8100e78:	f200 80bb 	bhi.w	8100ff2 <__udivmoddi4+0x2ca>
 8100e7c:	4608      	mov	r0, r1
 8100e7e:	eba4 040e 	sub.w	r4, r4, lr
 8100e82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100e86:	e79c      	b.n	8100dc2 <__udivmoddi4+0x9a>
 8100e88:	f1c6 0720 	rsb	r7, r6, #32
 8100e8c:	40b3      	lsls	r3, r6
 8100e8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8100e92:	ea4c 0c03 	orr.w	ip, ip, r3
 8100e96:	fa20 f407 	lsr.w	r4, r0, r7
 8100e9a:	fa01 f306 	lsl.w	r3, r1, r6
 8100e9e:	431c      	orrs	r4, r3
 8100ea0:	40f9      	lsrs	r1, r7
 8100ea2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100ea6:	fa00 f306 	lsl.w	r3, r0, r6
 8100eaa:	fbb1 f8f9 	udiv	r8, r1, r9
 8100eae:	0c20      	lsrs	r0, r4, #16
 8100eb0:	fa1f fe8c 	uxth.w	lr, ip
 8100eb4:	fb09 1118 	mls	r1, r9, r8, r1
 8100eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100ebc:	fb08 f00e 	mul.w	r0, r8, lr
 8100ec0:	4288      	cmp	r0, r1
 8100ec2:	fa02 f206 	lsl.w	r2, r2, r6
 8100ec6:	d90b      	bls.n	8100ee0 <__udivmoddi4+0x1b8>
 8100ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8100ecc:	f108 3aff 	add.w	sl, r8, #4294967295
 8100ed0:	f080 8088 	bcs.w	8100fe4 <__udivmoddi4+0x2bc>
 8100ed4:	4288      	cmp	r0, r1
 8100ed6:	f240 8085 	bls.w	8100fe4 <__udivmoddi4+0x2bc>
 8100eda:	f1a8 0802 	sub.w	r8, r8, #2
 8100ede:	4461      	add	r1, ip
 8100ee0:	1a09      	subs	r1, r1, r0
 8100ee2:	b2a4      	uxth	r4, r4
 8100ee4:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ee8:	fb09 1110 	mls	r1, r9, r0, r1
 8100eec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ef0:	fb00 fe0e 	mul.w	lr, r0, lr
 8100ef4:	458e      	cmp	lr, r1
 8100ef6:	d908      	bls.n	8100f0a <__udivmoddi4+0x1e2>
 8100ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8100efc:	f100 34ff 	add.w	r4, r0, #4294967295
 8100f00:	d26c      	bcs.n	8100fdc <__udivmoddi4+0x2b4>
 8100f02:	458e      	cmp	lr, r1
 8100f04:	d96a      	bls.n	8100fdc <__udivmoddi4+0x2b4>
 8100f06:	3802      	subs	r0, #2
 8100f08:	4461      	add	r1, ip
 8100f0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8100f0e:	fba0 9402 	umull	r9, r4, r0, r2
 8100f12:	eba1 010e 	sub.w	r1, r1, lr
 8100f16:	42a1      	cmp	r1, r4
 8100f18:	46c8      	mov	r8, r9
 8100f1a:	46a6      	mov	lr, r4
 8100f1c:	d356      	bcc.n	8100fcc <__udivmoddi4+0x2a4>
 8100f1e:	d053      	beq.n	8100fc8 <__udivmoddi4+0x2a0>
 8100f20:	b15d      	cbz	r5, 8100f3a <__udivmoddi4+0x212>
 8100f22:	ebb3 0208 	subs.w	r2, r3, r8
 8100f26:	eb61 010e 	sbc.w	r1, r1, lr
 8100f2a:	fa01 f707 	lsl.w	r7, r1, r7
 8100f2e:	fa22 f306 	lsr.w	r3, r2, r6
 8100f32:	40f1      	lsrs	r1, r6
 8100f34:	431f      	orrs	r7, r3
 8100f36:	e9c5 7100 	strd	r7, r1, [r5]
 8100f3a:	2600      	movs	r6, #0
 8100f3c:	4631      	mov	r1, r6
 8100f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f42:	f1c2 0320 	rsb	r3, r2, #32
 8100f46:	40d8      	lsrs	r0, r3
 8100f48:	fa0c fc02 	lsl.w	ip, ip, r2
 8100f4c:	fa21 f303 	lsr.w	r3, r1, r3
 8100f50:	4091      	lsls	r1, r2
 8100f52:	4301      	orrs	r1, r0
 8100f54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f58:	fa1f fe8c 	uxth.w	lr, ip
 8100f5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8100f60:	fb07 3610 	mls	r6, r7, r0, r3
 8100f64:	0c0b      	lsrs	r3, r1, #16
 8100f66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8100f6a:	fb00 f60e 	mul.w	r6, r0, lr
 8100f6e:	429e      	cmp	r6, r3
 8100f70:	fa04 f402 	lsl.w	r4, r4, r2
 8100f74:	d908      	bls.n	8100f88 <__udivmoddi4+0x260>
 8100f76:	eb1c 0303 	adds.w	r3, ip, r3
 8100f7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8100f7e:	d22f      	bcs.n	8100fe0 <__udivmoddi4+0x2b8>
 8100f80:	429e      	cmp	r6, r3
 8100f82:	d92d      	bls.n	8100fe0 <__udivmoddi4+0x2b8>
 8100f84:	3802      	subs	r0, #2
 8100f86:	4463      	add	r3, ip
 8100f88:	1b9b      	subs	r3, r3, r6
 8100f8a:	b289      	uxth	r1, r1
 8100f8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8100f90:	fb07 3316 	mls	r3, r7, r6, r3
 8100f94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f98:	fb06 f30e 	mul.w	r3, r6, lr
 8100f9c:	428b      	cmp	r3, r1
 8100f9e:	d908      	bls.n	8100fb2 <__udivmoddi4+0x28a>
 8100fa0:	eb1c 0101 	adds.w	r1, ip, r1
 8100fa4:	f106 38ff 	add.w	r8, r6, #4294967295
 8100fa8:	d216      	bcs.n	8100fd8 <__udivmoddi4+0x2b0>
 8100faa:	428b      	cmp	r3, r1
 8100fac:	d914      	bls.n	8100fd8 <__udivmoddi4+0x2b0>
 8100fae:	3e02      	subs	r6, #2
 8100fb0:	4461      	add	r1, ip
 8100fb2:	1ac9      	subs	r1, r1, r3
 8100fb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100fb8:	e738      	b.n	8100e2c <__udivmoddi4+0x104>
 8100fba:	462e      	mov	r6, r5
 8100fbc:	4628      	mov	r0, r5
 8100fbe:	e705      	b.n	8100dcc <__udivmoddi4+0xa4>
 8100fc0:	4606      	mov	r6, r0
 8100fc2:	e6e3      	b.n	8100d8c <__udivmoddi4+0x64>
 8100fc4:	4618      	mov	r0, r3
 8100fc6:	e6f8      	b.n	8100dba <__udivmoddi4+0x92>
 8100fc8:	454b      	cmp	r3, r9
 8100fca:	d2a9      	bcs.n	8100f20 <__udivmoddi4+0x1f8>
 8100fcc:	ebb9 0802 	subs.w	r8, r9, r2
 8100fd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8100fd4:	3801      	subs	r0, #1
 8100fd6:	e7a3      	b.n	8100f20 <__udivmoddi4+0x1f8>
 8100fd8:	4646      	mov	r6, r8
 8100fda:	e7ea      	b.n	8100fb2 <__udivmoddi4+0x28a>
 8100fdc:	4620      	mov	r0, r4
 8100fde:	e794      	b.n	8100f0a <__udivmoddi4+0x1e2>
 8100fe0:	4640      	mov	r0, r8
 8100fe2:	e7d1      	b.n	8100f88 <__udivmoddi4+0x260>
 8100fe4:	46d0      	mov	r8, sl
 8100fe6:	e77b      	b.n	8100ee0 <__udivmoddi4+0x1b8>
 8100fe8:	3b02      	subs	r3, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	e732      	b.n	8100e54 <__udivmoddi4+0x12c>
 8100fee:	4630      	mov	r0, r6
 8100ff0:	e709      	b.n	8100e06 <__udivmoddi4+0xde>
 8100ff2:	4464      	add	r4, ip
 8100ff4:	3802      	subs	r0, #2
 8100ff6:	e742      	b.n	8100e7e <__udivmoddi4+0x156>

08100ff8 <__aeabi_idiv0>:
 8100ff8:	4770      	bx	lr
 8100ffa:	bf00      	nop

08100ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100ffc:	b480      	push	{r7}
 8100ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101000:	4b09      	ldr	r3, [pc, #36]	; (8101028 <SystemInit+0x2c>)
 8101002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101006:	4a08      	ldr	r2, [pc, #32]	; (8101028 <SystemInit+0x2c>)
 8101008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810100c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101010:	4b05      	ldr	r3, [pc, #20]	; (8101028 <SystemInit+0x2c>)
 8101012:	691b      	ldr	r3, [r3, #16]
 8101014:	4a04      	ldr	r2, [pc, #16]	; (8101028 <SystemInit+0x2c>)
 8101016:	f043 0310 	orr.w	r3, r3, #16
 810101a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810101c:	bf00      	nop
 810101e:	46bd      	mov	sp, r7
 8101020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101024:	4770      	bx	lr
 8101026:	bf00      	nop
 8101028:	e000ed00 	.word	0xe000ed00

0810102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810102c:	b580      	push	{r7, lr}
 810102e:	b090      	sub	sp, #64	; 0x40
 8101030:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101032:	4b4a      	ldr	r3, [pc, #296]	; (810115c <main+0x130>)
 8101034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101038:	4a48      	ldr	r2, [pc, #288]	; (810115c <main+0x130>)
 810103a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810103e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101042:	4b46      	ldr	r3, [pc, #280]	; (810115c <main+0x130>)
 8101044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810104c:	63bb      	str	r3, [r7, #56]	; 0x38
 810104e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101050:	2001      	movs	r0, #1
 8101052:	f002 f9db 	bl	810340c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101056:	f002 fa65 	bl	8103524 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810105a:	2201      	movs	r2, #1
 810105c:	2102      	movs	r1, #2
 810105e:	2000      	movs	r0, #0
 8101060:	f002 f9e6 	bl	8103430 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101064:	4b3e      	ldr	r3, [pc, #248]	; (8101160 <main+0x134>)
 8101066:	681b      	ldr	r3, [r3, #0]
 8101068:	091b      	lsrs	r3, r3, #4
 810106a:	f003 030f 	and.w	r3, r3, #15
 810106e:	2b07      	cmp	r3, #7
 8101070:	d108      	bne.n	8101084 <main+0x58>
 8101072:	4b3c      	ldr	r3, [pc, #240]	; (8101164 <main+0x138>)
 8101074:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101078:	4a3a      	ldr	r2, [pc, #232]	; (8101164 <main+0x138>)
 810107a:	f043 0301 	orr.w	r3, r3, #1
 810107e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101082:	e007      	b.n	8101094 <main+0x68>
 8101084:	4b37      	ldr	r3, [pc, #220]	; (8101164 <main+0x138>)
 8101086:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810108a:	4a36      	ldr	r2, [pc, #216]	; (8101164 <main+0x138>)
 810108c:	f043 0301 	orr.w	r3, r3, #1
 8101090:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101094:	f000 fd7c 	bl	8101b90 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101098:	f000 f9b8 	bl	810140c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 810109c:	f000 f96a 	bl	8101374 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 81010a0:	f000 f86e 	bl	8101180 <MX_ADC1_Init>
  MX_TIM3_Init();
 81010a4:	f000 f8e4 	bl	8101270 <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	//motore
 81010a8:	2100      	movs	r1, #0
 81010aa:	482f      	ldr	r0, [pc, #188]	; (8101168 <main+0x13c>)
 81010ac:	f004 fe64 	bl	8105d78 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);	//led

  //HAL_ADC_Start_IT(&hadc1);
  TIM3->CCR1 = 0;
 81010b0:	4b2e      	ldr	r3, [pc, #184]	; (810116c <main+0x140>)
 81010b2:	2200      	movs	r2, #0
 81010b4:	635a      	str	r2, [r3, #52]	; 0x34
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint8_t msg_t[35] = {'\0'};
 81010b6:	2300      	movs	r3, #0
 81010b8:	607b      	str	r3, [r7, #4]
 81010ba:	f107 0308 	add.w	r3, r7, #8
 81010be:	221f      	movs	r2, #31
 81010c0:	2100      	movs	r1, #0
 81010c2:	4618      	mov	r0, r3
 81010c4:	f007 f836 	bl	8108134 <memset>
	  uint8_t msg_r[15] = {'\0'};
 81010c8:	2300      	movs	r3, #0
 81010ca:	62bb      	str	r3, [r7, #40]	; 0x28
 81010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81010d0:	2200      	movs	r2, #0
 81010d2:	601a      	str	r2, [r3, #0]
 81010d4:	605a      	str	r2, [r3, #4]
 81010d6:	f8c3 2007 	str.w	r2, [r3, #7]
	  sprintf(msg_t, "Insert max %d char", sizeof(msg_r-1));
 81010da:	1d3b      	adds	r3, r7, #4
 81010dc:	2204      	movs	r2, #4
 81010de:	4924      	ldr	r1, [pc, #144]	; (8101170 <main+0x144>)
 81010e0:	4618      	mov	r0, r3
 81010e2:	f007 f82f 	bl	8108144 <siprintf>

	  Test_COM_Tx(msg_t);
 81010e6:	1d3b      	adds	r3, r7, #4
 81010e8:	4618      	mov	r0, r3
 81010ea:	f000 f9f5 	bl	81014d8 <Test_COM_Tx>
	  Test_COM_Rx(msg_r, sizeof(msg_r));
 81010ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81010f2:	210f      	movs	r1, #15
 81010f4:	4618      	mov	r0, r3
 81010f6:	f000 fa1b 	bl	8101530 <Test_COM_Rx>

	  sprintf(msg_t, "Written msg: \0");
 81010fa:	1d3b      	adds	r3, r7, #4
 81010fc:	491d      	ldr	r1, [pc, #116]	; (8101174 <main+0x148>)
 81010fe:	4618      	mov	r0, r3
 8101100:	f007 f820 	bl	8108144 <siprintf>
	  Test_COM_Tx(msg_t);
 8101104:	1d3b      	adds	r3, r7, #4
 8101106:	4618      	mov	r0, r3
 8101108:	f000 f9e6 	bl	81014d8 <Test_COM_Tx>
	  Test_COM_Tx(msg_r);
 810110c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8101110:	4618      	mov	r0, r3
 8101112:	f000 f9e1 	bl	81014d8 <Test_COM_Tx>

	  int number = charToInt((char*) msg_r);
 8101116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810111a:	4618      	mov	r0, r3
 810111c:	f000 fa4c 	bl	81015b8 <charToInt>
 8101120:	63f8      	str	r0, [r7, #60]	; 0x3c


	  if(number == -1 || number > MAX_VALUE)
 8101122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101128:	d003      	beq.n	8101132 <main+0x106>
 810112a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810112c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8101130:	dd05      	ble.n	810113e <main+0x112>
		  sprintf(msg_t, "it's not a number \0");
 8101132:	1d3b      	adds	r3, r7, #4
 8101134:	4910      	ldr	r1, [pc, #64]	; (8101178 <main+0x14c>)
 8101136:	4618      	mov	r0, r3
 8101138:	f007 f804 	bl	8108144 <siprintf>
 810113c:	e008      	b.n	8101150 <main+0x124>
	  else
	  {
		  sprintf(msg_t, "Number %d \0", number);
 810113e:	1d3b      	adds	r3, r7, #4
 8101140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8101142:	490e      	ldr	r1, [pc, #56]	; (810117c <main+0x150>)
 8101144:	4618      	mov	r0, r3
 8101146:	f006 fffd 	bl	8108144 <siprintf>
		  move(number);
 810114a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 810114c:	f000 faf0 	bl	8101730 <move>
	  }

	  Test_COM_Tx(msg_t);
 8101150:	1d3b      	adds	r3, r7, #4
 8101152:	4618      	mov	r0, r3
 8101154:	f000 f9c0 	bl	81014d8 <Test_COM_Tx>
  {
 8101158:	e7ad      	b.n	81010b6 <main+0x8a>
 810115a:	bf00      	nop
 810115c:	58024400 	.word	0x58024400
 8101160:	e000ed00 	.word	0xe000ed00
 8101164:	58026400 	.word	0x58026400
 8101168:	100000f8 	.word	0x100000f8
 810116c:	40000400 	.word	0x40000400
 8101170:	08109870 	.word	0x08109870
 8101174:	08109884 	.word	0x08109884
 8101178:	08109894 	.word	0x08109894
 810117c:	081098a8 	.word	0x081098a8

08101180 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8101180:	b580      	push	{r7, lr}
 8101182:	b08a      	sub	sp, #40	; 0x28
 8101184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8101186:	f107 031c 	add.w	r3, r7, #28
 810118a:	2200      	movs	r2, #0
 810118c:	601a      	str	r2, [r3, #0]
 810118e:	605a      	str	r2, [r3, #4]
 8101190:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8101192:	463b      	mov	r3, r7
 8101194:	2200      	movs	r2, #0
 8101196:	601a      	str	r2, [r3, #0]
 8101198:	605a      	str	r2, [r3, #4]
 810119a:	609a      	str	r2, [r3, #8]
 810119c:	60da      	str	r2, [r3, #12]
 810119e:	611a      	str	r2, [r3, #16]
 81011a0:	615a      	str	r2, [r3, #20]
 81011a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81011a4:	4b2f      	ldr	r3, [pc, #188]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011a6:	4a30      	ldr	r2, [pc, #192]	; (8101268 <MX_ADC1_Init+0xe8>)
 81011a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 81011aa:	4b2e      	ldr	r3, [pc, #184]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011ac:	2200      	movs	r2, #0
 81011ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 81011b0:	4b2c      	ldr	r3, [pc, #176]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011b2:	2200      	movs	r2, #0
 81011b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81011b6:	4b2b      	ldr	r3, [pc, #172]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011b8:	2200      	movs	r2, #0
 81011ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81011bc:	4b29      	ldr	r3, [pc, #164]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011be:	2204      	movs	r2, #4
 81011c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81011c2:	4b28      	ldr	r3, [pc, #160]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011c4:	2200      	movs	r2, #0
 81011c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 81011c8:	4b26      	ldr	r3, [pc, #152]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011ca:	2201      	movs	r2, #1
 81011cc:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81011ce:	4b25      	ldr	r3, [pc, #148]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011d0:	2201      	movs	r2, #1
 81011d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81011d4:	4b23      	ldr	r3, [pc, #140]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011d6:	2200      	movs	r2, #0
 81011d8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81011da:	4b22      	ldr	r3, [pc, #136]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011dc:	2200      	movs	r2, #0
 81011de:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81011e0:	4b20      	ldr	r3, [pc, #128]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011e2:	2200      	movs	r2, #0
 81011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81011e6:	4b1f      	ldr	r3, [pc, #124]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011e8:	2200      	movs	r2, #0
 81011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81011ec:	4b1d      	ldr	r3, [pc, #116]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011ee:	2200      	movs	r2, #0
 81011f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81011f2:	4b1c      	ldr	r3, [pc, #112]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011f4:	2200      	movs	r2, #0
 81011f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81011f8:	4b1a      	ldr	r3, [pc, #104]	; (8101264 <MX_ADC1_Init+0xe4>)
 81011fa:	2200      	movs	r2, #0
 81011fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8101200:	4818      	ldr	r0, [pc, #96]	; (8101264 <MX_ADC1_Init+0xe4>)
 8101202:	f000 ff11 	bl	8102028 <HAL_ADC_Init>
 8101206:	4603      	mov	r3, r0
 8101208:	2b00      	cmp	r3, #0
 810120a:	d001      	beq.n	8101210 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 810120c:	f000 faba 	bl	8101784 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8101210:	2300      	movs	r3, #0
 8101212:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8101214:	f107 031c 	add.w	r3, r7, #28
 8101218:	4619      	mov	r1, r3
 810121a:	4812      	ldr	r0, [pc, #72]	; (8101264 <MX_ADC1_Init+0xe4>)
 810121c:	f001 fd26 	bl	8102c6c <HAL_ADCEx_MultiModeConfigChannel>
 8101220:	4603      	mov	r3, r0
 8101222:	2b00      	cmp	r3, #0
 8101224:	d001      	beq.n	810122a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8101226:	f000 faad 	bl	8101784 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 810122a:	4b10      	ldr	r3, [pc, #64]	; (810126c <MX_ADC1_Init+0xec>)
 810122c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810122e:	2306      	movs	r3, #6
 8101230:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8101232:	2300      	movs	r3, #0
 8101234:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8101236:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810123a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810123c:	2304      	movs	r3, #4
 810123e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8101240:	2300      	movs	r3, #0
 8101242:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8101244:	2300      	movs	r3, #0
 8101246:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8101248:	463b      	mov	r3, r7
 810124a:	4619      	mov	r1, r3
 810124c:	4805      	ldr	r0, [pc, #20]	; (8101264 <MX_ADC1_Init+0xe4>)
 810124e:	f001 f88d 	bl	810236c <HAL_ADC_ConfigChannel>
 8101252:	4603      	mov	r3, r0
 8101254:	2b00      	cmp	r3, #0
 8101256:	d001      	beq.n	810125c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8101258:	f000 fa94 	bl	8101784 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 810125c:	bf00      	nop
 810125e:	3728      	adds	r7, #40	; 0x28
 8101260:	46bd      	mov	sp, r7
 8101262:	bd80      	pop	{r7, pc}
 8101264:	10000094 	.word	0x10000094
 8101268:	40022000 	.word	0x40022000
 810126c:	3ef08000 	.word	0x3ef08000

08101270 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8101270:	b580      	push	{r7, lr}
 8101272:	b08e      	sub	sp, #56	; 0x38
 8101274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 810127a:	2200      	movs	r2, #0
 810127c:	601a      	str	r2, [r3, #0]
 810127e:	605a      	str	r2, [r3, #4]
 8101280:	609a      	str	r2, [r3, #8]
 8101282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101284:	f107 031c 	add.w	r3, r7, #28
 8101288:	2200      	movs	r2, #0
 810128a:	601a      	str	r2, [r3, #0]
 810128c:	605a      	str	r2, [r3, #4]
 810128e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101290:	463b      	mov	r3, r7
 8101292:	2200      	movs	r2, #0
 8101294:	601a      	str	r2, [r3, #0]
 8101296:	605a      	str	r2, [r3, #4]
 8101298:	609a      	str	r2, [r3, #8]
 810129a:	60da      	str	r2, [r3, #12]
 810129c:	611a      	str	r2, [r3, #16]
 810129e:	615a      	str	r2, [r3, #20]
 81012a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81012a2:	4b32      	ldr	r3, [pc, #200]	; (810136c <MX_TIM3_Init+0xfc>)
 81012a4:	4a32      	ldr	r2, [pc, #200]	; (8101370 <MX_TIM3_Init+0x100>)
 81012a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 81012a8:	4b30      	ldr	r3, [pc, #192]	; (810136c <MX_TIM3_Init+0xfc>)
 81012aa:	22ef      	movs	r2, #239	; 0xef
 81012ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81012ae:	4b2f      	ldr	r3, [pc, #188]	; (810136c <MX_TIM3_Init+0xfc>)
 81012b0:	2200      	movs	r2, #0
 81012b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 81012b4:	4b2d      	ldr	r3, [pc, #180]	; (810136c <MX_TIM3_Init+0xfc>)
 81012b6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 81012ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81012bc:	4b2b      	ldr	r3, [pc, #172]	; (810136c <MX_TIM3_Init+0xfc>)
 81012be:	2200      	movs	r2, #0
 81012c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81012c2:	4b2a      	ldr	r3, [pc, #168]	; (810136c <MX_TIM3_Init+0xfc>)
 81012c4:	2200      	movs	r2, #0
 81012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81012c8:	4828      	ldr	r0, [pc, #160]	; (810136c <MX_TIM3_Init+0xfc>)
 81012ca:	f004 fc9d 	bl	8105c08 <HAL_TIM_Base_Init>
 81012ce:	4603      	mov	r3, r0
 81012d0:	2b00      	cmp	r3, #0
 81012d2:	d001      	beq.n	81012d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 81012d4:	f000 fa56 	bl	8101784 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 81012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81012e2:	4619      	mov	r1, r3
 81012e4:	4821      	ldr	r0, [pc, #132]	; (810136c <MX_TIM3_Init+0xfc>)
 81012e6:	f004 ff69 	bl	81061bc <HAL_TIM_ConfigClockSource>
 81012ea:	4603      	mov	r3, r0
 81012ec:	2b00      	cmp	r3, #0
 81012ee:	d001      	beq.n	81012f4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 81012f0:	f000 fa48 	bl	8101784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 81012f4:	481d      	ldr	r0, [pc, #116]	; (810136c <MX_TIM3_Init+0xfc>)
 81012f6:	f004 fcde 	bl	8105cb6 <HAL_TIM_PWM_Init>
 81012fa:	4603      	mov	r3, r0
 81012fc:	2b00      	cmp	r3, #0
 81012fe:	d001      	beq.n	8101304 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8101300:	f000 fa40 	bl	8101784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101304:	2300      	movs	r3, #0
 8101306:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101308:	2300      	movs	r3, #0
 810130a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 810130c:	f107 031c 	add.w	r3, r7, #28
 8101310:	4619      	mov	r1, r3
 8101312:	4816      	ldr	r0, [pc, #88]	; (810136c <MX_TIM3_Init+0xfc>)
 8101314:	f005 fc7c 	bl	8106c10 <HAL_TIMEx_MasterConfigSynchronization>
 8101318:	4603      	mov	r3, r0
 810131a:	2b00      	cmp	r3, #0
 810131c:	d001      	beq.n	8101322 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 810131e:	f000 fa31 	bl	8101784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101322:	2360      	movs	r3, #96	; 0x60
 8101324:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8101326:	2300      	movs	r3, #0
 8101328:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810132a:	2300      	movs	r3, #0
 810132c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810132e:	2300      	movs	r3, #0
 8101330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101332:	463b      	mov	r3, r7
 8101334:	2200      	movs	r2, #0
 8101336:	4619      	mov	r1, r3
 8101338:	480c      	ldr	r0, [pc, #48]	; (810136c <MX_TIM3_Init+0xfc>)
 810133a:	f004 fe2b 	bl	8105f94 <HAL_TIM_PWM_ConfigChannel>
 810133e:	4603      	mov	r3, r0
 8101340:	2b00      	cmp	r3, #0
 8101342:	d001      	beq.n	8101348 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8101344:	f000 fa1e 	bl	8101784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101348:	463b      	mov	r3, r7
 810134a:	2208      	movs	r2, #8
 810134c:	4619      	mov	r1, r3
 810134e:	4807      	ldr	r0, [pc, #28]	; (810136c <MX_TIM3_Init+0xfc>)
 8101350:	f004 fe20 	bl	8105f94 <HAL_TIM_PWM_ConfigChannel>
 8101354:	4603      	mov	r3, r0
 8101356:	2b00      	cmp	r3, #0
 8101358:	d001      	beq.n	810135e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 810135a:	f000 fa13 	bl	8101784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 810135e:	4803      	ldr	r0, [pc, #12]	; (810136c <MX_TIM3_Init+0xfc>)
 8101360:	f000 fac2 	bl	81018e8 <HAL_TIM_MspPostInit>

}
 8101364:	bf00      	nop
 8101366:	3738      	adds	r7, #56	; 0x38
 8101368:	46bd      	mov	sp, r7
 810136a:	bd80      	pop	{r7, pc}
 810136c:	100000f8 	.word	0x100000f8
 8101370:	40000400 	.word	0x40000400

08101374 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101374:	b580      	push	{r7, lr}
 8101376:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101378:	4b22      	ldr	r3, [pc, #136]	; (8101404 <MX_USART3_UART_Init+0x90>)
 810137a:	4a23      	ldr	r2, [pc, #140]	; (8101408 <MX_USART3_UART_Init+0x94>)
 810137c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810137e:	4b21      	ldr	r3, [pc, #132]	; (8101404 <MX_USART3_UART_Init+0x90>)
 8101380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101384:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101386:	4b1f      	ldr	r3, [pc, #124]	; (8101404 <MX_USART3_UART_Init+0x90>)
 8101388:	2200      	movs	r2, #0
 810138a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810138c:	4b1d      	ldr	r3, [pc, #116]	; (8101404 <MX_USART3_UART_Init+0x90>)
 810138e:	2200      	movs	r2, #0
 8101390:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101392:	4b1c      	ldr	r3, [pc, #112]	; (8101404 <MX_USART3_UART_Init+0x90>)
 8101394:	2200      	movs	r2, #0
 8101396:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101398:	4b1a      	ldr	r3, [pc, #104]	; (8101404 <MX_USART3_UART_Init+0x90>)
 810139a:	220c      	movs	r2, #12
 810139c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810139e:	4b19      	ldr	r3, [pc, #100]	; (8101404 <MX_USART3_UART_Init+0x90>)
 81013a0:	2200      	movs	r2, #0
 81013a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81013a4:	4b17      	ldr	r3, [pc, #92]	; (8101404 <MX_USART3_UART_Init+0x90>)
 81013a6:	2200      	movs	r2, #0
 81013a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81013aa:	4b16      	ldr	r3, [pc, #88]	; (8101404 <MX_USART3_UART_Init+0x90>)
 81013ac:	2200      	movs	r2, #0
 81013ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81013b0:	4b14      	ldr	r3, [pc, #80]	; (8101404 <MX_USART3_UART_Init+0x90>)
 81013b2:	2200      	movs	r2, #0
 81013b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81013b6:	4b13      	ldr	r3, [pc, #76]	; (8101404 <MX_USART3_UART_Init+0x90>)
 81013b8:	2200      	movs	r2, #0
 81013ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81013bc:	4811      	ldr	r0, [pc, #68]	; (8101404 <MX_USART3_UART_Init+0x90>)
 81013be:	f005 fcb5 	bl	8106d2c <HAL_UART_Init>
 81013c2:	4603      	mov	r3, r0
 81013c4:	2b00      	cmp	r3, #0
 81013c6:	d001      	beq.n	81013cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81013c8:	f000 f9dc 	bl	8101784 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81013cc:	2100      	movs	r1, #0
 81013ce:	480d      	ldr	r0, [pc, #52]	; (8101404 <MX_USART3_UART_Init+0x90>)
 81013d0:	f006 fdbc 	bl	8107f4c <HAL_UARTEx_SetTxFifoThreshold>
 81013d4:	4603      	mov	r3, r0
 81013d6:	2b00      	cmp	r3, #0
 81013d8:	d001      	beq.n	81013de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81013da:	f000 f9d3 	bl	8101784 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81013de:	2100      	movs	r1, #0
 81013e0:	4808      	ldr	r0, [pc, #32]	; (8101404 <MX_USART3_UART_Init+0x90>)
 81013e2:	f006 fdf1 	bl	8107fc8 <HAL_UARTEx_SetRxFifoThreshold>
 81013e6:	4603      	mov	r3, r0
 81013e8:	2b00      	cmp	r3, #0
 81013ea:	d001      	beq.n	81013f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81013ec:	f000 f9ca 	bl	8101784 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81013f0:	4804      	ldr	r0, [pc, #16]	; (8101404 <MX_USART3_UART_Init+0x90>)
 81013f2:	f006 fd72 	bl	8107eda <HAL_UARTEx_DisableFifoMode>
 81013f6:	4603      	mov	r3, r0
 81013f8:	2b00      	cmp	r3, #0
 81013fa:	d001      	beq.n	8101400 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81013fc:	f000 f9c2 	bl	8101784 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101400:	bf00      	nop
 8101402:	bd80      	pop	{r7, pc}
 8101404:	10000144 	.word	0x10000144
 8101408:	40004800 	.word	0x40004800

0810140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810140c:	b580      	push	{r7, lr}
 810140e:	b08a      	sub	sp, #40	; 0x28
 8101410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101412:	f107 0314 	add.w	r3, r7, #20
 8101416:	2200      	movs	r2, #0
 8101418:	601a      	str	r2, [r3, #0]
 810141a:	605a      	str	r2, [r3, #4]
 810141c:	609a      	str	r2, [r3, #8]
 810141e:	60da      	str	r2, [r3, #12]
 8101420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101422:	4b2b      	ldr	r3, [pc, #172]	; (81014d0 <MX_GPIO_Init+0xc4>)
 8101424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101428:	4a29      	ldr	r2, [pc, #164]	; (81014d0 <MX_GPIO_Init+0xc4>)
 810142a:	f043 0304 	orr.w	r3, r3, #4
 810142e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101432:	4b27      	ldr	r3, [pc, #156]	; (81014d0 <MX_GPIO_Init+0xc4>)
 8101434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101438:	f003 0304 	and.w	r3, r3, #4
 810143c:	613b      	str	r3, [r7, #16]
 810143e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101440:	4b23      	ldr	r3, [pc, #140]	; (81014d0 <MX_GPIO_Init+0xc4>)
 8101442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101446:	4a22      	ldr	r2, [pc, #136]	; (81014d0 <MX_GPIO_Init+0xc4>)
 8101448:	f043 0301 	orr.w	r3, r3, #1
 810144c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101450:	4b1f      	ldr	r3, [pc, #124]	; (81014d0 <MX_GPIO_Init+0xc4>)
 8101452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101456:	f003 0301 	and.w	r3, r3, #1
 810145a:	60fb      	str	r3, [r7, #12]
 810145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810145e:	4b1c      	ldr	r3, [pc, #112]	; (81014d0 <MX_GPIO_Init+0xc4>)
 8101460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101464:	4a1a      	ldr	r2, [pc, #104]	; (81014d0 <MX_GPIO_Init+0xc4>)
 8101466:	f043 0302 	orr.w	r3, r3, #2
 810146a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810146e:	4b18      	ldr	r3, [pc, #96]	; (81014d0 <MX_GPIO_Init+0xc4>)
 8101470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101474:	f003 0302 	and.w	r3, r3, #2
 8101478:	60bb      	str	r3, [r7, #8]
 810147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810147c:	4b14      	ldr	r3, [pc, #80]	; (81014d0 <MX_GPIO_Init+0xc4>)
 810147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101482:	4a13      	ldr	r2, [pc, #76]	; (81014d0 <MX_GPIO_Init+0xc4>)
 8101484:	f043 0308 	orr.w	r3, r3, #8
 8101488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810148c:	4b10      	ldr	r3, [pc, #64]	; (81014d0 <MX_GPIO_Init+0xc4>)
 810148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101492:	f003 0308 	and.w	r3, r3, #8
 8101496:	607b      	str	r3, [r7, #4]
 8101498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 810149a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 81014a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 81014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014a6:	2300      	movs	r3, #0
 81014a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81014aa:	f107 0314 	add.w	r3, r7, #20
 81014ae:	4619      	mov	r1, r3
 81014b0:	4808      	ldr	r0, [pc, #32]	; (81014d4 <MX_GPIO_Init+0xc8>)
 81014b2:	f001 fde1 	bl	8103078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 81014b6:	2200      	movs	r2, #0
 81014b8:	2100      	movs	r1, #0
 81014ba:	2028      	movs	r0, #40	; 0x28
 81014bc:	f001 fd93 	bl	8102fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 81014c0:	2028      	movs	r0, #40	; 0x28
 81014c2:	f001 fdaa 	bl	810301a <HAL_NVIC_EnableIRQ>

}
 81014c6:	bf00      	nop
 81014c8:	3728      	adds	r7, #40	; 0x28
 81014ca:	46bd      	mov	sp, r7
 81014cc:	bd80      	pop	{r7, pc}
 81014ce:	bf00      	nop
 81014d0:	58024400 	.word	0x58024400
 81014d4:	58020800 	.word	0x58020800

081014d8 <Test_COM_Tx>:

/* USER CODE BEGIN 4 */
void Test_COM_Tx(uint8_t* msg){
 81014d8:	b580      	push	{r7, lr}
 81014da:	b084      	sub	sp, #16
 81014dc:	af00      	add	r7, sp, #0
 81014de:	6078      	str	r0, [r7, #4]

	uint16_t timeout = 0xFFFF;
 81014e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81014e4:	817b      	strh	r3, [r7, #10]
	int i = 0;
 81014e6:	2300      	movs	r3, #0
 81014e8:	60fb      	str	r3, [r7, #12]
	while (msg[i]!='\0'){
 81014ea:	e00a      	b.n	8101502 <Test_COM_Tx+0x2a>
		HAL_UART_Transmit(&huart3, &msg[i], 1, timeout);
 81014ec:	68fb      	ldr	r3, [r7, #12]
 81014ee:	687a      	ldr	r2, [r7, #4]
 81014f0:	18d1      	adds	r1, r2, r3
 81014f2:	897b      	ldrh	r3, [r7, #10]
 81014f4:	2201      	movs	r2, #1
 81014f6:	480d      	ldr	r0, [pc, #52]	; (810152c <Test_COM_Tx+0x54>)
 81014f8:	f005 fc68 	bl	8106dcc <HAL_UART_Transmit>
		i++;
 81014fc:	68fb      	ldr	r3, [r7, #12]
 81014fe:	3301      	adds	r3, #1
 8101500:	60fb      	str	r3, [r7, #12]
	while (msg[i]!='\0'){
 8101502:	68fb      	ldr	r3, [r7, #12]
 8101504:	687a      	ldr	r2, [r7, #4]
 8101506:	4413      	add	r3, r2
 8101508:	781b      	ldrb	r3, [r3, #0]
 810150a:	2b00      	cmp	r3, #0
 810150c:	d1ee      	bne.n	81014ec <Test_COM_Tx+0x14>
	}
	uint8_t eol[2] = "\r\n";
 810150e:	f640 230d 	movw	r3, #2573	; 0xa0d
 8101512:	813b      	strh	r3, [r7, #8]
	HAL_UART_Transmit(&huart3, eol, sizeof(eol), timeout);
 8101514:	897b      	ldrh	r3, [r7, #10]
 8101516:	f107 0108 	add.w	r1, r7, #8
 810151a:	2202      	movs	r2, #2
 810151c:	4803      	ldr	r0, [pc, #12]	; (810152c <Test_COM_Tx+0x54>)
 810151e:	f005 fc55 	bl	8106dcc <HAL_UART_Transmit>
}
 8101522:	bf00      	nop
 8101524:	3710      	adds	r7, #16
 8101526:	46bd      	mov	sp, r7
 8101528:	bd80      	pop	{r7, pc}
 810152a:	bf00      	nop
 810152c:	10000144 	.word	0x10000144

08101530 <Test_COM_Rx>:

void Test_COM_Rx(uint8_t* msg, uint32_t max_size){
 8101530:	b580      	push	{r7, lr}
 8101532:	b086      	sub	sp, #24
 8101534:	af00      	add	r7, sp, #0
 8101536:	6078      	str	r0, [r7, #4]
 8101538:	6039      	str	r1, [r7, #0]
	uint16_t timeout = 0xFFFF;
 810153a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810153e:	827b      	strh	r3, [r7, #18]
	uint8_t app = '\0';
 8101540:	2300      	movs	r3, #0
 8101542:	747b      	strb	r3, [r7, #17]

	int i = 0;
 8101544:	2300      	movs	r3, #0
 8101546:	617b      	str	r3, [r7, #20]
	while (app!='\r' && i < max_size-1){
 8101548:	e018      	b.n	810157c <Test_COM_Rx+0x4c>
		HAL_UART_Receive(&huart3, &app, 1, timeout);
 810154a:	8a7b      	ldrh	r3, [r7, #18]
 810154c:	f107 0111 	add.w	r1, r7, #17
 8101550:	2201      	movs	r2, #1
 8101552:	4818      	ldr	r0, [pc, #96]	; (81015b4 <Test_COM_Rx+0x84>)
 8101554:	f005 fcd0 	bl	8106ef8 <HAL_UART_Receive>

		HAL_UART_Transmit(&huart3, &app, 1, timeout);
 8101558:	8a7b      	ldrh	r3, [r7, #18]
 810155a:	f107 0111 	add.w	r1, r7, #17
 810155e:	2201      	movs	r2, #1
 8101560:	4814      	ldr	r0, [pc, #80]	; (81015b4 <Test_COM_Rx+0x84>)
 8101562:	f005 fc33 	bl	8106dcc <HAL_UART_Transmit>

		if (app!= '\r'){
 8101566:	7c7b      	ldrb	r3, [r7, #17]
 8101568:	2b0d      	cmp	r3, #13
 810156a:	d004      	beq.n	8101576 <Test_COM_Rx+0x46>
			msg[i] = app;
 810156c:	697b      	ldr	r3, [r7, #20]
 810156e:	687a      	ldr	r2, [r7, #4]
 8101570:	4413      	add	r3, r2
 8101572:	7c7a      	ldrb	r2, [r7, #17]
 8101574:	701a      	strb	r2, [r3, #0]
		}
		i++;
 8101576:	697b      	ldr	r3, [r7, #20]
 8101578:	3301      	adds	r3, #1
 810157a:	617b      	str	r3, [r7, #20]
	while (app!='\r' && i < max_size-1){
 810157c:	7c7b      	ldrb	r3, [r7, #17]
 810157e:	2b0d      	cmp	r3, #13
 8101580:	d004      	beq.n	810158c <Test_COM_Rx+0x5c>
 8101582:	683b      	ldr	r3, [r7, #0]
 8101584:	1e5a      	subs	r2, r3, #1
 8101586:	697b      	ldr	r3, [r7, #20]
 8101588:	429a      	cmp	r2, r3
 810158a:	d8de      	bhi.n	810154a <Test_COM_Rx+0x1a>

	}
	msg[i] = '\0';
 810158c:	697b      	ldr	r3, [r7, #20]
 810158e:	687a      	ldr	r2, [r7, #4]
 8101590:	4413      	add	r3, r2
 8101592:	2200      	movs	r2, #0
 8101594:	701a      	strb	r2, [r3, #0]
	uint8_t eol[2]= "\r\n";
 8101596:	f640 230d 	movw	r3, #2573	; 0xa0d
 810159a:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart3, eol, sizeof(eol), timeout);
 810159c:	8a7b      	ldrh	r3, [r7, #18]
 810159e:	f107 010c 	add.w	r1, r7, #12
 81015a2:	2202      	movs	r2, #2
 81015a4:	4803      	ldr	r0, [pc, #12]	; (81015b4 <Test_COM_Rx+0x84>)
 81015a6:	f005 fc11 	bl	8106dcc <HAL_UART_Transmit>
}
 81015aa:	bf00      	nop
 81015ac:	3718      	adds	r7, #24
 81015ae:	46bd      	mov	sp, r7
 81015b0:	bd80      	pop	{r7, pc}
 81015b2:	bf00      	nop
 81015b4:	10000144 	.word	0x10000144

081015b8 <charToInt>:


int charToInt(char* x)
{
 81015b8:	b5b0      	push	{r4, r5, r7, lr}
 81015ba:	b086      	sub	sp, #24
 81015bc:	af00      	add	r7, sp, #0
 81015be:	6078      	str	r0, [r7, #4]
	int num = 0;
 81015c0:	2300      	movs	r3, #0
 81015c2:	617b      	str	r3, [r7, #20]
	int i, app;
	int lenght = strlen(x);
 81015c4:	6878      	ldr	r0, [r7, #4]
 81015c6:	f7fe fe8b 	bl	81002e0 <strlen>
 81015ca:	4603      	mov	r3, r0
 81015cc:	60fb      	str	r3, [r7, #12]

	for (i = 0; i<lenght; i++)
 81015ce:	2300      	movs	r3, #0
 81015d0:	613b      	str	r3, [r7, #16]
 81015d2:	e037      	b.n	8101644 <charToInt+0x8c>
	{
		app = (x[lenght-i-1] - '0');
 81015d4:	68fa      	ldr	r2, [r7, #12]
 81015d6:	693b      	ldr	r3, [r7, #16]
 81015d8:	1ad3      	subs	r3, r2, r3
 81015da:	3b01      	subs	r3, #1
 81015dc:	687a      	ldr	r2, [r7, #4]
 81015de:	4413      	add	r3, r2
 81015e0:	781b      	ldrb	r3, [r3, #0]
 81015e2:	3b30      	subs	r3, #48	; 0x30
 81015e4:	60bb      	str	r3, [r7, #8]

		if(app < 0 || app > 9)
 81015e6:	68bb      	ldr	r3, [r7, #8]
 81015e8:	2b00      	cmp	r3, #0
 81015ea:	db02      	blt.n	81015f2 <charToInt+0x3a>
 81015ec:	68bb      	ldr	r3, [r7, #8]
 81015ee:	2b09      	cmp	r3, #9
 81015f0:	dd03      	ble.n	81015fa <charToInt+0x42>
		{
			num = -1;
 81015f2:	f04f 33ff 	mov.w	r3, #4294967295
 81015f6:	617b      	str	r3, [r7, #20]
			break;
 81015f8:	e028      	b.n	810164c <charToInt+0x94>
		}
		else
			app *= pow(10,i);
 81015fa:	6938      	ldr	r0, [r7, #16]
 81015fc:	f7ff f81a 	bl	8100634 <__aeabi_i2d>
 8101600:	4602      	mov	r2, r0
 8101602:	460b      	mov	r3, r1
 8101604:	ec43 2b11 	vmov	d1, r2, r3
 8101608:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8101658 <charToInt+0xa0>
 810160c:	f007 fa08 	bl	8108a20 <pow>
 8101610:	ec55 4b10 	vmov	r4, r5, d0
 8101614:	68b8      	ldr	r0, [r7, #8]
 8101616:	f7ff f80d 	bl	8100634 <__aeabi_i2d>
 810161a:	4602      	mov	r2, r0
 810161c:	460b      	mov	r3, r1
 810161e:	4620      	mov	r0, r4
 8101620:	4629      	mov	r1, r5
 8101622:	f7ff f871 	bl	8100708 <__aeabi_dmul>
 8101626:	4602      	mov	r2, r0
 8101628:	460b      	mov	r3, r1
 810162a:	4610      	mov	r0, r2
 810162c:	4619      	mov	r1, r3
 810162e:	f7ff fb1b 	bl	8100c68 <__aeabi_d2iz>
 8101632:	4603      	mov	r3, r0
 8101634:	60bb      	str	r3, [r7, #8]

		num += app;
 8101636:	697a      	ldr	r2, [r7, #20]
 8101638:	68bb      	ldr	r3, [r7, #8]
 810163a:	4413      	add	r3, r2
 810163c:	617b      	str	r3, [r7, #20]
	for (i = 0; i<lenght; i++)
 810163e:	693b      	ldr	r3, [r7, #16]
 8101640:	3301      	adds	r3, #1
 8101642:	613b      	str	r3, [r7, #16]
 8101644:	693a      	ldr	r2, [r7, #16]
 8101646:	68fb      	ldr	r3, [r7, #12]
 8101648:	429a      	cmp	r2, r3
 810164a:	dbc3      	blt.n	81015d4 <charToInt+0x1c>
	}

	return num;
 810164c:	697b      	ldr	r3, [r7, #20]
}
 810164e:	4618      	mov	r0, r3
 8101650:	3718      	adds	r7, #24
 8101652:	46bd      	mov	sp, r7
 8101654:	bdb0      	pop	{r4, r5, r7, pc}
 8101656:	bf00      	nop
 8101658:	00000000 	.word	0x00000000
 810165c:	40240000 	.word	0x40240000

08101660 <HAL_GPIO_EXTI_Callback>:
}
*/


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8101660:	b580      	push	{r7, lr}
 8101662:	b082      	sub	sp, #8
 8101664:	af00      	add	r7, sp, #0
 8101666:	4603      	mov	r3, r0
 8101668:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_13)
 810166a:	88fb      	ldrh	r3, [r7, #6]
 810166c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101670:	d11c      	bne.n	81016ac <HAL_GPIO_EXTI_Callback+0x4c>
	{
		if(firstTime == 0)
 8101672:	4b10      	ldr	r3, [pc, #64]	; (81016b4 <HAL_GPIO_EXTI_Callback+0x54>)
 8101674:	681b      	ldr	r3, [r3, #0]
 8101676:	2b00      	cmp	r3, #0
 8101678:	d113      	bne.n	81016a2 <HAL_GPIO_EXTI_Callback+0x42>
		{
			if(state == 0)
 810167a:	4b0f      	ldr	r3, [pc, #60]	; (81016b8 <HAL_GPIO_EXTI_Callback+0x58>)
 810167c:	681b      	ldr	r3, [r3, #0]
 810167e:	2b00      	cmp	r3, #0
 8101680:	d105      	bne.n	810168e <HAL_GPIO_EXTI_Callback+0x2e>
			{
				state = 1;
 8101682:	4b0d      	ldr	r3, [pc, #52]	; (81016b8 <HAL_GPIO_EXTI_Callback+0x58>)
 8101684:	2201      	movs	r2, #1
 8101686:	601a      	str	r2, [r3, #0]
				moveIt();
 8101688:	f000 f81a 	bl	81016c0 <moveIt>
			firstTime = 0;
		}

	}

}
 810168c:	e00e      	b.n	81016ac <HAL_GPIO_EXTI_Callback+0x4c>
			else if(state == 1)
 810168e:	4b0a      	ldr	r3, [pc, #40]	; (81016b8 <HAL_GPIO_EXTI_Callback+0x58>)
 8101690:	681b      	ldr	r3, [r3, #0]
 8101692:	2b01      	cmp	r3, #1
 8101694:	d10a      	bne.n	81016ac <HAL_GPIO_EXTI_Callback+0x4c>
				state = 0;
 8101696:	4b08      	ldr	r3, [pc, #32]	; (81016b8 <HAL_GPIO_EXTI_Callback+0x58>)
 8101698:	2200      	movs	r2, #0
 810169a:	601a      	str	r2, [r3, #0]
				stopIt();
 810169c:	f000 f858 	bl	8101750 <stopIt>
}
 81016a0:	e004      	b.n	81016ac <HAL_GPIO_EXTI_Callback+0x4c>
			armIt();
 81016a2:	f000 f861 	bl	8101768 <armIt>
			firstTime = 0;
 81016a6:	4b03      	ldr	r3, [pc, #12]	; (81016b4 <HAL_GPIO_EXTI_Callback+0x54>)
 81016a8:	2200      	movs	r2, #0
 81016aa:	601a      	str	r2, [r3, #0]
}
 81016ac:	bf00      	nop
 81016ae:	3708      	adds	r7, #8
 81016b0:	46bd      	mov	sp, r7
 81016b2:	bd80      	pop	{r7, pc}
 81016b4:	10000008 	.word	0x10000008
 81016b8:	100001d4 	.word	0x100001d4
 81016bc:	00000000 	.word	0x00000000

081016c0 <moveIt>:

void moveIt()
{
 81016c0:	b598      	push	{r3, r4, r7, lr}
 81016c2:	af00      	add	r7, sp, #0
	TIM3->CCR1 = MIN_VALUE + (volt/3.3)*(MAX_VALUE - MIN_VALUE);	//1200 + (0:800)
 81016c4:	4b16      	ldr	r3, [pc, #88]	; (8101720 <moveIt+0x60>)
 81016c6:	681b      	ldr	r3, [r3, #0]
 81016c8:	4618      	mov	r0, r3
 81016ca:	f7fe ffc5 	bl	8100658 <__aeabi_f2d>
 81016ce:	a312      	add	r3, pc, #72	; (adr r3, 8101718 <moveIt+0x58>)
 81016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016d4:	f7ff f942 	bl	810095c <__aeabi_ddiv>
 81016d8:	4602      	mov	r2, r0
 81016da:	460b      	mov	r3, r1
 81016dc:	4610      	mov	r0, r2
 81016de:	4619      	mov	r1, r3
 81016e0:	f04f 0200 	mov.w	r2, #0
 81016e4:	4b0f      	ldr	r3, [pc, #60]	; (8101724 <moveIt+0x64>)
 81016e6:	f7ff f80f 	bl	8100708 <__aeabi_dmul>
 81016ea:	4602      	mov	r2, r0
 81016ec:	460b      	mov	r3, r1
 81016ee:	4610      	mov	r0, r2
 81016f0:	4619      	mov	r1, r3
 81016f2:	f04f 0200 	mov.w	r2, #0
 81016f6:	4b0c      	ldr	r3, [pc, #48]	; (8101728 <moveIt+0x68>)
 81016f8:	f7fe fe50 	bl	810039c <__adddf3>
 81016fc:	4602      	mov	r2, r0
 81016fe:	460b      	mov	r3, r1
 8101700:	4c0a      	ldr	r4, [pc, #40]	; (810172c <moveIt+0x6c>)
 8101702:	4610      	mov	r0, r2
 8101704:	4619      	mov	r1, r3
 8101706:	f7ff fad7 	bl	8100cb8 <__aeabi_d2uiz>
 810170a:	4603      	mov	r3, r0
 810170c:	6363      	str	r3, [r4, #52]	; 0x34
}
 810170e:	bf00      	nop
 8101710:	bd98      	pop	{r3, r4, r7, pc}
 8101712:	bf00      	nop
 8101714:	f3af 8000 	nop.w
 8101718:	66666666 	.word	0x66666666
 810171c:	400a6666 	.word	0x400a6666
 8101720:	100001d8 	.word	0x100001d8
 8101724:	40890000 	.word	0x40890000
 8101728:	4092c000 	.word	0x4092c000
 810172c:	40000400 	.word	0x40000400

08101730 <move>:


void move(int value)
{
 8101730:	b480      	push	{r7}
 8101732:	b083      	sub	sp, #12
 8101734:	af00      	add	r7, sp, #0
 8101736:	6078      	str	r0, [r7, #4]
	TIM3->CCR1 = value;
 8101738:	4a04      	ldr	r2, [pc, #16]	; (810174c <move+0x1c>)
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	6353      	str	r3, [r2, #52]	; 0x34
}
 810173e:	bf00      	nop
 8101740:	370c      	adds	r7, #12
 8101742:	46bd      	mov	sp, r7
 8101744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101748:	4770      	bx	lr
 810174a:	bf00      	nop
 810174c:	40000400 	.word	0x40000400

08101750 <stopIt>:


void stopIt()
{
 8101750:	b480      	push	{r7}
 8101752:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 10;
 8101754:	4b03      	ldr	r3, [pc, #12]	; (8101764 <stopIt+0x14>)
 8101756:	220a      	movs	r2, #10
 8101758:	635a      	str	r2, [r3, #52]	; 0x34
}
 810175a:	bf00      	nop
 810175c:	46bd      	mov	sp, r7
 810175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101762:	4770      	bx	lr
 8101764:	40000400 	.word	0x40000400

08101768 <armIt>:

void armIt()
{
 8101768:	b480      	push	{r7}
 810176a:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 950;
 810176c:	4b04      	ldr	r3, [pc, #16]	; (8101780 <armIt+0x18>)
 810176e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8101772:	635a      	str	r2, [r3, #52]	; 0x34
}
 8101774:	bf00      	nop
 8101776:	46bd      	mov	sp, r7
 8101778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810177c:	4770      	bx	lr
 810177e:	bf00      	nop
 8101780:	40000400 	.word	0x40000400

08101784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101784:	b480      	push	{r7}
 8101786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101788:	b672      	cpsid	i
}
 810178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810178c:	e7fe      	b.n	810178c <Error_Handler+0x8>
	...

08101790 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101790:	b480      	push	{r7}
 8101792:	b083      	sub	sp, #12
 8101794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101796:	4b0a      	ldr	r3, [pc, #40]	; (81017c0 <HAL_MspInit+0x30>)
 8101798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810179c:	4a08      	ldr	r2, [pc, #32]	; (81017c0 <HAL_MspInit+0x30>)
 810179e:	f043 0302 	orr.w	r3, r3, #2
 81017a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81017a6:	4b06      	ldr	r3, [pc, #24]	; (81017c0 <HAL_MspInit+0x30>)
 81017a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81017ac:	f003 0302 	and.w	r3, r3, #2
 81017b0:	607b      	str	r3, [r7, #4]
 81017b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81017b4:	bf00      	nop
 81017b6:	370c      	adds	r7, #12
 81017b8:	46bd      	mov	sp, r7
 81017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017be:	4770      	bx	lr
 81017c0:	58024400 	.word	0x58024400

081017c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81017c4:	b580      	push	{r7, lr}
 81017c6:	b0b8      	sub	sp, #224	; 0xe0
 81017c8:	af00      	add	r7, sp, #0
 81017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81017d0:	2200      	movs	r2, #0
 81017d2:	601a      	str	r2, [r3, #0]
 81017d4:	605a      	str	r2, [r3, #4]
 81017d6:	609a      	str	r2, [r3, #8]
 81017d8:	60da      	str	r2, [r3, #12]
 81017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017dc:	f107 0310 	add.w	r3, r7, #16
 81017e0:	22bc      	movs	r2, #188	; 0xbc
 81017e2:	2100      	movs	r1, #0
 81017e4:	4618      	mov	r0, r3
 81017e6:	f006 fca5 	bl	8108134 <memset>
  if(hadc->Instance==ADC1)
 81017ea:	687b      	ldr	r3, [r7, #4]
 81017ec:	681b      	ldr	r3, [r3, #0]
 81017ee:	4a2a      	ldr	r2, [pc, #168]	; (8101898 <HAL_ADC_MspInit+0xd4>)
 81017f0:	4293      	cmp	r3, r2
 81017f2:	d14c      	bne.n	810188e <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 81017f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 81017f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 81017fa:	2301      	movs	r3, #1
 81017fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 81017fe:	2313      	movs	r3, #19
 8101800:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8101802:	2302      	movs	r3, #2
 8101804:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101806:	2302      	movs	r3, #2
 8101808:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 810180a:	2302      	movs	r3, #2
 810180c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 810180e:	23c0      	movs	r3, #192	; 0xc0
 8101810:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8101812:	2320      	movs	r3, #32
 8101814:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8101816:	2300      	movs	r3, #0
 8101818:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 810181a:	2300      	movs	r3, #0
 810181c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101820:	f107 0310 	add.w	r3, r7, #16
 8101824:	4618      	mov	r0, r3
 8101826:	f002 f863 	bl	81038f0 <HAL_RCCEx_PeriphCLKConfig>
 810182a:	4603      	mov	r3, r0
 810182c:	2b00      	cmp	r3, #0
 810182e:	d001      	beq.n	8101834 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8101830:	f7ff ffa8 	bl	8101784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101834:	4b19      	ldr	r3, [pc, #100]	; (810189c <HAL_ADC_MspInit+0xd8>)
 8101836:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810183a:	4a18      	ldr	r2, [pc, #96]	; (810189c <HAL_ADC_MspInit+0xd8>)
 810183c:	f043 0320 	orr.w	r3, r3, #32
 8101840:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101844:	4b15      	ldr	r3, [pc, #84]	; (810189c <HAL_ADC_MspInit+0xd8>)
 8101846:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810184a:	f003 0320 	and.w	r3, r3, #32
 810184e:	60fb      	str	r3, [r7, #12]
 8101850:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101852:	4b12      	ldr	r3, [pc, #72]	; (810189c <HAL_ADC_MspInit+0xd8>)
 8101854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101858:	4a10      	ldr	r2, [pc, #64]	; (810189c <HAL_ADC_MspInit+0xd8>)
 810185a:	f043 0301 	orr.w	r3, r3, #1
 810185e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101862:	4b0e      	ldr	r3, [pc, #56]	; (810189c <HAL_ADC_MspInit+0xd8>)
 8101864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101868:	f003 0301 	and.w	r3, r3, #1
 810186c:	60bb      	str	r3, [r7, #8]
 810186e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101870:	2308      	movs	r3, #8
 8101872:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101876:	2303      	movs	r3, #3
 8101878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810187c:	2300      	movs	r3, #0
 810187e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101882:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101886:	4619      	mov	r1, r3
 8101888:	4805      	ldr	r0, [pc, #20]	; (81018a0 <HAL_ADC_MspInit+0xdc>)
 810188a:	f001 fbf5 	bl	8103078 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 810188e:	bf00      	nop
 8101890:	37e0      	adds	r7, #224	; 0xe0
 8101892:	46bd      	mov	sp, r7
 8101894:	bd80      	pop	{r7, pc}
 8101896:	bf00      	nop
 8101898:	40022000 	.word	0x40022000
 810189c:	58024400 	.word	0x58024400
 81018a0:	58020000 	.word	0x58020000

081018a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 81018a4:	b480      	push	{r7}
 81018a6:	b085      	sub	sp, #20
 81018a8:	af00      	add	r7, sp, #0
 81018aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 81018ac:	687b      	ldr	r3, [r7, #4]
 81018ae:	681b      	ldr	r3, [r3, #0]
 81018b0:	4a0b      	ldr	r2, [pc, #44]	; (81018e0 <HAL_TIM_Base_MspInit+0x3c>)
 81018b2:	4293      	cmp	r3, r2
 81018b4:	d10e      	bne.n	81018d4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 81018b6:	4b0b      	ldr	r3, [pc, #44]	; (81018e4 <HAL_TIM_Base_MspInit+0x40>)
 81018b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81018bc:	4a09      	ldr	r2, [pc, #36]	; (81018e4 <HAL_TIM_Base_MspInit+0x40>)
 81018be:	f043 0302 	orr.w	r3, r3, #2
 81018c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81018c6:	4b07      	ldr	r3, [pc, #28]	; (81018e4 <HAL_TIM_Base_MspInit+0x40>)
 81018c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81018cc:	f003 0302 	and.w	r3, r3, #2
 81018d0:	60fb      	str	r3, [r7, #12]
 81018d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 81018d4:	bf00      	nop
 81018d6:	3714      	adds	r7, #20
 81018d8:	46bd      	mov	sp, r7
 81018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018de:	4770      	bx	lr
 81018e0:	40000400 	.word	0x40000400
 81018e4:	58024400 	.word	0x58024400

081018e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 81018e8:	b580      	push	{r7, lr}
 81018ea:	b08a      	sub	sp, #40	; 0x28
 81018ec:	af00      	add	r7, sp, #0
 81018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81018f0:	f107 0314 	add.w	r3, r7, #20
 81018f4:	2200      	movs	r2, #0
 81018f6:	601a      	str	r2, [r3, #0]
 81018f8:	605a      	str	r2, [r3, #4]
 81018fa:	609a      	str	r2, [r3, #8]
 81018fc:	60da      	str	r2, [r3, #12]
 81018fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8101900:	687b      	ldr	r3, [r7, #4]
 8101902:	681b      	ldr	r3, [r3, #0]
 8101904:	4a22      	ldr	r2, [pc, #136]	; (8101990 <HAL_TIM_MspPostInit+0xa8>)
 8101906:	4293      	cmp	r3, r2
 8101908:	d13d      	bne.n	8101986 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810190a:	4b22      	ldr	r3, [pc, #136]	; (8101994 <HAL_TIM_MspPostInit+0xac>)
 810190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101910:	4a20      	ldr	r2, [pc, #128]	; (8101994 <HAL_TIM_MspPostInit+0xac>)
 8101912:	f043 0301 	orr.w	r3, r3, #1
 8101916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810191a:	4b1e      	ldr	r3, [pc, #120]	; (8101994 <HAL_TIM_MspPostInit+0xac>)
 810191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101920:	f003 0301 	and.w	r3, r3, #1
 8101924:	613b      	str	r3, [r7, #16]
 8101926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101928:	4b1a      	ldr	r3, [pc, #104]	; (8101994 <HAL_TIM_MspPostInit+0xac>)
 810192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810192e:	4a19      	ldr	r2, [pc, #100]	; (8101994 <HAL_TIM_MspPostInit+0xac>)
 8101930:	f043 0302 	orr.w	r3, r3, #2
 8101934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101938:	4b16      	ldr	r3, [pc, #88]	; (8101994 <HAL_TIM_MspPostInit+0xac>)
 810193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810193e:	f003 0302 	and.w	r3, r3, #2
 8101942:	60fb      	str	r3, [r7, #12]
 8101944:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101946:	2340      	movs	r3, #64	; 0x40
 8101948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810194a:	2302      	movs	r3, #2
 810194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810194e:	2300      	movs	r3, #0
 8101950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101952:	2300      	movs	r3, #0
 8101954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101956:	2302      	movs	r3, #2
 8101958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810195a:	f107 0314 	add.w	r3, r7, #20
 810195e:	4619      	mov	r1, r3
 8101960:	480d      	ldr	r0, [pc, #52]	; (8101998 <HAL_TIM_MspPostInit+0xb0>)
 8101962:	f001 fb89 	bl	8103078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101966:	2301      	movs	r3, #1
 8101968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810196a:	2302      	movs	r3, #2
 810196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810196e:	2300      	movs	r3, #0
 8101970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101972:	2300      	movs	r3, #0
 8101974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8101976:	2302      	movs	r3, #2
 8101978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810197a:	f107 0314 	add.w	r3, r7, #20
 810197e:	4619      	mov	r1, r3
 8101980:	4806      	ldr	r0, [pc, #24]	; (810199c <HAL_TIM_MspPostInit+0xb4>)
 8101982:	f001 fb79 	bl	8103078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8101986:	bf00      	nop
 8101988:	3728      	adds	r7, #40	; 0x28
 810198a:	46bd      	mov	sp, r7
 810198c:	bd80      	pop	{r7, pc}
 810198e:	bf00      	nop
 8101990:	40000400 	.word	0x40000400
 8101994:	58024400 	.word	0x58024400
 8101998:	58020000 	.word	0x58020000
 810199c:	58020400 	.word	0x58020400

081019a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81019a0:	b580      	push	{r7, lr}
 81019a2:	b0b8      	sub	sp, #224	; 0xe0
 81019a4:	af00      	add	r7, sp, #0
 81019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81019ac:	2200      	movs	r2, #0
 81019ae:	601a      	str	r2, [r3, #0]
 81019b0:	605a      	str	r2, [r3, #4]
 81019b2:	609a      	str	r2, [r3, #8]
 81019b4:	60da      	str	r2, [r3, #12]
 81019b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81019b8:	f107 0310 	add.w	r3, r7, #16
 81019bc:	22bc      	movs	r2, #188	; 0xbc
 81019be:	2100      	movs	r1, #0
 81019c0:	4618      	mov	r0, r3
 81019c2:	f006 fbb7 	bl	8108134 <memset>
  if(huart->Instance==USART3)
 81019c6:	687b      	ldr	r3, [r7, #4]
 81019c8:	681b      	ldr	r3, [r3, #0]
 81019ca:	4a25      	ldr	r2, [pc, #148]	; (8101a60 <HAL_UART_MspInit+0xc0>)
 81019cc:	4293      	cmp	r3, r2
 81019ce:	d142      	bne.n	8101a56 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81019d0:	2302      	movs	r3, #2
 81019d2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81019d4:	2300      	movs	r3, #0
 81019d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81019da:	f107 0310 	add.w	r3, r7, #16
 81019de:	4618      	mov	r0, r3
 81019e0:	f001 ff86 	bl	81038f0 <HAL_RCCEx_PeriphCLKConfig>
 81019e4:	4603      	mov	r3, r0
 81019e6:	2b00      	cmp	r3, #0
 81019e8:	d001      	beq.n	81019ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 81019ea:	f7ff fecb 	bl	8101784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 81019ee:	4b1d      	ldr	r3, [pc, #116]	; (8101a64 <HAL_UART_MspInit+0xc4>)
 81019f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81019f4:	4a1b      	ldr	r2, [pc, #108]	; (8101a64 <HAL_UART_MspInit+0xc4>)
 81019f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81019fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81019fe:	4b19      	ldr	r3, [pc, #100]	; (8101a64 <HAL_UART_MspInit+0xc4>)
 8101a00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101a08:	60fb      	str	r3, [r7, #12]
 8101a0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a0c:	4b15      	ldr	r3, [pc, #84]	; (8101a64 <HAL_UART_MspInit+0xc4>)
 8101a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a12:	4a14      	ldr	r2, [pc, #80]	; (8101a64 <HAL_UART_MspInit+0xc4>)
 8101a14:	f043 0308 	orr.w	r3, r3, #8
 8101a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a1c:	4b11      	ldr	r3, [pc, #68]	; (8101a64 <HAL_UART_MspInit+0xc4>)
 8101a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a22:	f003 0308 	and.w	r3, r3, #8
 8101a26:	60bb      	str	r3, [r7, #8]
 8101a28:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101a2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a32:	2302      	movs	r3, #2
 8101a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a38:	2300      	movs	r3, #0
 8101a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a3e:	2300      	movs	r3, #0
 8101a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101a44:	2307      	movs	r3, #7
 8101a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101a4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101a4e:	4619      	mov	r1, r3
 8101a50:	4805      	ldr	r0, [pc, #20]	; (8101a68 <HAL_UART_MspInit+0xc8>)
 8101a52:	f001 fb11 	bl	8103078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101a56:	bf00      	nop
 8101a58:	37e0      	adds	r7, #224	; 0xe0
 8101a5a:	46bd      	mov	sp, r7
 8101a5c:	bd80      	pop	{r7, pc}
 8101a5e:	bf00      	nop
 8101a60:	40004800 	.word	0x40004800
 8101a64:	58024400 	.word	0x58024400
 8101a68:	58020c00 	.word	0x58020c00

08101a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101a6c:	b480      	push	{r7}
 8101a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101a70:	e7fe      	b.n	8101a70 <NMI_Handler+0x4>

08101a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101a72:	b480      	push	{r7}
 8101a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101a76:	e7fe      	b.n	8101a76 <HardFault_Handler+0x4>

08101a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101a78:	b480      	push	{r7}
 8101a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101a7c:	e7fe      	b.n	8101a7c <MemManage_Handler+0x4>

08101a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101a7e:	b480      	push	{r7}
 8101a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101a82:	e7fe      	b.n	8101a82 <BusFault_Handler+0x4>

08101a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101a84:	b480      	push	{r7}
 8101a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101a88:	e7fe      	b.n	8101a88 <UsageFault_Handler+0x4>

08101a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101a8a:	b480      	push	{r7}
 8101a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101a8e:	bf00      	nop
 8101a90:	46bd      	mov	sp, r7
 8101a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a96:	4770      	bx	lr

08101a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101a98:	b480      	push	{r7}
 8101a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101a9c:	bf00      	nop
 8101a9e:	46bd      	mov	sp, r7
 8101aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa4:	4770      	bx	lr

08101aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101aa6:	b480      	push	{r7}
 8101aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101aaa:	bf00      	nop
 8101aac:	46bd      	mov	sp, r7
 8101aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ab2:	4770      	bx	lr

08101ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101ab4:	b580      	push	{r7, lr}
 8101ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101ab8:	f000 f8fe 	bl	8101cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101abc:	bf00      	nop
 8101abe:	bd80      	pop	{r7, pc}

08101ac0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101ac0:	b580      	push	{r7, lr}
 8101ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8101ac4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8101ac8:	f001 fc86 	bl	81033d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101acc:	bf00      	nop
 8101ace:	bd80      	pop	{r7, pc}

08101ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101ad0:	b580      	push	{r7, lr}
 8101ad2:	b086      	sub	sp, #24
 8101ad4:	af00      	add	r7, sp, #0
 8101ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101ad8:	4a14      	ldr	r2, [pc, #80]	; (8101b2c <_sbrk+0x5c>)
 8101ada:	4b15      	ldr	r3, [pc, #84]	; (8101b30 <_sbrk+0x60>)
 8101adc:	1ad3      	subs	r3, r2, r3
 8101ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101ae0:	697b      	ldr	r3, [r7, #20]
 8101ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101ae4:	4b13      	ldr	r3, [pc, #76]	; (8101b34 <_sbrk+0x64>)
 8101ae6:	681b      	ldr	r3, [r3, #0]
 8101ae8:	2b00      	cmp	r3, #0
 8101aea:	d102      	bne.n	8101af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101aec:	4b11      	ldr	r3, [pc, #68]	; (8101b34 <_sbrk+0x64>)
 8101aee:	4a12      	ldr	r2, [pc, #72]	; (8101b38 <_sbrk+0x68>)
 8101af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101af2:	4b10      	ldr	r3, [pc, #64]	; (8101b34 <_sbrk+0x64>)
 8101af4:	681a      	ldr	r2, [r3, #0]
 8101af6:	687b      	ldr	r3, [r7, #4]
 8101af8:	4413      	add	r3, r2
 8101afa:	693a      	ldr	r2, [r7, #16]
 8101afc:	429a      	cmp	r2, r3
 8101afe:	d207      	bcs.n	8101b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101b00:	f006 faee 	bl	81080e0 <__errno>
 8101b04:	4603      	mov	r3, r0
 8101b06:	220c      	movs	r2, #12
 8101b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8101b0e:	e009      	b.n	8101b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101b10:	4b08      	ldr	r3, [pc, #32]	; (8101b34 <_sbrk+0x64>)
 8101b12:	681b      	ldr	r3, [r3, #0]
 8101b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101b16:	4b07      	ldr	r3, [pc, #28]	; (8101b34 <_sbrk+0x64>)
 8101b18:	681a      	ldr	r2, [r3, #0]
 8101b1a:	687b      	ldr	r3, [r7, #4]
 8101b1c:	4413      	add	r3, r2
 8101b1e:	4a05      	ldr	r2, [pc, #20]	; (8101b34 <_sbrk+0x64>)
 8101b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101b22:	68fb      	ldr	r3, [r7, #12]
}
 8101b24:	4618      	mov	r0, r3
 8101b26:	3718      	adds	r7, #24
 8101b28:	46bd      	mov	sp, r7
 8101b2a:	bd80      	pop	{r7, pc}
 8101b2c:	10048000 	.word	0x10048000
 8101b30:	00000400 	.word	0x00000400
 8101b34:	100001dc 	.word	0x100001dc
 8101b38:	100001f8 	.word	0x100001f8

08101b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101b74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101b40:	f7ff fa5c 	bl	8100ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101b44:	480c      	ldr	r0, [pc, #48]	; (8101b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101b46:	490d      	ldr	r1, [pc, #52]	; (8101b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101b48:	4a0d      	ldr	r2, [pc, #52]	; (8101b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101b4c:	e002      	b.n	8101b54 <LoopCopyDataInit>

08101b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101b52:	3304      	adds	r3, #4

08101b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101b58:	d3f9      	bcc.n	8101b4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101b5a:	4a0a      	ldr	r2, [pc, #40]	; (8101b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101b5c:	4c0a      	ldr	r4, [pc, #40]	; (8101b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101b60:	e001      	b.n	8101b66 <LoopFillZerobss>

08101b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101b64:	3204      	adds	r2, #4

08101b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101b68:	d3fb      	bcc.n	8101b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101b6a:	f006 fabf 	bl	81080ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101b6e:	f7ff fa5d 	bl	810102c <main>
  bx  lr
 8101b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101b74:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101b78:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101b7c:	10000078 	.word	0x10000078
  ldr r2, =_sidata
 8101b80:	08109960 	.word	0x08109960
  ldr r2, =_sbss
 8101b84:	10000078 	.word	0x10000078
  ldr r4, =_ebss
 8101b88:	100001f4 	.word	0x100001f4

08101b8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101b8c:	e7fe      	b.n	8101b8c <ADC3_IRQHandler>
	...

08101b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101b90:	b580      	push	{r7, lr}
 8101b92:	b082      	sub	sp, #8
 8101b94:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101b96:	4b28      	ldr	r3, [pc, #160]	; (8101c38 <HAL_Init+0xa8>)
 8101b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101b9c:	4a26      	ldr	r2, [pc, #152]	; (8101c38 <HAL_Init+0xa8>)
 8101b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101ba2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101ba6:	4b24      	ldr	r3, [pc, #144]	; (8101c38 <HAL_Init+0xa8>)
 8101ba8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101bb0:	603b      	str	r3, [r7, #0]
 8101bb2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101bb4:	4b21      	ldr	r3, [pc, #132]	; (8101c3c <HAL_Init+0xac>)
 8101bb6:	681b      	ldr	r3, [r3, #0]
 8101bb8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101bbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101bc0:	4a1e      	ldr	r2, [pc, #120]	; (8101c3c <HAL_Init+0xac>)
 8101bc2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101bc6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101bc8:	4b1c      	ldr	r3, [pc, #112]	; (8101c3c <HAL_Init+0xac>)
 8101bca:	681b      	ldr	r3, [r3, #0]
 8101bcc:	4a1b      	ldr	r2, [pc, #108]	; (8101c3c <HAL_Init+0xac>)
 8101bce:	f043 0301 	orr.w	r3, r3, #1
 8101bd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101bd4:	2003      	movs	r0, #3
 8101bd6:	f001 f9fb 	bl	8102fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101bda:	f001 fcb1 	bl	8103540 <HAL_RCC_GetSysClockFreq>
 8101bde:	4602      	mov	r2, r0
 8101be0:	4b15      	ldr	r3, [pc, #84]	; (8101c38 <HAL_Init+0xa8>)
 8101be2:	699b      	ldr	r3, [r3, #24]
 8101be4:	0a1b      	lsrs	r3, r3, #8
 8101be6:	f003 030f 	and.w	r3, r3, #15
 8101bea:	4915      	ldr	r1, [pc, #84]	; (8101c40 <HAL_Init+0xb0>)
 8101bec:	5ccb      	ldrb	r3, [r1, r3]
 8101bee:	f003 031f 	and.w	r3, r3, #31
 8101bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8101bf6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101bf8:	4b0f      	ldr	r3, [pc, #60]	; (8101c38 <HAL_Init+0xa8>)
 8101bfa:	699b      	ldr	r3, [r3, #24]
 8101bfc:	f003 030f 	and.w	r3, r3, #15
 8101c00:	4a0f      	ldr	r2, [pc, #60]	; (8101c40 <HAL_Init+0xb0>)
 8101c02:	5cd3      	ldrb	r3, [r2, r3]
 8101c04:	f003 031f 	and.w	r3, r3, #31
 8101c08:	687a      	ldr	r2, [r7, #4]
 8101c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8101c0e:	4a0d      	ldr	r2, [pc, #52]	; (8101c44 <HAL_Init+0xb4>)
 8101c10:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101c12:	4b0c      	ldr	r3, [pc, #48]	; (8101c44 <HAL_Init+0xb4>)
 8101c14:	681b      	ldr	r3, [r3, #0]
 8101c16:	4a0c      	ldr	r2, [pc, #48]	; (8101c48 <HAL_Init+0xb8>)
 8101c18:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101c1a:	2000      	movs	r0, #0
 8101c1c:	f000 f816 	bl	8101c4c <HAL_InitTick>
 8101c20:	4603      	mov	r3, r0
 8101c22:	2b00      	cmp	r3, #0
 8101c24:	d001      	beq.n	8101c2a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101c26:	2301      	movs	r3, #1
 8101c28:	e002      	b.n	8101c30 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101c2a:	f7ff fdb1 	bl	8101790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101c2e:	2300      	movs	r3, #0
}
 8101c30:	4618      	mov	r0, r3
 8101c32:	3708      	adds	r7, #8
 8101c34:	46bd      	mov	sp, r7
 8101c36:	bd80      	pop	{r7, pc}
 8101c38:	58024400 	.word	0x58024400
 8101c3c:	40024400 	.word	0x40024400
 8101c40:	081098b4 	.word	0x081098b4
 8101c44:	10000004 	.word	0x10000004
 8101c48:	10000000 	.word	0x10000000

08101c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101c4c:	b580      	push	{r7, lr}
 8101c4e:	b082      	sub	sp, #8
 8101c50:	af00      	add	r7, sp, #0
 8101c52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101c54:	4b15      	ldr	r3, [pc, #84]	; (8101cac <HAL_InitTick+0x60>)
 8101c56:	781b      	ldrb	r3, [r3, #0]
 8101c58:	2b00      	cmp	r3, #0
 8101c5a:	d101      	bne.n	8101c60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101c5c:	2301      	movs	r3, #1
 8101c5e:	e021      	b.n	8101ca4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101c60:	4b13      	ldr	r3, [pc, #76]	; (8101cb0 <HAL_InitTick+0x64>)
 8101c62:	681a      	ldr	r2, [r3, #0]
 8101c64:	4b11      	ldr	r3, [pc, #68]	; (8101cac <HAL_InitTick+0x60>)
 8101c66:	781b      	ldrb	r3, [r3, #0]
 8101c68:	4619      	mov	r1, r3
 8101c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8101c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8101c76:	4618      	mov	r0, r3
 8101c78:	f001 f9dd 	bl	8103036 <HAL_SYSTICK_Config>
 8101c7c:	4603      	mov	r3, r0
 8101c7e:	2b00      	cmp	r3, #0
 8101c80:	d001      	beq.n	8101c86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101c82:	2301      	movs	r3, #1
 8101c84:	e00e      	b.n	8101ca4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	2b0f      	cmp	r3, #15
 8101c8a:	d80a      	bhi.n	8101ca2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101c8c:	2200      	movs	r2, #0
 8101c8e:	6879      	ldr	r1, [r7, #4]
 8101c90:	f04f 30ff 	mov.w	r0, #4294967295
 8101c94:	f001 f9a7 	bl	8102fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101c98:	4a06      	ldr	r2, [pc, #24]	; (8101cb4 <HAL_InitTick+0x68>)
 8101c9a:	687b      	ldr	r3, [r7, #4]
 8101c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101c9e:	2300      	movs	r3, #0
 8101ca0:	e000      	b.n	8101ca4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101ca2:	2301      	movs	r3, #1
}
 8101ca4:	4618      	mov	r0, r3
 8101ca6:	3708      	adds	r7, #8
 8101ca8:	46bd      	mov	sp, r7
 8101caa:	bd80      	pop	{r7, pc}
 8101cac:	10000010 	.word	0x10000010
 8101cb0:	10000000 	.word	0x10000000
 8101cb4:	1000000c 	.word	0x1000000c

08101cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101cb8:	b480      	push	{r7}
 8101cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101cbc:	4b06      	ldr	r3, [pc, #24]	; (8101cd8 <HAL_IncTick+0x20>)
 8101cbe:	781b      	ldrb	r3, [r3, #0]
 8101cc0:	461a      	mov	r2, r3
 8101cc2:	4b06      	ldr	r3, [pc, #24]	; (8101cdc <HAL_IncTick+0x24>)
 8101cc4:	681b      	ldr	r3, [r3, #0]
 8101cc6:	4413      	add	r3, r2
 8101cc8:	4a04      	ldr	r2, [pc, #16]	; (8101cdc <HAL_IncTick+0x24>)
 8101cca:	6013      	str	r3, [r2, #0]
}
 8101ccc:	bf00      	nop
 8101cce:	46bd      	mov	sp, r7
 8101cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cd4:	4770      	bx	lr
 8101cd6:	bf00      	nop
 8101cd8:	10000010 	.word	0x10000010
 8101cdc:	100001e0 	.word	0x100001e0

08101ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101ce0:	b480      	push	{r7}
 8101ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8101ce4:	4b03      	ldr	r3, [pc, #12]	; (8101cf4 <HAL_GetTick+0x14>)
 8101ce6:	681b      	ldr	r3, [r3, #0]
}
 8101ce8:	4618      	mov	r0, r3
 8101cea:	46bd      	mov	sp, r7
 8101cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cf0:	4770      	bx	lr
 8101cf2:	bf00      	nop
 8101cf4:	100001e0 	.word	0x100001e0

08101cf8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101cf8:	b480      	push	{r7}
 8101cfa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101cfc:	4b03      	ldr	r3, [pc, #12]	; (8101d0c <HAL_GetREVID+0x14>)
 8101cfe:	681b      	ldr	r3, [r3, #0]
 8101d00:	0c1b      	lsrs	r3, r3, #16
}
 8101d02:	4618      	mov	r0, r3
 8101d04:	46bd      	mov	sp, r7
 8101d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d0a:	4770      	bx	lr
 8101d0c:	5c001000 	.word	0x5c001000

08101d10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8101d10:	b480      	push	{r7}
 8101d12:	b083      	sub	sp, #12
 8101d14:	af00      	add	r7, sp, #0
 8101d16:	6078      	str	r0, [r7, #4]
 8101d18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8101d1a:	687b      	ldr	r3, [r7, #4]
 8101d1c:	689b      	ldr	r3, [r3, #8]
 8101d1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8101d22:	683b      	ldr	r3, [r7, #0]
 8101d24:	431a      	orrs	r2, r3
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	609a      	str	r2, [r3, #8]
}
 8101d2a:	bf00      	nop
 8101d2c:	370c      	adds	r7, #12
 8101d2e:	46bd      	mov	sp, r7
 8101d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d34:	4770      	bx	lr

08101d36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8101d36:	b480      	push	{r7}
 8101d38:	b083      	sub	sp, #12
 8101d3a:	af00      	add	r7, sp, #0
 8101d3c:	6078      	str	r0, [r7, #4]
 8101d3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8101d40:	687b      	ldr	r3, [r7, #4]
 8101d42:	689b      	ldr	r3, [r3, #8]
 8101d44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8101d48:	683b      	ldr	r3, [r7, #0]
 8101d4a:	431a      	orrs	r2, r3
 8101d4c:	687b      	ldr	r3, [r7, #4]
 8101d4e:	609a      	str	r2, [r3, #8]
}
 8101d50:	bf00      	nop
 8101d52:	370c      	adds	r7, #12
 8101d54:	46bd      	mov	sp, r7
 8101d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d5a:	4770      	bx	lr

08101d5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101d5c:	b480      	push	{r7}
 8101d5e:	b083      	sub	sp, #12
 8101d60:	af00      	add	r7, sp, #0
 8101d62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	689b      	ldr	r3, [r3, #8]
 8101d68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8101d6c:	4618      	mov	r0, r3
 8101d6e:	370c      	adds	r7, #12
 8101d70:	46bd      	mov	sp, r7
 8101d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d76:	4770      	bx	lr

08101d78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8101d78:	b480      	push	{r7}
 8101d7a:	b087      	sub	sp, #28
 8101d7c:	af00      	add	r7, sp, #0
 8101d7e:	60f8      	str	r0, [r7, #12]
 8101d80:	60b9      	str	r1, [r7, #8]
 8101d82:	607a      	str	r2, [r7, #4]
 8101d84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101d86:	68fb      	ldr	r3, [r7, #12]
 8101d88:	3360      	adds	r3, #96	; 0x60
 8101d8a:	461a      	mov	r2, r3
 8101d8c:	68bb      	ldr	r3, [r7, #8]
 8101d8e:	009b      	lsls	r3, r3, #2
 8101d90:	4413      	add	r3, r2
 8101d92:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101d94:	697b      	ldr	r3, [r7, #20]
 8101d96:	681b      	ldr	r3, [r3, #0]
 8101d98:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8101da2:	683b      	ldr	r3, [r7, #0]
 8101da4:	430b      	orrs	r3, r1
 8101da6:	431a      	orrs	r2, r3
 8101da8:	697b      	ldr	r3, [r7, #20]
 8101daa:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8101dac:	bf00      	nop
 8101dae:	371c      	adds	r7, #28
 8101db0:	46bd      	mov	sp, r7
 8101db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101db6:	4770      	bx	lr

08101db8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101db8:	b480      	push	{r7}
 8101dba:	b085      	sub	sp, #20
 8101dbc:	af00      	add	r7, sp, #0
 8101dbe:	60f8      	str	r0, [r7, #12]
 8101dc0:	60b9      	str	r1, [r7, #8]
 8101dc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101dc4:	68fb      	ldr	r3, [r7, #12]
 8101dc6:	691b      	ldr	r3, [r3, #16]
 8101dc8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8101dcc:	68bb      	ldr	r3, [r7, #8]
 8101dce:	f003 031f 	and.w	r3, r3, #31
 8101dd2:	6879      	ldr	r1, [r7, #4]
 8101dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8101dd8:	431a      	orrs	r2, r3
 8101dda:	68fb      	ldr	r3, [r7, #12]
 8101ddc:	611a      	str	r2, [r3, #16]
}
 8101dde:	bf00      	nop
 8101de0:	3714      	adds	r7, #20
 8101de2:	46bd      	mov	sp, r7
 8101de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101de8:	4770      	bx	lr

08101dea <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8101dea:	b480      	push	{r7}
 8101dec:	b087      	sub	sp, #28
 8101dee:	af00      	add	r7, sp, #0
 8101df0:	60f8      	str	r0, [r7, #12]
 8101df2:	60b9      	str	r1, [r7, #8]
 8101df4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101df6:	68fb      	ldr	r3, [r7, #12]
 8101df8:	3360      	adds	r3, #96	; 0x60
 8101dfa:	461a      	mov	r2, r3
 8101dfc:	68bb      	ldr	r3, [r7, #8]
 8101dfe:	009b      	lsls	r3, r3, #2
 8101e00:	4413      	add	r3, r2
 8101e02:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8101e04:	697b      	ldr	r3, [r7, #20]
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	431a      	orrs	r2, r3
 8101e10:	697b      	ldr	r3, [r7, #20]
 8101e12:	601a      	str	r2, [r3, #0]
  }
}
 8101e14:	bf00      	nop
 8101e16:	371c      	adds	r7, #28
 8101e18:	46bd      	mov	sp, r7
 8101e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e1e:	4770      	bx	lr

08101e20 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8101e20:	b480      	push	{r7}
 8101e22:	b087      	sub	sp, #28
 8101e24:	af00      	add	r7, sp, #0
 8101e26:	60f8      	str	r0, [r7, #12]
 8101e28:	60b9      	str	r1, [r7, #8]
 8101e2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8101e2c:	68fb      	ldr	r3, [r7, #12]
 8101e2e:	3330      	adds	r3, #48	; 0x30
 8101e30:	461a      	mov	r2, r3
 8101e32:	68bb      	ldr	r3, [r7, #8]
 8101e34:	0a1b      	lsrs	r3, r3, #8
 8101e36:	009b      	lsls	r3, r3, #2
 8101e38:	f003 030c 	and.w	r3, r3, #12
 8101e3c:	4413      	add	r3, r2
 8101e3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101e40:	697b      	ldr	r3, [r7, #20]
 8101e42:	681a      	ldr	r2, [r3, #0]
 8101e44:	68bb      	ldr	r3, [r7, #8]
 8101e46:	f003 031f 	and.w	r3, r3, #31
 8101e4a:	211f      	movs	r1, #31
 8101e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8101e50:	43db      	mvns	r3, r3
 8101e52:	401a      	ands	r2, r3
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	0e9b      	lsrs	r3, r3, #26
 8101e58:	f003 011f 	and.w	r1, r3, #31
 8101e5c:	68bb      	ldr	r3, [r7, #8]
 8101e5e:	f003 031f 	and.w	r3, r3, #31
 8101e62:	fa01 f303 	lsl.w	r3, r1, r3
 8101e66:	431a      	orrs	r2, r3
 8101e68:	697b      	ldr	r3, [r7, #20]
 8101e6a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8101e6c:	bf00      	nop
 8101e6e:	371c      	adds	r7, #28
 8101e70:	46bd      	mov	sp, r7
 8101e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e76:	4770      	bx	lr

08101e78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8101e78:	b480      	push	{r7}
 8101e7a:	b087      	sub	sp, #28
 8101e7c:	af00      	add	r7, sp, #0
 8101e7e:	60f8      	str	r0, [r7, #12]
 8101e80:	60b9      	str	r1, [r7, #8]
 8101e82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8101e84:	68fb      	ldr	r3, [r7, #12]
 8101e86:	3314      	adds	r3, #20
 8101e88:	461a      	mov	r2, r3
 8101e8a:	68bb      	ldr	r3, [r7, #8]
 8101e8c:	0e5b      	lsrs	r3, r3, #25
 8101e8e:	009b      	lsls	r3, r3, #2
 8101e90:	f003 0304 	and.w	r3, r3, #4
 8101e94:	4413      	add	r3, r2
 8101e96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101e98:	697b      	ldr	r3, [r7, #20]
 8101e9a:	681a      	ldr	r2, [r3, #0]
 8101e9c:	68bb      	ldr	r3, [r7, #8]
 8101e9e:	0d1b      	lsrs	r3, r3, #20
 8101ea0:	f003 031f 	and.w	r3, r3, #31
 8101ea4:	2107      	movs	r1, #7
 8101ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8101eaa:	43db      	mvns	r3, r3
 8101eac:	401a      	ands	r2, r3
 8101eae:	68bb      	ldr	r3, [r7, #8]
 8101eb0:	0d1b      	lsrs	r3, r3, #20
 8101eb2:	f003 031f 	and.w	r3, r3, #31
 8101eb6:	6879      	ldr	r1, [r7, #4]
 8101eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8101ebc:	431a      	orrs	r2, r3
 8101ebe:	697b      	ldr	r3, [r7, #20]
 8101ec0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8101ec2:	bf00      	nop
 8101ec4:	371c      	adds	r7, #28
 8101ec6:	46bd      	mov	sp, r7
 8101ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ecc:	4770      	bx	lr
	...

08101ed0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8101ed0:	b480      	push	{r7}
 8101ed2:	b085      	sub	sp, #20
 8101ed4:	af00      	add	r7, sp, #0
 8101ed6:	60f8      	str	r0, [r7, #12]
 8101ed8:	60b9      	str	r1, [r7, #8]
 8101eda:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8101edc:	68fb      	ldr	r3, [r7, #12]
 8101ede:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8101ee2:	68bb      	ldr	r3, [r7, #8]
 8101ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101ee8:	43db      	mvns	r3, r3
 8101eea:	401a      	ands	r2, r3
 8101eec:	687b      	ldr	r3, [r7, #4]
 8101eee:	f003 0318 	and.w	r3, r3, #24
 8101ef2:	4908      	ldr	r1, [pc, #32]	; (8101f14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8101ef4:	40d9      	lsrs	r1, r3
 8101ef6:	68bb      	ldr	r3, [r7, #8]
 8101ef8:	400b      	ands	r3, r1
 8101efa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101efe:	431a      	orrs	r2, r3
 8101f00:	68fb      	ldr	r3, [r7, #12]
 8101f02:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8101f06:	bf00      	nop
 8101f08:	3714      	adds	r7, #20
 8101f0a:	46bd      	mov	sp, r7
 8101f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f10:	4770      	bx	lr
 8101f12:	bf00      	nop
 8101f14:	000fffff 	.word	0x000fffff

08101f18 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8101f18:	b480      	push	{r7}
 8101f1a:	b083      	sub	sp, #12
 8101f1c:	af00      	add	r7, sp, #0
 8101f1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8101f20:	687b      	ldr	r3, [r7, #4]
 8101f22:	689b      	ldr	r3, [r3, #8]
 8101f24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8101f28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101f2c:	687a      	ldr	r2, [r7, #4]
 8101f2e:	6093      	str	r3, [r2, #8]
}
 8101f30:	bf00      	nop
 8101f32:	370c      	adds	r7, #12
 8101f34:	46bd      	mov	sp, r7
 8101f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f3a:	4770      	bx	lr

08101f3c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8101f3c:	b480      	push	{r7}
 8101f3e:	b083      	sub	sp, #12
 8101f40:	af00      	add	r7, sp, #0
 8101f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	689b      	ldr	r3, [r3, #8]
 8101f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8101f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101f50:	d101      	bne.n	8101f56 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8101f52:	2301      	movs	r3, #1
 8101f54:	e000      	b.n	8101f58 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8101f56:	2300      	movs	r3, #0
}
 8101f58:	4618      	mov	r0, r3
 8101f5a:	370c      	adds	r7, #12
 8101f5c:	46bd      	mov	sp, r7
 8101f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f62:	4770      	bx	lr

08101f64 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8101f64:	b480      	push	{r7}
 8101f66:	b083      	sub	sp, #12
 8101f68:	af00      	add	r7, sp, #0
 8101f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101f6c:	687b      	ldr	r3, [r7, #4]
 8101f6e:	689b      	ldr	r3, [r3, #8]
 8101f70:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8101f74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101f78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8101f80:	bf00      	nop
 8101f82:	370c      	adds	r7, #12
 8101f84:	46bd      	mov	sp, r7
 8101f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f8a:	4770      	bx	lr

08101f8c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8101f8c:	b480      	push	{r7}
 8101f8e:	b083      	sub	sp, #12
 8101f90:	af00      	add	r7, sp, #0
 8101f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	689b      	ldr	r3, [r3, #8]
 8101f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101fa0:	d101      	bne.n	8101fa6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8101fa2:	2301      	movs	r3, #1
 8101fa4:	e000      	b.n	8101fa8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8101fa6:	2300      	movs	r3, #0
}
 8101fa8:	4618      	mov	r0, r3
 8101faa:	370c      	adds	r7, #12
 8101fac:	46bd      	mov	sp, r7
 8101fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fb2:	4770      	bx	lr

08101fb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8101fb4:	b480      	push	{r7}
 8101fb6:	b083      	sub	sp, #12
 8101fb8:	af00      	add	r7, sp, #0
 8101fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	689b      	ldr	r3, [r3, #8]
 8101fc0:	f003 0301 	and.w	r3, r3, #1
 8101fc4:	2b01      	cmp	r3, #1
 8101fc6:	d101      	bne.n	8101fcc <LL_ADC_IsEnabled+0x18>
 8101fc8:	2301      	movs	r3, #1
 8101fca:	e000      	b.n	8101fce <LL_ADC_IsEnabled+0x1a>
 8101fcc:	2300      	movs	r3, #0
}
 8101fce:	4618      	mov	r0, r3
 8101fd0:	370c      	adds	r7, #12
 8101fd2:	46bd      	mov	sp, r7
 8101fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fd8:	4770      	bx	lr

08101fda <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101fda:	b480      	push	{r7}
 8101fdc:	b083      	sub	sp, #12
 8101fde:	af00      	add	r7, sp, #0
 8101fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101fe2:	687b      	ldr	r3, [r7, #4]
 8101fe4:	689b      	ldr	r3, [r3, #8]
 8101fe6:	f003 0304 	and.w	r3, r3, #4
 8101fea:	2b04      	cmp	r3, #4
 8101fec:	d101      	bne.n	8101ff2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8101fee:	2301      	movs	r3, #1
 8101ff0:	e000      	b.n	8101ff4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8101ff2:	2300      	movs	r3, #0
}
 8101ff4:	4618      	mov	r0, r3
 8101ff6:	370c      	adds	r7, #12
 8101ff8:	46bd      	mov	sp, r7
 8101ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ffe:	4770      	bx	lr

08102000 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8102000:	b480      	push	{r7}
 8102002:	b083      	sub	sp, #12
 8102004:	af00      	add	r7, sp, #0
 8102006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8102008:	687b      	ldr	r3, [r7, #4]
 810200a:	689b      	ldr	r3, [r3, #8]
 810200c:	f003 0308 	and.w	r3, r3, #8
 8102010:	2b08      	cmp	r3, #8
 8102012:	d101      	bne.n	8102018 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8102014:	2301      	movs	r3, #1
 8102016:	e000      	b.n	810201a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8102018:	2300      	movs	r3, #0
}
 810201a:	4618      	mov	r0, r3
 810201c:	370c      	adds	r7, #12
 810201e:	46bd      	mov	sp, r7
 8102020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102024:	4770      	bx	lr
	...

08102028 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8102028:	b590      	push	{r4, r7, lr}
 810202a:	b089      	sub	sp, #36	; 0x24
 810202c:	af00      	add	r7, sp, #0
 810202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102030:	2300      	movs	r3, #0
 8102032:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8102034:	2300      	movs	r3, #0
 8102036:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8102038:	687b      	ldr	r3, [r7, #4]
 810203a:	2b00      	cmp	r3, #0
 810203c:	d101      	bne.n	8102042 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 810203e:	2301      	movs	r3, #1
 8102040:	e18f      	b.n	8102362 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8102042:	687b      	ldr	r3, [r7, #4]
 8102044:	68db      	ldr	r3, [r3, #12]
 8102046:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8102048:	687b      	ldr	r3, [r7, #4]
 810204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810204c:	2b00      	cmp	r3, #0
 810204e:	d109      	bne.n	8102064 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8102050:	6878      	ldr	r0, [r7, #4]
 8102052:	f7ff fbb7 	bl	81017c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	2200      	movs	r2, #0
 810205a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	2200      	movs	r2, #0
 8102060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	681b      	ldr	r3, [r3, #0]
 8102068:	4618      	mov	r0, r3
 810206a:	f7ff ff67 	bl	8101f3c <LL_ADC_IsDeepPowerDownEnabled>
 810206e:	4603      	mov	r3, r0
 8102070:	2b00      	cmp	r3, #0
 8102072:	d004      	beq.n	810207e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	681b      	ldr	r3, [r3, #0]
 8102078:	4618      	mov	r0, r3
 810207a:	f7ff ff4d 	bl	8101f18 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810207e:	687b      	ldr	r3, [r7, #4]
 8102080:	681b      	ldr	r3, [r3, #0]
 8102082:	4618      	mov	r0, r3
 8102084:	f7ff ff82 	bl	8101f8c <LL_ADC_IsInternalRegulatorEnabled>
 8102088:	4603      	mov	r3, r0
 810208a:	2b00      	cmp	r3, #0
 810208c:	d114      	bne.n	81020b8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810208e:	687b      	ldr	r3, [r7, #4]
 8102090:	681b      	ldr	r3, [r3, #0]
 8102092:	4618      	mov	r0, r3
 8102094:	f7ff ff66 	bl	8101f64 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102098:	4b88      	ldr	r3, [pc, #544]	; (81022bc <HAL_ADC_Init+0x294>)
 810209a:	681b      	ldr	r3, [r3, #0]
 810209c:	099b      	lsrs	r3, r3, #6
 810209e:	4a88      	ldr	r2, [pc, #544]	; (81022c0 <HAL_ADC_Init+0x298>)
 81020a0:	fba2 2303 	umull	r2, r3, r2, r3
 81020a4:	099b      	lsrs	r3, r3, #6
 81020a6:	3301      	adds	r3, #1
 81020a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81020aa:	e002      	b.n	81020b2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 81020ac:	68bb      	ldr	r3, [r7, #8]
 81020ae:	3b01      	subs	r3, #1
 81020b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 81020b2:	68bb      	ldr	r3, [r7, #8]
 81020b4:	2b00      	cmp	r3, #0
 81020b6:	d1f9      	bne.n	81020ac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81020b8:	687b      	ldr	r3, [r7, #4]
 81020ba:	681b      	ldr	r3, [r3, #0]
 81020bc:	4618      	mov	r0, r3
 81020be:	f7ff ff65 	bl	8101f8c <LL_ADC_IsInternalRegulatorEnabled>
 81020c2:	4603      	mov	r3, r0
 81020c4:	2b00      	cmp	r3, #0
 81020c6:	d10d      	bne.n	81020e4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81020cc:	f043 0210 	orr.w	r2, r3, #16
 81020d0:	687b      	ldr	r3, [r7, #4]
 81020d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81020d8:	f043 0201 	orr.w	r2, r3, #1
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 81020e0:	2301      	movs	r3, #1
 81020e2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	681b      	ldr	r3, [r3, #0]
 81020e8:	4618      	mov	r0, r3
 81020ea:	f7ff ff76 	bl	8101fda <LL_ADC_REG_IsConversionOngoing>
 81020ee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81020f4:	f003 0310 	and.w	r3, r3, #16
 81020f8:	2b00      	cmp	r3, #0
 81020fa:	f040 8129 	bne.w	8102350 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81020fe:	697b      	ldr	r3, [r7, #20]
 8102100:	2b00      	cmp	r3, #0
 8102102:	f040 8125 	bne.w	8102350 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102106:	687b      	ldr	r3, [r7, #4]
 8102108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810210a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 810210e:	f043 0202 	orr.w	r2, r3, #2
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	681b      	ldr	r3, [r3, #0]
 810211a:	4618      	mov	r0, r3
 810211c:	f7ff ff4a 	bl	8101fb4 <LL_ADC_IsEnabled>
 8102120:	4603      	mov	r3, r0
 8102122:	2b00      	cmp	r3, #0
 8102124:	d136      	bne.n	8102194 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	681b      	ldr	r3, [r3, #0]
 810212a:	4a66      	ldr	r2, [pc, #408]	; (81022c4 <HAL_ADC_Init+0x29c>)
 810212c:	4293      	cmp	r3, r2
 810212e:	d004      	beq.n	810213a <HAL_ADC_Init+0x112>
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	681b      	ldr	r3, [r3, #0]
 8102134:	4a64      	ldr	r2, [pc, #400]	; (81022c8 <HAL_ADC_Init+0x2a0>)
 8102136:	4293      	cmp	r3, r2
 8102138:	d10e      	bne.n	8102158 <HAL_ADC_Init+0x130>
 810213a:	4862      	ldr	r0, [pc, #392]	; (81022c4 <HAL_ADC_Init+0x29c>)
 810213c:	f7ff ff3a 	bl	8101fb4 <LL_ADC_IsEnabled>
 8102140:	4604      	mov	r4, r0
 8102142:	4861      	ldr	r0, [pc, #388]	; (81022c8 <HAL_ADC_Init+0x2a0>)
 8102144:	f7ff ff36 	bl	8101fb4 <LL_ADC_IsEnabled>
 8102148:	4603      	mov	r3, r0
 810214a:	4323      	orrs	r3, r4
 810214c:	2b00      	cmp	r3, #0
 810214e:	bf0c      	ite	eq
 8102150:	2301      	moveq	r3, #1
 8102152:	2300      	movne	r3, #0
 8102154:	b2db      	uxtb	r3, r3
 8102156:	e008      	b.n	810216a <HAL_ADC_Init+0x142>
 8102158:	485c      	ldr	r0, [pc, #368]	; (81022cc <HAL_ADC_Init+0x2a4>)
 810215a:	f7ff ff2b 	bl	8101fb4 <LL_ADC_IsEnabled>
 810215e:	4603      	mov	r3, r0
 8102160:	2b00      	cmp	r3, #0
 8102162:	bf0c      	ite	eq
 8102164:	2301      	moveq	r3, #1
 8102166:	2300      	movne	r3, #0
 8102168:	b2db      	uxtb	r3, r3
 810216a:	2b00      	cmp	r3, #0
 810216c:	d012      	beq.n	8102194 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 810216e:	687b      	ldr	r3, [r7, #4]
 8102170:	681b      	ldr	r3, [r3, #0]
 8102172:	4a54      	ldr	r2, [pc, #336]	; (81022c4 <HAL_ADC_Init+0x29c>)
 8102174:	4293      	cmp	r3, r2
 8102176:	d004      	beq.n	8102182 <HAL_ADC_Init+0x15a>
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	681b      	ldr	r3, [r3, #0]
 810217c:	4a52      	ldr	r2, [pc, #328]	; (81022c8 <HAL_ADC_Init+0x2a0>)
 810217e:	4293      	cmp	r3, r2
 8102180:	d101      	bne.n	8102186 <HAL_ADC_Init+0x15e>
 8102182:	4a53      	ldr	r2, [pc, #332]	; (81022d0 <HAL_ADC_Init+0x2a8>)
 8102184:	e000      	b.n	8102188 <HAL_ADC_Init+0x160>
 8102186:	4a53      	ldr	r2, [pc, #332]	; (81022d4 <HAL_ADC_Init+0x2ac>)
 8102188:	687b      	ldr	r3, [r7, #4]
 810218a:	685b      	ldr	r3, [r3, #4]
 810218c:	4619      	mov	r1, r3
 810218e:	4610      	mov	r0, r2
 8102190:	f7ff fdbe 	bl	8101d10 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102194:	f7ff fdb0 	bl	8101cf8 <HAL_GetREVID>
 8102198:	4603      	mov	r3, r0
 810219a:	f241 0203 	movw	r2, #4099	; 0x1003
 810219e:	4293      	cmp	r3, r2
 81021a0:	d914      	bls.n	81021cc <HAL_ADC_Init+0x1a4>
 81021a2:	687b      	ldr	r3, [r7, #4]
 81021a4:	689b      	ldr	r3, [r3, #8]
 81021a6:	2b10      	cmp	r3, #16
 81021a8:	d110      	bne.n	81021cc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	7d5b      	ldrb	r3, [r3, #21]
 81021ae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81021b0:	687b      	ldr	r3, [r7, #4]
 81021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81021b4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81021b6:	687b      	ldr	r3, [r7, #4]
 81021b8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81021ba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	7f1b      	ldrb	r3, [r3, #28]
 81021c0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 81021c2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81021c4:	f043 030c 	orr.w	r3, r3, #12
 81021c8:	61bb      	str	r3, [r7, #24]
 81021ca:	e00d      	b.n	81021e8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	7d5b      	ldrb	r3, [r3, #21]
 81021d0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81021d6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 81021d8:	687b      	ldr	r3, [r7, #4]
 81021da:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 81021dc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 81021de:	687b      	ldr	r3, [r7, #4]
 81021e0:	7f1b      	ldrb	r3, [r3, #28]
 81021e2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 81021e4:	4313      	orrs	r3, r2
 81021e6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	7f1b      	ldrb	r3, [r3, #28]
 81021ec:	2b01      	cmp	r3, #1
 81021ee:	d106      	bne.n	81021fe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	6a1b      	ldr	r3, [r3, #32]
 81021f4:	3b01      	subs	r3, #1
 81021f6:	045b      	lsls	r3, r3, #17
 81021f8:	69ba      	ldr	r2, [r7, #24]
 81021fa:	4313      	orrs	r3, r2
 81021fc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102202:	2b00      	cmp	r3, #0
 8102204:	d009      	beq.n	810221a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102206:	687b      	ldr	r3, [r7, #4]
 8102208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810220a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102212:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102214:	69ba      	ldr	r2, [r7, #24]
 8102216:	4313      	orrs	r3, r2
 8102218:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	681b      	ldr	r3, [r3, #0]
 810221e:	68da      	ldr	r2, [r3, #12]
 8102220:	4b2d      	ldr	r3, [pc, #180]	; (81022d8 <HAL_ADC_Init+0x2b0>)
 8102222:	4013      	ands	r3, r2
 8102224:	687a      	ldr	r2, [r7, #4]
 8102226:	6812      	ldr	r2, [r2, #0]
 8102228:	69b9      	ldr	r1, [r7, #24]
 810222a:	430b      	orrs	r3, r1
 810222c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810222e:	687b      	ldr	r3, [r7, #4]
 8102230:	681b      	ldr	r3, [r3, #0]
 8102232:	4618      	mov	r0, r3
 8102234:	f7ff fed1 	bl	8101fda <LL_ADC_REG_IsConversionOngoing>
 8102238:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	681b      	ldr	r3, [r3, #0]
 810223e:	4618      	mov	r0, r3
 8102240:	f7ff fede 	bl	8102000 <LL_ADC_INJ_IsConversionOngoing>
 8102244:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102246:	693b      	ldr	r3, [r7, #16]
 8102248:	2b00      	cmp	r3, #0
 810224a:	d15f      	bne.n	810230c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 810224c:	68fb      	ldr	r3, [r7, #12]
 810224e:	2b00      	cmp	r3, #0
 8102250:	d15c      	bne.n	810230c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	7d1b      	ldrb	r3, [r3, #20]
 8102256:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 810225c:	4313      	orrs	r3, r2
 810225e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	681b      	ldr	r3, [r3, #0]
 8102264:	68db      	ldr	r3, [r3, #12]
 8102266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810226a:	f023 0303 	bic.w	r3, r3, #3
 810226e:	687a      	ldr	r2, [r7, #4]
 8102270:	6812      	ldr	r2, [r2, #0]
 8102272:	69b9      	ldr	r1, [r7, #24]
 8102274:	430b      	orrs	r3, r1
 8102276:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8102278:	687b      	ldr	r3, [r7, #4]
 810227a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810227e:	2b01      	cmp	r3, #1
 8102280:	d12e      	bne.n	81022e0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8102282:	687b      	ldr	r3, [r7, #4]
 8102284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102286:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8102288:	687b      	ldr	r3, [r7, #4]
 810228a:	681b      	ldr	r3, [r3, #0]
 810228c:	691a      	ldr	r2, [r3, #16]
 810228e:	4b13      	ldr	r3, [pc, #76]	; (81022dc <HAL_ADC_Init+0x2b4>)
 8102290:	4013      	ands	r3, r2
 8102292:	687a      	ldr	r2, [r7, #4]
 8102294:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102296:	3a01      	subs	r2, #1
 8102298:	0411      	lsls	r1, r2, #16
 810229a:	687a      	ldr	r2, [r7, #4]
 810229c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 810229e:	4311      	orrs	r1, r2
 81022a0:	687a      	ldr	r2, [r7, #4]
 81022a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 81022a4:	4311      	orrs	r1, r2
 81022a6:	687a      	ldr	r2, [r7, #4]
 81022a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 81022aa:	430a      	orrs	r2, r1
 81022ac:	431a      	orrs	r2, r3
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	f042 0201 	orr.w	r2, r2, #1
 81022b6:	611a      	str	r2, [r3, #16]
 81022b8:	e01a      	b.n	81022f0 <HAL_ADC_Init+0x2c8>
 81022ba:	bf00      	nop
 81022bc:	10000000 	.word	0x10000000
 81022c0:	053e2d63 	.word	0x053e2d63
 81022c4:	40022000 	.word	0x40022000
 81022c8:	40022100 	.word	0x40022100
 81022cc:	58026000 	.word	0x58026000
 81022d0:	40022300 	.word	0x40022300
 81022d4:	58026300 	.word	0x58026300
 81022d8:	fff0c003 	.word	0xfff0c003
 81022dc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	681b      	ldr	r3, [r3, #0]
 81022e4:	691a      	ldr	r2, [r3, #16]
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	681b      	ldr	r3, [r3, #0]
 81022ea:	f022 0201 	bic.w	r2, r2, #1
 81022ee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81022f0:	687b      	ldr	r3, [r7, #4]
 81022f2:	681b      	ldr	r3, [r3, #0]
 81022f4:	691b      	ldr	r3, [r3, #16]
 81022f6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 81022fa:	687b      	ldr	r3, [r7, #4]
 81022fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	681b      	ldr	r3, [r3, #0]
 8102302:	430a      	orrs	r2, r1
 8102304:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8102306:	6878      	ldr	r0, [r7, #4]
 8102308:	f000 fb80 	bl	8102a0c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 810230c:	687b      	ldr	r3, [r7, #4]
 810230e:	68db      	ldr	r3, [r3, #12]
 8102310:	2b01      	cmp	r3, #1
 8102312:	d10c      	bne.n	810232e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810231a:	f023 010f 	bic.w	r1, r3, #15
 810231e:	687b      	ldr	r3, [r7, #4]
 8102320:	699b      	ldr	r3, [r3, #24]
 8102322:	1e5a      	subs	r2, r3, #1
 8102324:	687b      	ldr	r3, [r7, #4]
 8102326:	681b      	ldr	r3, [r3, #0]
 8102328:	430a      	orrs	r2, r1
 810232a:	631a      	str	r2, [r3, #48]	; 0x30
 810232c:	e007      	b.n	810233e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 810232e:	687b      	ldr	r3, [r7, #4]
 8102330:	681b      	ldr	r3, [r3, #0]
 8102332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8102334:	687b      	ldr	r3, [r7, #4]
 8102336:	681b      	ldr	r3, [r3, #0]
 8102338:	f022 020f 	bic.w	r2, r2, #15
 810233c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102342:	f023 0303 	bic.w	r3, r3, #3
 8102346:	f043 0201 	orr.w	r2, r3, #1
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	655a      	str	r2, [r3, #84]	; 0x54
 810234e:	e007      	b.n	8102360 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102354:	f043 0210 	orr.w	r2, r3, #16
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810235c:	2301      	movs	r3, #1
 810235e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8102360:	7ffb      	ldrb	r3, [r7, #31]
}
 8102362:	4618      	mov	r0, r3
 8102364:	3724      	adds	r7, #36	; 0x24
 8102366:	46bd      	mov	sp, r7
 8102368:	bd90      	pop	{r4, r7, pc}
 810236a:	bf00      	nop

0810236c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 810236c:	b590      	push	{r4, r7, lr}
 810236e:	b0a1      	sub	sp, #132	; 0x84
 8102370:	af00      	add	r7, sp, #0
 8102372:	6078      	str	r0, [r7, #4]
 8102374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102376:	2300      	movs	r3, #0
 8102378:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 810237c:	2300      	movs	r3, #0
 810237e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8102380:	683b      	ldr	r3, [r7, #0]
 8102382:	68db      	ldr	r3, [r3, #12]
 8102384:	4a9d      	ldr	r2, [pc, #628]	; (81025fc <HAL_ADC_ConfigChannel+0x290>)
 8102386:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810238e:	2b01      	cmp	r3, #1
 8102390:	d101      	bne.n	8102396 <HAL_ADC_ConfigChannel+0x2a>
 8102392:	2302      	movs	r3, #2
 8102394:	e321      	b.n	81029da <HAL_ADC_ConfigChannel+0x66e>
 8102396:	687b      	ldr	r3, [r7, #4]
 8102398:	2201      	movs	r2, #1
 810239a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810239e:	687b      	ldr	r3, [r7, #4]
 81023a0:	681b      	ldr	r3, [r3, #0]
 81023a2:	4618      	mov	r0, r3
 81023a4:	f7ff fe19 	bl	8101fda <LL_ADC_REG_IsConversionOngoing>
 81023a8:	4603      	mov	r3, r0
 81023aa:	2b00      	cmp	r3, #0
 81023ac:	f040 8306 	bne.w	81029bc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 81023b0:	683b      	ldr	r3, [r7, #0]
 81023b2:	681b      	ldr	r3, [r3, #0]
 81023b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81023b8:	2b00      	cmp	r3, #0
 81023ba:	d108      	bne.n	81023ce <HAL_ADC_ConfigChannel+0x62>
 81023bc:	683b      	ldr	r3, [r7, #0]
 81023be:	681b      	ldr	r3, [r3, #0]
 81023c0:	0e9b      	lsrs	r3, r3, #26
 81023c2:	f003 031f 	and.w	r3, r3, #31
 81023c6:	2201      	movs	r2, #1
 81023c8:	fa02 f303 	lsl.w	r3, r2, r3
 81023cc:	e016      	b.n	81023fc <HAL_ADC_ConfigChannel+0x90>
 81023ce:	683b      	ldr	r3, [r7, #0]
 81023d0:	681b      	ldr	r3, [r3, #0]
 81023d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81023d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81023d6:	fa93 f3a3 	rbit	r3, r3
 81023da:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 81023dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81023de:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 81023e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81023e2:	2b00      	cmp	r3, #0
 81023e4:	d101      	bne.n	81023ea <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 81023e6:	2320      	movs	r3, #32
 81023e8:	e003      	b.n	81023f2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 81023ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81023ec:	fab3 f383 	clz	r3, r3
 81023f0:	b2db      	uxtb	r3, r3
 81023f2:	f003 031f 	and.w	r3, r3, #31
 81023f6:	2201      	movs	r2, #1
 81023f8:	fa02 f303 	lsl.w	r3, r2, r3
 81023fc:	687a      	ldr	r2, [r7, #4]
 81023fe:	6812      	ldr	r2, [r2, #0]
 8102400:	69d1      	ldr	r1, [r2, #28]
 8102402:	687a      	ldr	r2, [r7, #4]
 8102404:	6812      	ldr	r2, [r2, #0]
 8102406:	430b      	orrs	r3, r1
 8102408:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	6818      	ldr	r0, [r3, #0]
 810240e:	683b      	ldr	r3, [r7, #0]
 8102410:	6859      	ldr	r1, [r3, #4]
 8102412:	683b      	ldr	r3, [r7, #0]
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	461a      	mov	r2, r3
 8102418:	f7ff fd02 	bl	8101e20 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	4618      	mov	r0, r3
 8102422:	f7ff fdda 	bl	8101fda <LL_ADC_REG_IsConversionOngoing>
 8102426:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	681b      	ldr	r3, [r3, #0]
 810242c:	4618      	mov	r0, r3
 810242e:	f7ff fde7 	bl	8102000 <LL_ADC_INJ_IsConversionOngoing>
 8102432:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8102434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102436:	2b00      	cmp	r3, #0
 8102438:	f040 80b3 	bne.w	81025a2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 810243c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 810243e:	2b00      	cmp	r3, #0
 8102440:	f040 80af 	bne.w	81025a2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	6818      	ldr	r0, [r3, #0]
 8102448:	683b      	ldr	r3, [r7, #0]
 810244a:	6819      	ldr	r1, [r3, #0]
 810244c:	683b      	ldr	r3, [r7, #0]
 810244e:	689b      	ldr	r3, [r3, #8]
 8102450:	461a      	mov	r2, r3
 8102452:	f7ff fd11 	bl	8101e78 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8102456:	4b6a      	ldr	r3, [pc, #424]	; (8102600 <HAL_ADC_ConfigChannel+0x294>)
 8102458:	681b      	ldr	r3, [r3, #0]
 810245a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 810245e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102462:	d10b      	bne.n	810247c <HAL_ADC_ConfigChannel+0x110>
 8102464:	683b      	ldr	r3, [r7, #0]
 8102466:	695a      	ldr	r2, [r3, #20]
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	681b      	ldr	r3, [r3, #0]
 810246c:	68db      	ldr	r3, [r3, #12]
 810246e:	089b      	lsrs	r3, r3, #2
 8102470:	f003 0307 	and.w	r3, r3, #7
 8102474:	005b      	lsls	r3, r3, #1
 8102476:	fa02 f303 	lsl.w	r3, r2, r3
 810247a:	e01d      	b.n	81024b8 <HAL_ADC_ConfigChannel+0x14c>
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	681b      	ldr	r3, [r3, #0]
 8102480:	68db      	ldr	r3, [r3, #12]
 8102482:	f003 0310 	and.w	r3, r3, #16
 8102486:	2b00      	cmp	r3, #0
 8102488:	d10b      	bne.n	81024a2 <HAL_ADC_ConfigChannel+0x136>
 810248a:	683b      	ldr	r3, [r7, #0]
 810248c:	695a      	ldr	r2, [r3, #20]
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	681b      	ldr	r3, [r3, #0]
 8102492:	68db      	ldr	r3, [r3, #12]
 8102494:	089b      	lsrs	r3, r3, #2
 8102496:	f003 0307 	and.w	r3, r3, #7
 810249a:	005b      	lsls	r3, r3, #1
 810249c:	fa02 f303 	lsl.w	r3, r2, r3
 81024a0:	e00a      	b.n	81024b8 <HAL_ADC_ConfigChannel+0x14c>
 81024a2:	683b      	ldr	r3, [r7, #0]
 81024a4:	695a      	ldr	r2, [r3, #20]
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	681b      	ldr	r3, [r3, #0]
 81024aa:	68db      	ldr	r3, [r3, #12]
 81024ac:	089b      	lsrs	r3, r3, #2
 81024ae:	f003 0304 	and.w	r3, r3, #4
 81024b2:	005b      	lsls	r3, r3, #1
 81024b4:	fa02 f303 	lsl.w	r3, r2, r3
 81024b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 81024ba:	683b      	ldr	r3, [r7, #0]
 81024bc:	691b      	ldr	r3, [r3, #16]
 81024be:	2b04      	cmp	r3, #4
 81024c0:	d027      	beq.n	8102512 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 81024c2:	687b      	ldr	r3, [r7, #4]
 81024c4:	6818      	ldr	r0, [r3, #0]
 81024c6:	683b      	ldr	r3, [r7, #0]
 81024c8:	6919      	ldr	r1, [r3, #16]
 81024ca:	683b      	ldr	r3, [r7, #0]
 81024cc:	681a      	ldr	r2, [r3, #0]
 81024ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81024d0:	f7ff fc52 	bl	8101d78 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 81024d4:	687b      	ldr	r3, [r7, #4]
 81024d6:	6818      	ldr	r0, [r3, #0]
 81024d8:	683b      	ldr	r3, [r7, #0]
 81024da:	6919      	ldr	r1, [r3, #16]
 81024dc:	683b      	ldr	r3, [r7, #0]
 81024de:	7e5b      	ldrb	r3, [r3, #25]
 81024e0:	2b01      	cmp	r3, #1
 81024e2:	d102      	bne.n	81024ea <HAL_ADC_ConfigChannel+0x17e>
 81024e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81024e8:	e000      	b.n	81024ec <HAL_ADC_ConfigChannel+0x180>
 81024ea:	2300      	movs	r3, #0
 81024ec:	461a      	mov	r2, r3
 81024ee:	f7ff fc7c 	bl	8101dea <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81024f2:	687b      	ldr	r3, [r7, #4]
 81024f4:	6818      	ldr	r0, [r3, #0]
 81024f6:	683b      	ldr	r3, [r7, #0]
 81024f8:	6919      	ldr	r1, [r3, #16]
 81024fa:	683b      	ldr	r3, [r7, #0]
 81024fc:	7e1b      	ldrb	r3, [r3, #24]
 81024fe:	2b01      	cmp	r3, #1
 8102500:	d102      	bne.n	8102508 <HAL_ADC_ConfigChannel+0x19c>
 8102502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8102506:	e000      	b.n	810250a <HAL_ADC_ConfigChannel+0x19e>
 8102508:	2300      	movs	r3, #0
 810250a:	461a      	mov	r2, r3
 810250c:	f7ff fc54 	bl	8101db8 <LL_ADC_SetDataRightShift>
 8102510:	e047      	b.n	81025a2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102512:	687b      	ldr	r3, [r7, #4]
 8102514:	681b      	ldr	r3, [r3, #0]
 8102516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102518:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810251c:	683b      	ldr	r3, [r7, #0]
 810251e:	681b      	ldr	r3, [r3, #0]
 8102520:	069b      	lsls	r3, r3, #26
 8102522:	429a      	cmp	r2, r3
 8102524:	d107      	bne.n	8102536 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	681b      	ldr	r3, [r3, #0]
 810252a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	681b      	ldr	r3, [r3, #0]
 8102530:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102534:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810253c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102540:	683b      	ldr	r3, [r7, #0]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	069b      	lsls	r3, r3, #26
 8102546:	429a      	cmp	r2, r3
 8102548:	d107      	bne.n	810255a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	681b      	ldr	r3, [r3, #0]
 810254e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102558:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	681b      	ldr	r3, [r3, #0]
 810255e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102560:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102564:	683b      	ldr	r3, [r7, #0]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	069b      	lsls	r3, r3, #26
 810256a:	429a      	cmp	r2, r3
 810256c:	d107      	bne.n	810257e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 810256e:	687b      	ldr	r3, [r7, #4]
 8102570:	681b      	ldr	r3, [r3, #0]
 8102572:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	681b      	ldr	r3, [r3, #0]
 8102578:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810257c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	681b      	ldr	r3, [r3, #0]
 8102582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102588:	683b      	ldr	r3, [r7, #0]
 810258a:	681b      	ldr	r3, [r3, #0]
 810258c:	069b      	lsls	r3, r3, #26
 810258e:	429a      	cmp	r2, r3
 8102590:	d107      	bne.n	81025a2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	681b      	ldr	r3, [r3, #0]
 8102596:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102598:	687b      	ldr	r3, [r7, #4]
 810259a:	681b      	ldr	r3, [r3, #0]
 810259c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81025a0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	681b      	ldr	r3, [r3, #0]
 81025a6:	4618      	mov	r0, r3
 81025a8:	f7ff fd04 	bl	8101fb4 <LL_ADC_IsEnabled>
 81025ac:	4603      	mov	r3, r0
 81025ae:	2b00      	cmp	r3, #0
 81025b0:	f040 820d 	bne.w	81029ce <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	6818      	ldr	r0, [r3, #0]
 81025b8:	683b      	ldr	r3, [r7, #0]
 81025ba:	6819      	ldr	r1, [r3, #0]
 81025bc:	683b      	ldr	r3, [r7, #0]
 81025be:	68db      	ldr	r3, [r3, #12]
 81025c0:	461a      	mov	r2, r3
 81025c2:	f7ff fc85 	bl	8101ed0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 81025c6:	683b      	ldr	r3, [r7, #0]
 81025c8:	68db      	ldr	r3, [r3, #12]
 81025ca:	4a0c      	ldr	r2, [pc, #48]	; (81025fc <HAL_ADC_ConfigChannel+0x290>)
 81025cc:	4293      	cmp	r3, r2
 81025ce:	f040 8133 	bne.w	8102838 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81025d6:	683b      	ldr	r3, [r7, #0]
 81025d8:	681b      	ldr	r3, [r3, #0]
 81025da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81025de:	2b00      	cmp	r3, #0
 81025e0:	d110      	bne.n	8102604 <HAL_ADC_ConfigChannel+0x298>
 81025e2:	683b      	ldr	r3, [r7, #0]
 81025e4:	681b      	ldr	r3, [r3, #0]
 81025e6:	0e9b      	lsrs	r3, r3, #26
 81025e8:	3301      	adds	r3, #1
 81025ea:	f003 031f 	and.w	r3, r3, #31
 81025ee:	2b09      	cmp	r3, #9
 81025f0:	bf94      	ite	ls
 81025f2:	2301      	movls	r3, #1
 81025f4:	2300      	movhi	r3, #0
 81025f6:	b2db      	uxtb	r3, r3
 81025f8:	e01e      	b.n	8102638 <HAL_ADC_ConfigChannel+0x2cc>
 81025fa:	bf00      	nop
 81025fc:	47ff0000 	.word	0x47ff0000
 8102600:	5c001000 	.word	0x5c001000
 8102604:	683b      	ldr	r3, [r7, #0]
 8102606:	681b      	ldr	r3, [r3, #0]
 8102608:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810260a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810260c:	fa93 f3a3 	rbit	r3, r3
 8102610:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8102612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102614:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8102616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102618:	2b00      	cmp	r3, #0
 810261a:	d101      	bne.n	8102620 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 810261c:	2320      	movs	r3, #32
 810261e:	e003      	b.n	8102628 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8102620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102622:	fab3 f383 	clz	r3, r3
 8102626:	b2db      	uxtb	r3, r3
 8102628:	3301      	adds	r3, #1
 810262a:	f003 031f 	and.w	r3, r3, #31
 810262e:	2b09      	cmp	r3, #9
 8102630:	bf94      	ite	ls
 8102632:	2301      	movls	r3, #1
 8102634:	2300      	movhi	r3, #0
 8102636:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102638:	2b00      	cmp	r3, #0
 810263a:	d079      	beq.n	8102730 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810263c:	683b      	ldr	r3, [r7, #0]
 810263e:	681b      	ldr	r3, [r3, #0]
 8102640:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102644:	2b00      	cmp	r3, #0
 8102646:	d107      	bne.n	8102658 <HAL_ADC_ConfigChannel+0x2ec>
 8102648:	683b      	ldr	r3, [r7, #0]
 810264a:	681b      	ldr	r3, [r3, #0]
 810264c:	0e9b      	lsrs	r3, r3, #26
 810264e:	3301      	adds	r3, #1
 8102650:	069b      	lsls	r3, r3, #26
 8102652:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102656:	e015      	b.n	8102684 <HAL_ADC_ConfigChannel+0x318>
 8102658:	683b      	ldr	r3, [r7, #0]
 810265a:	681b      	ldr	r3, [r3, #0]
 810265c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810265e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102660:	fa93 f3a3 	rbit	r3, r3
 8102664:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8102666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102668:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 810266a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810266c:	2b00      	cmp	r3, #0
 810266e:	d101      	bne.n	8102674 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8102670:	2320      	movs	r3, #32
 8102672:	e003      	b.n	810267c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8102674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102676:	fab3 f383 	clz	r3, r3
 810267a:	b2db      	uxtb	r3, r3
 810267c:	3301      	adds	r3, #1
 810267e:	069b      	lsls	r3, r3, #26
 8102680:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102684:	683b      	ldr	r3, [r7, #0]
 8102686:	681b      	ldr	r3, [r3, #0]
 8102688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810268c:	2b00      	cmp	r3, #0
 810268e:	d109      	bne.n	81026a4 <HAL_ADC_ConfigChannel+0x338>
 8102690:	683b      	ldr	r3, [r7, #0]
 8102692:	681b      	ldr	r3, [r3, #0]
 8102694:	0e9b      	lsrs	r3, r3, #26
 8102696:	3301      	adds	r3, #1
 8102698:	f003 031f 	and.w	r3, r3, #31
 810269c:	2101      	movs	r1, #1
 810269e:	fa01 f303 	lsl.w	r3, r1, r3
 81026a2:	e017      	b.n	81026d4 <HAL_ADC_ConfigChannel+0x368>
 81026a4:	683b      	ldr	r3, [r7, #0]
 81026a6:	681b      	ldr	r3, [r3, #0]
 81026a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81026aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81026ac:	fa93 f3a3 	rbit	r3, r3
 81026b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 81026b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81026b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 81026b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81026b8:	2b00      	cmp	r3, #0
 81026ba:	d101      	bne.n	81026c0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 81026bc:	2320      	movs	r3, #32
 81026be:	e003      	b.n	81026c8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 81026c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81026c2:	fab3 f383 	clz	r3, r3
 81026c6:	b2db      	uxtb	r3, r3
 81026c8:	3301      	adds	r3, #1
 81026ca:	f003 031f 	and.w	r3, r3, #31
 81026ce:	2101      	movs	r1, #1
 81026d0:	fa01 f303 	lsl.w	r3, r1, r3
 81026d4:	ea42 0103 	orr.w	r1, r2, r3
 81026d8:	683b      	ldr	r3, [r7, #0]
 81026da:	681b      	ldr	r3, [r3, #0]
 81026dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81026e0:	2b00      	cmp	r3, #0
 81026e2:	d10a      	bne.n	81026fa <HAL_ADC_ConfigChannel+0x38e>
 81026e4:	683b      	ldr	r3, [r7, #0]
 81026e6:	681b      	ldr	r3, [r3, #0]
 81026e8:	0e9b      	lsrs	r3, r3, #26
 81026ea:	3301      	adds	r3, #1
 81026ec:	f003 021f 	and.w	r2, r3, #31
 81026f0:	4613      	mov	r3, r2
 81026f2:	005b      	lsls	r3, r3, #1
 81026f4:	4413      	add	r3, r2
 81026f6:	051b      	lsls	r3, r3, #20
 81026f8:	e018      	b.n	810272c <HAL_ADC_ConfigChannel+0x3c0>
 81026fa:	683b      	ldr	r3, [r7, #0]
 81026fc:	681b      	ldr	r3, [r3, #0]
 81026fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102702:	fa93 f3a3 	rbit	r3, r3
 8102706:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8102708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810270a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 810270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810270e:	2b00      	cmp	r3, #0
 8102710:	d101      	bne.n	8102716 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8102712:	2320      	movs	r3, #32
 8102714:	e003      	b.n	810271e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8102716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102718:	fab3 f383 	clz	r3, r3
 810271c:	b2db      	uxtb	r3, r3
 810271e:	3301      	adds	r3, #1
 8102720:	f003 021f 	and.w	r2, r3, #31
 8102724:	4613      	mov	r3, r2
 8102726:	005b      	lsls	r3, r3, #1
 8102728:	4413      	add	r3, r2
 810272a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810272c:	430b      	orrs	r3, r1
 810272e:	e07e      	b.n	810282e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102730:	683b      	ldr	r3, [r7, #0]
 8102732:	681b      	ldr	r3, [r3, #0]
 8102734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102738:	2b00      	cmp	r3, #0
 810273a:	d107      	bne.n	810274c <HAL_ADC_ConfigChannel+0x3e0>
 810273c:	683b      	ldr	r3, [r7, #0]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	0e9b      	lsrs	r3, r3, #26
 8102742:	3301      	adds	r3, #1
 8102744:	069b      	lsls	r3, r3, #26
 8102746:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810274a:	e015      	b.n	8102778 <HAL_ADC_ConfigChannel+0x40c>
 810274c:	683b      	ldr	r3, [r7, #0]
 810274e:	681b      	ldr	r3, [r3, #0]
 8102750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102754:	fa93 f3a3 	rbit	r3, r3
 8102758:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 810275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810275c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 810275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102760:	2b00      	cmp	r3, #0
 8102762:	d101      	bne.n	8102768 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8102764:	2320      	movs	r3, #32
 8102766:	e003      	b.n	8102770 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8102768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810276a:	fab3 f383 	clz	r3, r3
 810276e:	b2db      	uxtb	r3, r3
 8102770:	3301      	adds	r3, #1
 8102772:	069b      	lsls	r3, r3, #26
 8102774:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102778:	683b      	ldr	r3, [r7, #0]
 810277a:	681b      	ldr	r3, [r3, #0]
 810277c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102780:	2b00      	cmp	r3, #0
 8102782:	d109      	bne.n	8102798 <HAL_ADC_ConfigChannel+0x42c>
 8102784:	683b      	ldr	r3, [r7, #0]
 8102786:	681b      	ldr	r3, [r3, #0]
 8102788:	0e9b      	lsrs	r3, r3, #26
 810278a:	3301      	adds	r3, #1
 810278c:	f003 031f 	and.w	r3, r3, #31
 8102790:	2101      	movs	r1, #1
 8102792:	fa01 f303 	lsl.w	r3, r1, r3
 8102796:	e017      	b.n	81027c8 <HAL_ADC_ConfigChannel+0x45c>
 8102798:	683b      	ldr	r3, [r7, #0]
 810279a:	681b      	ldr	r3, [r3, #0]
 810279c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810279e:	69fb      	ldr	r3, [r7, #28]
 81027a0:	fa93 f3a3 	rbit	r3, r3
 81027a4:	61bb      	str	r3, [r7, #24]
  return result;
 81027a6:	69bb      	ldr	r3, [r7, #24]
 81027a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 81027aa:	6a3b      	ldr	r3, [r7, #32]
 81027ac:	2b00      	cmp	r3, #0
 81027ae:	d101      	bne.n	81027b4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 81027b0:	2320      	movs	r3, #32
 81027b2:	e003      	b.n	81027bc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 81027b4:	6a3b      	ldr	r3, [r7, #32]
 81027b6:	fab3 f383 	clz	r3, r3
 81027ba:	b2db      	uxtb	r3, r3
 81027bc:	3301      	adds	r3, #1
 81027be:	f003 031f 	and.w	r3, r3, #31
 81027c2:	2101      	movs	r1, #1
 81027c4:	fa01 f303 	lsl.w	r3, r1, r3
 81027c8:	ea42 0103 	orr.w	r1, r2, r3
 81027cc:	683b      	ldr	r3, [r7, #0]
 81027ce:	681b      	ldr	r3, [r3, #0]
 81027d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81027d4:	2b00      	cmp	r3, #0
 81027d6:	d10d      	bne.n	81027f4 <HAL_ADC_ConfigChannel+0x488>
 81027d8:	683b      	ldr	r3, [r7, #0]
 81027da:	681b      	ldr	r3, [r3, #0]
 81027dc:	0e9b      	lsrs	r3, r3, #26
 81027de:	3301      	adds	r3, #1
 81027e0:	f003 021f 	and.w	r2, r3, #31
 81027e4:	4613      	mov	r3, r2
 81027e6:	005b      	lsls	r3, r3, #1
 81027e8:	4413      	add	r3, r2
 81027ea:	3b1e      	subs	r3, #30
 81027ec:	051b      	lsls	r3, r3, #20
 81027ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81027f2:	e01b      	b.n	810282c <HAL_ADC_ConfigChannel+0x4c0>
 81027f4:	683b      	ldr	r3, [r7, #0]
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81027fa:	693b      	ldr	r3, [r7, #16]
 81027fc:	fa93 f3a3 	rbit	r3, r3
 8102800:	60fb      	str	r3, [r7, #12]
  return result;
 8102802:	68fb      	ldr	r3, [r7, #12]
 8102804:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8102806:	697b      	ldr	r3, [r7, #20]
 8102808:	2b00      	cmp	r3, #0
 810280a:	d101      	bne.n	8102810 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 810280c:	2320      	movs	r3, #32
 810280e:	e003      	b.n	8102818 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8102810:	697b      	ldr	r3, [r7, #20]
 8102812:	fab3 f383 	clz	r3, r3
 8102816:	b2db      	uxtb	r3, r3
 8102818:	3301      	adds	r3, #1
 810281a:	f003 021f 	and.w	r2, r3, #31
 810281e:	4613      	mov	r3, r2
 8102820:	005b      	lsls	r3, r3, #1
 8102822:	4413      	add	r3, r2
 8102824:	3b1e      	subs	r3, #30
 8102826:	051b      	lsls	r3, r3, #20
 8102828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810282c:	430b      	orrs	r3, r1
 810282e:	683a      	ldr	r2, [r7, #0]
 8102830:	6892      	ldr	r2, [r2, #8]
 8102832:	4619      	mov	r1, r3
 8102834:	f7ff fb20 	bl	8101e78 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102838:	683b      	ldr	r3, [r7, #0]
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	2b00      	cmp	r3, #0
 810283e:	f280 80c6 	bge.w	81029ce <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	4a67      	ldr	r2, [pc, #412]	; (81029e4 <HAL_ADC_ConfigChannel+0x678>)
 8102848:	4293      	cmp	r3, r2
 810284a:	d004      	beq.n	8102856 <HAL_ADC_ConfigChannel+0x4ea>
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	4a65      	ldr	r2, [pc, #404]	; (81029e8 <HAL_ADC_ConfigChannel+0x67c>)
 8102852:	4293      	cmp	r3, r2
 8102854:	d101      	bne.n	810285a <HAL_ADC_ConfigChannel+0x4ee>
 8102856:	4b65      	ldr	r3, [pc, #404]	; (81029ec <HAL_ADC_ConfigChannel+0x680>)
 8102858:	e000      	b.n	810285c <HAL_ADC_ConfigChannel+0x4f0>
 810285a:	4b65      	ldr	r3, [pc, #404]	; (81029f0 <HAL_ADC_ConfigChannel+0x684>)
 810285c:	4618      	mov	r0, r3
 810285e:	f7ff fa7d 	bl	8101d5c <LL_ADC_GetCommonPathInternalCh>
 8102862:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	681b      	ldr	r3, [r3, #0]
 8102868:	4a5e      	ldr	r2, [pc, #376]	; (81029e4 <HAL_ADC_ConfigChannel+0x678>)
 810286a:	4293      	cmp	r3, r2
 810286c:	d004      	beq.n	8102878 <HAL_ADC_ConfigChannel+0x50c>
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	681b      	ldr	r3, [r3, #0]
 8102872:	4a5d      	ldr	r2, [pc, #372]	; (81029e8 <HAL_ADC_ConfigChannel+0x67c>)
 8102874:	4293      	cmp	r3, r2
 8102876:	d10e      	bne.n	8102896 <HAL_ADC_ConfigChannel+0x52a>
 8102878:	485a      	ldr	r0, [pc, #360]	; (81029e4 <HAL_ADC_ConfigChannel+0x678>)
 810287a:	f7ff fb9b 	bl	8101fb4 <LL_ADC_IsEnabled>
 810287e:	4604      	mov	r4, r0
 8102880:	4859      	ldr	r0, [pc, #356]	; (81029e8 <HAL_ADC_ConfigChannel+0x67c>)
 8102882:	f7ff fb97 	bl	8101fb4 <LL_ADC_IsEnabled>
 8102886:	4603      	mov	r3, r0
 8102888:	4323      	orrs	r3, r4
 810288a:	2b00      	cmp	r3, #0
 810288c:	bf0c      	ite	eq
 810288e:	2301      	moveq	r3, #1
 8102890:	2300      	movne	r3, #0
 8102892:	b2db      	uxtb	r3, r3
 8102894:	e008      	b.n	81028a8 <HAL_ADC_ConfigChannel+0x53c>
 8102896:	4857      	ldr	r0, [pc, #348]	; (81029f4 <HAL_ADC_ConfigChannel+0x688>)
 8102898:	f7ff fb8c 	bl	8101fb4 <LL_ADC_IsEnabled>
 810289c:	4603      	mov	r3, r0
 810289e:	2b00      	cmp	r3, #0
 81028a0:	bf0c      	ite	eq
 81028a2:	2301      	moveq	r3, #1
 81028a4:	2300      	movne	r3, #0
 81028a6:	b2db      	uxtb	r3, r3
 81028a8:	2b00      	cmp	r3, #0
 81028aa:	d07d      	beq.n	81029a8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81028ac:	683b      	ldr	r3, [r7, #0]
 81028ae:	681b      	ldr	r3, [r3, #0]
 81028b0:	4a51      	ldr	r2, [pc, #324]	; (81029f8 <HAL_ADC_ConfigChannel+0x68c>)
 81028b2:	4293      	cmp	r3, r2
 81028b4:	d130      	bne.n	8102918 <HAL_ADC_ConfigChannel+0x5ac>
 81028b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81028b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81028bc:	2b00      	cmp	r3, #0
 81028be:	d12b      	bne.n	8102918 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	4a4b      	ldr	r2, [pc, #300]	; (81029f4 <HAL_ADC_ConfigChannel+0x688>)
 81028c6:	4293      	cmp	r3, r2
 81028c8:	f040 8081 	bne.w	81029ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	681b      	ldr	r3, [r3, #0]
 81028d0:	4a44      	ldr	r2, [pc, #272]	; (81029e4 <HAL_ADC_ConfigChannel+0x678>)
 81028d2:	4293      	cmp	r3, r2
 81028d4:	d004      	beq.n	81028e0 <HAL_ADC_ConfigChannel+0x574>
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	681b      	ldr	r3, [r3, #0]
 81028da:	4a43      	ldr	r2, [pc, #268]	; (81029e8 <HAL_ADC_ConfigChannel+0x67c>)
 81028dc:	4293      	cmp	r3, r2
 81028de:	d101      	bne.n	81028e4 <HAL_ADC_ConfigChannel+0x578>
 81028e0:	4a42      	ldr	r2, [pc, #264]	; (81029ec <HAL_ADC_ConfigChannel+0x680>)
 81028e2:	e000      	b.n	81028e6 <HAL_ADC_ConfigChannel+0x57a>
 81028e4:	4a42      	ldr	r2, [pc, #264]	; (81029f0 <HAL_ADC_ConfigChannel+0x684>)
 81028e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81028e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81028ec:	4619      	mov	r1, r3
 81028ee:	4610      	mov	r0, r2
 81028f0:	f7ff fa21 	bl	8101d36 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81028f4:	4b41      	ldr	r3, [pc, #260]	; (81029fc <HAL_ADC_ConfigChannel+0x690>)
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	099b      	lsrs	r3, r3, #6
 81028fa:	4a41      	ldr	r2, [pc, #260]	; (8102a00 <HAL_ADC_ConfigChannel+0x694>)
 81028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8102900:	099b      	lsrs	r3, r3, #6
 8102902:	3301      	adds	r3, #1
 8102904:	005b      	lsls	r3, r3, #1
 8102906:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102908:	e002      	b.n	8102910 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 810290a:	68bb      	ldr	r3, [r7, #8]
 810290c:	3b01      	subs	r3, #1
 810290e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102910:	68bb      	ldr	r3, [r7, #8]
 8102912:	2b00      	cmp	r3, #0
 8102914:	d1f9      	bne.n	810290a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102916:	e05a      	b.n	81029ce <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102918:	683b      	ldr	r3, [r7, #0]
 810291a:	681b      	ldr	r3, [r3, #0]
 810291c:	4a39      	ldr	r2, [pc, #228]	; (8102a04 <HAL_ADC_ConfigChannel+0x698>)
 810291e:	4293      	cmp	r3, r2
 8102920:	d11e      	bne.n	8102960 <HAL_ADC_ConfigChannel+0x5f4>
 8102922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102928:	2b00      	cmp	r3, #0
 810292a:	d119      	bne.n	8102960 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	4a30      	ldr	r2, [pc, #192]	; (81029f4 <HAL_ADC_ConfigChannel+0x688>)
 8102932:	4293      	cmp	r3, r2
 8102934:	d14b      	bne.n	81029ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8102936:	687b      	ldr	r3, [r7, #4]
 8102938:	681b      	ldr	r3, [r3, #0]
 810293a:	4a2a      	ldr	r2, [pc, #168]	; (81029e4 <HAL_ADC_ConfigChannel+0x678>)
 810293c:	4293      	cmp	r3, r2
 810293e:	d004      	beq.n	810294a <HAL_ADC_ConfigChannel+0x5de>
 8102940:	687b      	ldr	r3, [r7, #4]
 8102942:	681b      	ldr	r3, [r3, #0]
 8102944:	4a28      	ldr	r2, [pc, #160]	; (81029e8 <HAL_ADC_ConfigChannel+0x67c>)
 8102946:	4293      	cmp	r3, r2
 8102948:	d101      	bne.n	810294e <HAL_ADC_ConfigChannel+0x5e2>
 810294a:	4a28      	ldr	r2, [pc, #160]	; (81029ec <HAL_ADC_ConfigChannel+0x680>)
 810294c:	e000      	b.n	8102950 <HAL_ADC_ConfigChannel+0x5e4>
 810294e:	4a28      	ldr	r2, [pc, #160]	; (81029f0 <HAL_ADC_ConfigChannel+0x684>)
 8102950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102956:	4619      	mov	r1, r3
 8102958:	4610      	mov	r0, r2
 810295a:	f7ff f9ec 	bl	8101d36 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810295e:	e036      	b.n	81029ce <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102960:	683b      	ldr	r3, [r7, #0]
 8102962:	681b      	ldr	r3, [r3, #0]
 8102964:	4a28      	ldr	r2, [pc, #160]	; (8102a08 <HAL_ADC_ConfigChannel+0x69c>)
 8102966:	4293      	cmp	r3, r2
 8102968:	d131      	bne.n	81029ce <HAL_ADC_ConfigChannel+0x662>
 810296a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810296c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102970:	2b00      	cmp	r3, #0
 8102972:	d12c      	bne.n	81029ce <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102974:	687b      	ldr	r3, [r7, #4]
 8102976:	681b      	ldr	r3, [r3, #0]
 8102978:	4a1e      	ldr	r2, [pc, #120]	; (81029f4 <HAL_ADC_ConfigChannel+0x688>)
 810297a:	4293      	cmp	r3, r2
 810297c:	d127      	bne.n	81029ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 810297e:	687b      	ldr	r3, [r7, #4]
 8102980:	681b      	ldr	r3, [r3, #0]
 8102982:	4a18      	ldr	r2, [pc, #96]	; (81029e4 <HAL_ADC_ConfigChannel+0x678>)
 8102984:	4293      	cmp	r3, r2
 8102986:	d004      	beq.n	8102992 <HAL_ADC_ConfigChannel+0x626>
 8102988:	687b      	ldr	r3, [r7, #4]
 810298a:	681b      	ldr	r3, [r3, #0]
 810298c:	4a16      	ldr	r2, [pc, #88]	; (81029e8 <HAL_ADC_ConfigChannel+0x67c>)
 810298e:	4293      	cmp	r3, r2
 8102990:	d101      	bne.n	8102996 <HAL_ADC_ConfigChannel+0x62a>
 8102992:	4a16      	ldr	r2, [pc, #88]	; (81029ec <HAL_ADC_ConfigChannel+0x680>)
 8102994:	e000      	b.n	8102998 <HAL_ADC_ConfigChannel+0x62c>
 8102996:	4a16      	ldr	r2, [pc, #88]	; (81029f0 <HAL_ADC_ConfigChannel+0x684>)
 8102998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810299a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810299e:	4619      	mov	r1, r3
 81029a0:	4610      	mov	r0, r2
 81029a2:	f7ff f9c8 	bl	8101d36 <LL_ADC_SetCommonPathInternalCh>
 81029a6:	e012      	b.n	81029ce <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029ac:	f043 0220 	orr.w	r2, r3, #32
 81029b0:	687b      	ldr	r3, [r7, #4]
 81029b2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 81029b4:	2301      	movs	r3, #1
 81029b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 81029ba:	e008      	b.n	81029ce <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81029bc:	687b      	ldr	r3, [r7, #4]
 81029be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029c0:	f043 0220 	orr.w	r2, r3, #32
 81029c4:	687b      	ldr	r3, [r7, #4]
 81029c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81029c8:	2301      	movs	r3, #1
 81029ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81029ce:	687b      	ldr	r3, [r7, #4]
 81029d0:	2200      	movs	r2, #0
 81029d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81029d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 81029da:	4618      	mov	r0, r3
 81029dc:	3784      	adds	r7, #132	; 0x84
 81029de:	46bd      	mov	sp, r7
 81029e0:	bd90      	pop	{r4, r7, pc}
 81029e2:	bf00      	nop
 81029e4:	40022000 	.word	0x40022000
 81029e8:	40022100 	.word	0x40022100
 81029ec:	40022300 	.word	0x40022300
 81029f0:	58026300 	.word	0x58026300
 81029f4:	58026000 	.word	0x58026000
 81029f8:	cb840000 	.word	0xcb840000
 81029fc:	10000000 	.word	0x10000000
 8102a00:	053e2d63 	.word	0x053e2d63
 8102a04:	c7520000 	.word	0xc7520000
 8102a08:	cfb80000 	.word	0xcfb80000

08102a0c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8102a0c:	b580      	push	{r7, lr}
 8102a0e:	b084      	sub	sp, #16
 8102a10:	af00      	add	r7, sp, #0
 8102a12:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	681b      	ldr	r3, [r3, #0]
 8102a18:	4a79      	ldr	r2, [pc, #484]	; (8102c00 <ADC_ConfigureBoostMode+0x1f4>)
 8102a1a:	4293      	cmp	r3, r2
 8102a1c:	d004      	beq.n	8102a28 <ADC_ConfigureBoostMode+0x1c>
 8102a1e:	687b      	ldr	r3, [r7, #4]
 8102a20:	681b      	ldr	r3, [r3, #0]
 8102a22:	4a78      	ldr	r2, [pc, #480]	; (8102c04 <ADC_ConfigureBoostMode+0x1f8>)
 8102a24:	4293      	cmp	r3, r2
 8102a26:	d109      	bne.n	8102a3c <ADC_ConfigureBoostMode+0x30>
 8102a28:	4b77      	ldr	r3, [pc, #476]	; (8102c08 <ADC_ConfigureBoostMode+0x1fc>)
 8102a2a:	689b      	ldr	r3, [r3, #8]
 8102a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102a30:	2b00      	cmp	r3, #0
 8102a32:	bf14      	ite	ne
 8102a34:	2301      	movne	r3, #1
 8102a36:	2300      	moveq	r3, #0
 8102a38:	b2db      	uxtb	r3, r3
 8102a3a:	e008      	b.n	8102a4e <ADC_ConfigureBoostMode+0x42>
 8102a3c:	4b73      	ldr	r3, [pc, #460]	; (8102c0c <ADC_ConfigureBoostMode+0x200>)
 8102a3e:	689b      	ldr	r3, [r3, #8]
 8102a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102a44:	2b00      	cmp	r3, #0
 8102a46:	bf14      	ite	ne
 8102a48:	2301      	movne	r3, #1
 8102a4a:	2300      	moveq	r3, #0
 8102a4c:	b2db      	uxtb	r3, r3
 8102a4e:	2b00      	cmp	r3, #0
 8102a50:	d01c      	beq.n	8102a8c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8102a52:	f000 feef 	bl	8103834 <HAL_RCC_GetHCLKFreq>
 8102a56:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	685b      	ldr	r3, [r3, #4]
 8102a5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102a60:	d010      	beq.n	8102a84 <ADC_ConfigureBoostMode+0x78>
 8102a62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102a66:	d871      	bhi.n	8102b4c <ADC_ConfigureBoostMode+0x140>
 8102a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102a6c:	d002      	beq.n	8102a74 <ADC_ConfigureBoostMode+0x68>
 8102a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102a72:	d16b      	bne.n	8102b4c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8102a74:	687b      	ldr	r3, [r7, #4]
 8102a76:	685b      	ldr	r3, [r3, #4]
 8102a78:	0c1b      	lsrs	r3, r3, #16
 8102a7a:	68fa      	ldr	r2, [r7, #12]
 8102a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8102a80:	60fb      	str	r3, [r7, #12]
        break;
 8102a82:	e066      	b.n	8102b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8102a84:	68fb      	ldr	r3, [r7, #12]
 8102a86:	089b      	lsrs	r3, r3, #2
 8102a88:	60fb      	str	r3, [r7, #12]
        break;
 8102a8a:	e062      	b.n	8102b52 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8102a8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8102a90:	f001 fe74 	bl	810477c <HAL_RCCEx_GetPeriphCLKFreq>
 8102a94:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8102a96:	687b      	ldr	r3, [r7, #4]
 8102a98:	685b      	ldr	r3, [r3, #4]
 8102a9a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102a9e:	d051      	beq.n	8102b44 <ADC_ConfigureBoostMode+0x138>
 8102aa0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102aa4:	d854      	bhi.n	8102b50 <ADC_ConfigureBoostMode+0x144>
 8102aa6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102aaa:	d047      	beq.n	8102b3c <ADC_ConfigureBoostMode+0x130>
 8102aac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102ab0:	d84e      	bhi.n	8102b50 <ADC_ConfigureBoostMode+0x144>
 8102ab2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102ab6:	d03d      	beq.n	8102b34 <ADC_ConfigureBoostMode+0x128>
 8102ab8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102abc:	d848      	bhi.n	8102b50 <ADC_ConfigureBoostMode+0x144>
 8102abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102ac2:	d033      	beq.n	8102b2c <ADC_ConfigureBoostMode+0x120>
 8102ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102ac8:	d842      	bhi.n	8102b50 <ADC_ConfigureBoostMode+0x144>
 8102aca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102ace:	d029      	beq.n	8102b24 <ADC_ConfigureBoostMode+0x118>
 8102ad0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102ad4:	d83c      	bhi.n	8102b50 <ADC_ConfigureBoostMode+0x144>
 8102ad6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102ada:	d01a      	beq.n	8102b12 <ADC_ConfigureBoostMode+0x106>
 8102adc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102ae0:	d836      	bhi.n	8102b50 <ADC_ConfigureBoostMode+0x144>
 8102ae2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102ae6:	d014      	beq.n	8102b12 <ADC_ConfigureBoostMode+0x106>
 8102ae8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102aec:	d830      	bhi.n	8102b50 <ADC_ConfigureBoostMode+0x144>
 8102aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102af2:	d00e      	beq.n	8102b12 <ADC_ConfigureBoostMode+0x106>
 8102af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102af8:	d82a      	bhi.n	8102b50 <ADC_ConfigureBoostMode+0x144>
 8102afa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8102afe:	d008      	beq.n	8102b12 <ADC_ConfigureBoostMode+0x106>
 8102b00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8102b04:	d824      	bhi.n	8102b50 <ADC_ConfigureBoostMode+0x144>
 8102b06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102b0a:	d002      	beq.n	8102b12 <ADC_ConfigureBoostMode+0x106>
 8102b0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8102b10:	d11e      	bne.n	8102b50 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8102b12:	687b      	ldr	r3, [r7, #4]
 8102b14:	685b      	ldr	r3, [r3, #4]
 8102b16:	0c9b      	lsrs	r3, r3, #18
 8102b18:	005b      	lsls	r3, r3, #1
 8102b1a:	68fa      	ldr	r2, [r7, #12]
 8102b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8102b20:	60fb      	str	r3, [r7, #12]
        break;
 8102b22:	e016      	b.n	8102b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8102b24:	68fb      	ldr	r3, [r7, #12]
 8102b26:	091b      	lsrs	r3, r3, #4
 8102b28:	60fb      	str	r3, [r7, #12]
        break;
 8102b2a:	e012      	b.n	8102b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8102b2c:	68fb      	ldr	r3, [r7, #12]
 8102b2e:	095b      	lsrs	r3, r3, #5
 8102b30:	60fb      	str	r3, [r7, #12]
        break;
 8102b32:	e00e      	b.n	8102b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8102b34:	68fb      	ldr	r3, [r7, #12]
 8102b36:	099b      	lsrs	r3, r3, #6
 8102b38:	60fb      	str	r3, [r7, #12]
        break;
 8102b3a:	e00a      	b.n	8102b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8102b3c:	68fb      	ldr	r3, [r7, #12]
 8102b3e:	09db      	lsrs	r3, r3, #7
 8102b40:	60fb      	str	r3, [r7, #12]
        break;
 8102b42:	e006      	b.n	8102b52 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8102b44:	68fb      	ldr	r3, [r7, #12]
 8102b46:	0a1b      	lsrs	r3, r3, #8
 8102b48:	60fb      	str	r3, [r7, #12]
        break;
 8102b4a:	e002      	b.n	8102b52 <ADC_ConfigureBoostMode+0x146>
        break;
 8102b4c:	bf00      	nop
 8102b4e:	e000      	b.n	8102b52 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8102b50:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8102b52:	f7ff f8d1 	bl	8101cf8 <HAL_GetREVID>
 8102b56:	4603      	mov	r3, r0
 8102b58:	f241 0203 	movw	r2, #4099	; 0x1003
 8102b5c:	4293      	cmp	r3, r2
 8102b5e:	d815      	bhi.n	8102b8c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8102b60:	68fb      	ldr	r3, [r7, #12]
 8102b62:	4a2b      	ldr	r2, [pc, #172]	; (8102c10 <ADC_ConfigureBoostMode+0x204>)
 8102b64:	4293      	cmp	r3, r2
 8102b66:	d908      	bls.n	8102b7a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102b68:	687b      	ldr	r3, [r7, #4]
 8102b6a:	681b      	ldr	r3, [r3, #0]
 8102b6c:	689a      	ldr	r2, [r3, #8]
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	681b      	ldr	r3, [r3, #0]
 8102b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102b76:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8102b78:	e03e      	b.n	8102bf8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102b7a:	687b      	ldr	r3, [r7, #4]
 8102b7c:	681b      	ldr	r3, [r3, #0]
 8102b7e:	689a      	ldr	r2, [r3, #8]
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	681b      	ldr	r3, [r3, #0]
 8102b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102b88:	609a      	str	r2, [r3, #8]
}
 8102b8a:	e035      	b.n	8102bf8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8102b8c:	68fb      	ldr	r3, [r7, #12]
 8102b8e:	085b      	lsrs	r3, r3, #1
 8102b90:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8102b92:	68fb      	ldr	r3, [r7, #12]
 8102b94:	4a1f      	ldr	r2, [pc, #124]	; (8102c14 <ADC_ConfigureBoostMode+0x208>)
 8102b96:	4293      	cmp	r3, r2
 8102b98:	d808      	bhi.n	8102bac <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	689a      	ldr	r2, [r3, #8]
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	681b      	ldr	r3, [r3, #0]
 8102ba4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8102ba8:	609a      	str	r2, [r3, #8]
}
 8102baa:	e025      	b.n	8102bf8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8102bac:	68fb      	ldr	r3, [r7, #12]
 8102bae:	4a1a      	ldr	r2, [pc, #104]	; (8102c18 <ADC_ConfigureBoostMode+0x20c>)
 8102bb0:	4293      	cmp	r3, r2
 8102bb2:	d80a      	bhi.n	8102bca <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8102bb4:	687b      	ldr	r3, [r7, #4]
 8102bb6:	681b      	ldr	r3, [r3, #0]
 8102bb8:	689b      	ldr	r3, [r3, #8]
 8102bba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	681b      	ldr	r3, [r3, #0]
 8102bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102bc6:	609a      	str	r2, [r3, #8]
}
 8102bc8:	e016      	b.n	8102bf8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8102bca:	68fb      	ldr	r3, [r7, #12]
 8102bcc:	4a13      	ldr	r2, [pc, #76]	; (8102c1c <ADC_ConfigureBoostMode+0x210>)
 8102bce:	4293      	cmp	r3, r2
 8102bd0:	d80a      	bhi.n	8102be8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	681b      	ldr	r3, [r3, #0]
 8102bd6:	689b      	ldr	r3, [r3, #8]
 8102bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	681b      	ldr	r3, [r3, #0]
 8102be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102be4:	609a      	str	r2, [r3, #8]
}
 8102be6:	e007      	b.n	8102bf8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8102be8:	687b      	ldr	r3, [r7, #4]
 8102bea:	681b      	ldr	r3, [r3, #0]
 8102bec:	689a      	ldr	r2, [r3, #8]
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	681b      	ldr	r3, [r3, #0]
 8102bf2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8102bf6:	609a      	str	r2, [r3, #8]
}
 8102bf8:	bf00      	nop
 8102bfa:	3710      	adds	r7, #16
 8102bfc:	46bd      	mov	sp, r7
 8102bfe:	bd80      	pop	{r7, pc}
 8102c00:	40022000 	.word	0x40022000
 8102c04:	40022100 	.word	0x40022100
 8102c08:	40022300 	.word	0x40022300
 8102c0c:	58026300 	.word	0x58026300
 8102c10:	01312d00 	.word	0x01312d00
 8102c14:	005f5e10 	.word	0x005f5e10
 8102c18:	00bebc20 	.word	0x00bebc20
 8102c1c:	017d7840 	.word	0x017d7840

08102c20 <LL_ADC_IsEnabled>:
{
 8102c20:	b480      	push	{r7}
 8102c22:	b083      	sub	sp, #12
 8102c24:	af00      	add	r7, sp, #0
 8102c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	689b      	ldr	r3, [r3, #8]
 8102c2c:	f003 0301 	and.w	r3, r3, #1
 8102c30:	2b01      	cmp	r3, #1
 8102c32:	d101      	bne.n	8102c38 <LL_ADC_IsEnabled+0x18>
 8102c34:	2301      	movs	r3, #1
 8102c36:	e000      	b.n	8102c3a <LL_ADC_IsEnabled+0x1a>
 8102c38:	2300      	movs	r3, #0
}
 8102c3a:	4618      	mov	r0, r3
 8102c3c:	370c      	adds	r7, #12
 8102c3e:	46bd      	mov	sp, r7
 8102c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c44:	4770      	bx	lr

08102c46 <LL_ADC_REG_IsConversionOngoing>:
{
 8102c46:	b480      	push	{r7}
 8102c48:	b083      	sub	sp, #12
 8102c4a:	af00      	add	r7, sp, #0
 8102c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	689b      	ldr	r3, [r3, #8]
 8102c52:	f003 0304 	and.w	r3, r3, #4
 8102c56:	2b04      	cmp	r3, #4
 8102c58:	d101      	bne.n	8102c5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8102c5a:	2301      	movs	r3, #1
 8102c5c:	e000      	b.n	8102c60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102c5e:	2300      	movs	r3, #0
}
 8102c60:	4618      	mov	r0, r3
 8102c62:	370c      	adds	r7, #12
 8102c64:	46bd      	mov	sp, r7
 8102c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c6a:	4770      	bx	lr

08102c6c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8102c6c:	b590      	push	{r4, r7, lr}
 8102c6e:	b09f      	sub	sp, #124	; 0x7c
 8102c70:	af00      	add	r7, sp, #0
 8102c72:	6078      	str	r0, [r7, #4]
 8102c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102c76:	2300      	movs	r3, #0
 8102c78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102c82:	2b01      	cmp	r3, #1
 8102c84:	d101      	bne.n	8102c8a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8102c86:	2302      	movs	r3, #2
 8102c88:	e0c4      	b.n	8102e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8102c8a:	687b      	ldr	r3, [r7, #4]
 8102c8c:	2201      	movs	r2, #1
 8102c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8102c92:	2300      	movs	r3, #0
 8102c94:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8102c96:	2300      	movs	r3, #0
 8102c98:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	681b      	ldr	r3, [r3, #0]
 8102c9e:	4a5f      	ldr	r2, [pc, #380]	; (8102e1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102ca0:	4293      	cmp	r3, r2
 8102ca2:	d102      	bne.n	8102caa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8102ca4:	4b5e      	ldr	r3, [pc, #376]	; (8102e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102ca6:	60bb      	str	r3, [r7, #8]
 8102ca8:	e001      	b.n	8102cae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8102caa:	2300      	movs	r3, #0
 8102cac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8102cae:	68bb      	ldr	r3, [r7, #8]
 8102cb0:	2b00      	cmp	r3, #0
 8102cb2:	d10b      	bne.n	8102ccc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102cb8:	f043 0220 	orr.w	r2, r3, #32
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8102cc0:	687b      	ldr	r3, [r7, #4]
 8102cc2:	2200      	movs	r2, #0
 8102cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8102cc8:	2301      	movs	r3, #1
 8102cca:	e0a3      	b.n	8102e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8102ccc:	68bb      	ldr	r3, [r7, #8]
 8102cce:	4618      	mov	r0, r3
 8102cd0:	f7ff ffb9 	bl	8102c46 <LL_ADC_REG_IsConversionOngoing>
 8102cd4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102cd6:	687b      	ldr	r3, [r7, #4]
 8102cd8:	681b      	ldr	r3, [r3, #0]
 8102cda:	4618      	mov	r0, r3
 8102cdc:	f7ff ffb3 	bl	8102c46 <LL_ADC_REG_IsConversionOngoing>
 8102ce0:	4603      	mov	r3, r0
 8102ce2:	2b00      	cmp	r3, #0
 8102ce4:	f040 8085 	bne.w	8102df2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8102ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102cea:	2b00      	cmp	r3, #0
 8102cec:	f040 8081 	bne.w	8102df2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8102cf0:	687b      	ldr	r3, [r7, #4]
 8102cf2:	681b      	ldr	r3, [r3, #0]
 8102cf4:	4a49      	ldr	r2, [pc, #292]	; (8102e1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102cf6:	4293      	cmp	r3, r2
 8102cf8:	d004      	beq.n	8102d04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	4a48      	ldr	r2, [pc, #288]	; (8102e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102d00:	4293      	cmp	r3, r2
 8102d02:	d101      	bne.n	8102d08 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8102d04:	4b47      	ldr	r3, [pc, #284]	; (8102e24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8102d06:	e000      	b.n	8102d0a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8102d08:	4b47      	ldr	r3, [pc, #284]	; (8102e28 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8102d0a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102d0c:	683b      	ldr	r3, [r7, #0]
 8102d0e:	681b      	ldr	r3, [r3, #0]
 8102d10:	2b00      	cmp	r3, #0
 8102d12:	d03b      	beq.n	8102d8c <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8102d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102d16:	689b      	ldr	r3, [r3, #8]
 8102d18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8102d1c:	683b      	ldr	r3, [r7, #0]
 8102d1e:	685b      	ldr	r3, [r3, #4]
 8102d20:	431a      	orrs	r2, r3
 8102d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102d24:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	681b      	ldr	r3, [r3, #0]
 8102d2a:	4a3c      	ldr	r2, [pc, #240]	; (8102e1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102d2c:	4293      	cmp	r3, r2
 8102d2e:	d004      	beq.n	8102d3a <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	681b      	ldr	r3, [r3, #0]
 8102d34:	4a3a      	ldr	r2, [pc, #232]	; (8102e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102d36:	4293      	cmp	r3, r2
 8102d38:	d10e      	bne.n	8102d58 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8102d3a:	4838      	ldr	r0, [pc, #224]	; (8102e1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102d3c:	f7ff ff70 	bl	8102c20 <LL_ADC_IsEnabled>
 8102d40:	4604      	mov	r4, r0
 8102d42:	4837      	ldr	r0, [pc, #220]	; (8102e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102d44:	f7ff ff6c 	bl	8102c20 <LL_ADC_IsEnabled>
 8102d48:	4603      	mov	r3, r0
 8102d4a:	4323      	orrs	r3, r4
 8102d4c:	2b00      	cmp	r3, #0
 8102d4e:	bf0c      	ite	eq
 8102d50:	2301      	moveq	r3, #1
 8102d52:	2300      	movne	r3, #0
 8102d54:	b2db      	uxtb	r3, r3
 8102d56:	e008      	b.n	8102d6a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8102d58:	4834      	ldr	r0, [pc, #208]	; (8102e2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8102d5a:	f7ff ff61 	bl	8102c20 <LL_ADC_IsEnabled>
 8102d5e:	4603      	mov	r3, r0
 8102d60:	2b00      	cmp	r3, #0
 8102d62:	bf0c      	ite	eq
 8102d64:	2301      	moveq	r3, #1
 8102d66:	2300      	movne	r3, #0
 8102d68:	b2db      	uxtb	r3, r3
 8102d6a:	2b00      	cmp	r3, #0
 8102d6c:	d04b      	beq.n	8102e06 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8102d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102d70:	689b      	ldr	r3, [r3, #8]
 8102d72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8102d76:	f023 030f 	bic.w	r3, r3, #15
 8102d7a:	683a      	ldr	r2, [r7, #0]
 8102d7c:	6811      	ldr	r1, [r2, #0]
 8102d7e:	683a      	ldr	r2, [r7, #0]
 8102d80:	6892      	ldr	r2, [r2, #8]
 8102d82:	430a      	orrs	r2, r1
 8102d84:	431a      	orrs	r2, r3
 8102d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102d88:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102d8a:	e03c      	b.n	8102e06 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8102d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102d8e:	689b      	ldr	r3, [r3, #8]
 8102d90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8102d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102d96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102d98:	687b      	ldr	r3, [r7, #4]
 8102d9a:	681b      	ldr	r3, [r3, #0]
 8102d9c:	4a1f      	ldr	r2, [pc, #124]	; (8102e1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102d9e:	4293      	cmp	r3, r2
 8102da0:	d004      	beq.n	8102dac <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	681b      	ldr	r3, [r3, #0]
 8102da6:	4a1e      	ldr	r2, [pc, #120]	; (8102e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102da8:	4293      	cmp	r3, r2
 8102daa:	d10e      	bne.n	8102dca <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8102dac:	481b      	ldr	r0, [pc, #108]	; (8102e1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102dae:	f7ff ff37 	bl	8102c20 <LL_ADC_IsEnabled>
 8102db2:	4604      	mov	r4, r0
 8102db4:	481a      	ldr	r0, [pc, #104]	; (8102e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102db6:	f7ff ff33 	bl	8102c20 <LL_ADC_IsEnabled>
 8102dba:	4603      	mov	r3, r0
 8102dbc:	4323      	orrs	r3, r4
 8102dbe:	2b00      	cmp	r3, #0
 8102dc0:	bf0c      	ite	eq
 8102dc2:	2301      	moveq	r3, #1
 8102dc4:	2300      	movne	r3, #0
 8102dc6:	b2db      	uxtb	r3, r3
 8102dc8:	e008      	b.n	8102ddc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8102dca:	4818      	ldr	r0, [pc, #96]	; (8102e2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8102dcc:	f7ff ff28 	bl	8102c20 <LL_ADC_IsEnabled>
 8102dd0:	4603      	mov	r3, r0
 8102dd2:	2b00      	cmp	r3, #0
 8102dd4:	bf0c      	ite	eq
 8102dd6:	2301      	moveq	r3, #1
 8102dd8:	2300      	movne	r3, #0
 8102dda:	b2db      	uxtb	r3, r3
 8102ddc:	2b00      	cmp	r3, #0
 8102dde:	d012      	beq.n	8102e06 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8102de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102de2:	689b      	ldr	r3, [r3, #8]
 8102de4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8102de8:	f023 030f 	bic.w	r3, r3, #15
 8102dec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8102dee:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102df0:	e009      	b.n	8102e06 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102df2:	687b      	ldr	r3, [r7, #4]
 8102df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102df6:	f043 0220 	orr.w	r2, r3, #32
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102dfe:	2301      	movs	r3, #1
 8102e00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8102e04:	e000      	b.n	8102e08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102e06:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	2200      	movs	r2, #0
 8102e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102e10:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8102e14:	4618      	mov	r0, r3
 8102e16:	377c      	adds	r7, #124	; 0x7c
 8102e18:	46bd      	mov	sp, r7
 8102e1a:	bd90      	pop	{r4, r7, pc}
 8102e1c:	40022000 	.word	0x40022000
 8102e20:	40022100 	.word	0x40022100
 8102e24:	40022300 	.word	0x40022300
 8102e28:	58026300 	.word	0x58026300
 8102e2c:	58026000 	.word	0x58026000

08102e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102e30:	b480      	push	{r7}
 8102e32:	b085      	sub	sp, #20
 8102e34:	af00      	add	r7, sp, #0
 8102e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	f003 0307 	and.w	r3, r3, #7
 8102e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102e40:	4b0c      	ldr	r3, [pc, #48]	; (8102e74 <__NVIC_SetPriorityGrouping+0x44>)
 8102e42:	68db      	ldr	r3, [r3, #12]
 8102e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102e46:	68ba      	ldr	r2, [r7, #8]
 8102e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102e4c:	4013      	ands	r3, r2
 8102e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102e50:	68fb      	ldr	r3, [r7, #12]
 8102e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102e54:	68bb      	ldr	r3, [r7, #8]
 8102e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102e62:	4a04      	ldr	r2, [pc, #16]	; (8102e74 <__NVIC_SetPriorityGrouping+0x44>)
 8102e64:	68bb      	ldr	r3, [r7, #8]
 8102e66:	60d3      	str	r3, [r2, #12]
}
 8102e68:	bf00      	nop
 8102e6a:	3714      	adds	r7, #20
 8102e6c:	46bd      	mov	sp, r7
 8102e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e72:	4770      	bx	lr
 8102e74:	e000ed00 	.word	0xe000ed00

08102e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102e78:	b480      	push	{r7}
 8102e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102e7c:	4b04      	ldr	r3, [pc, #16]	; (8102e90 <__NVIC_GetPriorityGrouping+0x18>)
 8102e7e:	68db      	ldr	r3, [r3, #12]
 8102e80:	0a1b      	lsrs	r3, r3, #8
 8102e82:	f003 0307 	and.w	r3, r3, #7
}
 8102e86:	4618      	mov	r0, r3
 8102e88:	46bd      	mov	sp, r7
 8102e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e8e:	4770      	bx	lr
 8102e90:	e000ed00 	.word	0xe000ed00

08102e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102e94:	b480      	push	{r7}
 8102e96:	b083      	sub	sp, #12
 8102e98:	af00      	add	r7, sp, #0
 8102e9a:	4603      	mov	r3, r0
 8102e9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ea2:	2b00      	cmp	r3, #0
 8102ea4:	db0b      	blt.n	8102ebe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102ea6:	88fb      	ldrh	r3, [r7, #6]
 8102ea8:	f003 021f 	and.w	r2, r3, #31
 8102eac:	4907      	ldr	r1, [pc, #28]	; (8102ecc <__NVIC_EnableIRQ+0x38>)
 8102eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102eb2:	095b      	lsrs	r3, r3, #5
 8102eb4:	2001      	movs	r0, #1
 8102eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8102eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102ebe:	bf00      	nop
 8102ec0:	370c      	adds	r7, #12
 8102ec2:	46bd      	mov	sp, r7
 8102ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ec8:	4770      	bx	lr
 8102eca:	bf00      	nop
 8102ecc:	e000e100 	.word	0xe000e100

08102ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102ed0:	b480      	push	{r7}
 8102ed2:	b083      	sub	sp, #12
 8102ed4:	af00      	add	r7, sp, #0
 8102ed6:	4603      	mov	r3, r0
 8102ed8:	6039      	str	r1, [r7, #0]
 8102eda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ee0:	2b00      	cmp	r3, #0
 8102ee2:	db0a      	blt.n	8102efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102ee4:	683b      	ldr	r3, [r7, #0]
 8102ee6:	b2da      	uxtb	r2, r3
 8102ee8:	490c      	ldr	r1, [pc, #48]	; (8102f1c <__NVIC_SetPriority+0x4c>)
 8102eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102eee:	0112      	lsls	r2, r2, #4
 8102ef0:	b2d2      	uxtb	r2, r2
 8102ef2:	440b      	add	r3, r1
 8102ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102ef8:	e00a      	b.n	8102f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102efa:	683b      	ldr	r3, [r7, #0]
 8102efc:	b2da      	uxtb	r2, r3
 8102efe:	4908      	ldr	r1, [pc, #32]	; (8102f20 <__NVIC_SetPriority+0x50>)
 8102f00:	88fb      	ldrh	r3, [r7, #6]
 8102f02:	f003 030f 	and.w	r3, r3, #15
 8102f06:	3b04      	subs	r3, #4
 8102f08:	0112      	lsls	r2, r2, #4
 8102f0a:	b2d2      	uxtb	r2, r2
 8102f0c:	440b      	add	r3, r1
 8102f0e:	761a      	strb	r2, [r3, #24]
}
 8102f10:	bf00      	nop
 8102f12:	370c      	adds	r7, #12
 8102f14:	46bd      	mov	sp, r7
 8102f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f1a:	4770      	bx	lr
 8102f1c:	e000e100 	.word	0xe000e100
 8102f20:	e000ed00 	.word	0xe000ed00

08102f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102f24:	b480      	push	{r7}
 8102f26:	b089      	sub	sp, #36	; 0x24
 8102f28:	af00      	add	r7, sp, #0
 8102f2a:	60f8      	str	r0, [r7, #12]
 8102f2c:	60b9      	str	r1, [r7, #8]
 8102f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102f30:	68fb      	ldr	r3, [r7, #12]
 8102f32:	f003 0307 	and.w	r3, r3, #7
 8102f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102f38:	69fb      	ldr	r3, [r7, #28]
 8102f3a:	f1c3 0307 	rsb	r3, r3, #7
 8102f3e:	2b04      	cmp	r3, #4
 8102f40:	bf28      	it	cs
 8102f42:	2304      	movcs	r3, #4
 8102f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102f46:	69fb      	ldr	r3, [r7, #28]
 8102f48:	3304      	adds	r3, #4
 8102f4a:	2b06      	cmp	r3, #6
 8102f4c:	d902      	bls.n	8102f54 <NVIC_EncodePriority+0x30>
 8102f4e:	69fb      	ldr	r3, [r7, #28]
 8102f50:	3b03      	subs	r3, #3
 8102f52:	e000      	b.n	8102f56 <NVIC_EncodePriority+0x32>
 8102f54:	2300      	movs	r3, #0
 8102f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102f58:	f04f 32ff 	mov.w	r2, #4294967295
 8102f5c:	69bb      	ldr	r3, [r7, #24]
 8102f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8102f62:	43da      	mvns	r2, r3
 8102f64:	68bb      	ldr	r3, [r7, #8]
 8102f66:	401a      	ands	r2, r3
 8102f68:	697b      	ldr	r3, [r7, #20]
 8102f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8102f70:	697b      	ldr	r3, [r7, #20]
 8102f72:	fa01 f303 	lsl.w	r3, r1, r3
 8102f76:	43d9      	mvns	r1, r3
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102f7c:	4313      	orrs	r3, r2
         );
}
 8102f7e:	4618      	mov	r0, r3
 8102f80:	3724      	adds	r7, #36	; 0x24
 8102f82:	46bd      	mov	sp, r7
 8102f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f88:	4770      	bx	lr
	...

08102f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102f8c:	b580      	push	{r7, lr}
 8102f8e:	b082      	sub	sp, #8
 8102f90:	af00      	add	r7, sp, #0
 8102f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102f94:	687b      	ldr	r3, [r7, #4]
 8102f96:	3b01      	subs	r3, #1
 8102f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102f9c:	d301      	bcc.n	8102fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102f9e:	2301      	movs	r3, #1
 8102fa0:	e00f      	b.n	8102fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102fa2:	4a0a      	ldr	r2, [pc, #40]	; (8102fcc <SysTick_Config+0x40>)
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	3b01      	subs	r3, #1
 8102fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102faa:	210f      	movs	r1, #15
 8102fac:	f04f 30ff 	mov.w	r0, #4294967295
 8102fb0:	f7ff ff8e 	bl	8102ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102fb4:	4b05      	ldr	r3, [pc, #20]	; (8102fcc <SysTick_Config+0x40>)
 8102fb6:	2200      	movs	r2, #0
 8102fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102fba:	4b04      	ldr	r3, [pc, #16]	; (8102fcc <SysTick_Config+0x40>)
 8102fbc:	2207      	movs	r2, #7
 8102fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102fc0:	2300      	movs	r3, #0
}
 8102fc2:	4618      	mov	r0, r3
 8102fc4:	3708      	adds	r7, #8
 8102fc6:	46bd      	mov	sp, r7
 8102fc8:	bd80      	pop	{r7, pc}
 8102fca:	bf00      	nop
 8102fcc:	e000e010 	.word	0xe000e010

08102fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102fd0:	b580      	push	{r7, lr}
 8102fd2:	b082      	sub	sp, #8
 8102fd4:	af00      	add	r7, sp, #0
 8102fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102fd8:	6878      	ldr	r0, [r7, #4]
 8102fda:	f7ff ff29 	bl	8102e30 <__NVIC_SetPriorityGrouping>
}
 8102fde:	bf00      	nop
 8102fe0:	3708      	adds	r7, #8
 8102fe2:	46bd      	mov	sp, r7
 8102fe4:	bd80      	pop	{r7, pc}

08102fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102fe6:	b580      	push	{r7, lr}
 8102fe8:	b086      	sub	sp, #24
 8102fea:	af00      	add	r7, sp, #0
 8102fec:	4603      	mov	r3, r0
 8102fee:	60b9      	str	r1, [r7, #8]
 8102ff0:	607a      	str	r2, [r7, #4]
 8102ff2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102ff4:	f7ff ff40 	bl	8102e78 <__NVIC_GetPriorityGrouping>
 8102ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102ffa:	687a      	ldr	r2, [r7, #4]
 8102ffc:	68b9      	ldr	r1, [r7, #8]
 8102ffe:	6978      	ldr	r0, [r7, #20]
 8103000:	f7ff ff90 	bl	8102f24 <NVIC_EncodePriority>
 8103004:	4602      	mov	r2, r0
 8103006:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810300a:	4611      	mov	r1, r2
 810300c:	4618      	mov	r0, r3
 810300e:	f7ff ff5f 	bl	8102ed0 <__NVIC_SetPriority>
}
 8103012:	bf00      	nop
 8103014:	3718      	adds	r7, #24
 8103016:	46bd      	mov	sp, r7
 8103018:	bd80      	pop	{r7, pc}

0810301a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810301a:	b580      	push	{r7, lr}
 810301c:	b082      	sub	sp, #8
 810301e:	af00      	add	r7, sp, #0
 8103020:	4603      	mov	r3, r0
 8103022:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103028:	4618      	mov	r0, r3
 810302a:	f7ff ff33 	bl	8102e94 <__NVIC_EnableIRQ>
}
 810302e:	bf00      	nop
 8103030:	3708      	adds	r7, #8
 8103032:	46bd      	mov	sp, r7
 8103034:	bd80      	pop	{r7, pc}

08103036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103036:	b580      	push	{r7, lr}
 8103038:	b082      	sub	sp, #8
 810303a:	af00      	add	r7, sp, #0
 810303c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810303e:	6878      	ldr	r0, [r7, #4]
 8103040:	f7ff ffa4 	bl	8102f8c <SysTick_Config>
 8103044:	4603      	mov	r3, r0
}
 8103046:	4618      	mov	r0, r3
 8103048:	3708      	adds	r7, #8
 810304a:	46bd      	mov	sp, r7
 810304c:	bd80      	pop	{r7, pc}
	...

08103050 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103050:	b480      	push	{r7}
 8103052:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103054:	4b07      	ldr	r3, [pc, #28]	; (8103074 <HAL_GetCurrentCPUID+0x24>)
 8103056:	681b      	ldr	r3, [r3, #0]
 8103058:	091b      	lsrs	r3, r3, #4
 810305a:	f003 030f 	and.w	r3, r3, #15
 810305e:	2b07      	cmp	r3, #7
 8103060:	d101      	bne.n	8103066 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103062:	2303      	movs	r3, #3
 8103064:	e000      	b.n	8103068 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103066:	2301      	movs	r3, #1
  }
}
 8103068:	4618      	mov	r0, r3
 810306a:	46bd      	mov	sp, r7
 810306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103070:	4770      	bx	lr
 8103072:	bf00      	nop
 8103074:	e000ed00 	.word	0xe000ed00

08103078 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103078:	b480      	push	{r7}
 810307a:	b089      	sub	sp, #36	; 0x24
 810307c:	af00      	add	r7, sp, #0
 810307e:	6078      	str	r0, [r7, #4]
 8103080:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103082:	2300      	movs	r3, #0
 8103084:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103086:	4b89      	ldr	r3, [pc, #548]	; (81032ac <HAL_GPIO_Init+0x234>)
 8103088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810308a:	e194      	b.n	81033b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810308c:	683b      	ldr	r3, [r7, #0]
 810308e:	681a      	ldr	r2, [r3, #0]
 8103090:	2101      	movs	r1, #1
 8103092:	69fb      	ldr	r3, [r7, #28]
 8103094:	fa01 f303 	lsl.w	r3, r1, r3
 8103098:	4013      	ands	r3, r2
 810309a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810309c:	693b      	ldr	r3, [r7, #16]
 810309e:	2b00      	cmp	r3, #0
 81030a0:	f000 8186 	beq.w	81033b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81030a4:	683b      	ldr	r3, [r7, #0]
 81030a6:	685b      	ldr	r3, [r3, #4]
 81030a8:	f003 0303 	and.w	r3, r3, #3
 81030ac:	2b01      	cmp	r3, #1
 81030ae:	d005      	beq.n	81030bc <HAL_GPIO_Init+0x44>
 81030b0:	683b      	ldr	r3, [r7, #0]
 81030b2:	685b      	ldr	r3, [r3, #4]
 81030b4:	f003 0303 	and.w	r3, r3, #3
 81030b8:	2b02      	cmp	r3, #2
 81030ba:	d130      	bne.n	810311e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	689b      	ldr	r3, [r3, #8]
 81030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81030c2:	69fb      	ldr	r3, [r7, #28]
 81030c4:	005b      	lsls	r3, r3, #1
 81030c6:	2203      	movs	r2, #3
 81030c8:	fa02 f303 	lsl.w	r3, r2, r3
 81030cc:	43db      	mvns	r3, r3
 81030ce:	69ba      	ldr	r2, [r7, #24]
 81030d0:	4013      	ands	r3, r2
 81030d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81030d4:	683b      	ldr	r3, [r7, #0]
 81030d6:	68da      	ldr	r2, [r3, #12]
 81030d8:	69fb      	ldr	r3, [r7, #28]
 81030da:	005b      	lsls	r3, r3, #1
 81030dc:	fa02 f303 	lsl.w	r3, r2, r3
 81030e0:	69ba      	ldr	r2, [r7, #24]
 81030e2:	4313      	orrs	r3, r2
 81030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	69ba      	ldr	r2, [r7, #24]
 81030ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	685b      	ldr	r3, [r3, #4]
 81030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81030f2:	2201      	movs	r2, #1
 81030f4:	69fb      	ldr	r3, [r7, #28]
 81030f6:	fa02 f303 	lsl.w	r3, r2, r3
 81030fa:	43db      	mvns	r3, r3
 81030fc:	69ba      	ldr	r2, [r7, #24]
 81030fe:	4013      	ands	r3, r2
 8103100:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8103102:	683b      	ldr	r3, [r7, #0]
 8103104:	685b      	ldr	r3, [r3, #4]
 8103106:	091b      	lsrs	r3, r3, #4
 8103108:	f003 0201 	and.w	r2, r3, #1
 810310c:	69fb      	ldr	r3, [r7, #28]
 810310e:	fa02 f303 	lsl.w	r3, r2, r3
 8103112:	69ba      	ldr	r2, [r7, #24]
 8103114:	4313      	orrs	r3, r2
 8103116:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	69ba      	ldr	r2, [r7, #24]
 810311c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810311e:	683b      	ldr	r3, [r7, #0]
 8103120:	685b      	ldr	r3, [r3, #4]
 8103122:	f003 0303 	and.w	r3, r3, #3
 8103126:	2b03      	cmp	r3, #3
 8103128:	d017      	beq.n	810315a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	68db      	ldr	r3, [r3, #12]
 810312e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103130:	69fb      	ldr	r3, [r7, #28]
 8103132:	005b      	lsls	r3, r3, #1
 8103134:	2203      	movs	r2, #3
 8103136:	fa02 f303 	lsl.w	r3, r2, r3
 810313a:	43db      	mvns	r3, r3
 810313c:	69ba      	ldr	r2, [r7, #24]
 810313e:	4013      	ands	r3, r2
 8103140:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103142:	683b      	ldr	r3, [r7, #0]
 8103144:	689a      	ldr	r2, [r3, #8]
 8103146:	69fb      	ldr	r3, [r7, #28]
 8103148:	005b      	lsls	r3, r3, #1
 810314a:	fa02 f303 	lsl.w	r3, r2, r3
 810314e:	69ba      	ldr	r2, [r7, #24]
 8103150:	4313      	orrs	r3, r2
 8103152:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	69ba      	ldr	r2, [r7, #24]
 8103158:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810315a:	683b      	ldr	r3, [r7, #0]
 810315c:	685b      	ldr	r3, [r3, #4]
 810315e:	f003 0303 	and.w	r3, r3, #3
 8103162:	2b02      	cmp	r3, #2
 8103164:	d123      	bne.n	81031ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103166:	69fb      	ldr	r3, [r7, #28]
 8103168:	08da      	lsrs	r2, r3, #3
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	3208      	adds	r2, #8
 810316e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103174:	69fb      	ldr	r3, [r7, #28]
 8103176:	f003 0307 	and.w	r3, r3, #7
 810317a:	009b      	lsls	r3, r3, #2
 810317c:	220f      	movs	r2, #15
 810317e:	fa02 f303 	lsl.w	r3, r2, r3
 8103182:	43db      	mvns	r3, r3
 8103184:	69ba      	ldr	r2, [r7, #24]
 8103186:	4013      	ands	r3, r2
 8103188:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810318a:	683b      	ldr	r3, [r7, #0]
 810318c:	691a      	ldr	r2, [r3, #16]
 810318e:	69fb      	ldr	r3, [r7, #28]
 8103190:	f003 0307 	and.w	r3, r3, #7
 8103194:	009b      	lsls	r3, r3, #2
 8103196:	fa02 f303 	lsl.w	r3, r2, r3
 810319a:	69ba      	ldr	r2, [r7, #24]
 810319c:	4313      	orrs	r3, r2
 810319e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81031a0:	69fb      	ldr	r3, [r7, #28]
 81031a2:	08da      	lsrs	r2, r3, #3
 81031a4:	687b      	ldr	r3, [r7, #4]
 81031a6:	3208      	adds	r2, #8
 81031a8:	69b9      	ldr	r1, [r7, #24]
 81031aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81031ae:	687b      	ldr	r3, [r7, #4]
 81031b0:	681b      	ldr	r3, [r3, #0]
 81031b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81031b4:	69fb      	ldr	r3, [r7, #28]
 81031b6:	005b      	lsls	r3, r3, #1
 81031b8:	2203      	movs	r2, #3
 81031ba:	fa02 f303 	lsl.w	r3, r2, r3
 81031be:	43db      	mvns	r3, r3
 81031c0:	69ba      	ldr	r2, [r7, #24]
 81031c2:	4013      	ands	r3, r2
 81031c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81031c6:	683b      	ldr	r3, [r7, #0]
 81031c8:	685b      	ldr	r3, [r3, #4]
 81031ca:	f003 0203 	and.w	r2, r3, #3
 81031ce:	69fb      	ldr	r3, [r7, #28]
 81031d0:	005b      	lsls	r3, r3, #1
 81031d2:	fa02 f303 	lsl.w	r3, r2, r3
 81031d6:	69ba      	ldr	r2, [r7, #24]
 81031d8:	4313      	orrs	r3, r2
 81031da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	69ba      	ldr	r2, [r7, #24]
 81031e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81031e2:	683b      	ldr	r3, [r7, #0]
 81031e4:	685b      	ldr	r3, [r3, #4]
 81031e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81031ea:	2b00      	cmp	r3, #0
 81031ec:	f000 80e0 	beq.w	81033b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81031f0:	4b2f      	ldr	r3, [pc, #188]	; (81032b0 <HAL_GPIO_Init+0x238>)
 81031f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81031f6:	4a2e      	ldr	r2, [pc, #184]	; (81032b0 <HAL_GPIO_Init+0x238>)
 81031f8:	f043 0302 	orr.w	r3, r3, #2
 81031fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103200:	4b2b      	ldr	r3, [pc, #172]	; (81032b0 <HAL_GPIO_Init+0x238>)
 8103202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103206:	f003 0302 	and.w	r3, r3, #2
 810320a:	60fb      	str	r3, [r7, #12]
 810320c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810320e:	4a29      	ldr	r2, [pc, #164]	; (81032b4 <HAL_GPIO_Init+0x23c>)
 8103210:	69fb      	ldr	r3, [r7, #28]
 8103212:	089b      	lsrs	r3, r3, #2
 8103214:	3302      	adds	r3, #2
 8103216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810321c:	69fb      	ldr	r3, [r7, #28]
 810321e:	f003 0303 	and.w	r3, r3, #3
 8103222:	009b      	lsls	r3, r3, #2
 8103224:	220f      	movs	r2, #15
 8103226:	fa02 f303 	lsl.w	r3, r2, r3
 810322a:	43db      	mvns	r3, r3
 810322c:	69ba      	ldr	r2, [r7, #24]
 810322e:	4013      	ands	r3, r2
 8103230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	4a20      	ldr	r2, [pc, #128]	; (81032b8 <HAL_GPIO_Init+0x240>)
 8103236:	4293      	cmp	r3, r2
 8103238:	d052      	beq.n	81032e0 <HAL_GPIO_Init+0x268>
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	4a1f      	ldr	r2, [pc, #124]	; (81032bc <HAL_GPIO_Init+0x244>)
 810323e:	4293      	cmp	r3, r2
 8103240:	d031      	beq.n	81032a6 <HAL_GPIO_Init+0x22e>
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	4a1e      	ldr	r2, [pc, #120]	; (81032c0 <HAL_GPIO_Init+0x248>)
 8103246:	4293      	cmp	r3, r2
 8103248:	d02b      	beq.n	81032a2 <HAL_GPIO_Init+0x22a>
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	4a1d      	ldr	r2, [pc, #116]	; (81032c4 <HAL_GPIO_Init+0x24c>)
 810324e:	4293      	cmp	r3, r2
 8103250:	d025      	beq.n	810329e <HAL_GPIO_Init+0x226>
 8103252:	687b      	ldr	r3, [r7, #4]
 8103254:	4a1c      	ldr	r2, [pc, #112]	; (81032c8 <HAL_GPIO_Init+0x250>)
 8103256:	4293      	cmp	r3, r2
 8103258:	d01f      	beq.n	810329a <HAL_GPIO_Init+0x222>
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	4a1b      	ldr	r2, [pc, #108]	; (81032cc <HAL_GPIO_Init+0x254>)
 810325e:	4293      	cmp	r3, r2
 8103260:	d019      	beq.n	8103296 <HAL_GPIO_Init+0x21e>
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	4a1a      	ldr	r2, [pc, #104]	; (81032d0 <HAL_GPIO_Init+0x258>)
 8103266:	4293      	cmp	r3, r2
 8103268:	d013      	beq.n	8103292 <HAL_GPIO_Init+0x21a>
 810326a:	687b      	ldr	r3, [r7, #4]
 810326c:	4a19      	ldr	r2, [pc, #100]	; (81032d4 <HAL_GPIO_Init+0x25c>)
 810326e:	4293      	cmp	r3, r2
 8103270:	d00d      	beq.n	810328e <HAL_GPIO_Init+0x216>
 8103272:	687b      	ldr	r3, [r7, #4]
 8103274:	4a18      	ldr	r2, [pc, #96]	; (81032d8 <HAL_GPIO_Init+0x260>)
 8103276:	4293      	cmp	r3, r2
 8103278:	d007      	beq.n	810328a <HAL_GPIO_Init+0x212>
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	4a17      	ldr	r2, [pc, #92]	; (81032dc <HAL_GPIO_Init+0x264>)
 810327e:	4293      	cmp	r3, r2
 8103280:	d101      	bne.n	8103286 <HAL_GPIO_Init+0x20e>
 8103282:	2309      	movs	r3, #9
 8103284:	e02d      	b.n	81032e2 <HAL_GPIO_Init+0x26a>
 8103286:	230a      	movs	r3, #10
 8103288:	e02b      	b.n	81032e2 <HAL_GPIO_Init+0x26a>
 810328a:	2308      	movs	r3, #8
 810328c:	e029      	b.n	81032e2 <HAL_GPIO_Init+0x26a>
 810328e:	2307      	movs	r3, #7
 8103290:	e027      	b.n	81032e2 <HAL_GPIO_Init+0x26a>
 8103292:	2306      	movs	r3, #6
 8103294:	e025      	b.n	81032e2 <HAL_GPIO_Init+0x26a>
 8103296:	2305      	movs	r3, #5
 8103298:	e023      	b.n	81032e2 <HAL_GPIO_Init+0x26a>
 810329a:	2304      	movs	r3, #4
 810329c:	e021      	b.n	81032e2 <HAL_GPIO_Init+0x26a>
 810329e:	2303      	movs	r3, #3
 81032a0:	e01f      	b.n	81032e2 <HAL_GPIO_Init+0x26a>
 81032a2:	2302      	movs	r3, #2
 81032a4:	e01d      	b.n	81032e2 <HAL_GPIO_Init+0x26a>
 81032a6:	2301      	movs	r3, #1
 81032a8:	e01b      	b.n	81032e2 <HAL_GPIO_Init+0x26a>
 81032aa:	bf00      	nop
 81032ac:	580000c0 	.word	0x580000c0
 81032b0:	58024400 	.word	0x58024400
 81032b4:	58000400 	.word	0x58000400
 81032b8:	58020000 	.word	0x58020000
 81032bc:	58020400 	.word	0x58020400
 81032c0:	58020800 	.word	0x58020800
 81032c4:	58020c00 	.word	0x58020c00
 81032c8:	58021000 	.word	0x58021000
 81032cc:	58021400 	.word	0x58021400
 81032d0:	58021800 	.word	0x58021800
 81032d4:	58021c00 	.word	0x58021c00
 81032d8:	58022000 	.word	0x58022000
 81032dc:	58022400 	.word	0x58022400
 81032e0:	2300      	movs	r3, #0
 81032e2:	69fa      	ldr	r2, [r7, #28]
 81032e4:	f002 0203 	and.w	r2, r2, #3
 81032e8:	0092      	lsls	r2, r2, #2
 81032ea:	4093      	lsls	r3, r2
 81032ec:	69ba      	ldr	r2, [r7, #24]
 81032ee:	4313      	orrs	r3, r2
 81032f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81032f2:	4938      	ldr	r1, [pc, #224]	; (81033d4 <HAL_GPIO_Init+0x35c>)
 81032f4:	69fb      	ldr	r3, [r7, #28]
 81032f6:	089b      	lsrs	r3, r3, #2
 81032f8:	3302      	adds	r3, #2
 81032fa:	69ba      	ldr	r2, [r7, #24]
 81032fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103304:	681b      	ldr	r3, [r3, #0]
 8103306:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103308:	693b      	ldr	r3, [r7, #16]
 810330a:	43db      	mvns	r3, r3
 810330c:	69ba      	ldr	r2, [r7, #24]
 810330e:	4013      	ands	r3, r2
 8103310:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103312:	683b      	ldr	r3, [r7, #0]
 8103314:	685b      	ldr	r3, [r3, #4]
 8103316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810331a:	2b00      	cmp	r3, #0
 810331c:	d003      	beq.n	8103326 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810331e:	69ba      	ldr	r2, [r7, #24]
 8103320:	693b      	ldr	r3, [r7, #16]
 8103322:	4313      	orrs	r3, r2
 8103324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810332a:	69bb      	ldr	r3, [r7, #24]
 810332c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810332e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103332:	685b      	ldr	r3, [r3, #4]
 8103334:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103336:	693b      	ldr	r3, [r7, #16]
 8103338:	43db      	mvns	r3, r3
 810333a:	69ba      	ldr	r2, [r7, #24]
 810333c:	4013      	ands	r3, r2
 810333e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103340:	683b      	ldr	r3, [r7, #0]
 8103342:	685b      	ldr	r3, [r3, #4]
 8103344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103348:	2b00      	cmp	r3, #0
 810334a:	d003      	beq.n	8103354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810334c:	69ba      	ldr	r2, [r7, #24]
 810334e:	693b      	ldr	r3, [r7, #16]
 8103350:	4313      	orrs	r3, r2
 8103352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103358:	69bb      	ldr	r3, [r7, #24]
 810335a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810335c:	697b      	ldr	r3, [r7, #20]
 810335e:	685b      	ldr	r3, [r3, #4]
 8103360:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103362:	693b      	ldr	r3, [r7, #16]
 8103364:	43db      	mvns	r3, r3
 8103366:	69ba      	ldr	r2, [r7, #24]
 8103368:	4013      	ands	r3, r2
 810336a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810336c:	683b      	ldr	r3, [r7, #0]
 810336e:	685b      	ldr	r3, [r3, #4]
 8103370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103374:	2b00      	cmp	r3, #0
 8103376:	d003      	beq.n	8103380 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103378:	69ba      	ldr	r2, [r7, #24]
 810337a:	693b      	ldr	r3, [r7, #16]
 810337c:	4313      	orrs	r3, r2
 810337e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103380:	697b      	ldr	r3, [r7, #20]
 8103382:	69ba      	ldr	r2, [r7, #24]
 8103384:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103386:	697b      	ldr	r3, [r7, #20]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810338c:	693b      	ldr	r3, [r7, #16]
 810338e:	43db      	mvns	r3, r3
 8103390:	69ba      	ldr	r2, [r7, #24]
 8103392:	4013      	ands	r3, r2
 8103394:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103396:	683b      	ldr	r3, [r7, #0]
 8103398:	685b      	ldr	r3, [r3, #4]
 810339a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810339e:	2b00      	cmp	r3, #0
 81033a0:	d003      	beq.n	81033aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81033a2:	69ba      	ldr	r2, [r7, #24]
 81033a4:	693b      	ldr	r3, [r7, #16]
 81033a6:	4313      	orrs	r3, r2
 81033a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81033aa:	697b      	ldr	r3, [r7, #20]
 81033ac:	69ba      	ldr	r2, [r7, #24]
 81033ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81033b0:	69fb      	ldr	r3, [r7, #28]
 81033b2:	3301      	adds	r3, #1
 81033b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81033b6:	683b      	ldr	r3, [r7, #0]
 81033b8:	681a      	ldr	r2, [r3, #0]
 81033ba:	69fb      	ldr	r3, [r7, #28]
 81033bc:	fa22 f303 	lsr.w	r3, r2, r3
 81033c0:	2b00      	cmp	r3, #0
 81033c2:	f47f ae63 	bne.w	810308c <HAL_GPIO_Init+0x14>
  }
}
 81033c6:	bf00      	nop
 81033c8:	bf00      	nop
 81033ca:	3724      	adds	r7, #36	; 0x24
 81033cc:	46bd      	mov	sp, r7
 81033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033d2:	4770      	bx	lr
 81033d4:	58000400 	.word	0x58000400

081033d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81033d8:	b580      	push	{r7, lr}
 81033da:	b082      	sub	sp, #8
 81033dc:	af00      	add	r7, sp, #0
 81033de:	4603      	mov	r3, r0
 81033e0:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81033e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81033e6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 81033ea:	88fb      	ldrh	r3, [r7, #6]
 81033ec:	4013      	ands	r3, r2
 81033ee:	2b00      	cmp	r3, #0
 81033f0:	d008      	beq.n	8103404 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81033f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81033f6:	88fb      	ldrh	r3, [r7, #6]
 81033f8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81033fc:	88fb      	ldrh	r3, [r7, #6]
 81033fe:	4618      	mov	r0, r3
 8103400:	f7fe f92e 	bl	8101660 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8103404:	bf00      	nop
 8103406:	3708      	adds	r7, #8
 8103408:	46bd      	mov	sp, r7
 810340a:	bd80      	pop	{r7, pc}

0810340c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810340c:	b480      	push	{r7}
 810340e:	b083      	sub	sp, #12
 8103410:	af00      	add	r7, sp, #0
 8103412:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103414:	4b05      	ldr	r3, [pc, #20]	; (810342c <HAL_HSEM_ActivateNotification+0x20>)
 8103416:	681a      	ldr	r2, [r3, #0]
 8103418:	4904      	ldr	r1, [pc, #16]	; (810342c <HAL_HSEM_ActivateNotification+0x20>)
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	4313      	orrs	r3, r2
 810341e:	600b      	str	r3, [r1, #0]
#endif
}
 8103420:	bf00      	nop
 8103422:	370c      	adds	r7, #12
 8103424:	46bd      	mov	sp, r7
 8103426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810342a:	4770      	bx	lr
 810342c:	58026510 	.word	0x58026510

08103430 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103430:	b580      	push	{r7, lr}
 8103432:	b084      	sub	sp, #16
 8103434:	af00      	add	r7, sp, #0
 8103436:	60f8      	str	r0, [r7, #12]
 8103438:	460b      	mov	r3, r1
 810343a:	607a      	str	r2, [r7, #4]
 810343c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810343e:	4b37      	ldr	r3, [pc, #220]	; (810351c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103440:	681b      	ldr	r3, [r3, #0]
 8103442:	f023 0201 	bic.w	r2, r3, #1
 8103446:	4935      	ldr	r1, [pc, #212]	; (810351c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103448:	68fb      	ldr	r3, [r7, #12]
 810344a:	4313      	orrs	r3, r2
 810344c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810344e:	687b      	ldr	r3, [r7, #4]
 8103450:	2b00      	cmp	r3, #0
 8103452:	d123      	bne.n	810349c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103454:	f7ff fdfc 	bl	8103050 <HAL_GetCurrentCPUID>
 8103458:	4603      	mov	r3, r0
 810345a:	2b03      	cmp	r3, #3
 810345c:	d158      	bne.n	8103510 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810345e:	4b2f      	ldr	r3, [pc, #188]	; (810351c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103460:	691b      	ldr	r3, [r3, #16]
 8103462:	4a2e      	ldr	r2, [pc, #184]	; (810351c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103464:	f023 0301 	bic.w	r3, r3, #1
 8103468:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810346a:	4b2d      	ldr	r3, [pc, #180]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810346c:	691b      	ldr	r3, [r3, #16]
 810346e:	4a2c      	ldr	r2, [pc, #176]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103470:	f043 0304 	orr.w	r3, r3, #4
 8103474:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103476:	f3bf 8f4f 	dsb	sy
}
 810347a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810347c:	f3bf 8f6f 	isb	sy
}
 8103480:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103482:	7afb      	ldrb	r3, [r7, #11]
 8103484:	2b01      	cmp	r3, #1
 8103486:	d101      	bne.n	810348c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103488:	bf30      	wfi
 810348a:	e000      	b.n	810348e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810348c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810348e:	4b24      	ldr	r3, [pc, #144]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103490:	691b      	ldr	r3, [r3, #16]
 8103492:	4a23      	ldr	r2, [pc, #140]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103494:	f023 0304 	bic.w	r3, r3, #4
 8103498:	6113      	str	r3, [r2, #16]
 810349a:	e03c      	b.n	8103516 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810349c:	687b      	ldr	r3, [r7, #4]
 810349e:	2b01      	cmp	r3, #1
 81034a0:	d123      	bne.n	81034ea <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81034a2:	f7ff fdd5 	bl	8103050 <HAL_GetCurrentCPUID>
 81034a6:	4603      	mov	r3, r0
 81034a8:	2b01      	cmp	r3, #1
 81034aa:	d133      	bne.n	8103514 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81034ac:	4b1b      	ldr	r3, [pc, #108]	; (810351c <HAL_PWREx_EnterSTOPMode+0xec>)
 81034ae:	695b      	ldr	r3, [r3, #20]
 81034b0:	4a1a      	ldr	r2, [pc, #104]	; (810351c <HAL_PWREx_EnterSTOPMode+0xec>)
 81034b2:	f023 0302 	bic.w	r3, r3, #2
 81034b6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81034b8:	4b19      	ldr	r3, [pc, #100]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034ba:	691b      	ldr	r3, [r3, #16]
 81034bc:	4a18      	ldr	r2, [pc, #96]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034be:	f043 0304 	orr.w	r3, r3, #4
 81034c2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81034c4:	f3bf 8f4f 	dsb	sy
}
 81034c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81034ca:	f3bf 8f6f 	isb	sy
}
 81034ce:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81034d0:	7afb      	ldrb	r3, [r7, #11]
 81034d2:	2b01      	cmp	r3, #1
 81034d4:	d101      	bne.n	81034da <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81034d6:	bf30      	wfi
 81034d8:	e000      	b.n	81034dc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81034da:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81034dc:	4b10      	ldr	r3, [pc, #64]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034de:	691b      	ldr	r3, [r3, #16]
 81034e0:	4a0f      	ldr	r2, [pc, #60]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034e2:	f023 0304 	bic.w	r3, r3, #4
 81034e6:	6113      	str	r3, [r2, #16]
 81034e8:	e015      	b.n	8103516 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81034ea:	f7ff fdb1 	bl	8103050 <HAL_GetCurrentCPUID>
 81034ee:	4603      	mov	r3, r0
 81034f0:	2b03      	cmp	r3, #3
 81034f2:	d106      	bne.n	8103502 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81034f4:	4b09      	ldr	r3, [pc, #36]	; (810351c <HAL_PWREx_EnterSTOPMode+0xec>)
 81034f6:	691b      	ldr	r3, [r3, #16]
 81034f8:	4a08      	ldr	r2, [pc, #32]	; (810351c <HAL_PWREx_EnterSTOPMode+0xec>)
 81034fa:	f023 0304 	bic.w	r3, r3, #4
 81034fe:	6113      	str	r3, [r2, #16]
 8103500:	e009      	b.n	8103516 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103502:	4b06      	ldr	r3, [pc, #24]	; (810351c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103504:	695b      	ldr	r3, [r3, #20]
 8103506:	4a05      	ldr	r2, [pc, #20]	; (810351c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103508:	f023 0304 	bic.w	r3, r3, #4
 810350c:	6153      	str	r3, [r2, #20]
 810350e:	e002      	b.n	8103516 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103510:	bf00      	nop
 8103512:	e000      	b.n	8103516 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103514:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103516:	3710      	adds	r7, #16
 8103518:	46bd      	mov	sp, r7
 810351a:	bd80      	pop	{r7, pc}
 810351c:	58024800 	.word	0x58024800
 8103520:	e000ed00 	.word	0xe000ed00

08103524 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103524:	b580      	push	{r7, lr}
 8103526:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103528:	f7ff fd92 	bl	8103050 <HAL_GetCurrentCPUID>
 810352c:	4603      	mov	r3, r0
 810352e:	2b03      	cmp	r3, #3
 8103530:	d101      	bne.n	8103536 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103532:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103534:	e001      	b.n	810353a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103536:	bf40      	sev
    __WFE ();
 8103538:	bf20      	wfe
}
 810353a:	bf00      	nop
 810353c:	bd80      	pop	{r7, pc}
	...

08103540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103540:	b480      	push	{r7}
 8103542:	b089      	sub	sp, #36	; 0x24
 8103544:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103546:	4bb3      	ldr	r3, [pc, #716]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103548:	691b      	ldr	r3, [r3, #16]
 810354a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810354e:	2b18      	cmp	r3, #24
 8103550:	f200 8155 	bhi.w	81037fe <HAL_RCC_GetSysClockFreq+0x2be>
 8103554:	a201      	add	r2, pc, #4	; (adr r2, 810355c <HAL_RCC_GetSysClockFreq+0x1c>)
 8103556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810355a:	bf00      	nop
 810355c:	081035c1 	.word	0x081035c1
 8103560:	081037ff 	.word	0x081037ff
 8103564:	081037ff 	.word	0x081037ff
 8103568:	081037ff 	.word	0x081037ff
 810356c:	081037ff 	.word	0x081037ff
 8103570:	081037ff 	.word	0x081037ff
 8103574:	081037ff 	.word	0x081037ff
 8103578:	081037ff 	.word	0x081037ff
 810357c:	081035e7 	.word	0x081035e7
 8103580:	081037ff 	.word	0x081037ff
 8103584:	081037ff 	.word	0x081037ff
 8103588:	081037ff 	.word	0x081037ff
 810358c:	081037ff 	.word	0x081037ff
 8103590:	081037ff 	.word	0x081037ff
 8103594:	081037ff 	.word	0x081037ff
 8103598:	081037ff 	.word	0x081037ff
 810359c:	081035ed 	.word	0x081035ed
 81035a0:	081037ff 	.word	0x081037ff
 81035a4:	081037ff 	.word	0x081037ff
 81035a8:	081037ff 	.word	0x081037ff
 81035ac:	081037ff 	.word	0x081037ff
 81035b0:	081037ff 	.word	0x081037ff
 81035b4:	081037ff 	.word	0x081037ff
 81035b8:	081037ff 	.word	0x081037ff
 81035bc:	081035f3 	.word	0x081035f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81035c0:	4b94      	ldr	r3, [pc, #592]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035c2:	681b      	ldr	r3, [r3, #0]
 81035c4:	f003 0320 	and.w	r3, r3, #32
 81035c8:	2b00      	cmp	r3, #0
 81035ca:	d009      	beq.n	81035e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81035cc:	4b91      	ldr	r3, [pc, #580]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035ce:	681b      	ldr	r3, [r3, #0]
 81035d0:	08db      	lsrs	r3, r3, #3
 81035d2:	f003 0303 	and.w	r3, r3, #3
 81035d6:	4a90      	ldr	r2, [pc, #576]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81035d8:	fa22 f303 	lsr.w	r3, r2, r3
 81035dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81035de:	e111      	b.n	8103804 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81035e0:	4b8d      	ldr	r3, [pc, #564]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81035e2:	61bb      	str	r3, [r7, #24]
    break;
 81035e4:	e10e      	b.n	8103804 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81035e6:	4b8d      	ldr	r3, [pc, #564]	; (810381c <HAL_RCC_GetSysClockFreq+0x2dc>)
 81035e8:	61bb      	str	r3, [r7, #24]
    break;
 81035ea:	e10b      	b.n	8103804 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81035ec:	4b8c      	ldr	r3, [pc, #560]	; (8103820 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81035ee:	61bb      	str	r3, [r7, #24]
    break;
 81035f0:	e108      	b.n	8103804 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81035f2:	4b88      	ldr	r3, [pc, #544]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81035f6:	f003 0303 	and.w	r3, r3, #3
 81035fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81035fc:	4b85      	ldr	r3, [pc, #532]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103600:	091b      	lsrs	r3, r3, #4
 8103602:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103606:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103608:	4b82      	ldr	r3, [pc, #520]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810360c:	f003 0301 	and.w	r3, r3, #1
 8103610:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103612:	4b80      	ldr	r3, [pc, #512]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103616:	08db      	lsrs	r3, r3, #3
 8103618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810361c:	68fa      	ldr	r2, [r7, #12]
 810361e:	fb02 f303 	mul.w	r3, r2, r3
 8103622:	ee07 3a90 	vmov	s15, r3
 8103626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810362a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810362e:	693b      	ldr	r3, [r7, #16]
 8103630:	2b00      	cmp	r3, #0
 8103632:	f000 80e1 	beq.w	81037f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103636:	697b      	ldr	r3, [r7, #20]
 8103638:	2b02      	cmp	r3, #2
 810363a:	f000 8083 	beq.w	8103744 <HAL_RCC_GetSysClockFreq+0x204>
 810363e:	697b      	ldr	r3, [r7, #20]
 8103640:	2b02      	cmp	r3, #2
 8103642:	f200 80a1 	bhi.w	8103788 <HAL_RCC_GetSysClockFreq+0x248>
 8103646:	697b      	ldr	r3, [r7, #20]
 8103648:	2b00      	cmp	r3, #0
 810364a:	d003      	beq.n	8103654 <HAL_RCC_GetSysClockFreq+0x114>
 810364c:	697b      	ldr	r3, [r7, #20]
 810364e:	2b01      	cmp	r3, #1
 8103650:	d056      	beq.n	8103700 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103652:	e099      	b.n	8103788 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103654:	4b6f      	ldr	r3, [pc, #444]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103656:	681b      	ldr	r3, [r3, #0]
 8103658:	f003 0320 	and.w	r3, r3, #32
 810365c:	2b00      	cmp	r3, #0
 810365e:	d02d      	beq.n	81036bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103660:	4b6c      	ldr	r3, [pc, #432]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103662:	681b      	ldr	r3, [r3, #0]
 8103664:	08db      	lsrs	r3, r3, #3
 8103666:	f003 0303 	and.w	r3, r3, #3
 810366a:	4a6b      	ldr	r2, [pc, #428]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810366c:	fa22 f303 	lsr.w	r3, r2, r3
 8103670:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	ee07 3a90 	vmov	s15, r3
 8103678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810367c:	693b      	ldr	r3, [r7, #16]
 810367e:	ee07 3a90 	vmov	s15, r3
 8103682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810368a:	4b62      	ldr	r3, [pc, #392]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810368e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103692:	ee07 3a90 	vmov	s15, r3
 8103696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810369a:	ed97 6a02 	vldr	s12, [r7, #8]
 810369e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103824 <HAL_RCC_GetSysClockFreq+0x2e4>
 81036a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81036aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81036ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81036ba:	e087      	b.n	81037cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81036bc:	693b      	ldr	r3, [r7, #16]
 81036be:	ee07 3a90 	vmov	s15, r3
 81036c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103828 <HAL_RCC_GetSysClockFreq+0x2e8>
 81036ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81036ce:	4b51      	ldr	r3, [pc, #324]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81036d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81036d6:	ee07 3a90 	vmov	s15, r3
 81036da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81036de:	ed97 6a02 	vldr	s12, [r7, #8]
 81036e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103824 <HAL_RCC_GetSysClockFreq+0x2e4>
 81036e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81036ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81036f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81036fe:	e065      	b.n	81037cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103700:	693b      	ldr	r3, [r7, #16]
 8103702:	ee07 3a90 	vmov	s15, r3
 8103706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810370a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810382c <HAL_RCC_GetSysClockFreq+0x2ec>
 810370e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103712:	4b40      	ldr	r3, [pc, #256]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810371a:	ee07 3a90 	vmov	s15, r3
 810371e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103722:	ed97 6a02 	vldr	s12, [r7, #8]
 8103726:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103824 <HAL_RCC_GetSysClockFreq+0x2e4>
 810372a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810372e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810373a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810373e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103742:	e043      	b.n	81037cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103744:	693b      	ldr	r3, [r7, #16]
 8103746:	ee07 3a90 	vmov	s15, r3
 810374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810374e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103830 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103756:	4b2f      	ldr	r3, [pc, #188]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810375e:	ee07 3a90 	vmov	s15, r3
 8103762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103766:	ed97 6a02 	vldr	s12, [r7, #8]
 810376a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103824 <HAL_RCC_GetSysClockFreq+0x2e4>
 810376e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810377a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103786:	e021      	b.n	81037cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103788:	693b      	ldr	r3, [r7, #16]
 810378a:	ee07 3a90 	vmov	s15, r3
 810378e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103792:	eddf 6a26 	vldr	s13, [pc, #152]	; 810382c <HAL_RCC_GetSysClockFreq+0x2ec>
 8103796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810379a:	4b1e      	ldr	r3, [pc, #120]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810379e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037a2:	ee07 3a90 	vmov	s15, r3
 81037a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037aa:	ed97 6a02 	vldr	s12, [r7, #8]
 81037ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103824 <HAL_RCC_GetSysClockFreq+0x2e4>
 81037b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81037be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81037c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81037ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81037cc:	4b11      	ldr	r3, [pc, #68]	; (8103814 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037d0:	0a5b      	lsrs	r3, r3, #9
 81037d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81037d6:	3301      	adds	r3, #1
 81037d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81037da:	683b      	ldr	r3, [r7, #0]
 81037dc:	ee07 3a90 	vmov	s15, r3
 81037e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81037e4:	edd7 6a07 	vldr	s13, [r7, #28]
 81037e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81037ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81037f0:	ee17 3a90 	vmov	r3, s15
 81037f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81037f6:	e005      	b.n	8103804 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81037f8:	2300      	movs	r3, #0
 81037fa:	61bb      	str	r3, [r7, #24]
    break;
 81037fc:	e002      	b.n	8103804 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81037fe:	4b07      	ldr	r3, [pc, #28]	; (810381c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103800:	61bb      	str	r3, [r7, #24]
    break;
 8103802:	bf00      	nop
  }

  return sysclockfreq;
 8103804:	69bb      	ldr	r3, [r7, #24]
}
 8103806:	4618      	mov	r0, r3
 8103808:	3724      	adds	r7, #36	; 0x24
 810380a:	46bd      	mov	sp, r7
 810380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103810:	4770      	bx	lr
 8103812:	bf00      	nop
 8103814:	58024400 	.word	0x58024400
 8103818:	03d09000 	.word	0x03d09000
 810381c:	003d0900 	.word	0x003d0900
 8103820:	007a1200 	.word	0x007a1200
 8103824:	46000000 	.word	0x46000000
 8103828:	4c742400 	.word	0x4c742400
 810382c:	4a742400 	.word	0x4a742400
 8103830:	4af42400 	.word	0x4af42400

08103834 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103834:	b580      	push	{r7, lr}
 8103836:	b082      	sub	sp, #8
 8103838:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810383a:	f7ff fe81 	bl	8103540 <HAL_RCC_GetSysClockFreq>
 810383e:	4602      	mov	r2, r0
 8103840:	4b11      	ldr	r3, [pc, #68]	; (8103888 <HAL_RCC_GetHCLKFreq+0x54>)
 8103842:	699b      	ldr	r3, [r3, #24]
 8103844:	0a1b      	lsrs	r3, r3, #8
 8103846:	f003 030f 	and.w	r3, r3, #15
 810384a:	4910      	ldr	r1, [pc, #64]	; (810388c <HAL_RCC_GetHCLKFreq+0x58>)
 810384c:	5ccb      	ldrb	r3, [r1, r3]
 810384e:	f003 031f 	and.w	r3, r3, #31
 8103852:	fa22 f303 	lsr.w	r3, r2, r3
 8103856:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103858:	4b0b      	ldr	r3, [pc, #44]	; (8103888 <HAL_RCC_GetHCLKFreq+0x54>)
 810385a:	699b      	ldr	r3, [r3, #24]
 810385c:	f003 030f 	and.w	r3, r3, #15
 8103860:	4a0a      	ldr	r2, [pc, #40]	; (810388c <HAL_RCC_GetHCLKFreq+0x58>)
 8103862:	5cd3      	ldrb	r3, [r2, r3]
 8103864:	f003 031f 	and.w	r3, r3, #31
 8103868:	687a      	ldr	r2, [r7, #4]
 810386a:	fa22 f303 	lsr.w	r3, r2, r3
 810386e:	4a08      	ldr	r2, [pc, #32]	; (8103890 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103870:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103872:	4b07      	ldr	r3, [pc, #28]	; (8103890 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103874:	681b      	ldr	r3, [r3, #0]
 8103876:	4a07      	ldr	r2, [pc, #28]	; (8103894 <HAL_RCC_GetHCLKFreq+0x60>)
 8103878:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810387a:	4b05      	ldr	r3, [pc, #20]	; (8103890 <HAL_RCC_GetHCLKFreq+0x5c>)
 810387c:	681b      	ldr	r3, [r3, #0]
}
 810387e:	4618      	mov	r0, r3
 8103880:	3708      	adds	r7, #8
 8103882:	46bd      	mov	sp, r7
 8103884:	bd80      	pop	{r7, pc}
 8103886:	bf00      	nop
 8103888:	58024400 	.word	0x58024400
 810388c:	081098b4 	.word	0x081098b4
 8103890:	10000004 	.word	0x10000004
 8103894:	10000000 	.word	0x10000000

08103898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103898:	b580      	push	{r7, lr}
 810389a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810389c:	f7ff ffca 	bl	8103834 <HAL_RCC_GetHCLKFreq>
 81038a0:	4602      	mov	r2, r0
 81038a2:	4b06      	ldr	r3, [pc, #24]	; (81038bc <HAL_RCC_GetPCLK1Freq+0x24>)
 81038a4:	69db      	ldr	r3, [r3, #28]
 81038a6:	091b      	lsrs	r3, r3, #4
 81038a8:	f003 0307 	and.w	r3, r3, #7
 81038ac:	4904      	ldr	r1, [pc, #16]	; (81038c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 81038ae:	5ccb      	ldrb	r3, [r1, r3]
 81038b0:	f003 031f 	and.w	r3, r3, #31
 81038b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81038b8:	4618      	mov	r0, r3
 81038ba:	bd80      	pop	{r7, pc}
 81038bc:	58024400 	.word	0x58024400
 81038c0:	081098b4 	.word	0x081098b4

081038c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81038c4:	b580      	push	{r7, lr}
 81038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81038c8:	f7ff ffb4 	bl	8103834 <HAL_RCC_GetHCLKFreq>
 81038cc:	4602      	mov	r2, r0
 81038ce:	4b06      	ldr	r3, [pc, #24]	; (81038e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 81038d0:	69db      	ldr	r3, [r3, #28]
 81038d2:	0a1b      	lsrs	r3, r3, #8
 81038d4:	f003 0307 	and.w	r3, r3, #7
 81038d8:	4904      	ldr	r1, [pc, #16]	; (81038ec <HAL_RCC_GetPCLK2Freq+0x28>)
 81038da:	5ccb      	ldrb	r3, [r1, r3]
 81038dc:	f003 031f 	and.w	r3, r3, #31
 81038e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81038e4:	4618      	mov	r0, r3
 81038e6:	bd80      	pop	{r7, pc}
 81038e8:	58024400 	.word	0x58024400
 81038ec:	081098b4 	.word	0x081098b4

081038f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81038f0:	b580      	push	{r7, lr}
 81038f2:	b086      	sub	sp, #24
 81038f4:	af00      	add	r7, sp, #0
 81038f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81038f8:	2300      	movs	r3, #0
 81038fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81038fc:	2300      	movs	r3, #0
 81038fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	681b      	ldr	r3, [r3, #0]
 8103904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103908:	2b00      	cmp	r3, #0
 810390a:	d03f      	beq.n	810398c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103910:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103914:	d02a      	beq.n	810396c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103916:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810391a:	d824      	bhi.n	8103966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810391c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103920:	d018      	beq.n	8103954 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103926:	d81e      	bhi.n	8103966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103928:	2b00      	cmp	r3, #0
 810392a:	d003      	beq.n	8103934 <HAL_RCCEx_PeriphCLKConfig+0x44>
 810392c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103930:	d007      	beq.n	8103942 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103932:	e018      	b.n	8103966 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103934:	4ba3      	ldr	r3, [pc, #652]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103938:	4aa2      	ldr	r2, [pc, #648]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810393a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810393e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103940:	e015      	b.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	3304      	adds	r3, #4
 8103946:	2102      	movs	r1, #2
 8103948:	4618      	mov	r0, r3
 810394a:	f001 fff9 	bl	8105940 <RCCEx_PLL2_Config>
 810394e:	4603      	mov	r3, r0
 8103950:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103952:	e00c      	b.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	3324      	adds	r3, #36	; 0x24
 8103958:	2102      	movs	r1, #2
 810395a:	4618      	mov	r0, r3
 810395c:	f002 f8a2 	bl	8105aa4 <RCCEx_PLL3_Config>
 8103960:	4603      	mov	r3, r0
 8103962:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103964:	e003      	b.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103966:	2301      	movs	r3, #1
 8103968:	75fb      	strb	r3, [r7, #23]
      break;
 810396a:	e000      	b.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 810396c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810396e:	7dfb      	ldrb	r3, [r7, #23]
 8103970:	2b00      	cmp	r3, #0
 8103972:	d109      	bne.n	8103988 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103974:	4b93      	ldr	r3, [pc, #588]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103980:	4990      	ldr	r1, [pc, #576]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103982:	4313      	orrs	r3, r2
 8103984:	650b      	str	r3, [r1, #80]	; 0x50
 8103986:	e001      	b.n	810398c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103988:	7dfb      	ldrb	r3, [r7, #23]
 810398a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	681b      	ldr	r3, [r3, #0]
 8103990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103994:	2b00      	cmp	r3, #0
 8103996:	d03d      	beq.n	8103a14 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810399c:	2b04      	cmp	r3, #4
 810399e:	d826      	bhi.n	81039ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81039a0:	a201      	add	r2, pc, #4	; (adr r2, 81039a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81039a6:	bf00      	nop
 81039a8:	081039bd 	.word	0x081039bd
 81039ac:	081039cb 	.word	0x081039cb
 81039b0:	081039dd 	.word	0x081039dd
 81039b4:	081039f5 	.word	0x081039f5
 81039b8:	081039f5 	.word	0x081039f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039bc:	4b81      	ldr	r3, [pc, #516]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039c0:	4a80      	ldr	r2, [pc, #512]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81039c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81039c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81039c8:	e015      	b.n	81039f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	3304      	adds	r3, #4
 81039ce:	2100      	movs	r1, #0
 81039d0:	4618      	mov	r0, r3
 81039d2:	f001 ffb5 	bl	8105940 <RCCEx_PLL2_Config>
 81039d6:	4603      	mov	r3, r0
 81039d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81039da:	e00c      	b.n	81039f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	3324      	adds	r3, #36	; 0x24
 81039e0:	2100      	movs	r1, #0
 81039e2:	4618      	mov	r0, r3
 81039e4:	f002 f85e 	bl	8105aa4 <RCCEx_PLL3_Config>
 81039e8:	4603      	mov	r3, r0
 81039ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81039ec:	e003      	b.n	81039f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81039ee:	2301      	movs	r3, #1
 81039f0:	75fb      	strb	r3, [r7, #23]
      break;
 81039f2:	e000      	b.n	81039f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81039f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039f6:	7dfb      	ldrb	r3, [r7, #23]
 81039f8:	2b00      	cmp	r3, #0
 81039fa:	d109      	bne.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81039fc:	4b71      	ldr	r3, [pc, #452]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a00:	f023 0207 	bic.w	r2, r3, #7
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a08:	496e      	ldr	r1, [pc, #440]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a0a:	4313      	orrs	r3, r2
 8103a0c:	650b      	str	r3, [r1, #80]	; 0x50
 8103a0e:	e001      	b.n	8103a14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a10:	7dfb      	ldrb	r3, [r7, #23]
 8103a12:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103a14:	687b      	ldr	r3, [r7, #4]
 8103a16:	681b      	ldr	r3, [r3, #0]
 8103a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103a1c:	2b00      	cmp	r3, #0
 8103a1e:	d042      	beq.n	8103aa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a28:	d02b      	beq.n	8103a82 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a2e:	d825      	bhi.n	8103a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103a30:	2bc0      	cmp	r3, #192	; 0xc0
 8103a32:	d028      	beq.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103a34:	2bc0      	cmp	r3, #192	; 0xc0
 8103a36:	d821      	bhi.n	8103a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103a38:	2b80      	cmp	r3, #128	; 0x80
 8103a3a:	d016      	beq.n	8103a6a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103a3c:	2b80      	cmp	r3, #128	; 0x80
 8103a3e:	d81d      	bhi.n	8103a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d002      	beq.n	8103a4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103a44:	2b40      	cmp	r3, #64	; 0x40
 8103a46:	d007      	beq.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103a48:	e018      	b.n	8103a7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a4a:	4b5e      	ldr	r3, [pc, #376]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a4e:	4a5d      	ldr	r2, [pc, #372]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103a56:	e017      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	3304      	adds	r3, #4
 8103a5c:	2100      	movs	r1, #0
 8103a5e:	4618      	mov	r0, r3
 8103a60:	f001 ff6e 	bl	8105940 <RCCEx_PLL2_Config>
 8103a64:	4603      	mov	r3, r0
 8103a66:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103a68:	e00e      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	3324      	adds	r3, #36	; 0x24
 8103a6e:	2100      	movs	r1, #0
 8103a70:	4618      	mov	r0, r3
 8103a72:	f002 f817 	bl	8105aa4 <RCCEx_PLL3_Config>
 8103a76:	4603      	mov	r3, r0
 8103a78:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103a7a:	e005      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a7c:	2301      	movs	r3, #1
 8103a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8103a80:	e002      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103a82:	bf00      	nop
 8103a84:	e000      	b.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a88:	7dfb      	ldrb	r3, [r7, #23]
 8103a8a:	2b00      	cmp	r3, #0
 8103a8c:	d109      	bne.n	8103aa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103a8e:	4b4d      	ldr	r3, [pc, #308]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a92:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103a96:	687b      	ldr	r3, [r7, #4]
 8103a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a9a:	494a      	ldr	r1, [pc, #296]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103a9c:	4313      	orrs	r3, r2
 8103a9e:	650b      	str	r3, [r1, #80]	; 0x50
 8103aa0:	e001      	b.n	8103aa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103aa2:	7dfb      	ldrb	r3, [r7, #23]
 8103aa4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	681b      	ldr	r3, [r3, #0]
 8103aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103aae:	2b00      	cmp	r3, #0
 8103ab0:	d049      	beq.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103ab8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103abc:	d030      	beq.n	8103b20 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103abe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103ac2:	d82a      	bhi.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103ac4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103ac8:	d02c      	beq.n	8103b24 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103aca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103ace:	d824      	bhi.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103ad4:	d018      	beq.n	8103b08 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103ada:	d81e      	bhi.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103adc:	2b00      	cmp	r3, #0
 8103ade:	d003      	beq.n	8103ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103ae4:	d007      	beq.n	8103af6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103ae6:	e018      	b.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ae8:	4b36      	ldr	r3, [pc, #216]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103aec:	4a35      	ldr	r2, [pc, #212]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103af4:	e017      	b.n	8103b26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	3304      	adds	r3, #4
 8103afa:	2100      	movs	r1, #0
 8103afc:	4618      	mov	r0, r3
 8103afe:	f001 ff1f 	bl	8105940 <RCCEx_PLL2_Config>
 8103b02:	4603      	mov	r3, r0
 8103b04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103b06:	e00e      	b.n	8103b26 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103b08:	687b      	ldr	r3, [r7, #4]
 8103b0a:	3324      	adds	r3, #36	; 0x24
 8103b0c:	2100      	movs	r1, #0
 8103b0e:	4618      	mov	r0, r3
 8103b10:	f001 ffc8 	bl	8105aa4 <RCCEx_PLL3_Config>
 8103b14:	4603      	mov	r3, r0
 8103b16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103b18:	e005      	b.n	8103b26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103b1a:	2301      	movs	r3, #1
 8103b1c:	75fb      	strb	r3, [r7, #23]
      break;
 8103b1e:	e002      	b.n	8103b26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103b20:	bf00      	nop
 8103b22:	e000      	b.n	8103b26 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b26:	7dfb      	ldrb	r3, [r7, #23]
 8103b28:	2b00      	cmp	r3, #0
 8103b2a:	d10a      	bne.n	8103b42 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103b2c:	4b25      	ldr	r3, [pc, #148]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b30:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103b3a:	4922      	ldr	r1, [pc, #136]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b3c:	4313      	orrs	r3, r2
 8103b3e:	658b      	str	r3, [r1, #88]	; 0x58
 8103b40:	e001      	b.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b42:	7dfb      	ldrb	r3, [r7, #23]
 8103b44:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103b4e:	2b00      	cmp	r3, #0
 8103b50:	d04b      	beq.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103b52:	687b      	ldr	r3, [r7, #4]
 8103b54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103b5c:	d030      	beq.n	8103bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103b5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103b62:	d82a      	bhi.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103b64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103b68:	d02e      	beq.n	8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8103b6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103b6e:	d824      	bhi.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103b74:	d018      	beq.n	8103ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103b7a:	d81e      	bhi.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103b7c:	2b00      	cmp	r3, #0
 8103b7e:	d003      	beq.n	8103b88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103b84:	d007      	beq.n	8103b96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103b86:	e018      	b.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b88:	4b0e      	ldr	r3, [pc, #56]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b8c:	4a0d      	ldr	r2, [pc, #52]	; (8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103b94:	e019      	b.n	8103bca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	3304      	adds	r3, #4
 8103b9a:	2100      	movs	r1, #0
 8103b9c:	4618      	mov	r0, r3
 8103b9e:	f001 fecf 	bl	8105940 <RCCEx_PLL2_Config>
 8103ba2:	4603      	mov	r3, r0
 8103ba4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103ba6:	e010      	b.n	8103bca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	3324      	adds	r3, #36	; 0x24
 8103bac:	2100      	movs	r1, #0
 8103bae:	4618      	mov	r0, r3
 8103bb0:	f001 ff78 	bl	8105aa4 <RCCEx_PLL3_Config>
 8103bb4:	4603      	mov	r3, r0
 8103bb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103bb8:	e007      	b.n	8103bca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103bba:	2301      	movs	r3, #1
 8103bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8103bbe:	e004      	b.n	8103bca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8103bc0:	bf00      	nop
 8103bc2:	e002      	b.n	8103bca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8103bc4:	58024400 	.word	0x58024400
      break;
 8103bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bca:	7dfb      	ldrb	r3, [r7, #23]
 8103bcc:	2b00      	cmp	r3, #0
 8103bce:	d10a      	bne.n	8103be6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103bd0:	4b99      	ldr	r3, [pc, #612]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103bd4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103bde:	4996      	ldr	r1, [pc, #600]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103be0:	4313      	orrs	r3, r2
 8103be2:	658b      	str	r3, [r1, #88]	; 0x58
 8103be4:	e001      	b.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103be6:	7dfb      	ldrb	r3, [r7, #23]
 8103be8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103bea:	687b      	ldr	r3, [r7, #4]
 8103bec:	681b      	ldr	r3, [r3, #0]
 8103bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103bf2:	2b00      	cmp	r3, #0
 8103bf4:	d032      	beq.n	8103c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103bf6:	687b      	ldr	r3, [r7, #4]
 8103bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103bfa:	2b30      	cmp	r3, #48	; 0x30
 8103bfc:	d01c      	beq.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8103bfe:	2b30      	cmp	r3, #48	; 0x30
 8103c00:	d817      	bhi.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103c02:	2b20      	cmp	r3, #32
 8103c04:	d00c      	beq.n	8103c20 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8103c06:	2b20      	cmp	r3, #32
 8103c08:	d813      	bhi.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103c0a:	2b00      	cmp	r3, #0
 8103c0c:	d016      	beq.n	8103c3c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8103c0e:	2b10      	cmp	r3, #16
 8103c10:	d10f      	bne.n	8103c32 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c12:	4b89      	ldr	r3, [pc, #548]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c16:	4a88      	ldr	r2, [pc, #544]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103c1e:	e00e      	b.n	8103c3e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103c20:	687b      	ldr	r3, [r7, #4]
 8103c22:	3304      	adds	r3, #4
 8103c24:	2102      	movs	r1, #2
 8103c26:	4618      	mov	r0, r3
 8103c28:	f001 fe8a 	bl	8105940 <RCCEx_PLL2_Config>
 8103c2c:	4603      	mov	r3, r0
 8103c2e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103c30:	e005      	b.n	8103c3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103c32:	2301      	movs	r3, #1
 8103c34:	75fb      	strb	r3, [r7, #23]
      break;
 8103c36:	e002      	b.n	8103c3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103c38:	bf00      	nop
 8103c3a:	e000      	b.n	8103c3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c3e:	7dfb      	ldrb	r3, [r7, #23]
 8103c40:	2b00      	cmp	r3, #0
 8103c42:	d109      	bne.n	8103c58 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103c44:	4b7c      	ldr	r3, [pc, #496]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103c50:	4979      	ldr	r1, [pc, #484]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103c52:	4313      	orrs	r3, r2
 8103c54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103c56:	e001      	b.n	8103c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c58:	7dfb      	ldrb	r3, [r7, #23]
 8103c5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103c5c:	687b      	ldr	r3, [r7, #4]
 8103c5e:	681b      	ldr	r3, [r3, #0]
 8103c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103c64:	2b00      	cmp	r3, #0
 8103c66:	d047      	beq.n	8103cf8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103c70:	d030      	beq.n	8103cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8103c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103c76:	d82a      	bhi.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103c7c:	d02c      	beq.n	8103cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8103c7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103c82:	d824      	bhi.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103c88:	d018      	beq.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8103c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103c8e:	d81e      	bhi.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103c90:	2b00      	cmp	r3, #0
 8103c92:	d003      	beq.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8103c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103c98:	d007      	beq.n	8103caa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8103c9a:	e018      	b.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c9c:	4b66      	ldr	r3, [pc, #408]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ca0:	4a65      	ldr	r2, [pc, #404]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103ca8:	e017      	b.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	3304      	adds	r3, #4
 8103cae:	2100      	movs	r1, #0
 8103cb0:	4618      	mov	r0, r3
 8103cb2:	f001 fe45 	bl	8105940 <RCCEx_PLL2_Config>
 8103cb6:	4603      	mov	r3, r0
 8103cb8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103cba:	e00e      	b.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	3324      	adds	r3, #36	; 0x24
 8103cc0:	2100      	movs	r1, #0
 8103cc2:	4618      	mov	r0, r3
 8103cc4:	f001 feee 	bl	8105aa4 <RCCEx_PLL3_Config>
 8103cc8:	4603      	mov	r3, r0
 8103cca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103ccc:	e005      	b.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103cce:	2301      	movs	r3, #1
 8103cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8103cd2:	e002      	b.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103cd4:	bf00      	nop
 8103cd6:	e000      	b.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103cda:	7dfb      	ldrb	r3, [r7, #23]
 8103cdc:	2b00      	cmp	r3, #0
 8103cde:	d109      	bne.n	8103cf4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103ce0:	4b55      	ldr	r3, [pc, #340]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ce4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103cec:	4952      	ldr	r1, [pc, #328]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103cee:	4313      	orrs	r3, r2
 8103cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8103cf2:	e001      	b.n	8103cf8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cf4:	7dfb      	ldrb	r3, [r7, #23]
 8103cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	681b      	ldr	r3, [r3, #0]
 8103cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103d00:	2b00      	cmp	r3, #0
 8103d02:	d049      	beq.n	8103d98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103d0c:	d02e      	beq.n	8103d6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8103d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103d12:	d828      	bhi.n	8103d66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103d18:	d02a      	beq.n	8103d70 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8103d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103d1e:	d822      	bhi.n	8103d66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103d24:	d026      	beq.n	8103d74 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8103d26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103d2a:	d81c      	bhi.n	8103d66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d30:	d010      	beq.n	8103d54 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8103d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d36:	d816      	bhi.n	8103d66 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103d38:	2b00      	cmp	r3, #0
 8103d3a:	d01d      	beq.n	8103d78 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103d40:	d111      	bne.n	8103d66 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	3304      	adds	r3, #4
 8103d46:	2101      	movs	r1, #1
 8103d48:	4618      	mov	r0, r3
 8103d4a:	f001 fdf9 	bl	8105940 <RCCEx_PLL2_Config>
 8103d4e:	4603      	mov	r3, r0
 8103d50:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103d52:	e012      	b.n	8103d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	3324      	adds	r3, #36	; 0x24
 8103d58:	2101      	movs	r1, #1
 8103d5a:	4618      	mov	r0, r3
 8103d5c:	f001 fea2 	bl	8105aa4 <RCCEx_PLL3_Config>
 8103d60:	4603      	mov	r3, r0
 8103d62:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103d64:	e009      	b.n	8103d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103d66:	2301      	movs	r3, #1
 8103d68:	75fb      	strb	r3, [r7, #23]
      break;
 8103d6a:	e006      	b.n	8103d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103d6c:	bf00      	nop
 8103d6e:	e004      	b.n	8103d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103d70:	bf00      	nop
 8103d72:	e002      	b.n	8103d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103d74:	bf00      	nop
 8103d76:	e000      	b.n	8103d7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d7a:	7dfb      	ldrb	r3, [r7, #23]
 8103d7c:	2b00      	cmp	r3, #0
 8103d7e:	d109      	bne.n	8103d94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103d80:	4b2d      	ldr	r3, [pc, #180]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103d8c:	492a      	ldr	r1, [pc, #168]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103d8e:	4313      	orrs	r3, r2
 8103d90:	650b      	str	r3, [r1, #80]	; 0x50
 8103d92:	e001      	b.n	8103d98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d94:	7dfb      	ldrb	r3, [r7, #23]
 8103d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103da0:	2b00      	cmp	r3, #0
 8103da2:	d04d      	beq.n	8103e40 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103da4:	687b      	ldr	r3, [r7, #4]
 8103da6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103dae:	d02e      	beq.n	8103e0e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8103db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103db4:	d828      	bhi.n	8103e08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103dba:	d02a      	beq.n	8103e12 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8103dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103dc0:	d822      	bhi.n	8103e08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103dc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103dc6:	d026      	beq.n	8103e16 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8103dc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103dcc:	d81c      	bhi.n	8103e08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103dd2:	d010      	beq.n	8103df6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8103dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103dd8:	d816      	bhi.n	8103e08 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103dda:	2b00      	cmp	r3, #0
 8103ddc:	d01d      	beq.n	8103e1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8103dde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103de2:	d111      	bne.n	8103e08 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103de4:	687b      	ldr	r3, [r7, #4]
 8103de6:	3304      	adds	r3, #4
 8103de8:	2101      	movs	r1, #1
 8103dea:	4618      	mov	r0, r3
 8103dec:	f001 fda8 	bl	8105940 <RCCEx_PLL2_Config>
 8103df0:	4603      	mov	r3, r0
 8103df2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103df4:	e012      	b.n	8103e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103df6:	687b      	ldr	r3, [r7, #4]
 8103df8:	3324      	adds	r3, #36	; 0x24
 8103dfa:	2101      	movs	r1, #1
 8103dfc:	4618      	mov	r0, r3
 8103dfe:	f001 fe51 	bl	8105aa4 <RCCEx_PLL3_Config>
 8103e02:	4603      	mov	r3, r0
 8103e04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103e06:	e009      	b.n	8103e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103e08:	2301      	movs	r3, #1
 8103e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8103e0c:	e006      	b.n	8103e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103e0e:	bf00      	nop
 8103e10:	e004      	b.n	8103e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103e12:	bf00      	nop
 8103e14:	e002      	b.n	8103e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103e16:	bf00      	nop
 8103e18:	e000      	b.n	8103e1c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e1c:	7dfb      	ldrb	r3, [r7, #23]
 8103e1e:	2b00      	cmp	r3, #0
 8103e20:	d10c      	bne.n	8103e3c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103e22:	4b05      	ldr	r3, [pc, #20]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103e30:	4901      	ldr	r1, [pc, #4]	; (8103e38 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103e32:	4313      	orrs	r3, r2
 8103e34:	658b      	str	r3, [r1, #88]	; 0x58
 8103e36:	e003      	b.n	8103e40 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8103e38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e3c:	7dfb      	ldrb	r3, [r7, #23]
 8103e3e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	681b      	ldr	r3, [r3, #0]
 8103e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103e48:	2b00      	cmp	r3, #0
 8103e4a:	d02f      	beq.n	8103eac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e54:	d00e      	beq.n	8103e74 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8103e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e5a:	d814      	bhi.n	8103e86 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103e5c:	2b00      	cmp	r3, #0
 8103e5e:	d015      	beq.n	8103e8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8103e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103e64:	d10f      	bne.n	8103e86 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e66:	4bb0      	ldr	r3, [pc, #704]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e6a:	4aaf      	ldr	r2, [pc, #700]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103e72:	e00c      	b.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	3304      	adds	r3, #4
 8103e78:	2101      	movs	r1, #1
 8103e7a:	4618      	mov	r0, r3
 8103e7c:	f001 fd60 	bl	8105940 <RCCEx_PLL2_Config>
 8103e80:	4603      	mov	r3, r0
 8103e82:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103e84:	e003      	b.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e86:	2301      	movs	r3, #1
 8103e88:	75fb      	strb	r3, [r7, #23]
      break;
 8103e8a:	e000      	b.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e8e:	7dfb      	ldrb	r3, [r7, #23]
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	d109      	bne.n	8103ea8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103e94:	4ba4      	ldr	r3, [pc, #656]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103e98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103ea0:	49a1      	ldr	r1, [pc, #644]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ea2:	4313      	orrs	r3, r2
 8103ea4:	650b      	str	r3, [r1, #80]	; 0x50
 8103ea6:	e001      	b.n	8103eac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ea8:	7dfb      	ldrb	r3, [r7, #23]
 8103eaa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	681b      	ldr	r3, [r3, #0]
 8103eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103eb4:	2b00      	cmp	r3, #0
 8103eb6:	d032      	beq.n	8103f1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103eb8:	687b      	ldr	r3, [r7, #4]
 8103eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103ebc:	2b03      	cmp	r3, #3
 8103ebe:	d81b      	bhi.n	8103ef8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103ec0:	a201      	add	r2, pc, #4	; (adr r2, 8103ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8103ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ec6:	bf00      	nop
 8103ec8:	08103eff 	.word	0x08103eff
 8103ecc:	08103ed9 	.word	0x08103ed9
 8103ed0:	08103ee7 	.word	0x08103ee7
 8103ed4:	08103eff 	.word	0x08103eff
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ed8:	4b93      	ldr	r3, [pc, #588]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103edc:	4a92      	ldr	r2, [pc, #584]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103ee4:	e00c      	b.n	8103f00 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103ee6:	687b      	ldr	r3, [r7, #4]
 8103ee8:	3304      	adds	r3, #4
 8103eea:	2102      	movs	r1, #2
 8103eec:	4618      	mov	r0, r3
 8103eee:	f001 fd27 	bl	8105940 <RCCEx_PLL2_Config>
 8103ef2:	4603      	mov	r3, r0
 8103ef4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103ef6:	e003      	b.n	8103f00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103ef8:	2301      	movs	r3, #1
 8103efa:	75fb      	strb	r3, [r7, #23]
      break;
 8103efc:	e000      	b.n	8103f00 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f00:	7dfb      	ldrb	r3, [r7, #23]
 8103f02:	2b00      	cmp	r3, #0
 8103f04:	d109      	bne.n	8103f1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103f06:	4b88      	ldr	r3, [pc, #544]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103f0a:	f023 0203 	bic.w	r2, r3, #3
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f12:	4985      	ldr	r1, [pc, #532]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f14:	4313      	orrs	r3, r2
 8103f16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103f18:	e001      	b.n	8103f1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f1a:	7dfb      	ldrb	r3, [r7, #23]
 8103f1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103f1e:	687b      	ldr	r3, [r7, #4]
 8103f20:	681b      	ldr	r3, [r3, #0]
 8103f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103f26:	2b00      	cmp	r3, #0
 8103f28:	f000 8088 	beq.w	810403c <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103f2c:	4b7f      	ldr	r3, [pc, #508]	; (810412c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	4a7e      	ldr	r2, [pc, #504]	; (810412c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103f36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103f38:	f7fd fed2 	bl	8101ce0 <HAL_GetTick>
 8103f3c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103f3e:	e009      	b.n	8103f54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103f40:	f7fd fece 	bl	8101ce0 <HAL_GetTick>
 8103f44:	4602      	mov	r2, r0
 8103f46:	693b      	ldr	r3, [r7, #16]
 8103f48:	1ad3      	subs	r3, r2, r3
 8103f4a:	2b64      	cmp	r3, #100	; 0x64
 8103f4c:	d902      	bls.n	8103f54 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103f4e:	2303      	movs	r3, #3
 8103f50:	75fb      	strb	r3, [r7, #23]
        break;
 8103f52:	e005      	b.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103f54:	4b75      	ldr	r3, [pc, #468]	; (810412c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103f56:	681b      	ldr	r3, [r3, #0]
 8103f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103f5c:	2b00      	cmp	r3, #0
 8103f5e:	d0ef      	beq.n	8103f40 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103f60:	7dfb      	ldrb	r3, [r7, #23]
 8103f62:	2b00      	cmp	r3, #0
 8103f64:	d168      	bne.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103f66:	4b70      	ldr	r3, [pc, #448]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103f70:	4053      	eors	r3, r2
 8103f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103f76:	2b00      	cmp	r3, #0
 8103f78:	d013      	beq.n	8103fa2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103f7a:	4b6b      	ldr	r3, [pc, #428]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103f82:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103f84:	4b68      	ldr	r3, [pc, #416]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f88:	4a67      	ldr	r2, [pc, #412]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103f8e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103f90:	4b65      	ldr	r3, [pc, #404]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f94:	4a64      	ldr	r2, [pc, #400]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103f9a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103f9c:	4a62      	ldr	r2, [pc, #392]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103f9e:	68fb      	ldr	r3, [r7, #12]
 8103fa0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103fa2:	687b      	ldr	r3, [r7, #4]
 8103fa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103fac:	d115      	bne.n	8103fda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103fae:	f7fd fe97 	bl	8101ce0 <HAL_GetTick>
 8103fb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103fb4:	e00b      	b.n	8103fce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103fb6:	f7fd fe93 	bl	8101ce0 <HAL_GetTick>
 8103fba:	4602      	mov	r2, r0
 8103fbc:	693b      	ldr	r3, [r7, #16]
 8103fbe:	1ad3      	subs	r3, r2, r3
 8103fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8103fc4:	4293      	cmp	r3, r2
 8103fc6:	d902      	bls.n	8103fce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103fc8:	2303      	movs	r3, #3
 8103fca:	75fb      	strb	r3, [r7, #23]
            break;
 8103fcc:	e005      	b.n	8103fda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103fce:	4b56      	ldr	r3, [pc, #344]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103fd2:	f003 0302 	and.w	r3, r3, #2
 8103fd6:	2b00      	cmp	r3, #0
 8103fd8:	d0ed      	beq.n	8103fb6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8103fda:	7dfb      	ldrb	r3, [r7, #23]
 8103fdc:	2b00      	cmp	r3, #0
 8103fde:	d128      	bne.n	8104032 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103fe0:	687b      	ldr	r3, [r7, #4]
 8103fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103fee:	d10f      	bne.n	8104010 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103ff0:	4b4d      	ldr	r3, [pc, #308]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103ff2:	691b      	ldr	r3, [r3, #16]
 8103ff4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103ffe:	091b      	lsrs	r3, r3, #4
 8104000:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104004:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8104008:	4947      	ldr	r1, [pc, #284]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810400a:	4313      	orrs	r3, r2
 810400c:	610b      	str	r3, [r1, #16]
 810400e:	e005      	b.n	810401c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8104010:	4b45      	ldr	r3, [pc, #276]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104012:	691b      	ldr	r3, [r3, #16]
 8104014:	4a44      	ldr	r2, [pc, #272]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8104016:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810401a:	6113      	str	r3, [r2, #16]
 810401c:	4b42      	ldr	r3, [pc, #264]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810401e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104020:	687b      	ldr	r3, [r7, #4]
 8104022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810402a:	493f      	ldr	r1, [pc, #252]	; (8104128 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810402c:	4313      	orrs	r3, r2
 810402e:	670b      	str	r3, [r1, #112]	; 0x70
 8104030:	e004      	b.n	810403c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104032:	7dfb      	ldrb	r3, [r7, #23]
 8104034:	75bb      	strb	r3, [r7, #22]
 8104036:	e001      	b.n	810403c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104038:	7dfb      	ldrb	r3, [r7, #23]
 810403a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	681b      	ldr	r3, [r3, #0]
 8104040:	f003 0301 	and.w	r3, r3, #1
 8104044:	2b00      	cmp	r3, #0
 8104046:	f000 8083 	beq.w	8104150 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810404e:	2b28      	cmp	r3, #40	; 0x28
 8104050:	d866      	bhi.n	8104120 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8104052:	a201      	add	r2, pc, #4	; (adr r2, 8104058 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8104054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104058:	08104131 	.word	0x08104131
 810405c:	08104121 	.word	0x08104121
 8104060:	08104121 	.word	0x08104121
 8104064:	08104121 	.word	0x08104121
 8104068:	08104121 	.word	0x08104121
 810406c:	08104121 	.word	0x08104121
 8104070:	08104121 	.word	0x08104121
 8104074:	08104121 	.word	0x08104121
 8104078:	081040fd 	.word	0x081040fd
 810407c:	08104121 	.word	0x08104121
 8104080:	08104121 	.word	0x08104121
 8104084:	08104121 	.word	0x08104121
 8104088:	08104121 	.word	0x08104121
 810408c:	08104121 	.word	0x08104121
 8104090:	08104121 	.word	0x08104121
 8104094:	08104121 	.word	0x08104121
 8104098:	0810410f 	.word	0x0810410f
 810409c:	08104121 	.word	0x08104121
 81040a0:	08104121 	.word	0x08104121
 81040a4:	08104121 	.word	0x08104121
 81040a8:	08104121 	.word	0x08104121
 81040ac:	08104121 	.word	0x08104121
 81040b0:	08104121 	.word	0x08104121
 81040b4:	08104121 	.word	0x08104121
 81040b8:	08104131 	.word	0x08104131
 81040bc:	08104121 	.word	0x08104121
 81040c0:	08104121 	.word	0x08104121
 81040c4:	08104121 	.word	0x08104121
 81040c8:	08104121 	.word	0x08104121
 81040cc:	08104121 	.word	0x08104121
 81040d0:	08104121 	.word	0x08104121
 81040d4:	08104121 	.word	0x08104121
 81040d8:	08104131 	.word	0x08104131
 81040dc:	08104121 	.word	0x08104121
 81040e0:	08104121 	.word	0x08104121
 81040e4:	08104121 	.word	0x08104121
 81040e8:	08104121 	.word	0x08104121
 81040ec:	08104121 	.word	0x08104121
 81040f0:	08104121 	.word	0x08104121
 81040f4:	08104121 	.word	0x08104121
 81040f8:	08104131 	.word	0x08104131
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	3304      	adds	r3, #4
 8104100:	2101      	movs	r1, #1
 8104102:	4618      	mov	r0, r3
 8104104:	f001 fc1c 	bl	8105940 <RCCEx_PLL2_Config>
 8104108:	4603      	mov	r3, r0
 810410a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810410c:	e011      	b.n	8104132 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810410e:	687b      	ldr	r3, [r7, #4]
 8104110:	3324      	adds	r3, #36	; 0x24
 8104112:	2101      	movs	r1, #1
 8104114:	4618      	mov	r0, r3
 8104116:	f001 fcc5 	bl	8105aa4 <RCCEx_PLL3_Config>
 810411a:	4603      	mov	r3, r0
 810411c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810411e:	e008      	b.n	8104132 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104120:	2301      	movs	r3, #1
 8104122:	75fb      	strb	r3, [r7, #23]
      break;
 8104124:	e005      	b.n	8104132 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8104126:	bf00      	nop
 8104128:	58024400 	.word	0x58024400
 810412c:	58024800 	.word	0x58024800
      break;
 8104130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104132:	7dfb      	ldrb	r3, [r7, #23]
 8104134:	2b00      	cmp	r3, #0
 8104136:	d109      	bne.n	810414c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104138:	4b96      	ldr	r3, [pc, #600]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810413a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810413c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104144:	4993      	ldr	r1, [pc, #588]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104146:	4313      	orrs	r3, r2
 8104148:	654b      	str	r3, [r1, #84]	; 0x54
 810414a:	e001      	b.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810414c:	7dfb      	ldrb	r3, [r7, #23]
 810414e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	f003 0302 	and.w	r3, r3, #2
 8104158:	2b00      	cmp	r3, #0
 810415a:	d038      	beq.n	81041ce <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810415c:	687b      	ldr	r3, [r7, #4]
 810415e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104160:	2b05      	cmp	r3, #5
 8104162:	d821      	bhi.n	81041a8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8104164:	a201      	add	r2, pc, #4	; (adr r2, 810416c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8104166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810416a:	bf00      	nop
 810416c:	081041af 	.word	0x081041af
 8104170:	08104185 	.word	0x08104185
 8104174:	08104197 	.word	0x08104197
 8104178:	081041af 	.word	0x081041af
 810417c:	081041af 	.word	0x081041af
 8104180:	081041af 	.word	0x081041af
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104184:	687b      	ldr	r3, [r7, #4]
 8104186:	3304      	adds	r3, #4
 8104188:	2101      	movs	r1, #1
 810418a:	4618      	mov	r0, r3
 810418c:	f001 fbd8 	bl	8105940 <RCCEx_PLL2_Config>
 8104190:	4603      	mov	r3, r0
 8104192:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104194:	e00c      	b.n	81041b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	3324      	adds	r3, #36	; 0x24
 810419a:	2101      	movs	r1, #1
 810419c:	4618      	mov	r0, r3
 810419e:	f001 fc81 	bl	8105aa4 <RCCEx_PLL3_Config>
 81041a2:	4603      	mov	r3, r0
 81041a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81041a6:	e003      	b.n	81041b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81041a8:	2301      	movs	r3, #1
 81041aa:	75fb      	strb	r3, [r7, #23]
      break;
 81041ac:	e000      	b.n	81041b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 81041ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81041b0:	7dfb      	ldrb	r3, [r7, #23]
 81041b2:	2b00      	cmp	r3, #0
 81041b4:	d109      	bne.n	81041ca <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81041b6:	4b77      	ldr	r3, [pc, #476]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81041ba:	f023 0207 	bic.w	r2, r3, #7
 81041be:	687b      	ldr	r3, [r7, #4]
 81041c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81041c2:	4974      	ldr	r1, [pc, #464]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81041c4:	4313      	orrs	r3, r2
 81041c6:	654b      	str	r3, [r1, #84]	; 0x54
 81041c8:	e001      	b.n	81041ce <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041ca:	7dfb      	ldrb	r3, [r7, #23]
 81041cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81041ce:	687b      	ldr	r3, [r7, #4]
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	f003 0304 	and.w	r3, r3, #4
 81041d6:	2b00      	cmp	r3, #0
 81041d8:	d03a      	beq.n	8104250 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81041e0:	2b05      	cmp	r3, #5
 81041e2:	d821      	bhi.n	8104228 <HAL_RCCEx_PeriphCLKConfig+0x938>
 81041e4:	a201      	add	r2, pc, #4	; (adr r2, 81041ec <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 81041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041ea:	bf00      	nop
 81041ec:	0810422f 	.word	0x0810422f
 81041f0:	08104205 	.word	0x08104205
 81041f4:	08104217 	.word	0x08104217
 81041f8:	0810422f 	.word	0x0810422f
 81041fc:	0810422f 	.word	0x0810422f
 8104200:	0810422f 	.word	0x0810422f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	3304      	adds	r3, #4
 8104208:	2101      	movs	r1, #1
 810420a:	4618      	mov	r0, r3
 810420c:	f001 fb98 	bl	8105940 <RCCEx_PLL2_Config>
 8104210:	4603      	mov	r3, r0
 8104212:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104214:	e00c      	b.n	8104230 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	3324      	adds	r3, #36	; 0x24
 810421a:	2101      	movs	r1, #1
 810421c:	4618      	mov	r0, r3
 810421e:	f001 fc41 	bl	8105aa4 <RCCEx_PLL3_Config>
 8104222:	4603      	mov	r3, r0
 8104224:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104226:	e003      	b.n	8104230 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104228:	2301      	movs	r3, #1
 810422a:	75fb      	strb	r3, [r7, #23]
      break;
 810422c:	e000      	b.n	8104230 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 810422e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104230:	7dfb      	ldrb	r3, [r7, #23]
 8104232:	2b00      	cmp	r3, #0
 8104234:	d10a      	bne.n	810424c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104236:	4b57      	ldr	r3, [pc, #348]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810423a:	f023 0207 	bic.w	r2, r3, #7
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104244:	4953      	ldr	r1, [pc, #332]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104246:	4313      	orrs	r3, r2
 8104248:	658b      	str	r3, [r1, #88]	; 0x58
 810424a:	e001      	b.n	8104250 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810424c:	7dfb      	ldrb	r3, [r7, #23]
 810424e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	681b      	ldr	r3, [r3, #0]
 8104254:	f003 0320 	and.w	r3, r3, #32
 8104258:	2b00      	cmp	r3, #0
 810425a:	d04b      	beq.n	81042f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104266:	d02e      	beq.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810426c:	d828      	bhi.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810426e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104272:	d02a      	beq.n	81042ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8104274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104278:	d822      	bhi.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 810427a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810427e:	d026      	beq.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104280:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104284:	d81c      	bhi.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810428a:	d010      	beq.n	81042ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
 810428c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104290:	d816      	bhi.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8104292:	2b00      	cmp	r3, #0
 8104294:	d01d      	beq.n	81042d2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8104296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810429a:	d111      	bne.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810429c:	687b      	ldr	r3, [r7, #4]
 810429e:	3304      	adds	r3, #4
 81042a0:	2100      	movs	r1, #0
 81042a2:	4618      	mov	r0, r3
 81042a4:	f001 fb4c 	bl	8105940 <RCCEx_PLL2_Config>
 81042a8:	4603      	mov	r3, r0
 81042aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81042ac:	e012      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81042ae:	687b      	ldr	r3, [r7, #4]
 81042b0:	3324      	adds	r3, #36	; 0x24
 81042b2:	2102      	movs	r1, #2
 81042b4:	4618      	mov	r0, r3
 81042b6:	f001 fbf5 	bl	8105aa4 <RCCEx_PLL3_Config>
 81042ba:	4603      	mov	r3, r0
 81042bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81042be:	e009      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81042c0:	2301      	movs	r3, #1
 81042c2:	75fb      	strb	r3, [r7, #23]
      break;
 81042c4:	e006      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81042c6:	bf00      	nop
 81042c8:	e004      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81042ca:	bf00      	nop
 81042cc:	e002      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81042ce:	bf00      	nop
 81042d0:	e000      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 81042d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81042d4:	7dfb      	ldrb	r3, [r7, #23]
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d10a      	bne.n	81042f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81042da:	4b2e      	ldr	r3, [pc, #184]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81042dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81042e8:	492a      	ldr	r1, [pc, #168]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81042ea:	4313      	orrs	r3, r2
 81042ec:	654b      	str	r3, [r1, #84]	; 0x54
 81042ee:	e001      	b.n	81042f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042f0:	7dfb      	ldrb	r3, [r7, #23]
 81042f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81042fc:	2b00      	cmp	r3, #0
 81042fe:	d04d      	beq.n	810439c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104306:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810430a:	d02e      	beq.n	810436a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810430c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104310:	d828      	bhi.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104316:	d02a      	beq.n	810436e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8104318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810431c:	d822      	bhi.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810431e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104322:	d026      	beq.n	8104372 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104328:	d81c      	bhi.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810432a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810432e:	d010      	beq.n	8104352 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8104330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104334:	d816      	bhi.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104336:	2b00      	cmp	r3, #0
 8104338:	d01d      	beq.n	8104376 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810433a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810433e:	d111      	bne.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	3304      	adds	r3, #4
 8104344:	2100      	movs	r1, #0
 8104346:	4618      	mov	r0, r3
 8104348:	f001 fafa 	bl	8105940 <RCCEx_PLL2_Config>
 810434c:	4603      	mov	r3, r0
 810434e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104350:	e012      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	3324      	adds	r3, #36	; 0x24
 8104356:	2102      	movs	r1, #2
 8104358:	4618      	mov	r0, r3
 810435a:	f001 fba3 	bl	8105aa4 <RCCEx_PLL3_Config>
 810435e:	4603      	mov	r3, r0
 8104360:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104362:	e009      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104364:	2301      	movs	r3, #1
 8104366:	75fb      	strb	r3, [r7, #23]
      break;
 8104368:	e006      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810436a:	bf00      	nop
 810436c:	e004      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 810436e:	bf00      	nop
 8104370:	e002      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104372:	bf00      	nop
 8104374:	e000      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8104376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104378:	7dfb      	ldrb	r3, [r7, #23]
 810437a:	2b00      	cmp	r3, #0
 810437c:	d10c      	bne.n	8104398 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810437e:	4b05      	ldr	r3, [pc, #20]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104382:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810438c:	4901      	ldr	r1, [pc, #4]	; (8104394 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810438e:	4313      	orrs	r3, r2
 8104390:	658b      	str	r3, [r1, #88]	; 0x58
 8104392:	e003      	b.n	810439c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8104394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104398:	7dfb      	ldrb	r3, [r7, #23]
 810439a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	681b      	ldr	r3, [r3, #0]
 81043a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81043a4:	2b00      	cmp	r3, #0
 81043a6:	d04b      	beq.n	8104440 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81043ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81043b2:	d02e      	beq.n	8104412 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81043b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81043b8:	d828      	bhi.n	810440c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81043ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81043be:	d02a      	beq.n	8104416 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81043c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81043c4:	d822      	bhi.n	810440c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81043c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81043ca:	d026      	beq.n	810441a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 81043cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81043d0:	d81c      	bhi.n	810440c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81043d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81043d6:	d010      	beq.n	81043fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 81043d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81043dc:	d816      	bhi.n	810440c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 81043de:	2b00      	cmp	r3, #0
 81043e0:	d01d      	beq.n	810441e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 81043e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81043e6:	d111      	bne.n	810440c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81043e8:	687b      	ldr	r3, [r7, #4]
 81043ea:	3304      	adds	r3, #4
 81043ec:	2100      	movs	r1, #0
 81043ee:	4618      	mov	r0, r3
 81043f0:	f001 faa6 	bl	8105940 <RCCEx_PLL2_Config>
 81043f4:	4603      	mov	r3, r0
 81043f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81043f8:	e012      	b.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81043fa:	687b      	ldr	r3, [r7, #4]
 81043fc:	3324      	adds	r3, #36	; 0x24
 81043fe:	2102      	movs	r1, #2
 8104400:	4618      	mov	r0, r3
 8104402:	f001 fb4f 	bl	8105aa4 <RCCEx_PLL3_Config>
 8104406:	4603      	mov	r3, r0
 8104408:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810440a:	e009      	b.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810440c:	2301      	movs	r3, #1
 810440e:	75fb      	strb	r3, [r7, #23]
      break;
 8104410:	e006      	b.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104412:	bf00      	nop
 8104414:	e004      	b.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104416:	bf00      	nop
 8104418:	e002      	b.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810441a:	bf00      	nop
 810441c:	e000      	b.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810441e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104420:	7dfb      	ldrb	r3, [r7, #23]
 8104422:	2b00      	cmp	r3, #0
 8104424:	d10a      	bne.n	810443c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104426:	4b9d      	ldr	r3, [pc, #628]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810442a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104434:	4999      	ldr	r1, [pc, #612]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104436:	4313      	orrs	r3, r2
 8104438:	658b      	str	r3, [r1, #88]	; 0x58
 810443a:	e001      	b.n	8104440 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810443c:	7dfb      	ldrb	r3, [r7, #23]
 810443e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104440:	687b      	ldr	r3, [r7, #4]
 8104442:	681b      	ldr	r3, [r3, #0]
 8104444:	f003 0308 	and.w	r3, r3, #8
 8104448:	2b00      	cmp	r3, #0
 810444a:	d01a      	beq.n	8104482 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104456:	d10a      	bne.n	810446e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	3324      	adds	r3, #36	; 0x24
 810445c:	2102      	movs	r1, #2
 810445e:	4618      	mov	r0, r3
 8104460:	f001 fb20 	bl	8105aa4 <RCCEx_PLL3_Config>
 8104464:	4603      	mov	r3, r0
 8104466:	2b00      	cmp	r3, #0
 8104468:	d001      	beq.n	810446e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 810446a:	2301      	movs	r3, #1
 810446c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810446e:	4b8b      	ldr	r3, [pc, #556]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104472:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810447c:	4987      	ldr	r1, [pc, #540]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810447e:	4313      	orrs	r3, r2
 8104480:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104482:	687b      	ldr	r3, [r7, #4]
 8104484:	681b      	ldr	r3, [r3, #0]
 8104486:	f003 0310 	and.w	r3, r3, #16
 810448a:	2b00      	cmp	r3, #0
 810448c:	d01a      	beq.n	81044c4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104498:	d10a      	bne.n	81044b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810449a:	687b      	ldr	r3, [r7, #4]
 810449c:	3324      	adds	r3, #36	; 0x24
 810449e:	2102      	movs	r1, #2
 81044a0:	4618      	mov	r0, r3
 81044a2:	f001 faff 	bl	8105aa4 <RCCEx_PLL3_Config>
 81044a6:	4603      	mov	r3, r0
 81044a8:	2b00      	cmp	r3, #0
 81044aa:	d001      	beq.n	81044b0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 81044ac:	2301      	movs	r3, #1
 81044ae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81044b0:	4b7a      	ldr	r3, [pc, #488]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81044b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81044be:	4977      	ldr	r1, [pc, #476]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81044c0:	4313      	orrs	r3, r2
 81044c2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	681b      	ldr	r3, [r3, #0]
 81044c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81044cc:	2b00      	cmp	r3, #0
 81044ce:	d034      	beq.n	810453a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81044d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81044da:	d01d      	beq.n	8104518 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 81044dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81044e0:	d817      	bhi.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 81044e2:	2b00      	cmp	r3, #0
 81044e4:	d003      	beq.n	81044ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 81044e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81044ea:	d009      	beq.n	8104500 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 81044ec:	e011      	b.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	3304      	adds	r3, #4
 81044f2:	2100      	movs	r1, #0
 81044f4:	4618      	mov	r0, r3
 81044f6:	f001 fa23 	bl	8105940 <RCCEx_PLL2_Config>
 81044fa:	4603      	mov	r3, r0
 81044fc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81044fe:	e00c      	b.n	810451a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	3324      	adds	r3, #36	; 0x24
 8104504:	2102      	movs	r1, #2
 8104506:	4618      	mov	r0, r3
 8104508:	f001 facc 	bl	8105aa4 <RCCEx_PLL3_Config>
 810450c:	4603      	mov	r3, r0
 810450e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104510:	e003      	b.n	810451a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104512:	2301      	movs	r3, #1
 8104514:	75fb      	strb	r3, [r7, #23]
      break;
 8104516:	e000      	b.n	810451a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8104518:	bf00      	nop
    }

    if(ret == HAL_OK)
 810451a:	7dfb      	ldrb	r3, [r7, #23]
 810451c:	2b00      	cmp	r3, #0
 810451e:	d10a      	bne.n	8104536 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104520:	4b5e      	ldr	r3, [pc, #376]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810452e:	495b      	ldr	r1, [pc, #364]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104530:	4313      	orrs	r3, r2
 8104532:	658b      	str	r3, [r1, #88]	; 0x58
 8104534:	e001      	b.n	810453a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104536:	7dfb      	ldrb	r3, [r7, #23]
 8104538:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104542:	2b00      	cmp	r3, #0
 8104544:	d033      	beq.n	81045ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810454c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104550:	d01c      	beq.n	810458c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8104552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104556:	d816      	bhi.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8104558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810455c:	d003      	beq.n	8104566 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 810455e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104562:	d007      	beq.n	8104574 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8104564:	e00f      	b.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104566:	4b4d      	ldr	r3, [pc, #308]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810456a:	4a4c      	ldr	r2, [pc, #304]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810456c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8104572:	e00c      	b.n	810458e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	3324      	adds	r3, #36	; 0x24
 8104578:	2101      	movs	r1, #1
 810457a:	4618      	mov	r0, r3
 810457c:	f001 fa92 	bl	8105aa4 <RCCEx_PLL3_Config>
 8104580:	4603      	mov	r3, r0
 8104582:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8104584:	e003      	b.n	810458e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104586:	2301      	movs	r3, #1
 8104588:	75fb      	strb	r3, [r7, #23]
      break;
 810458a:	e000      	b.n	810458e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 810458c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810458e:	7dfb      	ldrb	r3, [r7, #23]
 8104590:	2b00      	cmp	r3, #0
 8104592:	d10a      	bne.n	81045aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104594:	4b41      	ldr	r3, [pc, #260]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810459c:	687b      	ldr	r3, [r7, #4]
 810459e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81045a2:	493e      	ldr	r1, [pc, #248]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045a4:	4313      	orrs	r3, r2
 81045a6:	654b      	str	r3, [r1, #84]	; 0x54
 81045a8:	e001      	b.n	81045ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045aa:	7dfb      	ldrb	r3, [r7, #23]
 81045ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	681b      	ldr	r3, [r3, #0]
 81045b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81045b6:	2b00      	cmp	r3, #0
 81045b8:	d029      	beq.n	810460e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81045be:	2b00      	cmp	r3, #0
 81045c0:	d003      	beq.n	81045ca <HAL_RCCEx_PeriphCLKConfig+0xcda>
 81045c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81045c6:	d007      	beq.n	81045d8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 81045c8:	e00f      	b.n	81045ea <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81045ca:	4b34      	ldr	r3, [pc, #208]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045ce:	4a33      	ldr	r2, [pc, #204]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81045d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81045d6:	e00b      	b.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	3304      	adds	r3, #4
 81045dc:	2102      	movs	r1, #2
 81045de:	4618      	mov	r0, r3
 81045e0:	f001 f9ae 	bl	8105940 <RCCEx_PLL2_Config>
 81045e4:	4603      	mov	r3, r0
 81045e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81045e8:	e002      	b.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 81045ea:	2301      	movs	r3, #1
 81045ec:	75fb      	strb	r3, [r7, #23]
      break;
 81045ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 81045f0:	7dfb      	ldrb	r3, [r7, #23]
 81045f2:	2b00      	cmp	r3, #0
 81045f4:	d109      	bne.n	810460a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81045f6:	4b29      	ldr	r3, [pc, #164]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81045fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104602:	4926      	ldr	r1, [pc, #152]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104604:	4313      	orrs	r3, r2
 8104606:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104608:	e001      	b.n	810460e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810460a:	7dfb      	ldrb	r3, [r7, #23]
 810460c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	681b      	ldr	r3, [r3, #0]
 8104612:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104616:	2b00      	cmp	r3, #0
 8104618:	d00a      	beq.n	8104630 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	3324      	adds	r3, #36	; 0x24
 810461e:	2102      	movs	r1, #2
 8104620:	4618      	mov	r0, r3
 8104622:	f001 fa3f 	bl	8105aa4 <RCCEx_PLL3_Config>
 8104626:	4603      	mov	r3, r0
 8104628:	2b00      	cmp	r3, #0
 810462a:	d001      	beq.n	8104630 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 810462c:	2301      	movs	r3, #1
 810462e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104638:	2b00      	cmp	r3, #0
 810463a:	d033      	beq.n	81046a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104644:	d017      	beq.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810464a:	d811      	bhi.n	8104670 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 810464c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104650:	d013      	beq.n	810467a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104656:	d80b      	bhi.n	8104670 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8104658:	2b00      	cmp	r3, #0
 810465a:	d010      	beq.n	810467e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 810465c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104660:	d106      	bne.n	8104670 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104662:	4b0e      	ldr	r3, [pc, #56]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104666:	4a0d      	ldr	r2, [pc, #52]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810466c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810466e:	e007      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104670:	2301      	movs	r3, #1
 8104672:	75fb      	strb	r3, [r7, #23]
      break;
 8104674:	e004      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8104676:	bf00      	nop
 8104678:	e002      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810467a:	bf00      	nop
 810467c:	e000      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 810467e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104680:	7dfb      	ldrb	r3, [r7, #23]
 8104682:	2b00      	cmp	r3, #0
 8104684:	d10c      	bne.n	81046a0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104686:	4b05      	ldr	r3, [pc, #20]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810468a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104692:	4902      	ldr	r1, [pc, #8]	; (810469c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104694:	4313      	orrs	r3, r2
 8104696:	654b      	str	r3, [r1, #84]	; 0x54
 8104698:	e004      	b.n	81046a4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 810469a:	bf00      	nop
 810469c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046a0:	7dfb      	ldrb	r3, [r7, #23]
 81046a2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81046ac:	2b00      	cmp	r3, #0
 81046ae:	d008      	beq.n	81046c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81046b0:	4b31      	ldr	r3, [pc, #196]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81046b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81046b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81046bc:	492e      	ldr	r1, [pc, #184]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81046be:	4313      	orrs	r3, r2
 81046c0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81046ca:	2b00      	cmp	r3, #0
 81046cc:	d009      	beq.n	81046e2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81046ce:	4b2a      	ldr	r3, [pc, #168]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81046d0:	691b      	ldr	r3, [r3, #16]
 81046d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81046dc:	4926      	ldr	r1, [pc, #152]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81046de:	4313      	orrs	r3, r2
 81046e0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	681b      	ldr	r3, [r3, #0]
 81046e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81046ea:	2b00      	cmp	r3, #0
 81046ec:	d008      	beq.n	8104700 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81046ee:	4b22      	ldr	r3, [pc, #136]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81046f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81046f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81046fa:	491f      	ldr	r1, [pc, #124]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81046fc:	4313      	orrs	r3, r2
 81046fe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104700:	687b      	ldr	r3, [r7, #4]
 8104702:	681b      	ldr	r3, [r3, #0]
 8104704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104708:	2b00      	cmp	r3, #0
 810470a:	d00d      	beq.n	8104728 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810470c:	4b1a      	ldr	r3, [pc, #104]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810470e:	691b      	ldr	r3, [r3, #16]
 8104710:	4a19      	ldr	r2, [pc, #100]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104716:	6113      	str	r3, [r2, #16]
 8104718:	4b17      	ldr	r3, [pc, #92]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810471a:	691a      	ldr	r2, [r3, #16]
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104722:	4915      	ldr	r1, [pc, #84]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104724:	4313      	orrs	r3, r2
 8104726:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104728:	687b      	ldr	r3, [r7, #4]
 810472a:	681b      	ldr	r3, [r3, #0]
 810472c:	2b00      	cmp	r3, #0
 810472e:	da08      	bge.n	8104742 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104730:	4b11      	ldr	r3, [pc, #68]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104734:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810473c:	490e      	ldr	r1, [pc, #56]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810473e:	4313      	orrs	r3, r2
 8104740:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810474a:	2b00      	cmp	r3, #0
 810474c:	d009      	beq.n	8104762 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810474e:	4b0a      	ldr	r3, [pc, #40]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810475c:	4906      	ldr	r1, [pc, #24]	; (8104778 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810475e:	4313      	orrs	r3, r2
 8104760:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104762:	7dbb      	ldrb	r3, [r7, #22]
 8104764:	2b00      	cmp	r3, #0
 8104766:	d101      	bne.n	810476c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8104768:	2300      	movs	r3, #0
 810476a:	e000      	b.n	810476e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 810476c:	2301      	movs	r3, #1
}
 810476e:	4618      	mov	r0, r3
 8104770:	3718      	adds	r7, #24
 8104772:	46bd      	mov	sp, r7
 8104774:	bd80      	pop	{r7, pc}
 8104776:	bf00      	nop
 8104778:	58024400 	.word	0x58024400

0810477c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 810477c:	b580      	push	{r7, lr}
 810477e:	b090      	sub	sp, #64	; 0x40
 8104780:	af00      	add	r7, sp, #0
 8104782:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810478a:	f040 8095 	bne.w	81048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 810478e:	4b97      	ldr	r3, [pc, #604]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104792:	f003 0307 	and.w	r3, r3, #7
 8104796:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810479a:	2b04      	cmp	r3, #4
 810479c:	f200 8088 	bhi.w	81048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 81047a0:	a201      	add	r2, pc, #4	; (adr r2, 81047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 81047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81047a6:	bf00      	nop
 81047a8:	081047bd 	.word	0x081047bd
 81047ac:	081047e5 	.word	0x081047e5
 81047b0:	0810480d 	.word	0x0810480d
 81047b4:	081048a9 	.word	0x081048a9
 81047b8:	08104835 	.word	0x08104835
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81047bc:	4b8b      	ldr	r3, [pc, #556]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81047be:	681b      	ldr	r3, [r3, #0]
 81047c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81047c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81047c8:	d108      	bne.n	81047dc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81047ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81047ce:	4618      	mov	r0, r3
 81047d0:	f000 ff64 	bl	810569c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 81047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81047d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81047d8:	f000 bc94 	b.w	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 81047dc:	2300      	movs	r3, #0
 81047de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81047e0:	f000 bc90 	b.w	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81047e4:	4b81      	ldr	r3, [pc, #516]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81047e6:	681b      	ldr	r3, [r3, #0]
 81047e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81047ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81047f0:	d108      	bne.n	8104804 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81047f2:	f107 0318 	add.w	r3, r7, #24
 81047f6:	4618      	mov	r0, r3
 81047f8:	f000 fca8 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81047fc:	69bb      	ldr	r3, [r7, #24]
 81047fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104800:	f000 bc80 	b.w	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104804:	2300      	movs	r3, #0
 8104806:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104808:	f000 bc7c 	b.w	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810480c:	4b77      	ldr	r3, [pc, #476]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104818:	d108      	bne.n	810482c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810481a:	f107 030c 	add.w	r3, r7, #12
 810481e:	4618      	mov	r0, r3
 8104820:	f000 fde8 	bl	81053f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104824:	68fb      	ldr	r3, [r7, #12]
 8104826:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104828:	f000 bc6c 	b.w	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810482c:	2300      	movs	r3, #0
 810482e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104830:	f000 bc68 	b.w	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104834:	4b6d      	ldr	r3, [pc, #436]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104838:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810483c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810483e:	4b6b      	ldr	r3, [pc, #428]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104840:	681b      	ldr	r3, [r3, #0]
 8104842:	f003 0304 	and.w	r3, r3, #4
 8104846:	2b04      	cmp	r3, #4
 8104848:	d10c      	bne.n	8104864 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 810484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810484c:	2b00      	cmp	r3, #0
 810484e:	d109      	bne.n	8104864 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104850:	4b66      	ldr	r3, [pc, #408]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104852:	681b      	ldr	r3, [r3, #0]
 8104854:	08db      	lsrs	r3, r3, #3
 8104856:	f003 0303 	and.w	r3, r3, #3
 810485a:	4a65      	ldr	r2, [pc, #404]	; (81049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 810485c:	fa22 f303 	lsr.w	r3, r2, r3
 8104860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104862:	e01f      	b.n	81048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104864:	4b61      	ldr	r3, [pc, #388]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104866:	681b      	ldr	r3, [r3, #0]
 8104868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810486c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104870:	d106      	bne.n	8104880 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8104872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104874:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104878:	d102      	bne.n	8104880 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810487a:	4b5e      	ldr	r3, [pc, #376]	; (81049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 810487c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810487e:	e011      	b.n	81048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104880:	4b5a      	ldr	r3, [pc, #360]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104882:	681b      	ldr	r3, [r3, #0]
 8104884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810488c:	d106      	bne.n	810489c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 810488e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104894:	d102      	bne.n	810489c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8104896:	4b58      	ldr	r3, [pc, #352]	; (81049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8104898:	63fb      	str	r3, [r7, #60]	; 0x3c
 810489a:	e003      	b.n	81048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810489c:	2300      	movs	r3, #0
 810489e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81048a0:	f000 bc30 	b.w	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81048a4:	f000 bc2e 	b.w	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81048a8:	4b54      	ldr	r3, [pc, #336]	; (81049fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 81048aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81048ac:	f000 bc2a 	b.w	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81048b0:	2300      	movs	r3, #0
 81048b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81048b4:	f000 bc26 	b.w	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81048be:	f040 809f 	bne.w	8104a00 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 81048c2:	4b4a      	ldr	r3, [pc, #296]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81048c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81048c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 81048ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 81048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81048ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81048d2:	d04d      	beq.n	8104970 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 81048d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81048d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81048da:	f200 8084 	bhi.w	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 81048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81048e0:	2bc0      	cmp	r3, #192	; 0xc0
 81048e2:	d07d      	beq.n	81049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 81048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81048e6:	2bc0      	cmp	r3, #192	; 0xc0
 81048e8:	d87d      	bhi.n	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 81048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81048ec:	2b80      	cmp	r3, #128	; 0x80
 81048ee:	d02d      	beq.n	810494c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 81048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81048f2:	2b80      	cmp	r3, #128	; 0x80
 81048f4:	d877      	bhi.n	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 81048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81048f8:	2b00      	cmp	r3, #0
 81048fa:	d003      	beq.n	8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 81048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81048fe:	2b40      	cmp	r3, #64	; 0x40
 8104900:	d012      	beq.n	8104928 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8104902:	e070      	b.n	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104904:	4b39      	ldr	r3, [pc, #228]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104906:	681b      	ldr	r3, [r3, #0]
 8104908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810490c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104910:	d107      	bne.n	8104922 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104916:	4618      	mov	r0, r3
 8104918:	f000 fec0 	bl	810569c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810491e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104920:	e3f0      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104922:	2300      	movs	r3, #0
 8104924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104926:	e3ed      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104928:	4b30      	ldr	r3, [pc, #192]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810492a:	681b      	ldr	r3, [r3, #0]
 810492c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104934:	d107      	bne.n	8104946 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104936:	f107 0318 	add.w	r3, r7, #24
 810493a:	4618      	mov	r0, r3
 810493c:	f000 fc06 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104940:	69bb      	ldr	r3, [r7, #24]
 8104942:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104944:	e3de      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104946:	2300      	movs	r3, #0
 8104948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810494a:	e3db      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810494c:	4b27      	ldr	r3, [pc, #156]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810494e:	681b      	ldr	r3, [r3, #0]
 8104950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104958:	d107      	bne.n	810496a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810495a:	f107 030c 	add.w	r3, r7, #12
 810495e:	4618      	mov	r0, r3
 8104960:	f000 fd48 	bl	81053f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104964:	68fb      	ldr	r3, [r7, #12]
 8104966:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104968:	e3cc      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 810496a:	2300      	movs	r3, #0
 810496c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810496e:	e3c9      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104970:	4b1e      	ldr	r3, [pc, #120]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8104972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104974:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104978:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810497a:	4b1c      	ldr	r3, [pc, #112]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810497c:	681b      	ldr	r3, [r3, #0]
 810497e:	f003 0304 	and.w	r3, r3, #4
 8104982:	2b04      	cmp	r3, #4
 8104984:	d10c      	bne.n	81049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8104986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104988:	2b00      	cmp	r3, #0
 810498a:	d109      	bne.n	81049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810498c:	4b17      	ldr	r3, [pc, #92]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 810498e:	681b      	ldr	r3, [r3, #0]
 8104990:	08db      	lsrs	r3, r3, #3
 8104992:	f003 0303 	and.w	r3, r3, #3
 8104996:	4a16      	ldr	r2, [pc, #88]	; (81049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8104998:	fa22 f303 	lsr.w	r3, r2, r3
 810499c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810499e:	e01e      	b.n	81049de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81049a0:	4b12      	ldr	r3, [pc, #72]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81049a2:	681b      	ldr	r3, [r3, #0]
 81049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81049a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81049ac:	d106      	bne.n	81049bc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 81049ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81049b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81049b4:	d102      	bne.n	81049bc <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 81049b6:	4b0f      	ldr	r3, [pc, #60]	; (81049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 81049b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81049ba:	e010      	b.n	81049de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81049bc:	4b0b      	ldr	r3, [pc, #44]	; (81049ec <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 81049be:	681b      	ldr	r3, [r3, #0]
 81049c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81049c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81049c8:	d106      	bne.n	81049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 81049ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81049cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81049d0:	d102      	bne.n	81049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 81049d2:	4b09      	ldr	r3, [pc, #36]	; (81049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 81049d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81049d6:	e002      	b.n	81049de <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 81049d8:	2300      	movs	r3, #0
 81049da:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81049dc:	e392      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81049de:	e391      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81049e0:	4b06      	ldr	r3, [pc, #24]	; (81049fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 81049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81049e4:	e38e      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81049e6:	2300      	movs	r3, #0
 81049e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81049ea:	e38b      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 81049ec:	58024400 	.word	0x58024400
 81049f0:	03d09000 	.word	0x03d09000
 81049f4:	003d0900 	.word	0x003d0900
 81049f8:	007a1200 	.word	0x007a1200
 81049fc:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8104a00:	687b      	ldr	r3, [r7, #4]
 8104a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104a06:	f040 809c 	bne.w	8104b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8104a0a:	4b9d      	ldr	r3, [pc, #628]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a0e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8104a12:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104a1a:	d054      	beq.n	8104ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8104a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104a22:	f200 808b 	bhi.w	8104b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8104a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104a2c:	f000 8083 	beq.w	8104b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8104a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104a36:	f200 8081 	bhi.w	8104b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8104a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104a40:	d02f      	beq.n	8104aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8104a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104a48:	d878      	bhi.n	8104b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8104a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a4c:	2b00      	cmp	r3, #0
 8104a4e:	d004      	beq.n	8104a5a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8104a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104a56:	d012      	beq.n	8104a7e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8104a58:	e070      	b.n	8104b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104a5a:	4b89      	ldr	r3, [pc, #548]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104a5c:	681b      	ldr	r3, [r3, #0]
 8104a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104a66:	d107      	bne.n	8104a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104a6c:	4618      	mov	r0, r3
 8104a6e:	f000 fe15 	bl	810569c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a74:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104a76:	e345      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104a78:	2300      	movs	r3, #0
 8104a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104a7c:	e342      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104a7e:	4b80      	ldr	r3, [pc, #512]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104a8a:	d107      	bne.n	8104a9c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104a8c:	f107 0318 	add.w	r3, r7, #24
 8104a90:	4618      	mov	r0, r3
 8104a92:	f000 fb5b 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104a96:	69bb      	ldr	r3, [r7, #24]
 8104a98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104a9a:	e333      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104a9c:	2300      	movs	r3, #0
 8104a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104aa0:	e330      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104aa2:	4b77      	ldr	r3, [pc, #476]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104aa4:	681b      	ldr	r3, [r3, #0]
 8104aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104aae:	d107      	bne.n	8104ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104ab0:	f107 030c 	add.w	r3, r7, #12
 8104ab4:	4618      	mov	r0, r3
 8104ab6:	f000 fc9d 	bl	81053f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104aba:	68fb      	ldr	r3, [r7, #12]
 8104abc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104abe:	e321      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104ac0:	2300      	movs	r3, #0
 8104ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104ac4:	e31e      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104ac6:	4b6e      	ldr	r3, [pc, #440]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104aca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104ace:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104ad0:	4b6b      	ldr	r3, [pc, #428]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104ad2:	681b      	ldr	r3, [r3, #0]
 8104ad4:	f003 0304 	and.w	r3, r3, #4
 8104ad8:	2b04      	cmp	r3, #4
 8104ada:	d10c      	bne.n	8104af6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8104adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104ade:	2b00      	cmp	r3, #0
 8104ae0:	d109      	bne.n	8104af6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104ae2:	4b67      	ldr	r3, [pc, #412]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	08db      	lsrs	r3, r3, #3
 8104ae8:	f003 0303 	and.w	r3, r3, #3
 8104aec:	4a65      	ldr	r2, [pc, #404]	; (8104c84 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8104aee:	fa22 f303 	lsr.w	r3, r2, r3
 8104af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104af4:	e01e      	b.n	8104b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104af6:	4b62      	ldr	r3, [pc, #392]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104af8:	681b      	ldr	r3, [r3, #0]
 8104afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104b02:	d106      	bne.n	8104b12 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8104b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104b0a:	d102      	bne.n	8104b12 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8104b0c:	4b5e      	ldr	r3, [pc, #376]	; (8104c88 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8104b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104b10:	e010      	b.n	8104b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104b12:	4b5b      	ldr	r3, [pc, #364]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104b14:	681b      	ldr	r3, [r3, #0]
 8104b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104b1e:	d106      	bne.n	8104b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8104b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104b26:	d102      	bne.n	8104b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8104b28:	4b58      	ldr	r3, [pc, #352]	; (8104c8c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8104b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104b2c:	e002      	b.n	8104b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8104b2e:	2300      	movs	r3, #0
 8104b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8104b32:	e2e7      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8104b34:	e2e6      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104b36:	4b56      	ldr	r3, [pc, #344]	; (8104c90 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8104b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104b3a:	e2e3      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8104b3c:	2300      	movs	r3, #0
 8104b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104b40:	e2e0      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104b48:	f040 80a7 	bne.w	8104c9a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8104b4c:	4b4c      	ldr	r3, [pc, #304]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104b50:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8104b54:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104b5c:	d055      	beq.n	8104c0a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8104b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104b64:	f200 8096 	bhi.w	8104c94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8104b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104b6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104b6e:	f000 8084 	beq.w	8104c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8104b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104b74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104b78:	f200 808c 	bhi.w	8104c94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8104b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104b82:	d030      	beq.n	8104be6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8104b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104b86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104b8a:	f200 8083 	bhi.w	8104c94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8104b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104b90:	2b00      	cmp	r3, #0
 8104b92:	d004      	beq.n	8104b9e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8104b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104b96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104b9a:	d012      	beq.n	8104bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8104b9c:	e07a      	b.n	8104c94 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104b9e:	4b38      	ldr	r3, [pc, #224]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104ba0:	681b      	ldr	r3, [r3, #0]
 8104ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104ba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104baa:	d107      	bne.n	8104bbc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104bb0:	4618      	mov	r0, r3
 8104bb2:	f000 fd73 	bl	810569c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104bba:	e2a3      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104bbc:	2300      	movs	r3, #0
 8104bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104bc0:	e2a0      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104bc2:	4b2f      	ldr	r3, [pc, #188]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104bc4:	681b      	ldr	r3, [r3, #0]
 8104bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104bca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104bce:	d107      	bne.n	8104be0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104bd0:	f107 0318 	add.w	r3, r7, #24
 8104bd4:	4618      	mov	r0, r3
 8104bd6:	f000 fab9 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104bda:	69bb      	ldr	r3, [r7, #24]
 8104bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8104bde:	e291      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104be0:	2300      	movs	r3, #0
 8104be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104be4:	e28e      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104be6:	4b26      	ldr	r3, [pc, #152]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104be8:	681b      	ldr	r3, [r3, #0]
 8104bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104bf2:	d107      	bne.n	8104c04 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104bf4:	f107 030c 	add.w	r3, r7, #12
 8104bf8:	4618      	mov	r0, r3
 8104bfa:	f000 fbfb 	bl	81053f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104bfe:	68fb      	ldr	r3, [r7, #12]
 8104c00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104c02:	e27f      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104c04:	2300      	movs	r3, #0
 8104c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104c08:	e27c      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104c0a:	4b1d      	ldr	r3, [pc, #116]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104c0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104c12:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104c14:	4b1a      	ldr	r3, [pc, #104]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104c16:	681b      	ldr	r3, [r3, #0]
 8104c18:	f003 0304 	and.w	r3, r3, #4
 8104c1c:	2b04      	cmp	r3, #4
 8104c1e:	d10c      	bne.n	8104c3a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8104c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104c22:	2b00      	cmp	r3, #0
 8104c24:	d109      	bne.n	8104c3a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104c26:	4b16      	ldr	r3, [pc, #88]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	08db      	lsrs	r3, r3, #3
 8104c2c:	f003 0303 	and.w	r3, r3, #3
 8104c30:	4a14      	ldr	r2, [pc, #80]	; (8104c84 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8104c32:	fa22 f303 	lsr.w	r3, r2, r3
 8104c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104c38:	e01e      	b.n	8104c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104c3a:	4b11      	ldr	r3, [pc, #68]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104c3c:	681b      	ldr	r3, [r3, #0]
 8104c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c46:	d106      	bne.n	8104c56 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8104c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104c4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104c4e:	d102      	bne.n	8104c56 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8104c50:	4b0d      	ldr	r3, [pc, #52]	; (8104c88 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8104c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104c54:	e010      	b.n	8104c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104c56:	4b0a      	ldr	r3, [pc, #40]	; (8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8104c58:	681b      	ldr	r3, [r3, #0]
 8104c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104c5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104c62:	d106      	bne.n	8104c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8104c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104c66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104c6a:	d102      	bne.n	8104c72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8104c6c:	4b07      	ldr	r3, [pc, #28]	; (8104c8c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8104c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104c70:	e002      	b.n	8104c78 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8104c72:	2300      	movs	r3, #0
 8104c74:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8104c76:	e245      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8104c78:	e244      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104c7a:	4b05      	ldr	r3, [pc, #20]	; (8104c90 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8104c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104c7e:	e241      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8104c80:	58024400 	.word	0x58024400
 8104c84:	03d09000 	.word	0x03d09000
 8104c88:	003d0900 	.word	0x003d0900
 8104c8c:	007a1200 	.word	0x007a1200
 8104c90:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8104c94:	2300      	movs	r3, #0
 8104c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104c98:	e234      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8104c9a:	687b      	ldr	r3, [r7, #4]
 8104c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104ca0:	f040 809c 	bne.w	8104ddc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8104ca4:	4b9b      	ldr	r3, [pc, #620]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ca8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8104cac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8104cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104cb4:	d054      	beq.n	8104d60 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8104cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104cb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104cbc:	f200 808b 	bhi.w	8104dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8104cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104cc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104cc6:	f000 8083 	beq.w	8104dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8104cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ccc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104cd0:	f200 8081 	bhi.w	8104dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8104cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104cda:	d02f      	beq.n	8104d3c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8104cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104ce2:	d878      	bhi.n	8104dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8104ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ce6:	2b00      	cmp	r3, #0
 8104ce8:	d004      	beq.n	8104cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8104cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104cf0:	d012      	beq.n	8104d18 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8104cf2:	e070      	b.n	8104dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104cf4:	4b87      	ldr	r3, [pc, #540]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104cf6:	681b      	ldr	r3, [r3, #0]
 8104cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104cfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104d00:	d107      	bne.n	8104d12 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104d06:	4618      	mov	r0, r3
 8104d08:	f000 fcc8 	bl	810569c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104d10:	e1f8      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104d12:	2300      	movs	r3, #0
 8104d14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104d16:	e1f5      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104d18:	4b7e      	ldr	r3, [pc, #504]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104d1a:	681b      	ldr	r3, [r3, #0]
 8104d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104d24:	d107      	bne.n	8104d36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104d26:	f107 0318 	add.w	r3, r7, #24
 8104d2a:	4618      	mov	r0, r3
 8104d2c:	f000 fa0e 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104d30:	69bb      	ldr	r3, [r7, #24]
 8104d32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104d34:	e1e6      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104d36:	2300      	movs	r3, #0
 8104d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104d3a:	e1e3      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104d3c:	4b75      	ldr	r3, [pc, #468]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104d3e:	681b      	ldr	r3, [r3, #0]
 8104d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104d48:	d107      	bne.n	8104d5a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104d4a:	f107 030c 	add.w	r3, r7, #12
 8104d4e:	4618      	mov	r0, r3
 8104d50:	f000 fb50 	bl	81053f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104d54:	68fb      	ldr	r3, [r7, #12]
 8104d56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104d58:	e1d4      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104d5a:	2300      	movs	r3, #0
 8104d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104d5e:	e1d1      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104d60:	4b6c      	ldr	r3, [pc, #432]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104d64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104d68:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104d6a:	4b6a      	ldr	r3, [pc, #424]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104d6c:	681b      	ldr	r3, [r3, #0]
 8104d6e:	f003 0304 	and.w	r3, r3, #4
 8104d72:	2b04      	cmp	r3, #4
 8104d74:	d10c      	bne.n	8104d90 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8104d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104d78:	2b00      	cmp	r3, #0
 8104d7a:	d109      	bne.n	8104d90 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104d7c:	4b65      	ldr	r3, [pc, #404]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104d7e:	681b      	ldr	r3, [r3, #0]
 8104d80:	08db      	lsrs	r3, r3, #3
 8104d82:	f003 0303 	and.w	r3, r3, #3
 8104d86:	4a64      	ldr	r2, [pc, #400]	; (8104f18 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8104d88:	fa22 f303 	lsr.w	r3, r2, r3
 8104d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104d8e:	e01e      	b.n	8104dce <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104d90:	4b60      	ldr	r3, [pc, #384]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104d92:	681b      	ldr	r3, [r3, #0]
 8104d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d9c:	d106      	bne.n	8104dac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8104d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104da4:	d102      	bne.n	8104dac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8104da6:	4b5d      	ldr	r3, [pc, #372]	; (8104f1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8104da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104daa:	e010      	b.n	8104dce <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104dac:	4b59      	ldr	r3, [pc, #356]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104dae:	681b      	ldr	r3, [r3, #0]
 8104db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104db8:	d106      	bne.n	8104dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8104dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104dc0:	d102      	bne.n	8104dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8104dc2:	4b57      	ldr	r3, [pc, #348]	; (8104f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8104dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104dc6:	e002      	b.n	8104dce <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8104dc8:	2300      	movs	r3, #0
 8104dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8104dcc:	e19a      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8104dce:	e199      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104dd0:	4b54      	ldr	r3, [pc, #336]	; (8104f24 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104dd4:	e196      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8104dd6:	2300      	movs	r3, #0
 8104dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104dda:	e193      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8104ddc:	687b      	ldr	r3, [r7, #4]
 8104dde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8104de2:	d173      	bne.n	8104ecc <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8104de4:	4b4b      	ldr	r3, [pc, #300]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104dec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8104dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104df4:	d02f      	beq.n	8104e56 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8104df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104df8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104dfc:	d863      	bhi.n	8104ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8104dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e00:	2b00      	cmp	r3, #0
 8104e02:	d004      	beq.n	8104e0e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8104e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104e0a:	d012      	beq.n	8104e32 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8104e0c:	e05b      	b.n	8104ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104e0e:	4b41      	ldr	r3, [pc, #260]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104e10:	681b      	ldr	r3, [r3, #0]
 8104e12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104e1a:	d107      	bne.n	8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104e1c:	f107 0318 	add.w	r3, r7, #24
 8104e20:	4618      	mov	r0, r3
 8104e22:	f000 f993 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104e26:	69bb      	ldr	r3, [r7, #24]
 8104e28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104e2a:	e16b      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104e2c:	2300      	movs	r3, #0
 8104e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e30:	e168      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104e32:	4b38      	ldr	r3, [pc, #224]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104e34:	681b      	ldr	r3, [r3, #0]
 8104e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104e3e:	d107      	bne.n	8104e50 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104e40:	f107 030c 	add.w	r3, r7, #12
 8104e44:	4618      	mov	r0, r3
 8104e46:	f000 fad5 	bl	81053f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8104e4a:	697b      	ldr	r3, [r7, #20]
 8104e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104e4e:	e159      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8104e50:	2300      	movs	r3, #0
 8104e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e54:	e156      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104e56:	4b2f      	ldr	r3, [pc, #188]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104e5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104e5e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104e60:	4b2c      	ldr	r3, [pc, #176]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104e62:	681b      	ldr	r3, [r3, #0]
 8104e64:	f003 0304 	and.w	r3, r3, #4
 8104e68:	2b04      	cmp	r3, #4
 8104e6a:	d10c      	bne.n	8104e86 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8104e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104e6e:	2b00      	cmp	r3, #0
 8104e70:	d109      	bne.n	8104e86 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104e72:	4b28      	ldr	r3, [pc, #160]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	08db      	lsrs	r3, r3, #3
 8104e78:	f003 0303 	and.w	r3, r3, #3
 8104e7c:	4a26      	ldr	r2, [pc, #152]	; (8104f18 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8104e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8104e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104e84:	e01e      	b.n	8104ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104e86:	4b23      	ldr	r3, [pc, #140]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104e88:	681b      	ldr	r3, [r3, #0]
 8104e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e92:	d106      	bne.n	8104ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8104e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104e9a:	d102      	bne.n	8104ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8104e9c:	4b1f      	ldr	r3, [pc, #124]	; (8104f1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8104e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104ea0:	e010      	b.n	8104ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104ea2:	4b1c      	ldr	r3, [pc, #112]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104ea4:	681b      	ldr	r3, [r3, #0]
 8104ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104eae:	d106      	bne.n	8104ebe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8104eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104eb6:	d102      	bne.n	8104ebe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8104eb8:	4b19      	ldr	r3, [pc, #100]	; (8104f20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8104eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104ebc:	e002      	b.n	8104ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8104ebe:	2300      	movs	r3, #0
 8104ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8104ec2:	e11f      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8104ec4:	e11e      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8104ec6:	2300      	movs	r3, #0
 8104ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104eca:	e11b      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8104ecc:	687b      	ldr	r3, [r7, #4]
 8104ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104ed2:	d13e      	bne.n	8104f52 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8104ed4:	4b0f      	ldr	r3, [pc, #60]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104edc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8104ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ee0:	2b00      	cmp	r3, #0
 8104ee2:	d004      	beq.n	8104eee <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8104ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104eea:	d01d      	beq.n	8104f28 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8104eec:	e02e      	b.n	8104f4c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104eee:	4b09      	ldr	r3, [pc, #36]	; (8104f14 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8104ef0:	681b      	ldr	r3, [r3, #0]
 8104ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104efa:	d107      	bne.n	8104f0c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104f00:	4618      	mov	r0, r3
 8104f02:	f000 fbcb 	bl	810569c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8104f0a:	e0fb      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8104f0c:	2300      	movs	r3, #0
 8104f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f10:	e0f8      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8104f12:	bf00      	nop
 8104f14:	58024400 	.word	0x58024400
 8104f18:	03d09000 	.word	0x03d09000
 8104f1c:	003d0900 	.word	0x003d0900
 8104f20:	007a1200 	.word	0x007a1200
 8104f24:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104f28:	4b79      	ldr	r3, [pc, #484]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8104f2a:	681b      	ldr	r3, [r3, #0]
 8104f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104f34:	d107      	bne.n	8104f46 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104f36:	f107 0318 	add.w	r3, r7, #24
 8104f3a:	4618      	mov	r0, r3
 8104f3c:	f000 f906 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8104f40:	6a3b      	ldr	r3, [r7, #32]
 8104f42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8104f44:	e0de      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8104f46:	2300      	movs	r3, #0
 8104f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f4a:	e0db      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8104f4c:	2300      	movs	r3, #0
 8104f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f50:	e0d8      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8104f52:	687b      	ldr	r3, [r7, #4]
 8104f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104f58:	f040 8085 	bne.w	8105066 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8104f5c:	4b6c      	ldr	r3, [pc, #432]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8104f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f60:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8104f64:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8104f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104f6c:	d06b      	beq.n	8105046 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8104f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104f74:	d874      	bhi.n	8105060 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8104f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104f7c:	d056      	beq.n	810502c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8104f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104f84:	d86c      	bhi.n	8105060 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8104f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104f8c:	d03b      	beq.n	8105006 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8104f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104f94:	d864      	bhi.n	8105060 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8104f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f9c:	d021      	beq.n	8104fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8104f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fa4:	d85c      	bhi.n	8105060 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8104fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fa8:	2b00      	cmp	r3, #0
 8104faa:	d004      	beq.n	8104fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8104fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104fb2:	d004      	beq.n	8104fbe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8104fb4:	e054      	b.n	8105060 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8104fb6:	f000 f8b3 	bl	8105120 <HAL_RCCEx_GetD3PCLK1Freq>
 8104fba:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8104fbc:	e0a2      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104fbe:	4b54      	ldr	r3, [pc, #336]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8104fc0:	681b      	ldr	r3, [r3, #0]
 8104fc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104fca:	d107      	bne.n	8104fdc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104fcc:	f107 0318 	add.w	r3, r7, #24
 8104fd0:	4618      	mov	r0, r3
 8104fd2:	f000 f8bb 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104fd6:	69fb      	ldr	r3, [r7, #28]
 8104fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8104fda:	e093      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8104fdc:	2300      	movs	r3, #0
 8104fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104fe0:	e090      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104fe2:	4b4b      	ldr	r3, [pc, #300]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8104fe4:	681b      	ldr	r3, [r3, #0]
 8104fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fee:	d107      	bne.n	8105000 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104ff0:	f107 030c 	add.w	r3, r7, #12
 8104ff4:	4618      	mov	r0, r3
 8104ff6:	f000 f9fd 	bl	81053f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104ffa:	693b      	ldr	r3, [r7, #16]
 8104ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8104ffe:	e081      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8105000:	2300      	movs	r3, #0
 8105002:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105004:	e07e      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105006:	4b42      	ldr	r3, [pc, #264]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105008:	681b      	ldr	r3, [r3, #0]
 810500a:	f003 0304 	and.w	r3, r3, #4
 810500e:	2b04      	cmp	r3, #4
 8105010:	d109      	bne.n	8105026 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105012:	4b3f      	ldr	r3, [pc, #252]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105014:	681b      	ldr	r3, [r3, #0]
 8105016:	08db      	lsrs	r3, r3, #3
 8105018:	f003 0303 	and.w	r3, r3, #3
 810501c:	4a3d      	ldr	r2, [pc, #244]	; (8105114 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 810501e:	fa22 f303 	lsr.w	r3, r2, r3
 8105022:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8105024:	e06e      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8105026:	2300      	movs	r3, #0
 8105028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810502a:	e06b      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810502c:	4b38      	ldr	r3, [pc, #224]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810502e:	681b      	ldr	r3, [r3, #0]
 8105030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105038:	d102      	bne.n	8105040 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 810503a:	4b37      	ldr	r3, [pc, #220]	; (8105118 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 810503c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810503e:	e061      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8105040:	2300      	movs	r3, #0
 8105042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105044:	e05e      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105046:	4b32      	ldr	r3, [pc, #200]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105048:	681b      	ldr	r3, [r3, #0]
 810504a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810504e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105052:	d102      	bne.n	810505a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8105054:	4b31      	ldr	r3, [pc, #196]	; (810511c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8105056:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8105058:	e054      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 810505a:	2300      	movs	r3, #0
 810505c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810505e:	e051      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8105060:	2300      	movs	r3, #0
 8105062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105064:	e04e      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8105066:	687b      	ldr	r3, [r7, #4]
 8105068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810506c:	d148      	bne.n	8105100 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 810506e:	4b28      	ldr	r3, [pc, #160]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105072:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105076:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8105078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810507a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810507e:	d02a      	beq.n	81050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8105080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105086:	d838      	bhi.n	81050fa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8105088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810508a:	2b00      	cmp	r3, #0
 810508c:	d004      	beq.n	8105098 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 810508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105094:	d00d      	beq.n	81050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8105096:	e030      	b.n	81050fa <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105098:	4b1d      	ldr	r3, [pc, #116]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810509a:	681b      	ldr	r3, [r3, #0]
 810509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81050a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81050a4:	d102      	bne.n	81050ac <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 81050a6:	4b1d      	ldr	r3, [pc, #116]	; (810511c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 81050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81050aa:	e02b      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81050ac:	2300      	movs	r3, #0
 81050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050b0:	e028      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81050b2:	4b17      	ldr	r3, [pc, #92]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81050b4:	681b      	ldr	r3, [r3, #0]
 81050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81050ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81050be:	d107      	bne.n	81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81050c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81050c4:	4618      	mov	r0, r3
 81050c6:	f000 fae9 	bl	810569c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81050ce:	e019      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81050d0:	2300      	movs	r3, #0
 81050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050d4:	e016      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81050d6:	4b0e      	ldr	r3, [pc, #56]	; (8105110 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81050d8:	681b      	ldr	r3, [r3, #0]
 81050da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81050de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81050e2:	d107      	bne.n	81050f4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81050e4:	f107 0318 	add.w	r3, r7, #24
 81050e8:	4618      	mov	r0, r3
 81050ea:	f000 f82f 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81050ee:	69fb      	ldr	r3, [r7, #28]
 81050f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81050f2:	e007      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 81050f4:	2300      	movs	r3, #0
 81050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050f8:	e004      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 81050fa:	2300      	movs	r3, #0
 81050fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050fe:	e001      	b.n	8105104 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8105100:	2300      	movs	r3, #0
 8105102:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8105104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8105106:	4618      	mov	r0, r3
 8105108:	3740      	adds	r7, #64	; 0x40
 810510a:	46bd      	mov	sp, r7
 810510c:	bd80      	pop	{r7, pc}
 810510e:	bf00      	nop
 8105110:	58024400 	.word	0x58024400
 8105114:	03d09000 	.word	0x03d09000
 8105118:	003d0900 	.word	0x003d0900
 810511c:	007a1200 	.word	0x007a1200

08105120 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105120:	b580      	push	{r7, lr}
 8105122:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105124:	f7fe fb86 	bl	8103834 <HAL_RCC_GetHCLKFreq>
 8105128:	4602      	mov	r2, r0
 810512a:	4b06      	ldr	r3, [pc, #24]	; (8105144 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810512c:	6a1b      	ldr	r3, [r3, #32]
 810512e:	091b      	lsrs	r3, r3, #4
 8105130:	f003 0307 	and.w	r3, r3, #7
 8105134:	4904      	ldr	r1, [pc, #16]	; (8105148 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8105136:	5ccb      	ldrb	r3, [r1, r3]
 8105138:	f003 031f 	and.w	r3, r3, #31
 810513c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105140:	4618      	mov	r0, r3
 8105142:	bd80      	pop	{r7, pc}
 8105144:	58024400 	.word	0x58024400
 8105148:	081098b4 	.word	0x081098b4

0810514c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 810514c:	b480      	push	{r7}
 810514e:	b089      	sub	sp, #36	; 0x24
 8105150:	af00      	add	r7, sp, #0
 8105152:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105154:	4ba1      	ldr	r3, [pc, #644]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105158:	f003 0303 	and.w	r3, r3, #3
 810515c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810515e:	4b9f      	ldr	r3, [pc, #636]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105162:	0b1b      	lsrs	r3, r3, #12
 8105164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105168:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810516a:	4b9c      	ldr	r3, [pc, #624]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810516e:	091b      	lsrs	r3, r3, #4
 8105170:	f003 0301 	and.w	r3, r3, #1
 8105174:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8105176:	4b99      	ldr	r3, [pc, #612]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810517a:	08db      	lsrs	r3, r3, #3
 810517c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105180:	693a      	ldr	r2, [r7, #16]
 8105182:	fb02 f303 	mul.w	r3, r2, r3
 8105186:	ee07 3a90 	vmov	s15, r3
 810518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810518e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105192:	697b      	ldr	r3, [r7, #20]
 8105194:	2b00      	cmp	r3, #0
 8105196:	f000 8111 	beq.w	81053bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810519a:	69bb      	ldr	r3, [r7, #24]
 810519c:	2b02      	cmp	r3, #2
 810519e:	f000 8083 	beq.w	81052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81051a2:	69bb      	ldr	r3, [r7, #24]
 81051a4:	2b02      	cmp	r3, #2
 81051a6:	f200 80a1 	bhi.w	81052ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81051aa:	69bb      	ldr	r3, [r7, #24]
 81051ac:	2b00      	cmp	r3, #0
 81051ae:	d003      	beq.n	81051b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81051b0:	69bb      	ldr	r3, [r7, #24]
 81051b2:	2b01      	cmp	r3, #1
 81051b4:	d056      	beq.n	8105264 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81051b6:	e099      	b.n	81052ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81051b8:	4b88      	ldr	r3, [pc, #544]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	f003 0320 	and.w	r3, r3, #32
 81051c0:	2b00      	cmp	r3, #0
 81051c2:	d02d      	beq.n	8105220 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81051c4:	4b85      	ldr	r3, [pc, #532]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051c6:	681b      	ldr	r3, [r3, #0]
 81051c8:	08db      	lsrs	r3, r3, #3
 81051ca:	f003 0303 	and.w	r3, r3, #3
 81051ce:	4a84      	ldr	r2, [pc, #528]	; (81053e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81051d0:	fa22 f303 	lsr.w	r3, r2, r3
 81051d4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81051d6:	68bb      	ldr	r3, [r7, #8]
 81051d8:	ee07 3a90 	vmov	s15, r3
 81051dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81051e0:	697b      	ldr	r3, [r7, #20]
 81051e2:	ee07 3a90 	vmov	s15, r3
 81051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81051ee:	4b7b      	ldr	r3, [pc, #492]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81051f6:	ee07 3a90 	vmov	s15, r3
 81051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81051fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8105202:	eddf 5a78 	vldr	s11, [pc, #480]	; 81053e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810520e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105216:	ee67 7a27 	vmul.f32	s15, s14, s15
 810521a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810521e:	e087      	b.n	8105330 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105220:	697b      	ldr	r3, [r7, #20]
 8105222:	ee07 3a90 	vmov	s15, r3
 8105226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810522a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81053e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810522e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105232:	4b6a      	ldr	r3, [pc, #424]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810523a:	ee07 3a90 	vmov	s15, r3
 810523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105242:	ed97 6a03 	vldr	s12, [r7, #12]
 8105246:	eddf 5a67 	vldr	s11, [pc, #412]	; 81053e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810524a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810524e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810525a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810525e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105262:	e065      	b.n	8105330 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105264:	697b      	ldr	r3, [r7, #20]
 8105266:	ee07 3a90 	vmov	s15, r3
 810526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810526e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81053ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105276:	4b59      	ldr	r3, [pc, #356]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810527a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810527e:	ee07 3a90 	vmov	s15, r3
 8105282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105286:	ed97 6a03 	vldr	s12, [r7, #12]
 810528a:	eddf 5a56 	vldr	s11, [pc, #344]	; 81053e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810528e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810529a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810529e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81052a6:	e043      	b.n	8105330 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81052a8:	697b      	ldr	r3, [r7, #20]
 81052aa:	ee07 3a90 	vmov	s15, r3
 81052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81053f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81052b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052ba:	4b48      	ldr	r3, [pc, #288]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81052be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052c2:	ee07 3a90 	vmov	s15, r3
 81052c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81052ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 81053e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81052d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81052de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81052ea:	e021      	b.n	8105330 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81052ec:	697b      	ldr	r3, [r7, #20]
 81052ee:	ee07 3a90 	vmov	s15, r3
 81052f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81053ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81052fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052fe:	4b37      	ldr	r3, [pc, #220]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105306:	ee07 3a90 	vmov	s15, r3
 810530a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810530e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105312:	eddf 5a34 	vldr	s11, [pc, #208]	; 81053e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810531a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810531e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105326:	ee67 7a27 	vmul.f32	s15, s14, s15
 810532a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810532e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8105330:	4b2a      	ldr	r3, [pc, #168]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105334:	0a5b      	lsrs	r3, r3, #9
 8105336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810533a:	ee07 3a90 	vmov	s15, r3
 810533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105346:	ee37 7a87 	vadd.f32	s14, s15, s14
 810534a:	edd7 6a07 	vldr	s13, [r7, #28]
 810534e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105356:	ee17 2a90 	vmov	r2, s15
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810535e:	4b1f      	ldr	r3, [pc, #124]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105362:	0c1b      	lsrs	r3, r3, #16
 8105364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105368:	ee07 3a90 	vmov	s15, r3
 810536c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105370:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105374:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105378:	edd7 6a07 	vldr	s13, [r7, #28]
 810537c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105384:	ee17 2a90 	vmov	r2, s15
 8105388:	687b      	ldr	r3, [r7, #4]
 810538a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810538c:	4b13      	ldr	r3, [pc, #76]	; (81053dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105390:	0e1b      	lsrs	r3, r3, #24
 8105392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105396:	ee07 3a90 	vmov	s15, r3
 810539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810539e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81053a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053a6:	edd7 6a07 	vldr	s13, [r7, #28]
 81053aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053b2:	ee17 2a90 	vmov	r2, s15
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81053ba:	e008      	b.n	81053ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	2200      	movs	r2, #0
 81053c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	2200      	movs	r2, #0
 81053c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	2200      	movs	r2, #0
 81053cc:	609a      	str	r2, [r3, #8]
}
 81053ce:	bf00      	nop
 81053d0:	3724      	adds	r7, #36	; 0x24
 81053d2:	46bd      	mov	sp, r7
 81053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053d8:	4770      	bx	lr
 81053da:	bf00      	nop
 81053dc:	58024400 	.word	0x58024400
 81053e0:	03d09000 	.word	0x03d09000
 81053e4:	46000000 	.word	0x46000000
 81053e8:	4c742400 	.word	0x4c742400
 81053ec:	4a742400 	.word	0x4a742400
 81053f0:	4af42400 	.word	0x4af42400

081053f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81053f4:	b480      	push	{r7}
 81053f6:	b089      	sub	sp, #36	; 0x24
 81053f8:	af00      	add	r7, sp, #0
 81053fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81053fc:	4ba1      	ldr	r3, [pc, #644]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105400:	f003 0303 	and.w	r3, r3, #3
 8105404:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8105406:	4b9f      	ldr	r3, [pc, #636]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810540a:	0d1b      	lsrs	r3, r3, #20
 810540c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105410:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105412:	4b9c      	ldr	r3, [pc, #624]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105416:	0a1b      	lsrs	r3, r3, #8
 8105418:	f003 0301 	and.w	r3, r3, #1
 810541c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810541e:	4b99      	ldr	r3, [pc, #612]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105422:	08db      	lsrs	r3, r3, #3
 8105424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105428:	693a      	ldr	r2, [r7, #16]
 810542a:	fb02 f303 	mul.w	r3, r2, r3
 810542e:	ee07 3a90 	vmov	s15, r3
 8105432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105436:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810543a:	697b      	ldr	r3, [r7, #20]
 810543c:	2b00      	cmp	r3, #0
 810543e:	f000 8111 	beq.w	8105664 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105442:	69bb      	ldr	r3, [r7, #24]
 8105444:	2b02      	cmp	r3, #2
 8105446:	f000 8083 	beq.w	8105550 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810544a:	69bb      	ldr	r3, [r7, #24]
 810544c:	2b02      	cmp	r3, #2
 810544e:	f200 80a1 	bhi.w	8105594 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105452:	69bb      	ldr	r3, [r7, #24]
 8105454:	2b00      	cmp	r3, #0
 8105456:	d003      	beq.n	8105460 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105458:	69bb      	ldr	r3, [r7, #24]
 810545a:	2b01      	cmp	r3, #1
 810545c:	d056      	beq.n	810550c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810545e:	e099      	b.n	8105594 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105460:	4b88      	ldr	r3, [pc, #544]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105462:	681b      	ldr	r3, [r3, #0]
 8105464:	f003 0320 	and.w	r3, r3, #32
 8105468:	2b00      	cmp	r3, #0
 810546a:	d02d      	beq.n	81054c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810546c:	4b85      	ldr	r3, [pc, #532]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810546e:	681b      	ldr	r3, [r3, #0]
 8105470:	08db      	lsrs	r3, r3, #3
 8105472:	f003 0303 	and.w	r3, r3, #3
 8105476:	4a84      	ldr	r2, [pc, #528]	; (8105688 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105478:	fa22 f303 	lsr.w	r3, r2, r3
 810547c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810547e:	68bb      	ldr	r3, [r7, #8]
 8105480:	ee07 3a90 	vmov	s15, r3
 8105484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105488:	697b      	ldr	r3, [r7, #20]
 810548a:	ee07 3a90 	vmov	s15, r3
 810548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105496:	4b7b      	ldr	r3, [pc, #492]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810549a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810549e:	ee07 3a90 	vmov	s15, r3
 81054a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81054aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 810568c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81054ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81054b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81054b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81054ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81054be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81054c2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81054c6:	e087      	b.n	81055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81054c8:	697b      	ldr	r3, [r7, #20]
 81054ca:	ee07 3a90 	vmov	s15, r3
 81054ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105690 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81054d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054da:	4b6a      	ldr	r3, [pc, #424]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81054de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81054e2:	ee07 3a90 	vmov	s15, r3
 81054e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81054ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 810568c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81054f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81054f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81054fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81054fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105506:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810550a:	e065      	b.n	81055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810550c:	697b      	ldr	r3, [r7, #20]
 810550e:	ee07 3a90 	vmov	s15, r3
 8105512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105516:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105694 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810551a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810551e:	4b59      	ldr	r3, [pc, #356]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105526:	ee07 3a90 	vmov	s15, r3
 810552a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810552e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105532:	eddf 5a56 	vldr	s11, [pc, #344]	; 810568c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810553a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810553e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105546:	ee67 7a27 	vmul.f32	s15, s14, s15
 810554a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810554e:	e043      	b.n	81055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105550:	697b      	ldr	r3, [r7, #20]
 8105552:	ee07 3a90 	vmov	s15, r3
 8105556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810555a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105698 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810555e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105562:	4b48      	ldr	r3, [pc, #288]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810556a:	ee07 3a90 	vmov	s15, r3
 810556e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105572:	ed97 6a03 	vldr	s12, [r7, #12]
 8105576:	eddf 5a45 	vldr	s11, [pc, #276]	; 810568c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810557a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810557e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810558a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810558e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105592:	e021      	b.n	81055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105594:	697b      	ldr	r3, [r7, #20]
 8105596:	ee07 3a90 	vmov	s15, r3
 810559a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810559e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105694 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81055a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055a6:	4b37      	ldr	r3, [pc, #220]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055ae:	ee07 3a90 	vmov	s15, r3
 81055b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055b6:	ed97 6a03 	vldr	s12, [r7, #12]
 81055ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 810568c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81055be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81055ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81055d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81055d8:	4b2a      	ldr	r3, [pc, #168]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055dc:	0a5b      	lsrs	r3, r3, #9
 81055de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81055e2:	ee07 3a90 	vmov	s15, r3
 81055e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81055ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 81055f2:	edd7 6a07 	vldr	s13, [r7, #28]
 81055f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81055fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81055fe:	ee17 2a90 	vmov	r2, s15
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105606:	4b1f      	ldr	r3, [pc, #124]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810560a:	0c1b      	lsrs	r3, r3, #16
 810560c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105610:	ee07 3a90 	vmov	s15, r3
 8105614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810561c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105620:	edd7 6a07 	vldr	s13, [r7, #28]
 8105624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810562c:	ee17 2a90 	vmov	r2, s15
 8105630:	687b      	ldr	r3, [r7, #4]
 8105632:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8105634:	4b13      	ldr	r3, [pc, #76]	; (8105684 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105638:	0e1b      	lsrs	r3, r3, #24
 810563a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810563e:	ee07 3a90 	vmov	s15, r3
 8105642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810564a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810564e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810565a:	ee17 2a90 	vmov	r2, s15
 810565e:	687b      	ldr	r3, [r7, #4]
 8105660:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105662:	e008      	b.n	8105676 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	2200      	movs	r2, #0
 8105668:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	2200      	movs	r2, #0
 810566e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105670:	687b      	ldr	r3, [r7, #4]
 8105672:	2200      	movs	r2, #0
 8105674:	609a      	str	r2, [r3, #8]
}
 8105676:	bf00      	nop
 8105678:	3724      	adds	r7, #36	; 0x24
 810567a:	46bd      	mov	sp, r7
 810567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105680:	4770      	bx	lr
 8105682:	bf00      	nop
 8105684:	58024400 	.word	0x58024400
 8105688:	03d09000 	.word	0x03d09000
 810568c:	46000000 	.word	0x46000000
 8105690:	4c742400 	.word	0x4c742400
 8105694:	4a742400 	.word	0x4a742400
 8105698:	4af42400 	.word	0x4af42400

0810569c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 810569c:	b480      	push	{r7}
 810569e:	b089      	sub	sp, #36	; 0x24
 81056a0:	af00      	add	r7, sp, #0
 81056a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81056a4:	4ba0      	ldr	r3, [pc, #640]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81056a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056a8:	f003 0303 	and.w	r3, r3, #3
 81056ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 81056ae:	4b9e      	ldr	r3, [pc, #632]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056b2:	091b      	lsrs	r3, r3, #4
 81056b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81056b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 81056ba:	4b9b      	ldr	r3, [pc, #620]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81056be:	f003 0301 	and.w	r3, r3, #1
 81056c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81056c4:	4b98      	ldr	r3, [pc, #608]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81056c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81056c8:	08db      	lsrs	r3, r3, #3
 81056ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81056ce:	693a      	ldr	r2, [r7, #16]
 81056d0:	fb02 f303 	mul.w	r3, r2, r3
 81056d4:	ee07 3a90 	vmov	s15, r3
 81056d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81056e0:	697b      	ldr	r3, [r7, #20]
 81056e2:	2b00      	cmp	r3, #0
 81056e4:	f000 8111 	beq.w	810590a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81056e8:	69bb      	ldr	r3, [r7, #24]
 81056ea:	2b02      	cmp	r3, #2
 81056ec:	f000 8083 	beq.w	81057f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81056f0:	69bb      	ldr	r3, [r7, #24]
 81056f2:	2b02      	cmp	r3, #2
 81056f4:	f200 80a1 	bhi.w	810583a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81056f8:	69bb      	ldr	r3, [r7, #24]
 81056fa:	2b00      	cmp	r3, #0
 81056fc:	d003      	beq.n	8105706 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81056fe:	69bb      	ldr	r3, [r7, #24]
 8105700:	2b01      	cmp	r3, #1
 8105702:	d056      	beq.n	81057b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8105704:	e099      	b.n	810583a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105706:	4b88      	ldr	r3, [pc, #544]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105708:	681b      	ldr	r3, [r3, #0]
 810570a:	f003 0320 	and.w	r3, r3, #32
 810570e:	2b00      	cmp	r3, #0
 8105710:	d02d      	beq.n	810576e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105712:	4b85      	ldr	r3, [pc, #532]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105714:	681b      	ldr	r3, [r3, #0]
 8105716:	08db      	lsrs	r3, r3, #3
 8105718:	f003 0303 	and.w	r3, r3, #3
 810571c:	4a83      	ldr	r2, [pc, #524]	; (810592c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810571e:	fa22 f303 	lsr.w	r3, r2, r3
 8105722:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105724:	68bb      	ldr	r3, [r7, #8]
 8105726:	ee07 3a90 	vmov	s15, r3
 810572a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810572e:	697b      	ldr	r3, [r7, #20]
 8105730:	ee07 3a90 	vmov	s15, r3
 8105734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810573c:	4b7a      	ldr	r3, [pc, #488]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105744:	ee07 3a90 	vmov	s15, r3
 8105748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810574c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105750:	eddf 5a77 	vldr	s11, [pc, #476]	; 8105930 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810575c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105768:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810576c:	e087      	b.n	810587e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810576e:	697b      	ldr	r3, [r7, #20]
 8105770:	ee07 3a90 	vmov	s15, r3
 8105774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105778:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8105934 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810577c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105780:	4b69      	ldr	r3, [pc, #420]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105788:	ee07 3a90 	vmov	s15, r3
 810578c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105790:	ed97 6a03 	vldr	s12, [r7, #12]
 8105794:	eddf 5a66 	vldr	s11, [pc, #408]	; 8105930 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810579c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81057b0:	e065      	b.n	810587e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81057b2:	697b      	ldr	r3, [r7, #20]
 81057b4:	ee07 3a90 	vmov	s15, r3
 81057b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057bc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8105938 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 81057c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057c4:	4b58      	ldr	r3, [pc, #352]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81057c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057cc:	ee07 3a90 	vmov	s15, r3
 81057d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057d4:	ed97 6a03 	vldr	s12, [r7, #12]
 81057d8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8105930 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81057dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81057f4:	e043      	b.n	810587e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81057f6:	697b      	ldr	r3, [r7, #20]
 81057f8:	ee07 3a90 	vmov	s15, r3
 81057fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105800:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810593c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8105804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105808:	4b47      	ldr	r3, [pc, #284]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810580c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105810:	ee07 3a90 	vmov	s15, r3
 8105814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105818:	ed97 6a03 	vldr	s12, [r7, #12]
 810581c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8105930 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810582c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105834:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105838:	e021      	b.n	810587e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810583a:	697b      	ldr	r3, [r7, #20]
 810583c:	ee07 3a90 	vmov	s15, r3
 8105840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105844:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8105934 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810584c:	4b36      	ldr	r3, [pc, #216]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105854:	ee07 3a90 	vmov	s15, r3
 8105858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810585c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105860:	eddf 5a33 	vldr	s11, [pc, #204]	; 8105930 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810586c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105878:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810587c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 810587e:	4b2a      	ldr	r3, [pc, #168]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105882:	0a5b      	lsrs	r3, r3, #9
 8105884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105888:	ee07 3a90 	vmov	s15, r3
 810588c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105894:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105898:	edd7 6a07 	vldr	s13, [r7, #28]
 810589c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81058a4:	ee17 2a90 	vmov	r2, s15
 81058a8:	687b      	ldr	r3, [r7, #4]
 81058aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 81058ac:	4b1e      	ldr	r3, [pc, #120]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058b0:	0c1b      	lsrs	r3, r3, #16
 81058b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81058b6:	ee07 3a90 	vmov	s15, r3
 81058ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81058c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81058c6:	edd7 6a07 	vldr	s13, [r7, #28]
 81058ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81058d2:	ee17 2a90 	vmov	r2, s15
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 81058da:	4b13      	ldr	r3, [pc, #76]	; (8105928 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058de:	0e1b      	lsrs	r3, r3, #24
 81058e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81058e4:	ee07 3a90 	vmov	s15, r3
 81058e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81058f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81058f4:	edd7 6a07 	vldr	s13, [r7, #28]
 81058f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105900:	ee17 2a90 	vmov	r2, s15
 8105904:	687b      	ldr	r3, [r7, #4]
 8105906:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105908:	e008      	b.n	810591c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810590a:	687b      	ldr	r3, [r7, #4]
 810590c:	2200      	movs	r2, #0
 810590e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	2200      	movs	r2, #0
 8105914:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	2200      	movs	r2, #0
 810591a:	609a      	str	r2, [r3, #8]
}
 810591c:	bf00      	nop
 810591e:	3724      	adds	r7, #36	; 0x24
 8105920:	46bd      	mov	sp, r7
 8105922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105926:	4770      	bx	lr
 8105928:	58024400 	.word	0x58024400
 810592c:	03d09000 	.word	0x03d09000
 8105930:	46000000 	.word	0x46000000
 8105934:	4c742400 	.word	0x4c742400
 8105938:	4a742400 	.word	0x4a742400
 810593c:	4af42400 	.word	0x4af42400

08105940 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105940:	b580      	push	{r7, lr}
 8105942:	b084      	sub	sp, #16
 8105944:	af00      	add	r7, sp, #0
 8105946:	6078      	str	r0, [r7, #4]
 8105948:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810594a:	2300      	movs	r3, #0
 810594c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810594e:	4b54      	ldr	r3, [pc, #336]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105952:	f003 0303 	and.w	r3, r3, #3
 8105956:	2b03      	cmp	r3, #3
 8105958:	d101      	bne.n	810595e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810595a:	2301      	movs	r3, #1
 810595c:	e09b      	b.n	8105a96 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810595e:	4b50      	ldr	r3, [pc, #320]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	4a4f      	ldr	r2, [pc, #316]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105964:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810596a:	f7fc f9b9 	bl	8101ce0 <HAL_GetTick>
 810596e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105970:	e008      	b.n	8105984 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105972:	f7fc f9b5 	bl	8101ce0 <HAL_GetTick>
 8105976:	4602      	mov	r2, r0
 8105978:	68bb      	ldr	r3, [r7, #8]
 810597a:	1ad3      	subs	r3, r2, r3
 810597c:	2b02      	cmp	r3, #2
 810597e:	d901      	bls.n	8105984 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105980:	2303      	movs	r3, #3
 8105982:	e088      	b.n	8105a96 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105984:	4b46      	ldr	r3, [pc, #280]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105986:	681b      	ldr	r3, [r3, #0]
 8105988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810598c:	2b00      	cmp	r3, #0
 810598e:	d1f0      	bne.n	8105972 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105990:	4b43      	ldr	r3, [pc, #268]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105994:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8105998:	687b      	ldr	r3, [r7, #4]
 810599a:	681b      	ldr	r3, [r3, #0]
 810599c:	031b      	lsls	r3, r3, #12
 810599e:	4940      	ldr	r1, [pc, #256]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 81059a0:	4313      	orrs	r3, r2
 81059a2:	628b      	str	r3, [r1, #40]	; 0x28
 81059a4:	687b      	ldr	r3, [r7, #4]
 81059a6:	685b      	ldr	r3, [r3, #4]
 81059a8:	3b01      	subs	r3, #1
 81059aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	689b      	ldr	r3, [r3, #8]
 81059b2:	3b01      	subs	r3, #1
 81059b4:	025b      	lsls	r3, r3, #9
 81059b6:	b29b      	uxth	r3, r3
 81059b8:	431a      	orrs	r2, r3
 81059ba:	687b      	ldr	r3, [r7, #4]
 81059bc:	68db      	ldr	r3, [r3, #12]
 81059be:	3b01      	subs	r3, #1
 81059c0:	041b      	lsls	r3, r3, #16
 81059c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81059c6:	431a      	orrs	r2, r3
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	691b      	ldr	r3, [r3, #16]
 81059cc:	3b01      	subs	r3, #1
 81059ce:	061b      	lsls	r3, r3, #24
 81059d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81059d4:	4932      	ldr	r1, [pc, #200]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 81059d6:	4313      	orrs	r3, r2
 81059d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81059da:	4b31      	ldr	r3, [pc, #196]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 81059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81059e2:	687b      	ldr	r3, [r7, #4]
 81059e4:	695b      	ldr	r3, [r3, #20]
 81059e6:	492e      	ldr	r1, [pc, #184]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 81059e8:	4313      	orrs	r3, r2
 81059ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81059ec:	4b2c      	ldr	r3, [pc, #176]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 81059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059f0:	f023 0220 	bic.w	r2, r3, #32
 81059f4:	687b      	ldr	r3, [r7, #4]
 81059f6:	699b      	ldr	r3, [r3, #24]
 81059f8:	4929      	ldr	r1, [pc, #164]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 81059fa:	4313      	orrs	r3, r2
 81059fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81059fe:	4b28      	ldr	r3, [pc, #160]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a02:	4a27      	ldr	r2, [pc, #156]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a04:	f023 0310 	bic.w	r3, r3, #16
 8105a08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105a0a:	4b25      	ldr	r3, [pc, #148]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105a12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105a16:	687a      	ldr	r2, [r7, #4]
 8105a18:	69d2      	ldr	r2, [r2, #28]
 8105a1a:	00d2      	lsls	r2, r2, #3
 8105a1c:	4920      	ldr	r1, [pc, #128]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a1e:	4313      	orrs	r3, r2
 8105a20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105a22:	4b1f      	ldr	r3, [pc, #124]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a26:	4a1e      	ldr	r2, [pc, #120]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a28:	f043 0310 	orr.w	r3, r3, #16
 8105a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105a2e:	683b      	ldr	r3, [r7, #0]
 8105a30:	2b00      	cmp	r3, #0
 8105a32:	d106      	bne.n	8105a42 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105a34:	4b1a      	ldr	r3, [pc, #104]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a38:	4a19      	ldr	r2, [pc, #100]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105a40:	e00f      	b.n	8105a62 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105a42:	683b      	ldr	r3, [r7, #0]
 8105a44:	2b01      	cmp	r3, #1
 8105a46:	d106      	bne.n	8105a56 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105a48:	4b15      	ldr	r3, [pc, #84]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a4c:	4a14      	ldr	r2, [pc, #80]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105a52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105a54:	e005      	b.n	8105a62 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105a56:	4b12      	ldr	r3, [pc, #72]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a5a:	4a11      	ldr	r2, [pc, #68]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105a60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105a62:	4b0f      	ldr	r3, [pc, #60]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a64:	681b      	ldr	r3, [r3, #0]
 8105a66:	4a0e      	ldr	r2, [pc, #56]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105a6e:	f7fc f937 	bl	8101ce0 <HAL_GetTick>
 8105a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105a74:	e008      	b.n	8105a88 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105a76:	f7fc f933 	bl	8101ce0 <HAL_GetTick>
 8105a7a:	4602      	mov	r2, r0
 8105a7c:	68bb      	ldr	r3, [r7, #8]
 8105a7e:	1ad3      	subs	r3, r2, r3
 8105a80:	2b02      	cmp	r3, #2
 8105a82:	d901      	bls.n	8105a88 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105a84:	2303      	movs	r3, #3
 8105a86:	e006      	b.n	8105a96 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105a88:	4b05      	ldr	r3, [pc, #20]	; (8105aa0 <RCCEx_PLL2_Config+0x160>)
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105a90:	2b00      	cmp	r3, #0
 8105a92:	d0f0      	beq.n	8105a76 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8105a96:	4618      	mov	r0, r3
 8105a98:	3710      	adds	r7, #16
 8105a9a:	46bd      	mov	sp, r7
 8105a9c:	bd80      	pop	{r7, pc}
 8105a9e:	bf00      	nop
 8105aa0:	58024400 	.word	0x58024400

08105aa4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105aa4:	b580      	push	{r7, lr}
 8105aa6:	b084      	sub	sp, #16
 8105aa8:	af00      	add	r7, sp, #0
 8105aaa:	6078      	str	r0, [r7, #4]
 8105aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105aae:	2300      	movs	r3, #0
 8105ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105ab2:	4b54      	ldr	r3, [pc, #336]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105ab6:	f003 0303 	and.w	r3, r3, #3
 8105aba:	2b03      	cmp	r3, #3
 8105abc:	d101      	bne.n	8105ac2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105abe:	2301      	movs	r3, #1
 8105ac0:	e09b      	b.n	8105bfa <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8105ac2:	4b50      	ldr	r3, [pc, #320]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105ac4:	681b      	ldr	r3, [r3, #0]
 8105ac6:	4a4f      	ldr	r2, [pc, #316]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105ace:	f7fc f907 	bl	8101ce0 <HAL_GetTick>
 8105ad2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105ad4:	e008      	b.n	8105ae8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105ad6:	f7fc f903 	bl	8101ce0 <HAL_GetTick>
 8105ada:	4602      	mov	r2, r0
 8105adc:	68bb      	ldr	r3, [r7, #8]
 8105ade:	1ad3      	subs	r3, r2, r3
 8105ae0:	2b02      	cmp	r3, #2
 8105ae2:	d901      	bls.n	8105ae8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105ae4:	2303      	movs	r3, #3
 8105ae6:	e088      	b.n	8105bfa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105ae8:	4b46      	ldr	r3, [pc, #280]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105aea:	681b      	ldr	r3, [r3, #0]
 8105aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105af0:	2b00      	cmp	r3, #0
 8105af2:	d1f0      	bne.n	8105ad6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105af4:	4b43      	ldr	r3, [pc, #268]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105af8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	681b      	ldr	r3, [r3, #0]
 8105b00:	051b      	lsls	r3, r3, #20
 8105b02:	4940      	ldr	r1, [pc, #256]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b04:	4313      	orrs	r3, r2
 8105b06:	628b      	str	r3, [r1, #40]	; 0x28
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	685b      	ldr	r3, [r3, #4]
 8105b0c:	3b01      	subs	r3, #1
 8105b0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105b12:	687b      	ldr	r3, [r7, #4]
 8105b14:	689b      	ldr	r3, [r3, #8]
 8105b16:	3b01      	subs	r3, #1
 8105b18:	025b      	lsls	r3, r3, #9
 8105b1a:	b29b      	uxth	r3, r3
 8105b1c:	431a      	orrs	r2, r3
 8105b1e:	687b      	ldr	r3, [r7, #4]
 8105b20:	68db      	ldr	r3, [r3, #12]
 8105b22:	3b01      	subs	r3, #1
 8105b24:	041b      	lsls	r3, r3, #16
 8105b26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105b2a:	431a      	orrs	r2, r3
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	691b      	ldr	r3, [r3, #16]
 8105b30:	3b01      	subs	r3, #1
 8105b32:	061b      	lsls	r3, r3, #24
 8105b34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105b38:	4932      	ldr	r1, [pc, #200]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b3a:	4313      	orrs	r3, r2
 8105b3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105b3e:	4b31      	ldr	r3, [pc, #196]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	695b      	ldr	r3, [r3, #20]
 8105b4a:	492e      	ldr	r1, [pc, #184]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b4c:	4313      	orrs	r3, r2
 8105b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105b50:	4b2c      	ldr	r3, [pc, #176]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	699b      	ldr	r3, [r3, #24]
 8105b5c:	4929      	ldr	r1, [pc, #164]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b5e:	4313      	orrs	r3, r2
 8105b60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105b62:	4b28      	ldr	r3, [pc, #160]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b66:	4a27      	ldr	r2, [pc, #156]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105b6e:	4b25      	ldr	r3, [pc, #148]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105b76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105b7a:	687a      	ldr	r2, [r7, #4]
 8105b7c:	69d2      	ldr	r2, [r2, #28]
 8105b7e:	00d2      	lsls	r2, r2, #3
 8105b80:	4920      	ldr	r1, [pc, #128]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b82:	4313      	orrs	r3, r2
 8105b84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105b86:	4b1f      	ldr	r3, [pc, #124]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b8a:	4a1e      	ldr	r2, [pc, #120]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105b90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105b92:	683b      	ldr	r3, [r7, #0]
 8105b94:	2b00      	cmp	r3, #0
 8105b96:	d106      	bne.n	8105ba6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105b98:	4b1a      	ldr	r3, [pc, #104]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b9c:	4a19      	ldr	r2, [pc, #100]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105b9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8105ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105ba4:	e00f      	b.n	8105bc6 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105ba6:	683b      	ldr	r3, [r7, #0]
 8105ba8:	2b01      	cmp	r3, #1
 8105baa:	d106      	bne.n	8105bba <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105bac:	4b15      	ldr	r3, [pc, #84]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bb0:	4a14      	ldr	r2, [pc, #80]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105bb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105bb8:	e005      	b.n	8105bc6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105bba:	4b12      	ldr	r3, [pc, #72]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bbe:	4a11      	ldr	r2, [pc, #68]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105bc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105bc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105bc6:	4b0f      	ldr	r3, [pc, #60]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105bc8:	681b      	ldr	r3, [r3, #0]
 8105bca:	4a0e      	ldr	r2, [pc, #56]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105bd2:	f7fc f885 	bl	8101ce0 <HAL_GetTick>
 8105bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105bd8:	e008      	b.n	8105bec <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105bda:	f7fc f881 	bl	8101ce0 <HAL_GetTick>
 8105bde:	4602      	mov	r2, r0
 8105be0:	68bb      	ldr	r3, [r7, #8]
 8105be2:	1ad3      	subs	r3, r2, r3
 8105be4:	2b02      	cmp	r3, #2
 8105be6:	d901      	bls.n	8105bec <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105be8:	2303      	movs	r3, #3
 8105bea:	e006      	b.n	8105bfa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105bec:	4b05      	ldr	r3, [pc, #20]	; (8105c04 <RCCEx_PLL3_Config+0x160>)
 8105bee:	681b      	ldr	r3, [r3, #0]
 8105bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105bf4:	2b00      	cmp	r3, #0
 8105bf6:	d0f0      	beq.n	8105bda <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8105bfa:	4618      	mov	r0, r3
 8105bfc:	3710      	adds	r7, #16
 8105bfe:	46bd      	mov	sp, r7
 8105c00:	bd80      	pop	{r7, pc}
 8105c02:	bf00      	nop
 8105c04:	58024400 	.word	0x58024400

08105c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105c08:	b580      	push	{r7, lr}
 8105c0a:	b082      	sub	sp, #8
 8105c0c:	af00      	add	r7, sp, #0
 8105c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105c10:	687b      	ldr	r3, [r7, #4]
 8105c12:	2b00      	cmp	r3, #0
 8105c14:	d101      	bne.n	8105c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8105c16:	2301      	movs	r3, #1
 8105c18:	e049      	b.n	8105cae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105c1a:	687b      	ldr	r3, [r7, #4]
 8105c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105c20:	b2db      	uxtb	r3, r3
 8105c22:	2b00      	cmp	r3, #0
 8105c24:	d106      	bne.n	8105c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105c26:	687b      	ldr	r3, [r7, #4]
 8105c28:	2200      	movs	r2, #0
 8105c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8105c2e:	6878      	ldr	r0, [r7, #4]
 8105c30:	f7fb fe38 	bl	81018a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105c34:	687b      	ldr	r3, [r7, #4]
 8105c36:	2202      	movs	r2, #2
 8105c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	681a      	ldr	r2, [r3, #0]
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	3304      	adds	r3, #4
 8105c44:	4619      	mov	r1, r3
 8105c46:	4610      	mov	r0, r2
 8105c48:	f000 fbb0 	bl	81063ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105c4c:	687b      	ldr	r3, [r7, #4]
 8105c4e:	2201      	movs	r2, #1
 8105c50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105c54:	687b      	ldr	r3, [r7, #4]
 8105c56:	2201      	movs	r2, #1
 8105c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105c5c:	687b      	ldr	r3, [r7, #4]
 8105c5e:	2201      	movs	r2, #1
 8105c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	2201      	movs	r2, #1
 8105c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	2201      	movs	r2, #1
 8105c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105c74:	687b      	ldr	r3, [r7, #4]
 8105c76:	2201      	movs	r2, #1
 8105c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105c7c:	687b      	ldr	r3, [r7, #4]
 8105c7e:	2201      	movs	r2, #1
 8105c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	2201      	movs	r2, #1
 8105c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105c8c:	687b      	ldr	r3, [r7, #4]
 8105c8e:	2201      	movs	r2, #1
 8105c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105c94:	687b      	ldr	r3, [r7, #4]
 8105c96:	2201      	movs	r2, #1
 8105c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	2201      	movs	r2, #1
 8105ca0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105ca4:	687b      	ldr	r3, [r7, #4]
 8105ca6:	2201      	movs	r2, #1
 8105ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105cac:	2300      	movs	r3, #0
}
 8105cae:	4618      	mov	r0, r3
 8105cb0:	3708      	adds	r7, #8
 8105cb2:	46bd      	mov	sp, r7
 8105cb4:	bd80      	pop	{r7, pc}

08105cb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8105cb6:	b580      	push	{r7, lr}
 8105cb8:	b082      	sub	sp, #8
 8105cba:	af00      	add	r7, sp, #0
 8105cbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105cbe:	687b      	ldr	r3, [r7, #4]
 8105cc0:	2b00      	cmp	r3, #0
 8105cc2:	d101      	bne.n	8105cc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8105cc4:	2301      	movs	r3, #1
 8105cc6:	e049      	b.n	8105d5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105cce:	b2db      	uxtb	r3, r3
 8105cd0:	2b00      	cmp	r3, #0
 8105cd2:	d106      	bne.n	8105ce2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105cd4:	687b      	ldr	r3, [r7, #4]
 8105cd6:	2200      	movs	r2, #0
 8105cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8105cdc:	6878      	ldr	r0, [r7, #4]
 8105cde:	f000 f841 	bl	8105d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105ce2:	687b      	ldr	r3, [r7, #4]
 8105ce4:	2202      	movs	r2, #2
 8105ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8105cea:	687b      	ldr	r3, [r7, #4]
 8105cec:	681a      	ldr	r2, [r3, #0]
 8105cee:	687b      	ldr	r3, [r7, #4]
 8105cf0:	3304      	adds	r3, #4
 8105cf2:	4619      	mov	r1, r3
 8105cf4:	4610      	mov	r0, r2
 8105cf6:	f000 fb59 	bl	81063ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	2201      	movs	r2, #1
 8105cfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	2201      	movs	r2, #1
 8105d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105d0a:	687b      	ldr	r3, [r7, #4]
 8105d0c:	2201      	movs	r2, #1
 8105d0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105d12:	687b      	ldr	r3, [r7, #4]
 8105d14:	2201      	movs	r2, #1
 8105d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	2201      	movs	r2, #1
 8105d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105d22:	687b      	ldr	r3, [r7, #4]
 8105d24:	2201      	movs	r2, #1
 8105d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	2201      	movs	r2, #1
 8105d2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105d32:	687b      	ldr	r3, [r7, #4]
 8105d34:	2201      	movs	r2, #1
 8105d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105d3a:	687b      	ldr	r3, [r7, #4]
 8105d3c:	2201      	movs	r2, #1
 8105d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	2201      	movs	r2, #1
 8105d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	2201      	movs	r2, #1
 8105d4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105d52:	687b      	ldr	r3, [r7, #4]
 8105d54:	2201      	movs	r2, #1
 8105d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105d5a:	2300      	movs	r3, #0
}
 8105d5c:	4618      	mov	r0, r3
 8105d5e:	3708      	adds	r7, #8
 8105d60:	46bd      	mov	sp, r7
 8105d62:	bd80      	pop	{r7, pc}

08105d64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8105d64:	b480      	push	{r7}
 8105d66:	b083      	sub	sp, #12
 8105d68:	af00      	add	r7, sp, #0
 8105d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8105d6c:	bf00      	nop
 8105d6e:	370c      	adds	r7, #12
 8105d70:	46bd      	mov	sp, r7
 8105d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d76:	4770      	bx	lr

08105d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8105d78:	b580      	push	{r7, lr}
 8105d7a:	b084      	sub	sp, #16
 8105d7c:	af00      	add	r7, sp, #0
 8105d7e:	6078      	str	r0, [r7, #4]
 8105d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8105d82:	683b      	ldr	r3, [r7, #0]
 8105d84:	2b00      	cmp	r3, #0
 8105d86:	d109      	bne.n	8105d9c <HAL_TIM_PWM_Start+0x24>
 8105d88:	687b      	ldr	r3, [r7, #4]
 8105d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8105d8e:	b2db      	uxtb	r3, r3
 8105d90:	2b01      	cmp	r3, #1
 8105d92:	bf14      	ite	ne
 8105d94:	2301      	movne	r3, #1
 8105d96:	2300      	moveq	r3, #0
 8105d98:	b2db      	uxtb	r3, r3
 8105d9a:	e03c      	b.n	8105e16 <HAL_TIM_PWM_Start+0x9e>
 8105d9c:	683b      	ldr	r3, [r7, #0]
 8105d9e:	2b04      	cmp	r3, #4
 8105da0:	d109      	bne.n	8105db6 <HAL_TIM_PWM_Start+0x3e>
 8105da2:	687b      	ldr	r3, [r7, #4]
 8105da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8105da8:	b2db      	uxtb	r3, r3
 8105daa:	2b01      	cmp	r3, #1
 8105dac:	bf14      	ite	ne
 8105dae:	2301      	movne	r3, #1
 8105db0:	2300      	moveq	r3, #0
 8105db2:	b2db      	uxtb	r3, r3
 8105db4:	e02f      	b.n	8105e16 <HAL_TIM_PWM_Start+0x9e>
 8105db6:	683b      	ldr	r3, [r7, #0]
 8105db8:	2b08      	cmp	r3, #8
 8105dba:	d109      	bne.n	8105dd0 <HAL_TIM_PWM_Start+0x58>
 8105dbc:	687b      	ldr	r3, [r7, #4]
 8105dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105dc2:	b2db      	uxtb	r3, r3
 8105dc4:	2b01      	cmp	r3, #1
 8105dc6:	bf14      	ite	ne
 8105dc8:	2301      	movne	r3, #1
 8105dca:	2300      	moveq	r3, #0
 8105dcc:	b2db      	uxtb	r3, r3
 8105dce:	e022      	b.n	8105e16 <HAL_TIM_PWM_Start+0x9e>
 8105dd0:	683b      	ldr	r3, [r7, #0]
 8105dd2:	2b0c      	cmp	r3, #12
 8105dd4:	d109      	bne.n	8105dea <HAL_TIM_PWM_Start+0x72>
 8105dd6:	687b      	ldr	r3, [r7, #4]
 8105dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105ddc:	b2db      	uxtb	r3, r3
 8105dde:	2b01      	cmp	r3, #1
 8105de0:	bf14      	ite	ne
 8105de2:	2301      	movne	r3, #1
 8105de4:	2300      	moveq	r3, #0
 8105de6:	b2db      	uxtb	r3, r3
 8105de8:	e015      	b.n	8105e16 <HAL_TIM_PWM_Start+0x9e>
 8105dea:	683b      	ldr	r3, [r7, #0]
 8105dec:	2b10      	cmp	r3, #16
 8105dee:	d109      	bne.n	8105e04 <HAL_TIM_PWM_Start+0x8c>
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8105df6:	b2db      	uxtb	r3, r3
 8105df8:	2b01      	cmp	r3, #1
 8105dfa:	bf14      	ite	ne
 8105dfc:	2301      	movne	r3, #1
 8105dfe:	2300      	moveq	r3, #0
 8105e00:	b2db      	uxtb	r3, r3
 8105e02:	e008      	b.n	8105e16 <HAL_TIM_PWM_Start+0x9e>
 8105e04:	687b      	ldr	r3, [r7, #4]
 8105e06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8105e0a:	b2db      	uxtb	r3, r3
 8105e0c:	2b01      	cmp	r3, #1
 8105e0e:	bf14      	ite	ne
 8105e10:	2301      	movne	r3, #1
 8105e12:	2300      	moveq	r3, #0
 8105e14:	b2db      	uxtb	r3, r3
 8105e16:	2b00      	cmp	r3, #0
 8105e18:	d001      	beq.n	8105e1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8105e1a:	2301      	movs	r3, #1
 8105e1c:	e0a1      	b.n	8105f62 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8105e1e:	683b      	ldr	r3, [r7, #0]
 8105e20:	2b00      	cmp	r3, #0
 8105e22:	d104      	bne.n	8105e2e <HAL_TIM_PWM_Start+0xb6>
 8105e24:	687b      	ldr	r3, [r7, #4]
 8105e26:	2202      	movs	r2, #2
 8105e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105e2c:	e023      	b.n	8105e76 <HAL_TIM_PWM_Start+0xfe>
 8105e2e:	683b      	ldr	r3, [r7, #0]
 8105e30:	2b04      	cmp	r3, #4
 8105e32:	d104      	bne.n	8105e3e <HAL_TIM_PWM_Start+0xc6>
 8105e34:	687b      	ldr	r3, [r7, #4]
 8105e36:	2202      	movs	r2, #2
 8105e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105e3c:	e01b      	b.n	8105e76 <HAL_TIM_PWM_Start+0xfe>
 8105e3e:	683b      	ldr	r3, [r7, #0]
 8105e40:	2b08      	cmp	r3, #8
 8105e42:	d104      	bne.n	8105e4e <HAL_TIM_PWM_Start+0xd6>
 8105e44:	687b      	ldr	r3, [r7, #4]
 8105e46:	2202      	movs	r2, #2
 8105e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105e4c:	e013      	b.n	8105e76 <HAL_TIM_PWM_Start+0xfe>
 8105e4e:	683b      	ldr	r3, [r7, #0]
 8105e50:	2b0c      	cmp	r3, #12
 8105e52:	d104      	bne.n	8105e5e <HAL_TIM_PWM_Start+0xe6>
 8105e54:	687b      	ldr	r3, [r7, #4]
 8105e56:	2202      	movs	r2, #2
 8105e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105e5c:	e00b      	b.n	8105e76 <HAL_TIM_PWM_Start+0xfe>
 8105e5e:	683b      	ldr	r3, [r7, #0]
 8105e60:	2b10      	cmp	r3, #16
 8105e62:	d104      	bne.n	8105e6e <HAL_TIM_PWM_Start+0xf6>
 8105e64:	687b      	ldr	r3, [r7, #4]
 8105e66:	2202      	movs	r2, #2
 8105e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105e6c:	e003      	b.n	8105e76 <HAL_TIM_PWM_Start+0xfe>
 8105e6e:	687b      	ldr	r3, [r7, #4]
 8105e70:	2202      	movs	r2, #2
 8105e72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	681b      	ldr	r3, [r3, #0]
 8105e7a:	2201      	movs	r2, #1
 8105e7c:	6839      	ldr	r1, [r7, #0]
 8105e7e:	4618      	mov	r0, r3
 8105e80:	f000 fea0 	bl	8106bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8105e84:	687b      	ldr	r3, [r7, #4]
 8105e86:	681b      	ldr	r3, [r3, #0]
 8105e88:	4a38      	ldr	r2, [pc, #224]	; (8105f6c <HAL_TIM_PWM_Start+0x1f4>)
 8105e8a:	4293      	cmp	r3, r2
 8105e8c:	d013      	beq.n	8105eb6 <HAL_TIM_PWM_Start+0x13e>
 8105e8e:	687b      	ldr	r3, [r7, #4]
 8105e90:	681b      	ldr	r3, [r3, #0]
 8105e92:	4a37      	ldr	r2, [pc, #220]	; (8105f70 <HAL_TIM_PWM_Start+0x1f8>)
 8105e94:	4293      	cmp	r3, r2
 8105e96:	d00e      	beq.n	8105eb6 <HAL_TIM_PWM_Start+0x13e>
 8105e98:	687b      	ldr	r3, [r7, #4]
 8105e9a:	681b      	ldr	r3, [r3, #0]
 8105e9c:	4a35      	ldr	r2, [pc, #212]	; (8105f74 <HAL_TIM_PWM_Start+0x1fc>)
 8105e9e:	4293      	cmp	r3, r2
 8105ea0:	d009      	beq.n	8105eb6 <HAL_TIM_PWM_Start+0x13e>
 8105ea2:	687b      	ldr	r3, [r7, #4]
 8105ea4:	681b      	ldr	r3, [r3, #0]
 8105ea6:	4a34      	ldr	r2, [pc, #208]	; (8105f78 <HAL_TIM_PWM_Start+0x200>)
 8105ea8:	4293      	cmp	r3, r2
 8105eaa:	d004      	beq.n	8105eb6 <HAL_TIM_PWM_Start+0x13e>
 8105eac:	687b      	ldr	r3, [r7, #4]
 8105eae:	681b      	ldr	r3, [r3, #0]
 8105eb0:	4a32      	ldr	r2, [pc, #200]	; (8105f7c <HAL_TIM_PWM_Start+0x204>)
 8105eb2:	4293      	cmp	r3, r2
 8105eb4:	d101      	bne.n	8105eba <HAL_TIM_PWM_Start+0x142>
 8105eb6:	2301      	movs	r3, #1
 8105eb8:	e000      	b.n	8105ebc <HAL_TIM_PWM_Start+0x144>
 8105eba:	2300      	movs	r3, #0
 8105ebc:	2b00      	cmp	r3, #0
 8105ebe:	d007      	beq.n	8105ed0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8105ec0:	687b      	ldr	r3, [r7, #4]
 8105ec2:	681b      	ldr	r3, [r3, #0]
 8105ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105ec6:	687b      	ldr	r3, [r7, #4]
 8105ec8:	681b      	ldr	r3, [r3, #0]
 8105eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8105ece:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	681b      	ldr	r3, [r3, #0]
 8105ed4:	4a25      	ldr	r2, [pc, #148]	; (8105f6c <HAL_TIM_PWM_Start+0x1f4>)
 8105ed6:	4293      	cmp	r3, r2
 8105ed8:	d022      	beq.n	8105f20 <HAL_TIM_PWM_Start+0x1a8>
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	681b      	ldr	r3, [r3, #0]
 8105ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105ee2:	d01d      	beq.n	8105f20 <HAL_TIM_PWM_Start+0x1a8>
 8105ee4:	687b      	ldr	r3, [r7, #4]
 8105ee6:	681b      	ldr	r3, [r3, #0]
 8105ee8:	4a25      	ldr	r2, [pc, #148]	; (8105f80 <HAL_TIM_PWM_Start+0x208>)
 8105eea:	4293      	cmp	r3, r2
 8105eec:	d018      	beq.n	8105f20 <HAL_TIM_PWM_Start+0x1a8>
 8105eee:	687b      	ldr	r3, [r7, #4]
 8105ef0:	681b      	ldr	r3, [r3, #0]
 8105ef2:	4a24      	ldr	r2, [pc, #144]	; (8105f84 <HAL_TIM_PWM_Start+0x20c>)
 8105ef4:	4293      	cmp	r3, r2
 8105ef6:	d013      	beq.n	8105f20 <HAL_TIM_PWM_Start+0x1a8>
 8105ef8:	687b      	ldr	r3, [r7, #4]
 8105efa:	681b      	ldr	r3, [r3, #0]
 8105efc:	4a22      	ldr	r2, [pc, #136]	; (8105f88 <HAL_TIM_PWM_Start+0x210>)
 8105efe:	4293      	cmp	r3, r2
 8105f00:	d00e      	beq.n	8105f20 <HAL_TIM_PWM_Start+0x1a8>
 8105f02:	687b      	ldr	r3, [r7, #4]
 8105f04:	681b      	ldr	r3, [r3, #0]
 8105f06:	4a1a      	ldr	r2, [pc, #104]	; (8105f70 <HAL_TIM_PWM_Start+0x1f8>)
 8105f08:	4293      	cmp	r3, r2
 8105f0a:	d009      	beq.n	8105f20 <HAL_TIM_PWM_Start+0x1a8>
 8105f0c:	687b      	ldr	r3, [r7, #4]
 8105f0e:	681b      	ldr	r3, [r3, #0]
 8105f10:	4a1e      	ldr	r2, [pc, #120]	; (8105f8c <HAL_TIM_PWM_Start+0x214>)
 8105f12:	4293      	cmp	r3, r2
 8105f14:	d004      	beq.n	8105f20 <HAL_TIM_PWM_Start+0x1a8>
 8105f16:	687b      	ldr	r3, [r7, #4]
 8105f18:	681b      	ldr	r3, [r3, #0]
 8105f1a:	4a16      	ldr	r2, [pc, #88]	; (8105f74 <HAL_TIM_PWM_Start+0x1fc>)
 8105f1c:	4293      	cmp	r3, r2
 8105f1e:	d115      	bne.n	8105f4c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105f20:	687b      	ldr	r3, [r7, #4]
 8105f22:	681b      	ldr	r3, [r3, #0]
 8105f24:	689a      	ldr	r2, [r3, #8]
 8105f26:	4b1a      	ldr	r3, [pc, #104]	; (8105f90 <HAL_TIM_PWM_Start+0x218>)
 8105f28:	4013      	ands	r3, r2
 8105f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105f2c:	68fb      	ldr	r3, [r7, #12]
 8105f2e:	2b06      	cmp	r3, #6
 8105f30:	d015      	beq.n	8105f5e <HAL_TIM_PWM_Start+0x1e6>
 8105f32:	68fb      	ldr	r3, [r7, #12]
 8105f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105f38:	d011      	beq.n	8105f5e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	681b      	ldr	r3, [r3, #0]
 8105f3e:	681a      	ldr	r2, [r3, #0]
 8105f40:	687b      	ldr	r3, [r7, #4]
 8105f42:	681b      	ldr	r3, [r3, #0]
 8105f44:	f042 0201 	orr.w	r2, r2, #1
 8105f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105f4a:	e008      	b.n	8105f5e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	681a      	ldr	r2, [r3, #0]
 8105f52:	687b      	ldr	r3, [r7, #4]
 8105f54:	681b      	ldr	r3, [r3, #0]
 8105f56:	f042 0201 	orr.w	r2, r2, #1
 8105f5a:	601a      	str	r2, [r3, #0]
 8105f5c:	e000      	b.n	8105f60 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105f5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8105f60:	2300      	movs	r3, #0
}
 8105f62:	4618      	mov	r0, r3
 8105f64:	3710      	adds	r7, #16
 8105f66:	46bd      	mov	sp, r7
 8105f68:	bd80      	pop	{r7, pc}
 8105f6a:	bf00      	nop
 8105f6c:	40010000 	.word	0x40010000
 8105f70:	40010400 	.word	0x40010400
 8105f74:	40014000 	.word	0x40014000
 8105f78:	40014400 	.word	0x40014400
 8105f7c:	40014800 	.word	0x40014800
 8105f80:	40000400 	.word	0x40000400
 8105f84:	40000800 	.word	0x40000800
 8105f88:	40000c00 	.word	0x40000c00
 8105f8c:	40001800 	.word	0x40001800
 8105f90:	00010007 	.word	0x00010007

08105f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8105f94:	b580      	push	{r7, lr}
 8105f96:	b086      	sub	sp, #24
 8105f98:	af00      	add	r7, sp, #0
 8105f9a:	60f8      	str	r0, [r7, #12]
 8105f9c:	60b9      	str	r1, [r7, #8]
 8105f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105fa0:	2300      	movs	r3, #0
 8105fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8105fa4:	68fb      	ldr	r3, [r7, #12]
 8105fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105faa:	2b01      	cmp	r3, #1
 8105fac:	d101      	bne.n	8105fb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8105fae:	2302      	movs	r3, #2
 8105fb0:	e0ff      	b.n	81061b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8105fb2:	68fb      	ldr	r3, [r7, #12]
 8105fb4:	2201      	movs	r2, #1
 8105fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	2b14      	cmp	r3, #20
 8105fbe:	f200 80f0 	bhi.w	81061a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8105fc2:	a201      	add	r2, pc, #4	; (adr r2, 8105fc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8105fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105fc8:	0810601d 	.word	0x0810601d
 8105fcc:	081061a3 	.word	0x081061a3
 8105fd0:	081061a3 	.word	0x081061a3
 8105fd4:	081061a3 	.word	0x081061a3
 8105fd8:	0810605d 	.word	0x0810605d
 8105fdc:	081061a3 	.word	0x081061a3
 8105fe0:	081061a3 	.word	0x081061a3
 8105fe4:	081061a3 	.word	0x081061a3
 8105fe8:	0810609f 	.word	0x0810609f
 8105fec:	081061a3 	.word	0x081061a3
 8105ff0:	081061a3 	.word	0x081061a3
 8105ff4:	081061a3 	.word	0x081061a3
 8105ff8:	081060df 	.word	0x081060df
 8105ffc:	081061a3 	.word	0x081061a3
 8106000:	081061a3 	.word	0x081061a3
 8106004:	081061a3 	.word	0x081061a3
 8106008:	08106121 	.word	0x08106121
 810600c:	081061a3 	.word	0x081061a3
 8106010:	081061a3 	.word	0x081061a3
 8106014:	081061a3 	.word	0x081061a3
 8106018:	08106161 	.word	0x08106161
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810601c:	68fb      	ldr	r3, [r7, #12]
 810601e:	681b      	ldr	r3, [r3, #0]
 8106020:	68b9      	ldr	r1, [r7, #8]
 8106022:	4618      	mov	r0, r3
 8106024:	f000 fa5c 	bl	81064e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8106028:	68fb      	ldr	r3, [r7, #12]
 810602a:	681b      	ldr	r3, [r3, #0]
 810602c:	699a      	ldr	r2, [r3, #24]
 810602e:	68fb      	ldr	r3, [r7, #12]
 8106030:	681b      	ldr	r3, [r3, #0]
 8106032:	f042 0208 	orr.w	r2, r2, #8
 8106036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8106038:	68fb      	ldr	r3, [r7, #12]
 810603a:	681b      	ldr	r3, [r3, #0]
 810603c:	699a      	ldr	r2, [r3, #24]
 810603e:	68fb      	ldr	r3, [r7, #12]
 8106040:	681b      	ldr	r3, [r3, #0]
 8106042:	f022 0204 	bic.w	r2, r2, #4
 8106046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8106048:	68fb      	ldr	r3, [r7, #12]
 810604a:	681b      	ldr	r3, [r3, #0]
 810604c:	6999      	ldr	r1, [r3, #24]
 810604e:	68bb      	ldr	r3, [r7, #8]
 8106050:	691a      	ldr	r2, [r3, #16]
 8106052:	68fb      	ldr	r3, [r7, #12]
 8106054:	681b      	ldr	r3, [r3, #0]
 8106056:	430a      	orrs	r2, r1
 8106058:	619a      	str	r2, [r3, #24]
      break;
 810605a:	e0a5      	b.n	81061a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810605c:	68fb      	ldr	r3, [r7, #12]
 810605e:	681b      	ldr	r3, [r3, #0]
 8106060:	68b9      	ldr	r1, [r7, #8]
 8106062:	4618      	mov	r0, r3
 8106064:	f000 facc 	bl	8106600 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8106068:	68fb      	ldr	r3, [r7, #12]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	699a      	ldr	r2, [r3, #24]
 810606e:	68fb      	ldr	r3, [r7, #12]
 8106070:	681b      	ldr	r3, [r3, #0]
 8106072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8106078:	68fb      	ldr	r3, [r7, #12]
 810607a:	681b      	ldr	r3, [r3, #0]
 810607c:	699a      	ldr	r2, [r3, #24]
 810607e:	68fb      	ldr	r3, [r7, #12]
 8106080:	681b      	ldr	r3, [r3, #0]
 8106082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8106088:	68fb      	ldr	r3, [r7, #12]
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	6999      	ldr	r1, [r3, #24]
 810608e:	68bb      	ldr	r3, [r7, #8]
 8106090:	691b      	ldr	r3, [r3, #16]
 8106092:	021a      	lsls	r2, r3, #8
 8106094:	68fb      	ldr	r3, [r7, #12]
 8106096:	681b      	ldr	r3, [r3, #0]
 8106098:	430a      	orrs	r2, r1
 810609a:	619a      	str	r2, [r3, #24]
      break;
 810609c:	e084      	b.n	81061a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810609e:	68fb      	ldr	r3, [r7, #12]
 81060a0:	681b      	ldr	r3, [r3, #0]
 81060a2:	68b9      	ldr	r1, [r7, #8]
 81060a4:	4618      	mov	r0, r3
 81060a6:	f000 fb35 	bl	8106714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81060aa:	68fb      	ldr	r3, [r7, #12]
 81060ac:	681b      	ldr	r3, [r3, #0]
 81060ae:	69da      	ldr	r2, [r3, #28]
 81060b0:	68fb      	ldr	r3, [r7, #12]
 81060b2:	681b      	ldr	r3, [r3, #0]
 81060b4:	f042 0208 	orr.w	r2, r2, #8
 81060b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81060ba:	68fb      	ldr	r3, [r7, #12]
 81060bc:	681b      	ldr	r3, [r3, #0]
 81060be:	69da      	ldr	r2, [r3, #28]
 81060c0:	68fb      	ldr	r3, [r7, #12]
 81060c2:	681b      	ldr	r3, [r3, #0]
 81060c4:	f022 0204 	bic.w	r2, r2, #4
 81060c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81060ca:	68fb      	ldr	r3, [r7, #12]
 81060cc:	681b      	ldr	r3, [r3, #0]
 81060ce:	69d9      	ldr	r1, [r3, #28]
 81060d0:	68bb      	ldr	r3, [r7, #8]
 81060d2:	691a      	ldr	r2, [r3, #16]
 81060d4:	68fb      	ldr	r3, [r7, #12]
 81060d6:	681b      	ldr	r3, [r3, #0]
 81060d8:	430a      	orrs	r2, r1
 81060da:	61da      	str	r2, [r3, #28]
      break;
 81060dc:	e064      	b.n	81061a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81060de:	68fb      	ldr	r3, [r7, #12]
 81060e0:	681b      	ldr	r3, [r3, #0]
 81060e2:	68b9      	ldr	r1, [r7, #8]
 81060e4:	4618      	mov	r0, r3
 81060e6:	f000 fb9d 	bl	8106824 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81060ea:	68fb      	ldr	r3, [r7, #12]
 81060ec:	681b      	ldr	r3, [r3, #0]
 81060ee:	69da      	ldr	r2, [r3, #28]
 81060f0:	68fb      	ldr	r3, [r7, #12]
 81060f2:	681b      	ldr	r3, [r3, #0]
 81060f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81060f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81060fa:	68fb      	ldr	r3, [r7, #12]
 81060fc:	681b      	ldr	r3, [r3, #0]
 81060fe:	69da      	ldr	r2, [r3, #28]
 8106100:	68fb      	ldr	r3, [r7, #12]
 8106102:	681b      	ldr	r3, [r3, #0]
 8106104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810610a:	68fb      	ldr	r3, [r7, #12]
 810610c:	681b      	ldr	r3, [r3, #0]
 810610e:	69d9      	ldr	r1, [r3, #28]
 8106110:	68bb      	ldr	r3, [r7, #8]
 8106112:	691b      	ldr	r3, [r3, #16]
 8106114:	021a      	lsls	r2, r3, #8
 8106116:	68fb      	ldr	r3, [r7, #12]
 8106118:	681b      	ldr	r3, [r3, #0]
 810611a:	430a      	orrs	r2, r1
 810611c:	61da      	str	r2, [r3, #28]
      break;
 810611e:	e043      	b.n	81061a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8106120:	68fb      	ldr	r3, [r7, #12]
 8106122:	681b      	ldr	r3, [r3, #0]
 8106124:	68b9      	ldr	r1, [r7, #8]
 8106126:	4618      	mov	r0, r3
 8106128:	f000 fbe6 	bl	81068f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 810612c:	68fb      	ldr	r3, [r7, #12]
 810612e:	681b      	ldr	r3, [r3, #0]
 8106130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106132:	68fb      	ldr	r3, [r7, #12]
 8106134:	681b      	ldr	r3, [r3, #0]
 8106136:	f042 0208 	orr.w	r2, r2, #8
 810613a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810613c:	68fb      	ldr	r3, [r7, #12]
 810613e:	681b      	ldr	r3, [r3, #0]
 8106140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106142:	68fb      	ldr	r3, [r7, #12]
 8106144:	681b      	ldr	r3, [r3, #0]
 8106146:	f022 0204 	bic.w	r2, r2, #4
 810614a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810614c:	68fb      	ldr	r3, [r7, #12]
 810614e:	681b      	ldr	r3, [r3, #0]
 8106150:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8106152:	68bb      	ldr	r3, [r7, #8]
 8106154:	691a      	ldr	r2, [r3, #16]
 8106156:	68fb      	ldr	r3, [r7, #12]
 8106158:	681b      	ldr	r3, [r3, #0]
 810615a:	430a      	orrs	r2, r1
 810615c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810615e:	e023      	b.n	81061a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8106160:	68fb      	ldr	r3, [r7, #12]
 8106162:	681b      	ldr	r3, [r3, #0]
 8106164:	68b9      	ldr	r1, [r7, #8]
 8106166:	4618      	mov	r0, r3
 8106168:	f000 fc2a 	bl	81069c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810616c:	68fb      	ldr	r3, [r7, #12]
 810616e:	681b      	ldr	r3, [r3, #0]
 8106170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106172:	68fb      	ldr	r3, [r7, #12]
 8106174:	681b      	ldr	r3, [r3, #0]
 8106176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810617a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810617c:	68fb      	ldr	r3, [r7, #12]
 810617e:	681b      	ldr	r3, [r3, #0]
 8106180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106182:	68fb      	ldr	r3, [r7, #12]
 8106184:	681b      	ldr	r3, [r3, #0]
 8106186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810618a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810618c:	68fb      	ldr	r3, [r7, #12]
 810618e:	681b      	ldr	r3, [r3, #0]
 8106190:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8106192:	68bb      	ldr	r3, [r7, #8]
 8106194:	691b      	ldr	r3, [r3, #16]
 8106196:	021a      	lsls	r2, r3, #8
 8106198:	68fb      	ldr	r3, [r7, #12]
 810619a:	681b      	ldr	r3, [r3, #0]
 810619c:	430a      	orrs	r2, r1
 810619e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81061a0:	e002      	b.n	81061a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81061a2:	2301      	movs	r3, #1
 81061a4:	75fb      	strb	r3, [r7, #23]
      break;
 81061a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81061a8:	68fb      	ldr	r3, [r7, #12]
 81061aa:	2200      	movs	r2, #0
 81061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81061b0:	7dfb      	ldrb	r3, [r7, #23]
}
 81061b2:	4618      	mov	r0, r3
 81061b4:	3718      	adds	r7, #24
 81061b6:	46bd      	mov	sp, r7
 81061b8:	bd80      	pop	{r7, pc}
 81061ba:	bf00      	nop

081061bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81061bc:	b580      	push	{r7, lr}
 81061be:	b084      	sub	sp, #16
 81061c0:	af00      	add	r7, sp, #0
 81061c2:	6078      	str	r0, [r7, #4]
 81061c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81061c6:	2300      	movs	r3, #0
 81061c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81061ca:	687b      	ldr	r3, [r7, #4]
 81061cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81061d0:	2b01      	cmp	r3, #1
 81061d2:	d101      	bne.n	81061d8 <HAL_TIM_ConfigClockSource+0x1c>
 81061d4:	2302      	movs	r3, #2
 81061d6:	e0de      	b.n	8106396 <HAL_TIM_ConfigClockSource+0x1da>
 81061d8:	687b      	ldr	r3, [r7, #4]
 81061da:	2201      	movs	r2, #1
 81061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81061e0:	687b      	ldr	r3, [r7, #4]
 81061e2:	2202      	movs	r2, #2
 81061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	681b      	ldr	r3, [r3, #0]
 81061ec:	689b      	ldr	r3, [r3, #8]
 81061ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81061f0:	68bb      	ldr	r3, [r7, #8]
 81061f2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81061f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81061fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81061fc:	68bb      	ldr	r3, [r7, #8]
 81061fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106202:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8106204:	687b      	ldr	r3, [r7, #4]
 8106206:	681b      	ldr	r3, [r3, #0]
 8106208:	68ba      	ldr	r2, [r7, #8]
 810620a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810620c:	683b      	ldr	r3, [r7, #0]
 810620e:	681b      	ldr	r3, [r3, #0]
 8106210:	4a63      	ldr	r2, [pc, #396]	; (81063a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8106212:	4293      	cmp	r3, r2
 8106214:	f000 80a9 	beq.w	810636a <HAL_TIM_ConfigClockSource+0x1ae>
 8106218:	4a61      	ldr	r2, [pc, #388]	; (81063a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 810621a:	4293      	cmp	r3, r2
 810621c:	f200 80ae 	bhi.w	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 8106220:	4a60      	ldr	r2, [pc, #384]	; (81063a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8106222:	4293      	cmp	r3, r2
 8106224:	f000 80a1 	beq.w	810636a <HAL_TIM_ConfigClockSource+0x1ae>
 8106228:	4a5e      	ldr	r2, [pc, #376]	; (81063a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 810622a:	4293      	cmp	r3, r2
 810622c:	f200 80a6 	bhi.w	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 8106230:	4a5d      	ldr	r2, [pc, #372]	; (81063a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8106232:	4293      	cmp	r3, r2
 8106234:	f000 8099 	beq.w	810636a <HAL_TIM_ConfigClockSource+0x1ae>
 8106238:	4a5b      	ldr	r2, [pc, #364]	; (81063a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 810623a:	4293      	cmp	r3, r2
 810623c:	f200 809e 	bhi.w	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 8106240:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8106244:	f000 8091 	beq.w	810636a <HAL_TIM_ConfigClockSource+0x1ae>
 8106248:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810624c:	f200 8096 	bhi.w	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 8106250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106254:	f000 8089 	beq.w	810636a <HAL_TIM_ConfigClockSource+0x1ae>
 8106258:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810625c:	f200 808e 	bhi.w	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 8106260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106264:	d03e      	beq.n	81062e4 <HAL_TIM_ConfigClockSource+0x128>
 8106266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810626a:	f200 8087 	bhi.w	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 810626e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106272:	f000 8086 	beq.w	8106382 <HAL_TIM_ConfigClockSource+0x1c6>
 8106276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810627a:	d87f      	bhi.n	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 810627c:	2b70      	cmp	r3, #112	; 0x70
 810627e:	d01a      	beq.n	81062b6 <HAL_TIM_ConfigClockSource+0xfa>
 8106280:	2b70      	cmp	r3, #112	; 0x70
 8106282:	d87b      	bhi.n	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 8106284:	2b60      	cmp	r3, #96	; 0x60
 8106286:	d050      	beq.n	810632a <HAL_TIM_ConfigClockSource+0x16e>
 8106288:	2b60      	cmp	r3, #96	; 0x60
 810628a:	d877      	bhi.n	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 810628c:	2b50      	cmp	r3, #80	; 0x50
 810628e:	d03c      	beq.n	810630a <HAL_TIM_ConfigClockSource+0x14e>
 8106290:	2b50      	cmp	r3, #80	; 0x50
 8106292:	d873      	bhi.n	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 8106294:	2b40      	cmp	r3, #64	; 0x40
 8106296:	d058      	beq.n	810634a <HAL_TIM_ConfigClockSource+0x18e>
 8106298:	2b40      	cmp	r3, #64	; 0x40
 810629a:	d86f      	bhi.n	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 810629c:	2b30      	cmp	r3, #48	; 0x30
 810629e:	d064      	beq.n	810636a <HAL_TIM_ConfigClockSource+0x1ae>
 81062a0:	2b30      	cmp	r3, #48	; 0x30
 81062a2:	d86b      	bhi.n	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 81062a4:	2b20      	cmp	r3, #32
 81062a6:	d060      	beq.n	810636a <HAL_TIM_ConfigClockSource+0x1ae>
 81062a8:	2b20      	cmp	r3, #32
 81062aa:	d867      	bhi.n	810637c <HAL_TIM_ConfigClockSource+0x1c0>
 81062ac:	2b00      	cmp	r3, #0
 81062ae:	d05c      	beq.n	810636a <HAL_TIM_ConfigClockSource+0x1ae>
 81062b0:	2b10      	cmp	r3, #16
 81062b2:	d05a      	beq.n	810636a <HAL_TIM_ConfigClockSource+0x1ae>
 81062b4:	e062      	b.n	810637c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81062b6:	687b      	ldr	r3, [r7, #4]
 81062b8:	6818      	ldr	r0, [r3, #0]
 81062ba:	683b      	ldr	r3, [r7, #0]
 81062bc:	6899      	ldr	r1, [r3, #8]
 81062be:	683b      	ldr	r3, [r7, #0]
 81062c0:	685a      	ldr	r2, [r3, #4]
 81062c2:	683b      	ldr	r3, [r7, #0]
 81062c4:	68db      	ldr	r3, [r3, #12]
 81062c6:	f000 fc5d 	bl	8106b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	681b      	ldr	r3, [r3, #0]
 81062ce:	689b      	ldr	r3, [r3, #8]
 81062d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81062d2:	68bb      	ldr	r3, [r7, #8]
 81062d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81062d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 81062da:	687b      	ldr	r3, [r7, #4]
 81062dc:	681b      	ldr	r3, [r3, #0]
 81062de:	68ba      	ldr	r2, [r7, #8]
 81062e0:	609a      	str	r2, [r3, #8]
      break;
 81062e2:	e04f      	b.n	8106384 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81062e4:	687b      	ldr	r3, [r7, #4]
 81062e6:	6818      	ldr	r0, [r3, #0]
 81062e8:	683b      	ldr	r3, [r7, #0]
 81062ea:	6899      	ldr	r1, [r3, #8]
 81062ec:	683b      	ldr	r3, [r7, #0]
 81062ee:	685a      	ldr	r2, [r3, #4]
 81062f0:	683b      	ldr	r3, [r7, #0]
 81062f2:	68db      	ldr	r3, [r3, #12]
 81062f4:	f000 fc46 	bl	8106b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81062f8:	687b      	ldr	r3, [r7, #4]
 81062fa:	681b      	ldr	r3, [r3, #0]
 81062fc:	689a      	ldr	r2, [r3, #8]
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	681b      	ldr	r3, [r3, #0]
 8106302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8106306:	609a      	str	r2, [r3, #8]
      break;
 8106308:	e03c      	b.n	8106384 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810630a:	687b      	ldr	r3, [r7, #4]
 810630c:	6818      	ldr	r0, [r3, #0]
 810630e:	683b      	ldr	r3, [r7, #0]
 8106310:	6859      	ldr	r1, [r3, #4]
 8106312:	683b      	ldr	r3, [r7, #0]
 8106314:	68db      	ldr	r3, [r3, #12]
 8106316:	461a      	mov	r2, r3
 8106318:	f000 fbb8 	bl	8106a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	2150      	movs	r1, #80	; 0x50
 8106322:	4618      	mov	r0, r3
 8106324:	f000 fc11 	bl	8106b4a <TIM_ITRx_SetConfig>
      break;
 8106328:	e02c      	b.n	8106384 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810632a:	687b      	ldr	r3, [r7, #4]
 810632c:	6818      	ldr	r0, [r3, #0]
 810632e:	683b      	ldr	r3, [r7, #0]
 8106330:	6859      	ldr	r1, [r3, #4]
 8106332:	683b      	ldr	r3, [r7, #0]
 8106334:	68db      	ldr	r3, [r3, #12]
 8106336:	461a      	mov	r2, r3
 8106338:	f000 fbd7 	bl	8106aea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810633c:	687b      	ldr	r3, [r7, #4]
 810633e:	681b      	ldr	r3, [r3, #0]
 8106340:	2160      	movs	r1, #96	; 0x60
 8106342:	4618      	mov	r0, r3
 8106344:	f000 fc01 	bl	8106b4a <TIM_ITRx_SetConfig>
      break;
 8106348:	e01c      	b.n	8106384 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	6818      	ldr	r0, [r3, #0]
 810634e:	683b      	ldr	r3, [r7, #0]
 8106350:	6859      	ldr	r1, [r3, #4]
 8106352:	683b      	ldr	r3, [r7, #0]
 8106354:	68db      	ldr	r3, [r3, #12]
 8106356:	461a      	mov	r2, r3
 8106358:	f000 fb98 	bl	8106a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 810635c:	687b      	ldr	r3, [r7, #4]
 810635e:	681b      	ldr	r3, [r3, #0]
 8106360:	2140      	movs	r1, #64	; 0x40
 8106362:	4618      	mov	r0, r3
 8106364:	f000 fbf1 	bl	8106b4a <TIM_ITRx_SetConfig>
      break;
 8106368:	e00c      	b.n	8106384 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 810636a:	687b      	ldr	r3, [r7, #4]
 810636c:	681a      	ldr	r2, [r3, #0]
 810636e:	683b      	ldr	r3, [r7, #0]
 8106370:	681b      	ldr	r3, [r3, #0]
 8106372:	4619      	mov	r1, r3
 8106374:	4610      	mov	r0, r2
 8106376:	f000 fbe8 	bl	8106b4a <TIM_ITRx_SetConfig>
      break;
 810637a:	e003      	b.n	8106384 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 810637c:	2301      	movs	r3, #1
 810637e:	73fb      	strb	r3, [r7, #15]
      break;
 8106380:	e000      	b.n	8106384 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8106382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	2201      	movs	r2, #1
 8106388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	2200      	movs	r2, #0
 8106390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8106394:	7bfb      	ldrb	r3, [r7, #15]
}
 8106396:	4618      	mov	r0, r3
 8106398:	3710      	adds	r7, #16
 810639a:	46bd      	mov	sp, r7
 810639c:	bd80      	pop	{r7, pc}
 810639e:	bf00      	nop
 81063a0:	00100040 	.word	0x00100040
 81063a4:	00100030 	.word	0x00100030
 81063a8:	00100020 	.word	0x00100020

081063ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81063ac:	b480      	push	{r7}
 81063ae:	b085      	sub	sp, #20
 81063b0:	af00      	add	r7, sp, #0
 81063b2:	6078      	str	r0, [r7, #4]
 81063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	681b      	ldr	r3, [r3, #0]
 81063ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	4a40      	ldr	r2, [pc, #256]	; (81064c0 <TIM_Base_SetConfig+0x114>)
 81063c0:	4293      	cmp	r3, r2
 81063c2:	d013      	beq.n	81063ec <TIM_Base_SetConfig+0x40>
 81063c4:	687b      	ldr	r3, [r7, #4]
 81063c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81063ca:	d00f      	beq.n	81063ec <TIM_Base_SetConfig+0x40>
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	4a3d      	ldr	r2, [pc, #244]	; (81064c4 <TIM_Base_SetConfig+0x118>)
 81063d0:	4293      	cmp	r3, r2
 81063d2:	d00b      	beq.n	81063ec <TIM_Base_SetConfig+0x40>
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	4a3c      	ldr	r2, [pc, #240]	; (81064c8 <TIM_Base_SetConfig+0x11c>)
 81063d8:	4293      	cmp	r3, r2
 81063da:	d007      	beq.n	81063ec <TIM_Base_SetConfig+0x40>
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	4a3b      	ldr	r2, [pc, #236]	; (81064cc <TIM_Base_SetConfig+0x120>)
 81063e0:	4293      	cmp	r3, r2
 81063e2:	d003      	beq.n	81063ec <TIM_Base_SetConfig+0x40>
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	4a3a      	ldr	r2, [pc, #232]	; (81064d0 <TIM_Base_SetConfig+0x124>)
 81063e8:	4293      	cmp	r3, r2
 81063ea:	d108      	bne.n	81063fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81063ec:	68fb      	ldr	r3, [r7, #12]
 81063ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81063f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81063f4:	683b      	ldr	r3, [r7, #0]
 81063f6:	685b      	ldr	r3, [r3, #4]
 81063f8:	68fa      	ldr	r2, [r7, #12]
 81063fa:	4313      	orrs	r3, r2
 81063fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81063fe:	687b      	ldr	r3, [r7, #4]
 8106400:	4a2f      	ldr	r2, [pc, #188]	; (81064c0 <TIM_Base_SetConfig+0x114>)
 8106402:	4293      	cmp	r3, r2
 8106404:	d01f      	beq.n	8106446 <TIM_Base_SetConfig+0x9a>
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810640c:	d01b      	beq.n	8106446 <TIM_Base_SetConfig+0x9a>
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	4a2c      	ldr	r2, [pc, #176]	; (81064c4 <TIM_Base_SetConfig+0x118>)
 8106412:	4293      	cmp	r3, r2
 8106414:	d017      	beq.n	8106446 <TIM_Base_SetConfig+0x9a>
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	4a2b      	ldr	r2, [pc, #172]	; (81064c8 <TIM_Base_SetConfig+0x11c>)
 810641a:	4293      	cmp	r3, r2
 810641c:	d013      	beq.n	8106446 <TIM_Base_SetConfig+0x9a>
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	4a2a      	ldr	r2, [pc, #168]	; (81064cc <TIM_Base_SetConfig+0x120>)
 8106422:	4293      	cmp	r3, r2
 8106424:	d00f      	beq.n	8106446 <TIM_Base_SetConfig+0x9a>
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	4a29      	ldr	r2, [pc, #164]	; (81064d0 <TIM_Base_SetConfig+0x124>)
 810642a:	4293      	cmp	r3, r2
 810642c:	d00b      	beq.n	8106446 <TIM_Base_SetConfig+0x9a>
 810642e:	687b      	ldr	r3, [r7, #4]
 8106430:	4a28      	ldr	r2, [pc, #160]	; (81064d4 <TIM_Base_SetConfig+0x128>)
 8106432:	4293      	cmp	r3, r2
 8106434:	d007      	beq.n	8106446 <TIM_Base_SetConfig+0x9a>
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	4a27      	ldr	r2, [pc, #156]	; (81064d8 <TIM_Base_SetConfig+0x12c>)
 810643a:	4293      	cmp	r3, r2
 810643c:	d003      	beq.n	8106446 <TIM_Base_SetConfig+0x9a>
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	4a26      	ldr	r2, [pc, #152]	; (81064dc <TIM_Base_SetConfig+0x130>)
 8106442:	4293      	cmp	r3, r2
 8106444:	d108      	bne.n	8106458 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106446:	68fb      	ldr	r3, [r7, #12]
 8106448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810644c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810644e:	683b      	ldr	r3, [r7, #0]
 8106450:	68db      	ldr	r3, [r3, #12]
 8106452:	68fa      	ldr	r2, [r7, #12]
 8106454:	4313      	orrs	r3, r2
 8106456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106458:	68fb      	ldr	r3, [r7, #12]
 810645a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810645e:	683b      	ldr	r3, [r7, #0]
 8106460:	695b      	ldr	r3, [r3, #20]
 8106462:	4313      	orrs	r3, r2
 8106464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8106466:	687b      	ldr	r3, [r7, #4]
 8106468:	68fa      	ldr	r2, [r7, #12]
 810646a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810646c:	683b      	ldr	r3, [r7, #0]
 810646e:	689a      	ldr	r2, [r3, #8]
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106474:	683b      	ldr	r3, [r7, #0]
 8106476:	681a      	ldr	r2, [r3, #0]
 8106478:	687b      	ldr	r3, [r7, #4]
 810647a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	4a10      	ldr	r2, [pc, #64]	; (81064c0 <TIM_Base_SetConfig+0x114>)
 8106480:	4293      	cmp	r3, r2
 8106482:	d00f      	beq.n	81064a4 <TIM_Base_SetConfig+0xf8>
 8106484:	687b      	ldr	r3, [r7, #4]
 8106486:	4a12      	ldr	r2, [pc, #72]	; (81064d0 <TIM_Base_SetConfig+0x124>)
 8106488:	4293      	cmp	r3, r2
 810648a:	d00b      	beq.n	81064a4 <TIM_Base_SetConfig+0xf8>
 810648c:	687b      	ldr	r3, [r7, #4]
 810648e:	4a11      	ldr	r2, [pc, #68]	; (81064d4 <TIM_Base_SetConfig+0x128>)
 8106490:	4293      	cmp	r3, r2
 8106492:	d007      	beq.n	81064a4 <TIM_Base_SetConfig+0xf8>
 8106494:	687b      	ldr	r3, [r7, #4]
 8106496:	4a10      	ldr	r2, [pc, #64]	; (81064d8 <TIM_Base_SetConfig+0x12c>)
 8106498:	4293      	cmp	r3, r2
 810649a:	d003      	beq.n	81064a4 <TIM_Base_SetConfig+0xf8>
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	4a0f      	ldr	r2, [pc, #60]	; (81064dc <TIM_Base_SetConfig+0x130>)
 81064a0:	4293      	cmp	r3, r2
 81064a2:	d103      	bne.n	81064ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81064a4:	683b      	ldr	r3, [r7, #0]
 81064a6:	691a      	ldr	r2, [r3, #16]
 81064a8:	687b      	ldr	r3, [r7, #4]
 81064aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	2201      	movs	r2, #1
 81064b0:	615a      	str	r2, [r3, #20]
}
 81064b2:	bf00      	nop
 81064b4:	3714      	adds	r7, #20
 81064b6:	46bd      	mov	sp, r7
 81064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064bc:	4770      	bx	lr
 81064be:	bf00      	nop
 81064c0:	40010000 	.word	0x40010000
 81064c4:	40000400 	.word	0x40000400
 81064c8:	40000800 	.word	0x40000800
 81064cc:	40000c00 	.word	0x40000c00
 81064d0:	40010400 	.word	0x40010400
 81064d4:	40014000 	.word	0x40014000
 81064d8:	40014400 	.word	0x40014400
 81064dc:	40014800 	.word	0x40014800

081064e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81064e0:	b480      	push	{r7}
 81064e2:	b087      	sub	sp, #28
 81064e4:	af00      	add	r7, sp, #0
 81064e6:	6078      	str	r0, [r7, #4]
 81064e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81064ea:	687b      	ldr	r3, [r7, #4]
 81064ec:	6a1b      	ldr	r3, [r3, #32]
 81064ee:	f023 0201 	bic.w	r2, r3, #1
 81064f2:	687b      	ldr	r3, [r7, #4]
 81064f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	6a1b      	ldr	r3, [r3, #32]
 81064fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81064fc:	687b      	ldr	r3, [r7, #4]
 81064fe:	685b      	ldr	r3, [r3, #4]
 8106500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	699b      	ldr	r3, [r3, #24]
 8106506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8106508:	68fb      	ldr	r3, [r7, #12]
 810650a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8106514:	68fb      	ldr	r3, [r7, #12]
 8106516:	f023 0303 	bic.w	r3, r3, #3
 810651a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810651c:	683b      	ldr	r3, [r7, #0]
 810651e:	681b      	ldr	r3, [r3, #0]
 8106520:	68fa      	ldr	r2, [r7, #12]
 8106522:	4313      	orrs	r3, r2
 8106524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8106526:	697b      	ldr	r3, [r7, #20]
 8106528:	f023 0302 	bic.w	r3, r3, #2
 810652c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810652e:	683b      	ldr	r3, [r7, #0]
 8106530:	689b      	ldr	r3, [r3, #8]
 8106532:	697a      	ldr	r2, [r7, #20]
 8106534:	4313      	orrs	r3, r2
 8106536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	4a2c      	ldr	r2, [pc, #176]	; (81065ec <TIM_OC1_SetConfig+0x10c>)
 810653c:	4293      	cmp	r3, r2
 810653e:	d00f      	beq.n	8106560 <TIM_OC1_SetConfig+0x80>
 8106540:	687b      	ldr	r3, [r7, #4]
 8106542:	4a2b      	ldr	r2, [pc, #172]	; (81065f0 <TIM_OC1_SetConfig+0x110>)
 8106544:	4293      	cmp	r3, r2
 8106546:	d00b      	beq.n	8106560 <TIM_OC1_SetConfig+0x80>
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	4a2a      	ldr	r2, [pc, #168]	; (81065f4 <TIM_OC1_SetConfig+0x114>)
 810654c:	4293      	cmp	r3, r2
 810654e:	d007      	beq.n	8106560 <TIM_OC1_SetConfig+0x80>
 8106550:	687b      	ldr	r3, [r7, #4]
 8106552:	4a29      	ldr	r2, [pc, #164]	; (81065f8 <TIM_OC1_SetConfig+0x118>)
 8106554:	4293      	cmp	r3, r2
 8106556:	d003      	beq.n	8106560 <TIM_OC1_SetConfig+0x80>
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	4a28      	ldr	r2, [pc, #160]	; (81065fc <TIM_OC1_SetConfig+0x11c>)
 810655c:	4293      	cmp	r3, r2
 810655e:	d10c      	bne.n	810657a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8106560:	697b      	ldr	r3, [r7, #20]
 8106562:	f023 0308 	bic.w	r3, r3, #8
 8106566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8106568:	683b      	ldr	r3, [r7, #0]
 810656a:	68db      	ldr	r3, [r3, #12]
 810656c:	697a      	ldr	r2, [r7, #20]
 810656e:	4313      	orrs	r3, r2
 8106570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8106572:	697b      	ldr	r3, [r7, #20]
 8106574:	f023 0304 	bic.w	r3, r3, #4
 8106578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	4a1b      	ldr	r2, [pc, #108]	; (81065ec <TIM_OC1_SetConfig+0x10c>)
 810657e:	4293      	cmp	r3, r2
 8106580:	d00f      	beq.n	81065a2 <TIM_OC1_SetConfig+0xc2>
 8106582:	687b      	ldr	r3, [r7, #4]
 8106584:	4a1a      	ldr	r2, [pc, #104]	; (81065f0 <TIM_OC1_SetConfig+0x110>)
 8106586:	4293      	cmp	r3, r2
 8106588:	d00b      	beq.n	81065a2 <TIM_OC1_SetConfig+0xc2>
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	4a19      	ldr	r2, [pc, #100]	; (81065f4 <TIM_OC1_SetConfig+0x114>)
 810658e:	4293      	cmp	r3, r2
 8106590:	d007      	beq.n	81065a2 <TIM_OC1_SetConfig+0xc2>
 8106592:	687b      	ldr	r3, [r7, #4]
 8106594:	4a18      	ldr	r2, [pc, #96]	; (81065f8 <TIM_OC1_SetConfig+0x118>)
 8106596:	4293      	cmp	r3, r2
 8106598:	d003      	beq.n	81065a2 <TIM_OC1_SetConfig+0xc2>
 810659a:	687b      	ldr	r3, [r7, #4]
 810659c:	4a17      	ldr	r2, [pc, #92]	; (81065fc <TIM_OC1_SetConfig+0x11c>)
 810659e:	4293      	cmp	r3, r2
 81065a0:	d111      	bne.n	81065c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 81065a2:	693b      	ldr	r3, [r7, #16]
 81065a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81065a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 81065aa:	693b      	ldr	r3, [r7, #16]
 81065ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81065b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81065b2:	683b      	ldr	r3, [r7, #0]
 81065b4:	695b      	ldr	r3, [r3, #20]
 81065b6:	693a      	ldr	r2, [r7, #16]
 81065b8:	4313      	orrs	r3, r2
 81065ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81065bc:	683b      	ldr	r3, [r7, #0]
 81065be:	699b      	ldr	r3, [r3, #24]
 81065c0:	693a      	ldr	r2, [r7, #16]
 81065c2:	4313      	orrs	r3, r2
 81065c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81065c6:	687b      	ldr	r3, [r7, #4]
 81065c8:	693a      	ldr	r2, [r7, #16]
 81065ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81065cc:	687b      	ldr	r3, [r7, #4]
 81065ce:	68fa      	ldr	r2, [r7, #12]
 81065d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81065d2:	683b      	ldr	r3, [r7, #0]
 81065d4:	685a      	ldr	r2, [r3, #4]
 81065d6:	687b      	ldr	r3, [r7, #4]
 81065d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	697a      	ldr	r2, [r7, #20]
 81065de:	621a      	str	r2, [r3, #32]
}
 81065e0:	bf00      	nop
 81065e2:	371c      	adds	r7, #28
 81065e4:	46bd      	mov	sp, r7
 81065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065ea:	4770      	bx	lr
 81065ec:	40010000 	.word	0x40010000
 81065f0:	40010400 	.word	0x40010400
 81065f4:	40014000 	.word	0x40014000
 81065f8:	40014400 	.word	0x40014400
 81065fc:	40014800 	.word	0x40014800

08106600 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106600:	b480      	push	{r7}
 8106602:	b087      	sub	sp, #28
 8106604:	af00      	add	r7, sp, #0
 8106606:	6078      	str	r0, [r7, #4]
 8106608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	6a1b      	ldr	r3, [r3, #32]
 810660e:	f023 0210 	bic.w	r2, r3, #16
 8106612:	687b      	ldr	r3, [r7, #4]
 8106614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106616:	687b      	ldr	r3, [r7, #4]
 8106618:	6a1b      	ldr	r3, [r3, #32]
 810661a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810661c:	687b      	ldr	r3, [r7, #4]
 810661e:	685b      	ldr	r3, [r3, #4]
 8106620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106622:	687b      	ldr	r3, [r7, #4]
 8106624:	699b      	ldr	r3, [r3, #24]
 8106626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8106628:	68fb      	ldr	r3, [r7, #12]
 810662a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810662e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8106634:	68fb      	ldr	r3, [r7, #12]
 8106636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810663a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810663c:	683b      	ldr	r3, [r7, #0]
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	021b      	lsls	r3, r3, #8
 8106642:	68fa      	ldr	r2, [r7, #12]
 8106644:	4313      	orrs	r3, r2
 8106646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8106648:	697b      	ldr	r3, [r7, #20]
 810664a:	f023 0320 	bic.w	r3, r3, #32
 810664e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106650:	683b      	ldr	r3, [r7, #0]
 8106652:	689b      	ldr	r3, [r3, #8]
 8106654:	011b      	lsls	r3, r3, #4
 8106656:	697a      	ldr	r2, [r7, #20]
 8106658:	4313      	orrs	r3, r2
 810665a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810665c:	687b      	ldr	r3, [r7, #4]
 810665e:	4a28      	ldr	r2, [pc, #160]	; (8106700 <TIM_OC2_SetConfig+0x100>)
 8106660:	4293      	cmp	r3, r2
 8106662:	d003      	beq.n	810666c <TIM_OC2_SetConfig+0x6c>
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	4a27      	ldr	r2, [pc, #156]	; (8106704 <TIM_OC2_SetConfig+0x104>)
 8106668:	4293      	cmp	r3, r2
 810666a:	d10d      	bne.n	8106688 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810666c:	697b      	ldr	r3, [r7, #20]
 810666e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106674:	683b      	ldr	r3, [r7, #0]
 8106676:	68db      	ldr	r3, [r3, #12]
 8106678:	011b      	lsls	r3, r3, #4
 810667a:	697a      	ldr	r2, [r7, #20]
 810667c:	4313      	orrs	r3, r2
 810667e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8106680:	697b      	ldr	r3, [r7, #20]
 8106682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106686:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106688:	687b      	ldr	r3, [r7, #4]
 810668a:	4a1d      	ldr	r2, [pc, #116]	; (8106700 <TIM_OC2_SetConfig+0x100>)
 810668c:	4293      	cmp	r3, r2
 810668e:	d00f      	beq.n	81066b0 <TIM_OC2_SetConfig+0xb0>
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	4a1c      	ldr	r2, [pc, #112]	; (8106704 <TIM_OC2_SetConfig+0x104>)
 8106694:	4293      	cmp	r3, r2
 8106696:	d00b      	beq.n	81066b0 <TIM_OC2_SetConfig+0xb0>
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	4a1b      	ldr	r2, [pc, #108]	; (8106708 <TIM_OC2_SetConfig+0x108>)
 810669c:	4293      	cmp	r3, r2
 810669e:	d007      	beq.n	81066b0 <TIM_OC2_SetConfig+0xb0>
 81066a0:	687b      	ldr	r3, [r7, #4]
 81066a2:	4a1a      	ldr	r2, [pc, #104]	; (810670c <TIM_OC2_SetConfig+0x10c>)
 81066a4:	4293      	cmp	r3, r2
 81066a6:	d003      	beq.n	81066b0 <TIM_OC2_SetConfig+0xb0>
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	4a19      	ldr	r2, [pc, #100]	; (8106710 <TIM_OC2_SetConfig+0x110>)
 81066ac:	4293      	cmp	r3, r2
 81066ae:	d113      	bne.n	81066d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81066b0:	693b      	ldr	r3, [r7, #16]
 81066b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81066b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81066b8:	693b      	ldr	r3, [r7, #16]
 81066ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81066be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81066c0:	683b      	ldr	r3, [r7, #0]
 81066c2:	695b      	ldr	r3, [r3, #20]
 81066c4:	009b      	lsls	r3, r3, #2
 81066c6:	693a      	ldr	r2, [r7, #16]
 81066c8:	4313      	orrs	r3, r2
 81066ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81066cc:	683b      	ldr	r3, [r7, #0]
 81066ce:	699b      	ldr	r3, [r3, #24]
 81066d0:	009b      	lsls	r3, r3, #2
 81066d2:	693a      	ldr	r2, [r7, #16]
 81066d4:	4313      	orrs	r3, r2
 81066d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81066d8:	687b      	ldr	r3, [r7, #4]
 81066da:	693a      	ldr	r2, [r7, #16]
 81066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	68fa      	ldr	r2, [r7, #12]
 81066e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81066e4:	683b      	ldr	r3, [r7, #0]
 81066e6:	685a      	ldr	r2, [r3, #4]
 81066e8:	687b      	ldr	r3, [r7, #4]
 81066ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81066ec:	687b      	ldr	r3, [r7, #4]
 81066ee:	697a      	ldr	r2, [r7, #20]
 81066f0:	621a      	str	r2, [r3, #32]
}
 81066f2:	bf00      	nop
 81066f4:	371c      	adds	r7, #28
 81066f6:	46bd      	mov	sp, r7
 81066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066fc:	4770      	bx	lr
 81066fe:	bf00      	nop
 8106700:	40010000 	.word	0x40010000
 8106704:	40010400 	.word	0x40010400
 8106708:	40014000 	.word	0x40014000
 810670c:	40014400 	.word	0x40014400
 8106710:	40014800 	.word	0x40014800

08106714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106714:	b480      	push	{r7}
 8106716:	b087      	sub	sp, #28
 8106718:	af00      	add	r7, sp, #0
 810671a:	6078      	str	r0, [r7, #4]
 810671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	6a1b      	ldr	r3, [r3, #32]
 8106722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8106726:	687b      	ldr	r3, [r7, #4]
 8106728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	6a1b      	ldr	r3, [r3, #32]
 810672e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	685b      	ldr	r3, [r3, #4]
 8106734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106736:	687b      	ldr	r3, [r7, #4]
 8106738:	69db      	ldr	r3, [r3, #28]
 810673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810673c:	68fb      	ldr	r3, [r7, #12]
 810673e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8106748:	68fb      	ldr	r3, [r7, #12]
 810674a:	f023 0303 	bic.w	r3, r3, #3
 810674e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106750:	683b      	ldr	r3, [r7, #0]
 8106752:	681b      	ldr	r3, [r3, #0]
 8106754:	68fa      	ldr	r2, [r7, #12]
 8106756:	4313      	orrs	r3, r2
 8106758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810675a:	697b      	ldr	r3, [r7, #20]
 810675c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8106762:	683b      	ldr	r3, [r7, #0]
 8106764:	689b      	ldr	r3, [r3, #8]
 8106766:	021b      	lsls	r3, r3, #8
 8106768:	697a      	ldr	r2, [r7, #20]
 810676a:	4313      	orrs	r3, r2
 810676c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810676e:	687b      	ldr	r3, [r7, #4]
 8106770:	4a27      	ldr	r2, [pc, #156]	; (8106810 <TIM_OC3_SetConfig+0xfc>)
 8106772:	4293      	cmp	r3, r2
 8106774:	d003      	beq.n	810677e <TIM_OC3_SetConfig+0x6a>
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	4a26      	ldr	r2, [pc, #152]	; (8106814 <TIM_OC3_SetConfig+0x100>)
 810677a:	4293      	cmp	r3, r2
 810677c:	d10d      	bne.n	810679a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810677e:	697b      	ldr	r3, [r7, #20]
 8106780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8106786:	683b      	ldr	r3, [r7, #0]
 8106788:	68db      	ldr	r3, [r3, #12]
 810678a:	021b      	lsls	r3, r3, #8
 810678c:	697a      	ldr	r2, [r7, #20]
 810678e:	4313      	orrs	r3, r2
 8106790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8106792:	697b      	ldr	r3, [r7, #20]
 8106794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810679a:	687b      	ldr	r3, [r7, #4]
 810679c:	4a1c      	ldr	r2, [pc, #112]	; (8106810 <TIM_OC3_SetConfig+0xfc>)
 810679e:	4293      	cmp	r3, r2
 81067a0:	d00f      	beq.n	81067c2 <TIM_OC3_SetConfig+0xae>
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	4a1b      	ldr	r2, [pc, #108]	; (8106814 <TIM_OC3_SetConfig+0x100>)
 81067a6:	4293      	cmp	r3, r2
 81067a8:	d00b      	beq.n	81067c2 <TIM_OC3_SetConfig+0xae>
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	4a1a      	ldr	r2, [pc, #104]	; (8106818 <TIM_OC3_SetConfig+0x104>)
 81067ae:	4293      	cmp	r3, r2
 81067b0:	d007      	beq.n	81067c2 <TIM_OC3_SetConfig+0xae>
 81067b2:	687b      	ldr	r3, [r7, #4]
 81067b4:	4a19      	ldr	r2, [pc, #100]	; (810681c <TIM_OC3_SetConfig+0x108>)
 81067b6:	4293      	cmp	r3, r2
 81067b8:	d003      	beq.n	81067c2 <TIM_OC3_SetConfig+0xae>
 81067ba:	687b      	ldr	r3, [r7, #4]
 81067bc:	4a18      	ldr	r2, [pc, #96]	; (8106820 <TIM_OC3_SetConfig+0x10c>)
 81067be:	4293      	cmp	r3, r2
 81067c0:	d113      	bne.n	81067ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81067c2:	693b      	ldr	r3, [r7, #16]
 81067c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81067c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81067ca:	693b      	ldr	r3, [r7, #16]
 81067cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81067d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81067d2:	683b      	ldr	r3, [r7, #0]
 81067d4:	695b      	ldr	r3, [r3, #20]
 81067d6:	011b      	lsls	r3, r3, #4
 81067d8:	693a      	ldr	r2, [r7, #16]
 81067da:	4313      	orrs	r3, r2
 81067dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81067de:	683b      	ldr	r3, [r7, #0]
 81067e0:	699b      	ldr	r3, [r3, #24]
 81067e2:	011b      	lsls	r3, r3, #4
 81067e4:	693a      	ldr	r2, [r7, #16]
 81067e6:	4313      	orrs	r3, r2
 81067e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81067ea:	687b      	ldr	r3, [r7, #4]
 81067ec:	693a      	ldr	r2, [r7, #16]
 81067ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81067f0:	687b      	ldr	r3, [r7, #4]
 81067f2:	68fa      	ldr	r2, [r7, #12]
 81067f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81067f6:	683b      	ldr	r3, [r7, #0]
 81067f8:	685a      	ldr	r2, [r3, #4]
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81067fe:	687b      	ldr	r3, [r7, #4]
 8106800:	697a      	ldr	r2, [r7, #20]
 8106802:	621a      	str	r2, [r3, #32]
}
 8106804:	bf00      	nop
 8106806:	371c      	adds	r7, #28
 8106808:	46bd      	mov	sp, r7
 810680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810680e:	4770      	bx	lr
 8106810:	40010000 	.word	0x40010000
 8106814:	40010400 	.word	0x40010400
 8106818:	40014000 	.word	0x40014000
 810681c:	40014400 	.word	0x40014400
 8106820:	40014800 	.word	0x40014800

08106824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106824:	b480      	push	{r7}
 8106826:	b087      	sub	sp, #28
 8106828:	af00      	add	r7, sp, #0
 810682a:	6078      	str	r0, [r7, #4]
 810682c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	6a1b      	ldr	r3, [r3, #32]
 8106832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810683a:	687b      	ldr	r3, [r7, #4]
 810683c:	6a1b      	ldr	r3, [r3, #32]
 810683e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106840:	687b      	ldr	r3, [r7, #4]
 8106842:	685b      	ldr	r3, [r3, #4]
 8106844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	69db      	ldr	r3, [r3, #28]
 810684a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810684c:	68fb      	ldr	r3, [r7, #12]
 810684e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8106858:	68fb      	ldr	r3, [r7, #12]
 810685a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810685e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106860:	683b      	ldr	r3, [r7, #0]
 8106862:	681b      	ldr	r3, [r3, #0]
 8106864:	021b      	lsls	r3, r3, #8
 8106866:	68fa      	ldr	r2, [r7, #12]
 8106868:	4313      	orrs	r3, r2
 810686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810686c:	693b      	ldr	r3, [r7, #16]
 810686e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8106874:	683b      	ldr	r3, [r7, #0]
 8106876:	689b      	ldr	r3, [r3, #8]
 8106878:	031b      	lsls	r3, r3, #12
 810687a:	693a      	ldr	r2, [r7, #16]
 810687c:	4313      	orrs	r3, r2
 810687e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	4a18      	ldr	r2, [pc, #96]	; (81068e4 <TIM_OC4_SetConfig+0xc0>)
 8106884:	4293      	cmp	r3, r2
 8106886:	d00f      	beq.n	81068a8 <TIM_OC4_SetConfig+0x84>
 8106888:	687b      	ldr	r3, [r7, #4]
 810688a:	4a17      	ldr	r2, [pc, #92]	; (81068e8 <TIM_OC4_SetConfig+0xc4>)
 810688c:	4293      	cmp	r3, r2
 810688e:	d00b      	beq.n	81068a8 <TIM_OC4_SetConfig+0x84>
 8106890:	687b      	ldr	r3, [r7, #4]
 8106892:	4a16      	ldr	r2, [pc, #88]	; (81068ec <TIM_OC4_SetConfig+0xc8>)
 8106894:	4293      	cmp	r3, r2
 8106896:	d007      	beq.n	81068a8 <TIM_OC4_SetConfig+0x84>
 8106898:	687b      	ldr	r3, [r7, #4]
 810689a:	4a15      	ldr	r2, [pc, #84]	; (81068f0 <TIM_OC4_SetConfig+0xcc>)
 810689c:	4293      	cmp	r3, r2
 810689e:	d003      	beq.n	81068a8 <TIM_OC4_SetConfig+0x84>
 81068a0:	687b      	ldr	r3, [r7, #4]
 81068a2:	4a14      	ldr	r2, [pc, #80]	; (81068f4 <TIM_OC4_SetConfig+0xd0>)
 81068a4:	4293      	cmp	r3, r2
 81068a6:	d109      	bne.n	81068bc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81068a8:	697b      	ldr	r3, [r7, #20]
 81068aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81068ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81068b0:	683b      	ldr	r3, [r7, #0]
 81068b2:	695b      	ldr	r3, [r3, #20]
 81068b4:	019b      	lsls	r3, r3, #6
 81068b6:	697a      	ldr	r2, [r7, #20]
 81068b8:	4313      	orrs	r3, r2
 81068ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	697a      	ldr	r2, [r7, #20]
 81068c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81068c2:	687b      	ldr	r3, [r7, #4]
 81068c4:	68fa      	ldr	r2, [r7, #12]
 81068c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81068c8:	683b      	ldr	r3, [r7, #0]
 81068ca:	685a      	ldr	r2, [r3, #4]
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81068d0:	687b      	ldr	r3, [r7, #4]
 81068d2:	693a      	ldr	r2, [r7, #16]
 81068d4:	621a      	str	r2, [r3, #32]
}
 81068d6:	bf00      	nop
 81068d8:	371c      	adds	r7, #28
 81068da:	46bd      	mov	sp, r7
 81068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068e0:	4770      	bx	lr
 81068e2:	bf00      	nop
 81068e4:	40010000 	.word	0x40010000
 81068e8:	40010400 	.word	0x40010400
 81068ec:	40014000 	.word	0x40014000
 81068f0:	40014400 	.word	0x40014400
 81068f4:	40014800 	.word	0x40014800

081068f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81068f8:	b480      	push	{r7}
 81068fa:	b087      	sub	sp, #28
 81068fc:	af00      	add	r7, sp, #0
 81068fe:	6078      	str	r0, [r7, #4]
 8106900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	6a1b      	ldr	r3, [r3, #32]
 8106906:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810690a:	687b      	ldr	r3, [r7, #4]
 810690c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810690e:	687b      	ldr	r3, [r7, #4]
 8106910:	6a1b      	ldr	r3, [r3, #32]
 8106912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	685b      	ldr	r3, [r3, #4]
 8106918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810691a:	687b      	ldr	r3, [r7, #4]
 810691c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810691e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8106920:	68fb      	ldr	r3, [r7, #12]
 8106922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810692a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810692c:	683b      	ldr	r3, [r7, #0]
 810692e:	681b      	ldr	r3, [r3, #0]
 8106930:	68fa      	ldr	r2, [r7, #12]
 8106932:	4313      	orrs	r3, r2
 8106934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8106936:	693b      	ldr	r3, [r7, #16]
 8106938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810693c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810693e:	683b      	ldr	r3, [r7, #0]
 8106940:	689b      	ldr	r3, [r3, #8]
 8106942:	041b      	lsls	r3, r3, #16
 8106944:	693a      	ldr	r2, [r7, #16]
 8106946:	4313      	orrs	r3, r2
 8106948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810694a:	687b      	ldr	r3, [r7, #4]
 810694c:	4a17      	ldr	r2, [pc, #92]	; (81069ac <TIM_OC5_SetConfig+0xb4>)
 810694e:	4293      	cmp	r3, r2
 8106950:	d00f      	beq.n	8106972 <TIM_OC5_SetConfig+0x7a>
 8106952:	687b      	ldr	r3, [r7, #4]
 8106954:	4a16      	ldr	r2, [pc, #88]	; (81069b0 <TIM_OC5_SetConfig+0xb8>)
 8106956:	4293      	cmp	r3, r2
 8106958:	d00b      	beq.n	8106972 <TIM_OC5_SetConfig+0x7a>
 810695a:	687b      	ldr	r3, [r7, #4]
 810695c:	4a15      	ldr	r2, [pc, #84]	; (81069b4 <TIM_OC5_SetConfig+0xbc>)
 810695e:	4293      	cmp	r3, r2
 8106960:	d007      	beq.n	8106972 <TIM_OC5_SetConfig+0x7a>
 8106962:	687b      	ldr	r3, [r7, #4]
 8106964:	4a14      	ldr	r2, [pc, #80]	; (81069b8 <TIM_OC5_SetConfig+0xc0>)
 8106966:	4293      	cmp	r3, r2
 8106968:	d003      	beq.n	8106972 <TIM_OC5_SetConfig+0x7a>
 810696a:	687b      	ldr	r3, [r7, #4]
 810696c:	4a13      	ldr	r2, [pc, #76]	; (81069bc <TIM_OC5_SetConfig+0xc4>)
 810696e:	4293      	cmp	r3, r2
 8106970:	d109      	bne.n	8106986 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8106972:	697b      	ldr	r3, [r7, #20]
 8106974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106978:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810697a:	683b      	ldr	r3, [r7, #0]
 810697c:	695b      	ldr	r3, [r3, #20]
 810697e:	021b      	lsls	r3, r3, #8
 8106980:	697a      	ldr	r2, [r7, #20]
 8106982:	4313      	orrs	r3, r2
 8106984:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106986:	687b      	ldr	r3, [r7, #4]
 8106988:	697a      	ldr	r2, [r7, #20]
 810698a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810698c:	687b      	ldr	r3, [r7, #4]
 810698e:	68fa      	ldr	r2, [r7, #12]
 8106990:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8106992:	683b      	ldr	r3, [r7, #0]
 8106994:	685a      	ldr	r2, [r3, #4]
 8106996:	687b      	ldr	r3, [r7, #4]
 8106998:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810699a:	687b      	ldr	r3, [r7, #4]
 810699c:	693a      	ldr	r2, [r7, #16]
 810699e:	621a      	str	r2, [r3, #32]
}
 81069a0:	bf00      	nop
 81069a2:	371c      	adds	r7, #28
 81069a4:	46bd      	mov	sp, r7
 81069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069aa:	4770      	bx	lr
 81069ac:	40010000 	.word	0x40010000
 81069b0:	40010400 	.word	0x40010400
 81069b4:	40014000 	.word	0x40014000
 81069b8:	40014400 	.word	0x40014400
 81069bc:	40014800 	.word	0x40014800

081069c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81069c0:	b480      	push	{r7}
 81069c2:	b087      	sub	sp, #28
 81069c4:	af00      	add	r7, sp, #0
 81069c6:	6078      	str	r0, [r7, #4]
 81069c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81069ca:	687b      	ldr	r3, [r7, #4]
 81069cc:	6a1b      	ldr	r3, [r3, #32]
 81069ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81069d2:	687b      	ldr	r3, [r7, #4]
 81069d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81069d6:	687b      	ldr	r3, [r7, #4]
 81069d8:	6a1b      	ldr	r3, [r3, #32]
 81069da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81069dc:	687b      	ldr	r3, [r7, #4]
 81069de:	685b      	ldr	r3, [r3, #4]
 81069e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81069e2:	687b      	ldr	r3, [r7, #4]
 81069e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81069e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81069e8:	68fb      	ldr	r3, [r7, #12]
 81069ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81069ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81069f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81069f4:	683b      	ldr	r3, [r7, #0]
 81069f6:	681b      	ldr	r3, [r3, #0]
 81069f8:	021b      	lsls	r3, r3, #8
 81069fa:	68fa      	ldr	r2, [r7, #12]
 81069fc:	4313      	orrs	r3, r2
 81069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8106a00:	693b      	ldr	r3, [r7, #16]
 8106a02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8106a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8106a08:	683b      	ldr	r3, [r7, #0]
 8106a0a:	689b      	ldr	r3, [r3, #8]
 8106a0c:	051b      	lsls	r3, r3, #20
 8106a0e:	693a      	ldr	r2, [r7, #16]
 8106a10:	4313      	orrs	r3, r2
 8106a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106a14:	687b      	ldr	r3, [r7, #4]
 8106a16:	4a18      	ldr	r2, [pc, #96]	; (8106a78 <TIM_OC6_SetConfig+0xb8>)
 8106a18:	4293      	cmp	r3, r2
 8106a1a:	d00f      	beq.n	8106a3c <TIM_OC6_SetConfig+0x7c>
 8106a1c:	687b      	ldr	r3, [r7, #4]
 8106a1e:	4a17      	ldr	r2, [pc, #92]	; (8106a7c <TIM_OC6_SetConfig+0xbc>)
 8106a20:	4293      	cmp	r3, r2
 8106a22:	d00b      	beq.n	8106a3c <TIM_OC6_SetConfig+0x7c>
 8106a24:	687b      	ldr	r3, [r7, #4]
 8106a26:	4a16      	ldr	r2, [pc, #88]	; (8106a80 <TIM_OC6_SetConfig+0xc0>)
 8106a28:	4293      	cmp	r3, r2
 8106a2a:	d007      	beq.n	8106a3c <TIM_OC6_SetConfig+0x7c>
 8106a2c:	687b      	ldr	r3, [r7, #4]
 8106a2e:	4a15      	ldr	r2, [pc, #84]	; (8106a84 <TIM_OC6_SetConfig+0xc4>)
 8106a30:	4293      	cmp	r3, r2
 8106a32:	d003      	beq.n	8106a3c <TIM_OC6_SetConfig+0x7c>
 8106a34:	687b      	ldr	r3, [r7, #4]
 8106a36:	4a14      	ldr	r2, [pc, #80]	; (8106a88 <TIM_OC6_SetConfig+0xc8>)
 8106a38:	4293      	cmp	r3, r2
 8106a3a:	d109      	bne.n	8106a50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8106a3c:	697b      	ldr	r3, [r7, #20]
 8106a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8106a42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8106a44:	683b      	ldr	r3, [r7, #0]
 8106a46:	695b      	ldr	r3, [r3, #20]
 8106a48:	029b      	lsls	r3, r3, #10
 8106a4a:	697a      	ldr	r2, [r7, #20]
 8106a4c:	4313      	orrs	r3, r2
 8106a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106a50:	687b      	ldr	r3, [r7, #4]
 8106a52:	697a      	ldr	r2, [r7, #20]
 8106a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106a56:	687b      	ldr	r3, [r7, #4]
 8106a58:	68fa      	ldr	r2, [r7, #12]
 8106a5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8106a5c:	683b      	ldr	r3, [r7, #0]
 8106a5e:	685a      	ldr	r2, [r3, #4]
 8106a60:	687b      	ldr	r3, [r7, #4]
 8106a62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106a64:	687b      	ldr	r3, [r7, #4]
 8106a66:	693a      	ldr	r2, [r7, #16]
 8106a68:	621a      	str	r2, [r3, #32]
}
 8106a6a:	bf00      	nop
 8106a6c:	371c      	adds	r7, #28
 8106a6e:	46bd      	mov	sp, r7
 8106a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a74:	4770      	bx	lr
 8106a76:	bf00      	nop
 8106a78:	40010000 	.word	0x40010000
 8106a7c:	40010400 	.word	0x40010400
 8106a80:	40014000 	.word	0x40014000
 8106a84:	40014400 	.word	0x40014400
 8106a88:	40014800 	.word	0x40014800

08106a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106a8c:	b480      	push	{r7}
 8106a8e:	b087      	sub	sp, #28
 8106a90:	af00      	add	r7, sp, #0
 8106a92:	60f8      	str	r0, [r7, #12]
 8106a94:	60b9      	str	r1, [r7, #8]
 8106a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8106a98:	68fb      	ldr	r3, [r7, #12]
 8106a9a:	6a1b      	ldr	r3, [r3, #32]
 8106a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106a9e:	68fb      	ldr	r3, [r7, #12]
 8106aa0:	6a1b      	ldr	r3, [r3, #32]
 8106aa2:	f023 0201 	bic.w	r2, r3, #1
 8106aa6:	68fb      	ldr	r3, [r7, #12]
 8106aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106aaa:	68fb      	ldr	r3, [r7, #12]
 8106aac:	699b      	ldr	r3, [r3, #24]
 8106aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8106ab0:	693b      	ldr	r3, [r7, #16]
 8106ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8106ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8106ab8:	687b      	ldr	r3, [r7, #4]
 8106aba:	011b      	lsls	r3, r3, #4
 8106abc:	693a      	ldr	r2, [r7, #16]
 8106abe:	4313      	orrs	r3, r2
 8106ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8106ac2:	697b      	ldr	r3, [r7, #20]
 8106ac4:	f023 030a 	bic.w	r3, r3, #10
 8106ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8106aca:	697a      	ldr	r2, [r7, #20]
 8106acc:	68bb      	ldr	r3, [r7, #8]
 8106ace:	4313      	orrs	r3, r2
 8106ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8106ad2:	68fb      	ldr	r3, [r7, #12]
 8106ad4:	693a      	ldr	r2, [r7, #16]
 8106ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106ad8:	68fb      	ldr	r3, [r7, #12]
 8106ada:	697a      	ldr	r2, [r7, #20]
 8106adc:	621a      	str	r2, [r3, #32]
}
 8106ade:	bf00      	nop
 8106ae0:	371c      	adds	r7, #28
 8106ae2:	46bd      	mov	sp, r7
 8106ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ae8:	4770      	bx	lr

08106aea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106aea:	b480      	push	{r7}
 8106aec:	b087      	sub	sp, #28
 8106aee:	af00      	add	r7, sp, #0
 8106af0:	60f8      	str	r0, [r7, #12]
 8106af2:	60b9      	str	r1, [r7, #8]
 8106af4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106af6:	68fb      	ldr	r3, [r7, #12]
 8106af8:	6a1b      	ldr	r3, [r3, #32]
 8106afa:	f023 0210 	bic.w	r2, r3, #16
 8106afe:	68fb      	ldr	r3, [r7, #12]
 8106b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106b02:	68fb      	ldr	r3, [r7, #12]
 8106b04:	699b      	ldr	r3, [r3, #24]
 8106b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8106b08:	68fb      	ldr	r3, [r7, #12]
 8106b0a:	6a1b      	ldr	r3, [r3, #32]
 8106b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8106b0e:	697b      	ldr	r3, [r7, #20]
 8106b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8106b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	031b      	lsls	r3, r3, #12
 8106b1a:	697a      	ldr	r2, [r7, #20]
 8106b1c:	4313      	orrs	r3, r2
 8106b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8106b20:	693b      	ldr	r3, [r7, #16]
 8106b22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8106b26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8106b28:	68bb      	ldr	r3, [r7, #8]
 8106b2a:	011b      	lsls	r3, r3, #4
 8106b2c:	693a      	ldr	r2, [r7, #16]
 8106b2e:	4313      	orrs	r3, r2
 8106b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8106b32:	68fb      	ldr	r3, [r7, #12]
 8106b34:	697a      	ldr	r2, [r7, #20]
 8106b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106b38:	68fb      	ldr	r3, [r7, #12]
 8106b3a:	693a      	ldr	r2, [r7, #16]
 8106b3c:	621a      	str	r2, [r3, #32]
}
 8106b3e:	bf00      	nop
 8106b40:	371c      	adds	r7, #28
 8106b42:	46bd      	mov	sp, r7
 8106b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b48:	4770      	bx	lr

08106b4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8106b4a:	b480      	push	{r7}
 8106b4c:	b085      	sub	sp, #20
 8106b4e:	af00      	add	r7, sp, #0
 8106b50:	6078      	str	r0, [r7, #4]
 8106b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8106b54:	687b      	ldr	r3, [r7, #4]
 8106b56:	689b      	ldr	r3, [r3, #8]
 8106b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8106b5a:	68fb      	ldr	r3, [r7, #12]
 8106b5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8106b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8106b66:	683a      	ldr	r2, [r7, #0]
 8106b68:	68fb      	ldr	r3, [r7, #12]
 8106b6a:	4313      	orrs	r3, r2
 8106b6c:	f043 0307 	orr.w	r3, r3, #7
 8106b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106b72:	687b      	ldr	r3, [r7, #4]
 8106b74:	68fa      	ldr	r2, [r7, #12]
 8106b76:	609a      	str	r2, [r3, #8]
}
 8106b78:	bf00      	nop
 8106b7a:	3714      	adds	r7, #20
 8106b7c:	46bd      	mov	sp, r7
 8106b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b82:	4770      	bx	lr

08106b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8106b84:	b480      	push	{r7}
 8106b86:	b087      	sub	sp, #28
 8106b88:	af00      	add	r7, sp, #0
 8106b8a:	60f8      	str	r0, [r7, #12]
 8106b8c:	60b9      	str	r1, [r7, #8]
 8106b8e:	607a      	str	r2, [r7, #4]
 8106b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8106b92:	68fb      	ldr	r3, [r7, #12]
 8106b94:	689b      	ldr	r3, [r3, #8]
 8106b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8106b98:	697b      	ldr	r3, [r7, #20]
 8106b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106ba0:	683b      	ldr	r3, [r7, #0]
 8106ba2:	021a      	lsls	r2, r3, #8
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	431a      	orrs	r2, r3
 8106ba8:	68bb      	ldr	r3, [r7, #8]
 8106baa:	4313      	orrs	r3, r2
 8106bac:	697a      	ldr	r2, [r7, #20]
 8106bae:	4313      	orrs	r3, r2
 8106bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106bb2:	68fb      	ldr	r3, [r7, #12]
 8106bb4:	697a      	ldr	r2, [r7, #20]
 8106bb6:	609a      	str	r2, [r3, #8]
}
 8106bb8:	bf00      	nop
 8106bba:	371c      	adds	r7, #28
 8106bbc:	46bd      	mov	sp, r7
 8106bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bc2:	4770      	bx	lr

08106bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8106bc4:	b480      	push	{r7}
 8106bc6:	b087      	sub	sp, #28
 8106bc8:	af00      	add	r7, sp, #0
 8106bca:	60f8      	str	r0, [r7, #12]
 8106bcc:	60b9      	str	r1, [r7, #8]
 8106bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8106bd0:	68bb      	ldr	r3, [r7, #8]
 8106bd2:	f003 031f 	and.w	r3, r3, #31
 8106bd6:	2201      	movs	r2, #1
 8106bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8106bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8106bde:	68fb      	ldr	r3, [r7, #12]
 8106be0:	6a1a      	ldr	r2, [r3, #32]
 8106be2:	697b      	ldr	r3, [r7, #20]
 8106be4:	43db      	mvns	r3, r3
 8106be6:	401a      	ands	r2, r3
 8106be8:	68fb      	ldr	r3, [r7, #12]
 8106bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8106bec:	68fb      	ldr	r3, [r7, #12]
 8106bee:	6a1a      	ldr	r2, [r3, #32]
 8106bf0:	68bb      	ldr	r3, [r7, #8]
 8106bf2:	f003 031f 	and.w	r3, r3, #31
 8106bf6:	6879      	ldr	r1, [r7, #4]
 8106bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8106bfc:	431a      	orrs	r2, r3
 8106bfe:	68fb      	ldr	r3, [r7, #12]
 8106c00:	621a      	str	r2, [r3, #32]
}
 8106c02:	bf00      	nop
 8106c04:	371c      	adds	r7, #28
 8106c06:	46bd      	mov	sp, r7
 8106c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c0c:	4770      	bx	lr
	...

08106c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8106c10:	b480      	push	{r7}
 8106c12:	b085      	sub	sp, #20
 8106c14:	af00      	add	r7, sp, #0
 8106c16:	6078      	str	r0, [r7, #4]
 8106c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106c20:	2b01      	cmp	r3, #1
 8106c22:	d101      	bne.n	8106c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8106c24:	2302      	movs	r3, #2
 8106c26:	e06d      	b.n	8106d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8106c28:	687b      	ldr	r3, [r7, #4]
 8106c2a:	2201      	movs	r2, #1
 8106c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106c30:	687b      	ldr	r3, [r7, #4]
 8106c32:	2202      	movs	r2, #2
 8106c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8106c38:	687b      	ldr	r3, [r7, #4]
 8106c3a:	681b      	ldr	r3, [r3, #0]
 8106c3c:	685b      	ldr	r3, [r3, #4]
 8106c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8106c40:	687b      	ldr	r3, [r7, #4]
 8106c42:	681b      	ldr	r3, [r3, #0]
 8106c44:	689b      	ldr	r3, [r3, #8]
 8106c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	681b      	ldr	r3, [r3, #0]
 8106c4c:	4a30      	ldr	r2, [pc, #192]	; (8106d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8106c4e:	4293      	cmp	r3, r2
 8106c50:	d004      	beq.n	8106c5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	681b      	ldr	r3, [r3, #0]
 8106c56:	4a2f      	ldr	r2, [pc, #188]	; (8106d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106c58:	4293      	cmp	r3, r2
 8106c5a:	d108      	bne.n	8106c6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8106c5c:	68fb      	ldr	r3, [r7, #12]
 8106c5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8106c62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106c64:	683b      	ldr	r3, [r7, #0]
 8106c66:	685b      	ldr	r3, [r3, #4]
 8106c68:	68fa      	ldr	r2, [r7, #12]
 8106c6a:	4313      	orrs	r3, r2
 8106c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8106c6e:	68fb      	ldr	r3, [r7, #12]
 8106c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106c74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106c76:	683b      	ldr	r3, [r7, #0]
 8106c78:	681b      	ldr	r3, [r3, #0]
 8106c7a:	68fa      	ldr	r2, [r7, #12]
 8106c7c:	4313      	orrs	r3, r2
 8106c7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8106c80:	687b      	ldr	r3, [r7, #4]
 8106c82:	681b      	ldr	r3, [r3, #0]
 8106c84:	68fa      	ldr	r2, [r7, #12]
 8106c86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106c88:	687b      	ldr	r3, [r7, #4]
 8106c8a:	681b      	ldr	r3, [r3, #0]
 8106c8c:	4a20      	ldr	r2, [pc, #128]	; (8106d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8106c8e:	4293      	cmp	r3, r2
 8106c90:	d022      	beq.n	8106cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106c92:	687b      	ldr	r3, [r7, #4]
 8106c94:	681b      	ldr	r3, [r3, #0]
 8106c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106c9a:	d01d      	beq.n	8106cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106c9c:	687b      	ldr	r3, [r7, #4]
 8106c9e:	681b      	ldr	r3, [r3, #0]
 8106ca0:	4a1d      	ldr	r2, [pc, #116]	; (8106d18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8106ca2:	4293      	cmp	r3, r2
 8106ca4:	d018      	beq.n	8106cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106ca6:	687b      	ldr	r3, [r7, #4]
 8106ca8:	681b      	ldr	r3, [r3, #0]
 8106caa:	4a1c      	ldr	r2, [pc, #112]	; (8106d1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8106cac:	4293      	cmp	r3, r2
 8106cae:	d013      	beq.n	8106cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	681b      	ldr	r3, [r3, #0]
 8106cb4:	4a1a      	ldr	r2, [pc, #104]	; (8106d20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8106cb6:	4293      	cmp	r3, r2
 8106cb8:	d00e      	beq.n	8106cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106cba:	687b      	ldr	r3, [r7, #4]
 8106cbc:	681b      	ldr	r3, [r3, #0]
 8106cbe:	4a15      	ldr	r2, [pc, #84]	; (8106d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106cc0:	4293      	cmp	r3, r2
 8106cc2:	d009      	beq.n	8106cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106cc4:	687b      	ldr	r3, [r7, #4]
 8106cc6:	681b      	ldr	r3, [r3, #0]
 8106cc8:	4a16      	ldr	r2, [pc, #88]	; (8106d24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8106cca:	4293      	cmp	r3, r2
 8106ccc:	d004      	beq.n	8106cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8106cce:	687b      	ldr	r3, [r7, #4]
 8106cd0:	681b      	ldr	r3, [r3, #0]
 8106cd2:	4a15      	ldr	r2, [pc, #84]	; (8106d28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8106cd4:	4293      	cmp	r3, r2
 8106cd6:	d10c      	bne.n	8106cf2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106cd8:	68bb      	ldr	r3, [r7, #8]
 8106cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106cde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106ce0:	683b      	ldr	r3, [r7, #0]
 8106ce2:	689b      	ldr	r3, [r3, #8]
 8106ce4:	68ba      	ldr	r2, [r7, #8]
 8106ce6:	4313      	orrs	r3, r2
 8106ce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8106cea:	687b      	ldr	r3, [r7, #4]
 8106cec:	681b      	ldr	r3, [r3, #0]
 8106cee:	68ba      	ldr	r2, [r7, #8]
 8106cf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8106cf2:	687b      	ldr	r3, [r7, #4]
 8106cf4:	2201      	movs	r2, #1
 8106cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106cfa:	687b      	ldr	r3, [r7, #4]
 8106cfc:	2200      	movs	r2, #0
 8106cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106d02:	2300      	movs	r3, #0
}
 8106d04:	4618      	mov	r0, r3
 8106d06:	3714      	adds	r7, #20
 8106d08:	46bd      	mov	sp, r7
 8106d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d0e:	4770      	bx	lr
 8106d10:	40010000 	.word	0x40010000
 8106d14:	40010400 	.word	0x40010400
 8106d18:	40000400 	.word	0x40000400
 8106d1c:	40000800 	.word	0x40000800
 8106d20:	40000c00 	.word	0x40000c00
 8106d24:	40001800 	.word	0x40001800
 8106d28:	40014000 	.word	0x40014000

08106d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8106d2c:	b580      	push	{r7, lr}
 8106d2e:	b082      	sub	sp, #8
 8106d30:	af00      	add	r7, sp, #0
 8106d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8106d34:	687b      	ldr	r3, [r7, #4]
 8106d36:	2b00      	cmp	r3, #0
 8106d38:	d101      	bne.n	8106d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8106d3a:	2301      	movs	r3, #1
 8106d3c:	e042      	b.n	8106dc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8106d3e:	687b      	ldr	r3, [r7, #4]
 8106d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106d44:	2b00      	cmp	r3, #0
 8106d46:	d106      	bne.n	8106d56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8106d48:	687b      	ldr	r3, [r7, #4]
 8106d4a:	2200      	movs	r2, #0
 8106d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8106d50:	6878      	ldr	r0, [r7, #4]
 8106d52:	f7fa fe25 	bl	81019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8106d56:	687b      	ldr	r3, [r7, #4]
 8106d58:	2224      	movs	r2, #36	; 0x24
 8106d5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8106d5e:	687b      	ldr	r3, [r7, #4]
 8106d60:	681b      	ldr	r3, [r3, #0]
 8106d62:	681a      	ldr	r2, [r3, #0]
 8106d64:	687b      	ldr	r3, [r7, #4]
 8106d66:	681b      	ldr	r3, [r3, #0]
 8106d68:	f022 0201 	bic.w	r2, r2, #1
 8106d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8106d6e:	6878      	ldr	r0, [r7, #4]
 8106d70:	f000 f996 	bl	81070a0 <UART_SetConfig>
 8106d74:	4603      	mov	r3, r0
 8106d76:	2b01      	cmp	r3, #1
 8106d78:	d101      	bne.n	8106d7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8106d7a:	2301      	movs	r3, #1
 8106d7c:	e022      	b.n	8106dc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8106d7e:	687b      	ldr	r3, [r7, #4]
 8106d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d82:	2b00      	cmp	r3, #0
 8106d84:	d002      	beq.n	8106d8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8106d86:	6878      	ldr	r0, [r7, #4]
 8106d88:	f000 fef2 	bl	8107b70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8106d8c:	687b      	ldr	r3, [r7, #4]
 8106d8e:	681b      	ldr	r3, [r3, #0]
 8106d90:	685a      	ldr	r2, [r3, #4]
 8106d92:	687b      	ldr	r3, [r7, #4]
 8106d94:	681b      	ldr	r3, [r3, #0]
 8106d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8106d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8106d9c:	687b      	ldr	r3, [r7, #4]
 8106d9e:	681b      	ldr	r3, [r3, #0]
 8106da0:	689a      	ldr	r2, [r3, #8]
 8106da2:	687b      	ldr	r3, [r7, #4]
 8106da4:	681b      	ldr	r3, [r3, #0]
 8106da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8106daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8106dac:	687b      	ldr	r3, [r7, #4]
 8106dae:	681b      	ldr	r3, [r3, #0]
 8106db0:	681a      	ldr	r2, [r3, #0]
 8106db2:	687b      	ldr	r3, [r7, #4]
 8106db4:	681b      	ldr	r3, [r3, #0]
 8106db6:	f042 0201 	orr.w	r2, r2, #1
 8106dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8106dbc:	6878      	ldr	r0, [r7, #4]
 8106dbe:	f000 ff79 	bl	8107cb4 <UART_CheckIdleState>
 8106dc2:	4603      	mov	r3, r0
}
 8106dc4:	4618      	mov	r0, r3
 8106dc6:	3708      	adds	r7, #8
 8106dc8:	46bd      	mov	sp, r7
 8106dca:	bd80      	pop	{r7, pc}

08106dcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106dcc:	b580      	push	{r7, lr}
 8106dce:	b08a      	sub	sp, #40	; 0x28
 8106dd0:	af02      	add	r7, sp, #8
 8106dd2:	60f8      	str	r0, [r7, #12]
 8106dd4:	60b9      	str	r1, [r7, #8]
 8106dd6:	603b      	str	r3, [r7, #0]
 8106dd8:	4613      	mov	r3, r2
 8106dda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8106ddc:	68fb      	ldr	r3, [r7, #12]
 8106dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106de2:	2b20      	cmp	r3, #32
 8106de4:	f040 8083 	bne.w	8106eee <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8106de8:	68bb      	ldr	r3, [r7, #8]
 8106dea:	2b00      	cmp	r3, #0
 8106dec:	d002      	beq.n	8106df4 <HAL_UART_Transmit+0x28>
 8106dee:	88fb      	ldrh	r3, [r7, #6]
 8106df0:	2b00      	cmp	r3, #0
 8106df2:	d101      	bne.n	8106df8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8106df4:	2301      	movs	r3, #1
 8106df6:	e07b      	b.n	8106ef0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8106df8:	68fb      	ldr	r3, [r7, #12]
 8106dfa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106dfe:	2b01      	cmp	r3, #1
 8106e00:	d101      	bne.n	8106e06 <HAL_UART_Transmit+0x3a>
 8106e02:	2302      	movs	r3, #2
 8106e04:	e074      	b.n	8106ef0 <HAL_UART_Transmit+0x124>
 8106e06:	68fb      	ldr	r3, [r7, #12]
 8106e08:	2201      	movs	r2, #1
 8106e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106e0e:	68fb      	ldr	r3, [r7, #12]
 8106e10:	2200      	movs	r2, #0
 8106e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106e16:	68fb      	ldr	r3, [r7, #12]
 8106e18:	2221      	movs	r2, #33	; 0x21
 8106e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106e1e:	f7fa ff5f 	bl	8101ce0 <HAL_GetTick>
 8106e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8106e24:	68fb      	ldr	r3, [r7, #12]
 8106e26:	88fa      	ldrh	r2, [r7, #6]
 8106e28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8106e2c:	68fb      	ldr	r3, [r7, #12]
 8106e2e:	88fa      	ldrh	r2, [r7, #6]
 8106e30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106e34:	68fb      	ldr	r3, [r7, #12]
 8106e36:	689b      	ldr	r3, [r3, #8]
 8106e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106e3c:	d108      	bne.n	8106e50 <HAL_UART_Transmit+0x84>
 8106e3e:	68fb      	ldr	r3, [r7, #12]
 8106e40:	691b      	ldr	r3, [r3, #16]
 8106e42:	2b00      	cmp	r3, #0
 8106e44:	d104      	bne.n	8106e50 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8106e46:	2300      	movs	r3, #0
 8106e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8106e4a:	68bb      	ldr	r3, [r7, #8]
 8106e4c:	61bb      	str	r3, [r7, #24]
 8106e4e:	e003      	b.n	8106e58 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8106e50:	68bb      	ldr	r3, [r7, #8]
 8106e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106e54:	2300      	movs	r3, #0
 8106e56:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8106e58:	68fb      	ldr	r3, [r7, #12]
 8106e5a:	2200      	movs	r2, #0
 8106e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8106e60:	e02c      	b.n	8106ebc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106e62:	683b      	ldr	r3, [r7, #0]
 8106e64:	9300      	str	r3, [sp, #0]
 8106e66:	697b      	ldr	r3, [r7, #20]
 8106e68:	2200      	movs	r2, #0
 8106e6a:	2180      	movs	r1, #128	; 0x80
 8106e6c:	68f8      	ldr	r0, [r7, #12]
 8106e6e:	f000 ff6c 	bl	8107d4a <UART_WaitOnFlagUntilTimeout>
 8106e72:	4603      	mov	r3, r0
 8106e74:	2b00      	cmp	r3, #0
 8106e76:	d001      	beq.n	8106e7c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8106e78:	2303      	movs	r3, #3
 8106e7a:	e039      	b.n	8106ef0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8106e7c:	69fb      	ldr	r3, [r7, #28]
 8106e7e:	2b00      	cmp	r3, #0
 8106e80:	d10b      	bne.n	8106e9a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8106e82:	69bb      	ldr	r3, [r7, #24]
 8106e84:	881b      	ldrh	r3, [r3, #0]
 8106e86:	461a      	mov	r2, r3
 8106e88:	68fb      	ldr	r3, [r7, #12]
 8106e8a:	681b      	ldr	r3, [r3, #0]
 8106e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106e90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8106e92:	69bb      	ldr	r3, [r7, #24]
 8106e94:	3302      	adds	r3, #2
 8106e96:	61bb      	str	r3, [r7, #24]
 8106e98:	e007      	b.n	8106eaa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8106e9a:	69fb      	ldr	r3, [r7, #28]
 8106e9c:	781a      	ldrb	r2, [r3, #0]
 8106e9e:	68fb      	ldr	r3, [r7, #12]
 8106ea0:	681b      	ldr	r3, [r3, #0]
 8106ea2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8106ea4:	69fb      	ldr	r3, [r7, #28]
 8106ea6:	3301      	adds	r3, #1
 8106ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8106eaa:	68fb      	ldr	r3, [r7, #12]
 8106eac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106eb0:	b29b      	uxth	r3, r3
 8106eb2:	3b01      	subs	r3, #1
 8106eb4:	b29a      	uxth	r2, r3
 8106eb6:	68fb      	ldr	r3, [r7, #12]
 8106eb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8106ebc:	68fb      	ldr	r3, [r7, #12]
 8106ebe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106ec2:	b29b      	uxth	r3, r3
 8106ec4:	2b00      	cmp	r3, #0
 8106ec6:	d1cc      	bne.n	8106e62 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8106ec8:	683b      	ldr	r3, [r7, #0]
 8106eca:	9300      	str	r3, [sp, #0]
 8106ecc:	697b      	ldr	r3, [r7, #20]
 8106ece:	2200      	movs	r2, #0
 8106ed0:	2140      	movs	r1, #64	; 0x40
 8106ed2:	68f8      	ldr	r0, [r7, #12]
 8106ed4:	f000 ff39 	bl	8107d4a <UART_WaitOnFlagUntilTimeout>
 8106ed8:	4603      	mov	r3, r0
 8106eda:	2b00      	cmp	r3, #0
 8106edc:	d001      	beq.n	8106ee2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8106ede:	2303      	movs	r3, #3
 8106ee0:	e006      	b.n	8106ef0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8106ee2:	68fb      	ldr	r3, [r7, #12]
 8106ee4:	2220      	movs	r2, #32
 8106ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8106eea:	2300      	movs	r3, #0
 8106eec:	e000      	b.n	8106ef0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8106eee:	2302      	movs	r3, #2
  }
}
 8106ef0:	4618      	mov	r0, r3
 8106ef2:	3720      	adds	r7, #32
 8106ef4:	46bd      	mov	sp, r7
 8106ef6:	bd80      	pop	{r7, pc}

08106ef8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106ef8:	b580      	push	{r7, lr}
 8106efa:	b08a      	sub	sp, #40	; 0x28
 8106efc:	af02      	add	r7, sp, #8
 8106efe:	60f8      	str	r0, [r7, #12]
 8106f00:	60b9      	str	r1, [r7, #8]
 8106f02:	603b      	str	r3, [r7, #0]
 8106f04:	4613      	mov	r3, r2
 8106f06:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8106f08:	68fb      	ldr	r3, [r7, #12]
 8106f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106f0e:	2b20      	cmp	r3, #32
 8106f10:	f040 80c0 	bne.w	8107094 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8106f14:	68bb      	ldr	r3, [r7, #8]
 8106f16:	2b00      	cmp	r3, #0
 8106f18:	d002      	beq.n	8106f20 <HAL_UART_Receive+0x28>
 8106f1a:	88fb      	ldrh	r3, [r7, #6]
 8106f1c:	2b00      	cmp	r3, #0
 8106f1e:	d101      	bne.n	8106f24 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8106f20:	2301      	movs	r3, #1
 8106f22:	e0b8      	b.n	8107096 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8106f24:	68fb      	ldr	r3, [r7, #12]
 8106f26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106f2a:	2b01      	cmp	r3, #1
 8106f2c:	d101      	bne.n	8106f32 <HAL_UART_Receive+0x3a>
 8106f2e:	2302      	movs	r3, #2
 8106f30:	e0b1      	b.n	8107096 <HAL_UART_Receive+0x19e>
 8106f32:	68fb      	ldr	r3, [r7, #12]
 8106f34:	2201      	movs	r2, #1
 8106f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106f3a:	68fb      	ldr	r3, [r7, #12]
 8106f3c:	2200      	movs	r2, #0
 8106f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8106f42:	68fb      	ldr	r3, [r7, #12]
 8106f44:	2222      	movs	r2, #34	; 0x22
 8106f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106f4a:	68fb      	ldr	r3, [r7, #12]
 8106f4c:	2200      	movs	r2, #0
 8106f4e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106f50:	f7fa fec6 	bl	8101ce0 <HAL_GetTick>
 8106f54:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8106f56:	68fb      	ldr	r3, [r7, #12]
 8106f58:	88fa      	ldrh	r2, [r7, #6]
 8106f5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8106f5e:	68fb      	ldr	r3, [r7, #12]
 8106f60:	88fa      	ldrh	r2, [r7, #6]
 8106f62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8106f66:	68fb      	ldr	r3, [r7, #12]
 8106f68:	689b      	ldr	r3, [r3, #8]
 8106f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106f6e:	d10e      	bne.n	8106f8e <HAL_UART_Receive+0x96>
 8106f70:	68fb      	ldr	r3, [r7, #12]
 8106f72:	691b      	ldr	r3, [r3, #16]
 8106f74:	2b00      	cmp	r3, #0
 8106f76:	d105      	bne.n	8106f84 <HAL_UART_Receive+0x8c>
 8106f78:	68fb      	ldr	r3, [r7, #12]
 8106f7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8106f7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106f82:	e02d      	b.n	8106fe0 <HAL_UART_Receive+0xe8>
 8106f84:	68fb      	ldr	r3, [r7, #12]
 8106f86:	22ff      	movs	r2, #255	; 0xff
 8106f88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106f8c:	e028      	b.n	8106fe0 <HAL_UART_Receive+0xe8>
 8106f8e:	68fb      	ldr	r3, [r7, #12]
 8106f90:	689b      	ldr	r3, [r3, #8]
 8106f92:	2b00      	cmp	r3, #0
 8106f94:	d10d      	bne.n	8106fb2 <HAL_UART_Receive+0xba>
 8106f96:	68fb      	ldr	r3, [r7, #12]
 8106f98:	691b      	ldr	r3, [r3, #16]
 8106f9a:	2b00      	cmp	r3, #0
 8106f9c:	d104      	bne.n	8106fa8 <HAL_UART_Receive+0xb0>
 8106f9e:	68fb      	ldr	r3, [r7, #12]
 8106fa0:	22ff      	movs	r2, #255	; 0xff
 8106fa2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106fa6:	e01b      	b.n	8106fe0 <HAL_UART_Receive+0xe8>
 8106fa8:	68fb      	ldr	r3, [r7, #12]
 8106faa:	227f      	movs	r2, #127	; 0x7f
 8106fac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106fb0:	e016      	b.n	8106fe0 <HAL_UART_Receive+0xe8>
 8106fb2:	68fb      	ldr	r3, [r7, #12]
 8106fb4:	689b      	ldr	r3, [r3, #8]
 8106fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106fba:	d10d      	bne.n	8106fd8 <HAL_UART_Receive+0xe0>
 8106fbc:	68fb      	ldr	r3, [r7, #12]
 8106fbe:	691b      	ldr	r3, [r3, #16]
 8106fc0:	2b00      	cmp	r3, #0
 8106fc2:	d104      	bne.n	8106fce <HAL_UART_Receive+0xd6>
 8106fc4:	68fb      	ldr	r3, [r7, #12]
 8106fc6:	227f      	movs	r2, #127	; 0x7f
 8106fc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106fcc:	e008      	b.n	8106fe0 <HAL_UART_Receive+0xe8>
 8106fce:	68fb      	ldr	r3, [r7, #12]
 8106fd0:	223f      	movs	r2, #63	; 0x3f
 8106fd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106fd6:	e003      	b.n	8106fe0 <HAL_UART_Receive+0xe8>
 8106fd8:	68fb      	ldr	r3, [r7, #12]
 8106fda:	2200      	movs	r2, #0
 8106fdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8106fe0:	68fb      	ldr	r3, [r7, #12]
 8106fe2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8106fe6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8106fe8:	68fb      	ldr	r3, [r7, #12]
 8106fea:	689b      	ldr	r3, [r3, #8]
 8106fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106ff0:	d108      	bne.n	8107004 <HAL_UART_Receive+0x10c>
 8106ff2:	68fb      	ldr	r3, [r7, #12]
 8106ff4:	691b      	ldr	r3, [r3, #16]
 8106ff6:	2b00      	cmp	r3, #0
 8106ff8:	d104      	bne.n	8107004 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8106ffa:	2300      	movs	r3, #0
 8106ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8106ffe:	68bb      	ldr	r3, [r7, #8]
 8107000:	61bb      	str	r3, [r7, #24]
 8107002:	e003      	b.n	810700c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8107004:	68bb      	ldr	r3, [r7, #8]
 8107006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107008:	2300      	movs	r3, #0
 810700a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 810700c:	68fb      	ldr	r3, [r7, #12]
 810700e:	2200      	movs	r2, #0
 8107010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8107014:	e032      	b.n	810707c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8107016:	683b      	ldr	r3, [r7, #0]
 8107018:	9300      	str	r3, [sp, #0]
 810701a:	697b      	ldr	r3, [r7, #20]
 810701c:	2200      	movs	r2, #0
 810701e:	2120      	movs	r1, #32
 8107020:	68f8      	ldr	r0, [r7, #12]
 8107022:	f000 fe92 	bl	8107d4a <UART_WaitOnFlagUntilTimeout>
 8107026:	4603      	mov	r3, r0
 8107028:	2b00      	cmp	r3, #0
 810702a:	d001      	beq.n	8107030 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 810702c:	2303      	movs	r3, #3
 810702e:	e032      	b.n	8107096 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8107030:	69fb      	ldr	r3, [r7, #28]
 8107032:	2b00      	cmp	r3, #0
 8107034:	d10c      	bne.n	8107050 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8107036:	68fb      	ldr	r3, [r7, #12]
 8107038:	681b      	ldr	r3, [r3, #0]
 810703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810703c:	b29a      	uxth	r2, r3
 810703e:	8a7b      	ldrh	r3, [r7, #18]
 8107040:	4013      	ands	r3, r2
 8107042:	b29a      	uxth	r2, r3
 8107044:	69bb      	ldr	r3, [r7, #24]
 8107046:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8107048:	69bb      	ldr	r3, [r7, #24]
 810704a:	3302      	adds	r3, #2
 810704c:	61bb      	str	r3, [r7, #24]
 810704e:	e00c      	b.n	810706a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8107050:	68fb      	ldr	r3, [r7, #12]
 8107052:	681b      	ldr	r3, [r3, #0]
 8107054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107056:	b2da      	uxtb	r2, r3
 8107058:	8a7b      	ldrh	r3, [r7, #18]
 810705a:	b2db      	uxtb	r3, r3
 810705c:	4013      	ands	r3, r2
 810705e:	b2da      	uxtb	r2, r3
 8107060:	69fb      	ldr	r3, [r7, #28]
 8107062:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8107064:	69fb      	ldr	r3, [r7, #28]
 8107066:	3301      	adds	r3, #1
 8107068:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810706a:	68fb      	ldr	r3, [r7, #12]
 810706c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8107070:	b29b      	uxth	r3, r3
 8107072:	3b01      	subs	r3, #1
 8107074:	b29a      	uxth	r2, r3
 8107076:	68fb      	ldr	r3, [r7, #12]
 8107078:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 810707c:	68fb      	ldr	r3, [r7, #12]
 810707e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8107082:	b29b      	uxth	r3, r3
 8107084:	2b00      	cmp	r3, #0
 8107086:	d1c6      	bne.n	8107016 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8107088:	68fb      	ldr	r3, [r7, #12]
 810708a:	2220      	movs	r2, #32
 810708c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8107090:	2300      	movs	r3, #0
 8107092:	e000      	b.n	8107096 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8107094:	2302      	movs	r3, #2
  }
}
 8107096:	4618      	mov	r0, r3
 8107098:	3720      	adds	r7, #32
 810709a:	46bd      	mov	sp, r7
 810709c:	bd80      	pop	{r7, pc}
	...

081070a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81070a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81070a4:	b092      	sub	sp, #72	; 0x48
 81070a6:	af00      	add	r7, sp, #0
 81070a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81070aa:	2300      	movs	r3, #0
 81070ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81070b0:	697b      	ldr	r3, [r7, #20]
 81070b2:	689a      	ldr	r2, [r3, #8]
 81070b4:	697b      	ldr	r3, [r7, #20]
 81070b6:	691b      	ldr	r3, [r3, #16]
 81070b8:	431a      	orrs	r2, r3
 81070ba:	697b      	ldr	r3, [r7, #20]
 81070bc:	695b      	ldr	r3, [r3, #20]
 81070be:	431a      	orrs	r2, r3
 81070c0:	697b      	ldr	r3, [r7, #20]
 81070c2:	69db      	ldr	r3, [r3, #28]
 81070c4:	4313      	orrs	r3, r2
 81070c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81070c8:	697b      	ldr	r3, [r7, #20]
 81070ca:	681b      	ldr	r3, [r3, #0]
 81070cc:	681a      	ldr	r2, [r3, #0]
 81070ce:	4bbd      	ldr	r3, [pc, #756]	; (81073c4 <UART_SetConfig+0x324>)
 81070d0:	4013      	ands	r3, r2
 81070d2:	697a      	ldr	r2, [r7, #20]
 81070d4:	6812      	ldr	r2, [r2, #0]
 81070d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81070d8:	430b      	orrs	r3, r1
 81070da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81070dc:	697b      	ldr	r3, [r7, #20]
 81070de:	681b      	ldr	r3, [r3, #0]
 81070e0:	685b      	ldr	r3, [r3, #4]
 81070e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81070e6:	697b      	ldr	r3, [r7, #20]
 81070e8:	68da      	ldr	r2, [r3, #12]
 81070ea:	697b      	ldr	r3, [r7, #20]
 81070ec:	681b      	ldr	r3, [r3, #0]
 81070ee:	430a      	orrs	r2, r1
 81070f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81070f2:	697b      	ldr	r3, [r7, #20]
 81070f4:	699b      	ldr	r3, [r3, #24]
 81070f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81070f8:	697b      	ldr	r3, [r7, #20]
 81070fa:	681b      	ldr	r3, [r3, #0]
 81070fc:	4ab2      	ldr	r2, [pc, #712]	; (81073c8 <UART_SetConfig+0x328>)
 81070fe:	4293      	cmp	r3, r2
 8107100:	d004      	beq.n	810710c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8107102:	697b      	ldr	r3, [r7, #20]
 8107104:	6a1b      	ldr	r3, [r3, #32]
 8107106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8107108:	4313      	orrs	r3, r2
 810710a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810710c:	697b      	ldr	r3, [r7, #20]
 810710e:	681b      	ldr	r3, [r3, #0]
 8107110:	689b      	ldr	r3, [r3, #8]
 8107112:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8107116:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810711a:	697a      	ldr	r2, [r7, #20]
 810711c:	6812      	ldr	r2, [r2, #0]
 810711e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107120:	430b      	orrs	r3, r1
 8107122:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107124:	697b      	ldr	r3, [r7, #20]
 8107126:	681b      	ldr	r3, [r3, #0]
 8107128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810712a:	f023 010f 	bic.w	r1, r3, #15
 810712e:	697b      	ldr	r3, [r7, #20]
 8107130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107132:	697b      	ldr	r3, [r7, #20]
 8107134:	681b      	ldr	r3, [r3, #0]
 8107136:	430a      	orrs	r2, r1
 8107138:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810713a:	697b      	ldr	r3, [r7, #20]
 810713c:	681b      	ldr	r3, [r3, #0]
 810713e:	4aa3      	ldr	r2, [pc, #652]	; (81073cc <UART_SetConfig+0x32c>)
 8107140:	4293      	cmp	r3, r2
 8107142:	d177      	bne.n	8107234 <UART_SetConfig+0x194>
 8107144:	4ba2      	ldr	r3, [pc, #648]	; (81073d0 <UART_SetConfig+0x330>)
 8107146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810714c:	2b28      	cmp	r3, #40	; 0x28
 810714e:	d86d      	bhi.n	810722c <UART_SetConfig+0x18c>
 8107150:	a201      	add	r2, pc, #4	; (adr r2, 8107158 <UART_SetConfig+0xb8>)
 8107152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107156:	bf00      	nop
 8107158:	081071fd 	.word	0x081071fd
 810715c:	0810722d 	.word	0x0810722d
 8107160:	0810722d 	.word	0x0810722d
 8107164:	0810722d 	.word	0x0810722d
 8107168:	0810722d 	.word	0x0810722d
 810716c:	0810722d 	.word	0x0810722d
 8107170:	0810722d 	.word	0x0810722d
 8107174:	0810722d 	.word	0x0810722d
 8107178:	08107205 	.word	0x08107205
 810717c:	0810722d 	.word	0x0810722d
 8107180:	0810722d 	.word	0x0810722d
 8107184:	0810722d 	.word	0x0810722d
 8107188:	0810722d 	.word	0x0810722d
 810718c:	0810722d 	.word	0x0810722d
 8107190:	0810722d 	.word	0x0810722d
 8107194:	0810722d 	.word	0x0810722d
 8107198:	0810720d 	.word	0x0810720d
 810719c:	0810722d 	.word	0x0810722d
 81071a0:	0810722d 	.word	0x0810722d
 81071a4:	0810722d 	.word	0x0810722d
 81071a8:	0810722d 	.word	0x0810722d
 81071ac:	0810722d 	.word	0x0810722d
 81071b0:	0810722d 	.word	0x0810722d
 81071b4:	0810722d 	.word	0x0810722d
 81071b8:	08107215 	.word	0x08107215
 81071bc:	0810722d 	.word	0x0810722d
 81071c0:	0810722d 	.word	0x0810722d
 81071c4:	0810722d 	.word	0x0810722d
 81071c8:	0810722d 	.word	0x0810722d
 81071cc:	0810722d 	.word	0x0810722d
 81071d0:	0810722d 	.word	0x0810722d
 81071d4:	0810722d 	.word	0x0810722d
 81071d8:	0810721d 	.word	0x0810721d
 81071dc:	0810722d 	.word	0x0810722d
 81071e0:	0810722d 	.word	0x0810722d
 81071e4:	0810722d 	.word	0x0810722d
 81071e8:	0810722d 	.word	0x0810722d
 81071ec:	0810722d 	.word	0x0810722d
 81071f0:	0810722d 	.word	0x0810722d
 81071f4:	0810722d 	.word	0x0810722d
 81071f8:	08107225 	.word	0x08107225
 81071fc:	2301      	movs	r3, #1
 81071fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107202:	e220      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107204:	2304      	movs	r3, #4
 8107206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810720a:	e21c      	b.n	8107646 <UART_SetConfig+0x5a6>
 810720c:	2308      	movs	r3, #8
 810720e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107212:	e218      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107214:	2310      	movs	r3, #16
 8107216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810721a:	e214      	b.n	8107646 <UART_SetConfig+0x5a6>
 810721c:	2320      	movs	r3, #32
 810721e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107222:	e210      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107224:	2340      	movs	r3, #64	; 0x40
 8107226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810722a:	e20c      	b.n	8107646 <UART_SetConfig+0x5a6>
 810722c:	2380      	movs	r3, #128	; 0x80
 810722e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107232:	e208      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107234:	697b      	ldr	r3, [r7, #20]
 8107236:	681b      	ldr	r3, [r3, #0]
 8107238:	4a66      	ldr	r2, [pc, #408]	; (81073d4 <UART_SetConfig+0x334>)
 810723a:	4293      	cmp	r3, r2
 810723c:	d130      	bne.n	81072a0 <UART_SetConfig+0x200>
 810723e:	4b64      	ldr	r3, [pc, #400]	; (81073d0 <UART_SetConfig+0x330>)
 8107240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107242:	f003 0307 	and.w	r3, r3, #7
 8107246:	2b05      	cmp	r3, #5
 8107248:	d826      	bhi.n	8107298 <UART_SetConfig+0x1f8>
 810724a:	a201      	add	r2, pc, #4	; (adr r2, 8107250 <UART_SetConfig+0x1b0>)
 810724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107250:	08107269 	.word	0x08107269
 8107254:	08107271 	.word	0x08107271
 8107258:	08107279 	.word	0x08107279
 810725c:	08107281 	.word	0x08107281
 8107260:	08107289 	.word	0x08107289
 8107264:	08107291 	.word	0x08107291
 8107268:	2300      	movs	r3, #0
 810726a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810726e:	e1ea      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107270:	2304      	movs	r3, #4
 8107272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107276:	e1e6      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107278:	2308      	movs	r3, #8
 810727a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810727e:	e1e2      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107280:	2310      	movs	r3, #16
 8107282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107286:	e1de      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107288:	2320      	movs	r3, #32
 810728a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810728e:	e1da      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107290:	2340      	movs	r3, #64	; 0x40
 8107292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107296:	e1d6      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107298:	2380      	movs	r3, #128	; 0x80
 810729a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810729e:	e1d2      	b.n	8107646 <UART_SetConfig+0x5a6>
 81072a0:	697b      	ldr	r3, [r7, #20]
 81072a2:	681b      	ldr	r3, [r3, #0]
 81072a4:	4a4c      	ldr	r2, [pc, #304]	; (81073d8 <UART_SetConfig+0x338>)
 81072a6:	4293      	cmp	r3, r2
 81072a8:	d130      	bne.n	810730c <UART_SetConfig+0x26c>
 81072aa:	4b49      	ldr	r3, [pc, #292]	; (81073d0 <UART_SetConfig+0x330>)
 81072ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81072ae:	f003 0307 	and.w	r3, r3, #7
 81072b2:	2b05      	cmp	r3, #5
 81072b4:	d826      	bhi.n	8107304 <UART_SetConfig+0x264>
 81072b6:	a201      	add	r2, pc, #4	; (adr r2, 81072bc <UART_SetConfig+0x21c>)
 81072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81072bc:	081072d5 	.word	0x081072d5
 81072c0:	081072dd 	.word	0x081072dd
 81072c4:	081072e5 	.word	0x081072e5
 81072c8:	081072ed 	.word	0x081072ed
 81072cc:	081072f5 	.word	0x081072f5
 81072d0:	081072fd 	.word	0x081072fd
 81072d4:	2300      	movs	r3, #0
 81072d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072da:	e1b4      	b.n	8107646 <UART_SetConfig+0x5a6>
 81072dc:	2304      	movs	r3, #4
 81072de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072e2:	e1b0      	b.n	8107646 <UART_SetConfig+0x5a6>
 81072e4:	2308      	movs	r3, #8
 81072e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072ea:	e1ac      	b.n	8107646 <UART_SetConfig+0x5a6>
 81072ec:	2310      	movs	r3, #16
 81072ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072f2:	e1a8      	b.n	8107646 <UART_SetConfig+0x5a6>
 81072f4:	2320      	movs	r3, #32
 81072f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81072fa:	e1a4      	b.n	8107646 <UART_SetConfig+0x5a6>
 81072fc:	2340      	movs	r3, #64	; 0x40
 81072fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107302:	e1a0      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107304:	2380      	movs	r3, #128	; 0x80
 8107306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810730a:	e19c      	b.n	8107646 <UART_SetConfig+0x5a6>
 810730c:	697b      	ldr	r3, [r7, #20]
 810730e:	681b      	ldr	r3, [r3, #0]
 8107310:	4a32      	ldr	r2, [pc, #200]	; (81073dc <UART_SetConfig+0x33c>)
 8107312:	4293      	cmp	r3, r2
 8107314:	d130      	bne.n	8107378 <UART_SetConfig+0x2d8>
 8107316:	4b2e      	ldr	r3, [pc, #184]	; (81073d0 <UART_SetConfig+0x330>)
 8107318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810731a:	f003 0307 	and.w	r3, r3, #7
 810731e:	2b05      	cmp	r3, #5
 8107320:	d826      	bhi.n	8107370 <UART_SetConfig+0x2d0>
 8107322:	a201      	add	r2, pc, #4	; (adr r2, 8107328 <UART_SetConfig+0x288>)
 8107324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107328:	08107341 	.word	0x08107341
 810732c:	08107349 	.word	0x08107349
 8107330:	08107351 	.word	0x08107351
 8107334:	08107359 	.word	0x08107359
 8107338:	08107361 	.word	0x08107361
 810733c:	08107369 	.word	0x08107369
 8107340:	2300      	movs	r3, #0
 8107342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107346:	e17e      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107348:	2304      	movs	r3, #4
 810734a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810734e:	e17a      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107350:	2308      	movs	r3, #8
 8107352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107356:	e176      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107358:	2310      	movs	r3, #16
 810735a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810735e:	e172      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107360:	2320      	movs	r3, #32
 8107362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107366:	e16e      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107368:	2340      	movs	r3, #64	; 0x40
 810736a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810736e:	e16a      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107370:	2380      	movs	r3, #128	; 0x80
 8107372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107376:	e166      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107378:	697b      	ldr	r3, [r7, #20]
 810737a:	681b      	ldr	r3, [r3, #0]
 810737c:	4a18      	ldr	r2, [pc, #96]	; (81073e0 <UART_SetConfig+0x340>)
 810737e:	4293      	cmp	r3, r2
 8107380:	d140      	bne.n	8107404 <UART_SetConfig+0x364>
 8107382:	4b13      	ldr	r3, [pc, #76]	; (81073d0 <UART_SetConfig+0x330>)
 8107384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107386:	f003 0307 	and.w	r3, r3, #7
 810738a:	2b05      	cmp	r3, #5
 810738c:	d836      	bhi.n	81073fc <UART_SetConfig+0x35c>
 810738e:	a201      	add	r2, pc, #4	; (adr r2, 8107394 <UART_SetConfig+0x2f4>)
 8107390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107394:	081073ad 	.word	0x081073ad
 8107398:	081073b5 	.word	0x081073b5
 810739c:	081073bd 	.word	0x081073bd
 81073a0:	081073e5 	.word	0x081073e5
 81073a4:	081073ed 	.word	0x081073ed
 81073a8:	081073f5 	.word	0x081073f5
 81073ac:	2300      	movs	r3, #0
 81073ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073b2:	e148      	b.n	8107646 <UART_SetConfig+0x5a6>
 81073b4:	2304      	movs	r3, #4
 81073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073ba:	e144      	b.n	8107646 <UART_SetConfig+0x5a6>
 81073bc:	2308      	movs	r3, #8
 81073be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073c2:	e140      	b.n	8107646 <UART_SetConfig+0x5a6>
 81073c4:	cfff69f3 	.word	0xcfff69f3
 81073c8:	58000c00 	.word	0x58000c00
 81073cc:	40011000 	.word	0x40011000
 81073d0:	58024400 	.word	0x58024400
 81073d4:	40004400 	.word	0x40004400
 81073d8:	40004800 	.word	0x40004800
 81073dc:	40004c00 	.word	0x40004c00
 81073e0:	40005000 	.word	0x40005000
 81073e4:	2310      	movs	r3, #16
 81073e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073ea:	e12c      	b.n	8107646 <UART_SetConfig+0x5a6>
 81073ec:	2320      	movs	r3, #32
 81073ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073f2:	e128      	b.n	8107646 <UART_SetConfig+0x5a6>
 81073f4:	2340      	movs	r3, #64	; 0x40
 81073f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81073fa:	e124      	b.n	8107646 <UART_SetConfig+0x5a6>
 81073fc:	2380      	movs	r3, #128	; 0x80
 81073fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107402:	e120      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107404:	697b      	ldr	r3, [r7, #20]
 8107406:	681b      	ldr	r3, [r3, #0]
 8107408:	4acb      	ldr	r2, [pc, #812]	; (8107738 <UART_SetConfig+0x698>)
 810740a:	4293      	cmp	r3, r2
 810740c:	d176      	bne.n	81074fc <UART_SetConfig+0x45c>
 810740e:	4bcb      	ldr	r3, [pc, #812]	; (810773c <UART_SetConfig+0x69c>)
 8107410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107416:	2b28      	cmp	r3, #40	; 0x28
 8107418:	d86c      	bhi.n	81074f4 <UART_SetConfig+0x454>
 810741a:	a201      	add	r2, pc, #4	; (adr r2, 8107420 <UART_SetConfig+0x380>)
 810741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107420:	081074c5 	.word	0x081074c5
 8107424:	081074f5 	.word	0x081074f5
 8107428:	081074f5 	.word	0x081074f5
 810742c:	081074f5 	.word	0x081074f5
 8107430:	081074f5 	.word	0x081074f5
 8107434:	081074f5 	.word	0x081074f5
 8107438:	081074f5 	.word	0x081074f5
 810743c:	081074f5 	.word	0x081074f5
 8107440:	081074cd 	.word	0x081074cd
 8107444:	081074f5 	.word	0x081074f5
 8107448:	081074f5 	.word	0x081074f5
 810744c:	081074f5 	.word	0x081074f5
 8107450:	081074f5 	.word	0x081074f5
 8107454:	081074f5 	.word	0x081074f5
 8107458:	081074f5 	.word	0x081074f5
 810745c:	081074f5 	.word	0x081074f5
 8107460:	081074d5 	.word	0x081074d5
 8107464:	081074f5 	.word	0x081074f5
 8107468:	081074f5 	.word	0x081074f5
 810746c:	081074f5 	.word	0x081074f5
 8107470:	081074f5 	.word	0x081074f5
 8107474:	081074f5 	.word	0x081074f5
 8107478:	081074f5 	.word	0x081074f5
 810747c:	081074f5 	.word	0x081074f5
 8107480:	081074dd 	.word	0x081074dd
 8107484:	081074f5 	.word	0x081074f5
 8107488:	081074f5 	.word	0x081074f5
 810748c:	081074f5 	.word	0x081074f5
 8107490:	081074f5 	.word	0x081074f5
 8107494:	081074f5 	.word	0x081074f5
 8107498:	081074f5 	.word	0x081074f5
 810749c:	081074f5 	.word	0x081074f5
 81074a0:	081074e5 	.word	0x081074e5
 81074a4:	081074f5 	.word	0x081074f5
 81074a8:	081074f5 	.word	0x081074f5
 81074ac:	081074f5 	.word	0x081074f5
 81074b0:	081074f5 	.word	0x081074f5
 81074b4:	081074f5 	.word	0x081074f5
 81074b8:	081074f5 	.word	0x081074f5
 81074bc:	081074f5 	.word	0x081074f5
 81074c0:	081074ed 	.word	0x081074ed
 81074c4:	2301      	movs	r3, #1
 81074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074ca:	e0bc      	b.n	8107646 <UART_SetConfig+0x5a6>
 81074cc:	2304      	movs	r3, #4
 81074ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074d2:	e0b8      	b.n	8107646 <UART_SetConfig+0x5a6>
 81074d4:	2308      	movs	r3, #8
 81074d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074da:	e0b4      	b.n	8107646 <UART_SetConfig+0x5a6>
 81074dc:	2310      	movs	r3, #16
 81074de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074e2:	e0b0      	b.n	8107646 <UART_SetConfig+0x5a6>
 81074e4:	2320      	movs	r3, #32
 81074e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074ea:	e0ac      	b.n	8107646 <UART_SetConfig+0x5a6>
 81074ec:	2340      	movs	r3, #64	; 0x40
 81074ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074f2:	e0a8      	b.n	8107646 <UART_SetConfig+0x5a6>
 81074f4:	2380      	movs	r3, #128	; 0x80
 81074f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81074fa:	e0a4      	b.n	8107646 <UART_SetConfig+0x5a6>
 81074fc:	697b      	ldr	r3, [r7, #20]
 81074fe:	681b      	ldr	r3, [r3, #0]
 8107500:	4a8f      	ldr	r2, [pc, #572]	; (8107740 <UART_SetConfig+0x6a0>)
 8107502:	4293      	cmp	r3, r2
 8107504:	d130      	bne.n	8107568 <UART_SetConfig+0x4c8>
 8107506:	4b8d      	ldr	r3, [pc, #564]	; (810773c <UART_SetConfig+0x69c>)
 8107508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810750a:	f003 0307 	and.w	r3, r3, #7
 810750e:	2b05      	cmp	r3, #5
 8107510:	d826      	bhi.n	8107560 <UART_SetConfig+0x4c0>
 8107512:	a201      	add	r2, pc, #4	; (adr r2, 8107518 <UART_SetConfig+0x478>)
 8107514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107518:	08107531 	.word	0x08107531
 810751c:	08107539 	.word	0x08107539
 8107520:	08107541 	.word	0x08107541
 8107524:	08107549 	.word	0x08107549
 8107528:	08107551 	.word	0x08107551
 810752c:	08107559 	.word	0x08107559
 8107530:	2300      	movs	r3, #0
 8107532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107536:	e086      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107538:	2304      	movs	r3, #4
 810753a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810753e:	e082      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107540:	2308      	movs	r3, #8
 8107542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107546:	e07e      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107548:	2310      	movs	r3, #16
 810754a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810754e:	e07a      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107550:	2320      	movs	r3, #32
 8107552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107556:	e076      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107558:	2340      	movs	r3, #64	; 0x40
 810755a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810755e:	e072      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107560:	2380      	movs	r3, #128	; 0x80
 8107562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107566:	e06e      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107568:	697b      	ldr	r3, [r7, #20]
 810756a:	681b      	ldr	r3, [r3, #0]
 810756c:	4a75      	ldr	r2, [pc, #468]	; (8107744 <UART_SetConfig+0x6a4>)
 810756e:	4293      	cmp	r3, r2
 8107570:	d130      	bne.n	81075d4 <UART_SetConfig+0x534>
 8107572:	4b72      	ldr	r3, [pc, #456]	; (810773c <UART_SetConfig+0x69c>)
 8107574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107576:	f003 0307 	and.w	r3, r3, #7
 810757a:	2b05      	cmp	r3, #5
 810757c:	d826      	bhi.n	81075cc <UART_SetConfig+0x52c>
 810757e:	a201      	add	r2, pc, #4	; (adr r2, 8107584 <UART_SetConfig+0x4e4>)
 8107580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107584:	0810759d 	.word	0x0810759d
 8107588:	081075a5 	.word	0x081075a5
 810758c:	081075ad 	.word	0x081075ad
 8107590:	081075b5 	.word	0x081075b5
 8107594:	081075bd 	.word	0x081075bd
 8107598:	081075c5 	.word	0x081075c5
 810759c:	2300      	movs	r3, #0
 810759e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075a2:	e050      	b.n	8107646 <UART_SetConfig+0x5a6>
 81075a4:	2304      	movs	r3, #4
 81075a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075aa:	e04c      	b.n	8107646 <UART_SetConfig+0x5a6>
 81075ac:	2308      	movs	r3, #8
 81075ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075b2:	e048      	b.n	8107646 <UART_SetConfig+0x5a6>
 81075b4:	2310      	movs	r3, #16
 81075b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075ba:	e044      	b.n	8107646 <UART_SetConfig+0x5a6>
 81075bc:	2320      	movs	r3, #32
 81075be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075c2:	e040      	b.n	8107646 <UART_SetConfig+0x5a6>
 81075c4:	2340      	movs	r3, #64	; 0x40
 81075c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075ca:	e03c      	b.n	8107646 <UART_SetConfig+0x5a6>
 81075cc:	2380      	movs	r3, #128	; 0x80
 81075ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81075d2:	e038      	b.n	8107646 <UART_SetConfig+0x5a6>
 81075d4:	697b      	ldr	r3, [r7, #20]
 81075d6:	681b      	ldr	r3, [r3, #0]
 81075d8:	4a5b      	ldr	r2, [pc, #364]	; (8107748 <UART_SetConfig+0x6a8>)
 81075da:	4293      	cmp	r3, r2
 81075dc:	d130      	bne.n	8107640 <UART_SetConfig+0x5a0>
 81075de:	4b57      	ldr	r3, [pc, #348]	; (810773c <UART_SetConfig+0x69c>)
 81075e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81075e2:	f003 0307 	and.w	r3, r3, #7
 81075e6:	2b05      	cmp	r3, #5
 81075e8:	d826      	bhi.n	8107638 <UART_SetConfig+0x598>
 81075ea:	a201      	add	r2, pc, #4	; (adr r2, 81075f0 <UART_SetConfig+0x550>)
 81075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81075f0:	08107609 	.word	0x08107609
 81075f4:	08107611 	.word	0x08107611
 81075f8:	08107619 	.word	0x08107619
 81075fc:	08107621 	.word	0x08107621
 8107600:	08107629 	.word	0x08107629
 8107604:	08107631 	.word	0x08107631
 8107608:	2302      	movs	r3, #2
 810760a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810760e:	e01a      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107610:	2304      	movs	r3, #4
 8107612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107616:	e016      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107618:	2308      	movs	r3, #8
 810761a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810761e:	e012      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107620:	2310      	movs	r3, #16
 8107622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107626:	e00e      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107628:	2320      	movs	r3, #32
 810762a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810762e:	e00a      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107630:	2340      	movs	r3, #64	; 0x40
 8107632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8107636:	e006      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107638:	2380      	movs	r3, #128	; 0x80
 810763a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810763e:	e002      	b.n	8107646 <UART_SetConfig+0x5a6>
 8107640:	2380      	movs	r3, #128	; 0x80
 8107642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8107646:	697b      	ldr	r3, [r7, #20]
 8107648:	681b      	ldr	r3, [r3, #0]
 810764a:	4a3f      	ldr	r2, [pc, #252]	; (8107748 <UART_SetConfig+0x6a8>)
 810764c:	4293      	cmp	r3, r2
 810764e:	f040 80f8 	bne.w	8107842 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8107652:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107656:	2b20      	cmp	r3, #32
 8107658:	dc46      	bgt.n	81076e8 <UART_SetConfig+0x648>
 810765a:	2b02      	cmp	r3, #2
 810765c:	f2c0 8082 	blt.w	8107764 <UART_SetConfig+0x6c4>
 8107660:	3b02      	subs	r3, #2
 8107662:	2b1e      	cmp	r3, #30
 8107664:	d87e      	bhi.n	8107764 <UART_SetConfig+0x6c4>
 8107666:	a201      	add	r2, pc, #4	; (adr r2, 810766c <UART_SetConfig+0x5cc>)
 8107668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810766c:	081076ef 	.word	0x081076ef
 8107670:	08107765 	.word	0x08107765
 8107674:	081076f7 	.word	0x081076f7
 8107678:	08107765 	.word	0x08107765
 810767c:	08107765 	.word	0x08107765
 8107680:	08107765 	.word	0x08107765
 8107684:	08107707 	.word	0x08107707
 8107688:	08107765 	.word	0x08107765
 810768c:	08107765 	.word	0x08107765
 8107690:	08107765 	.word	0x08107765
 8107694:	08107765 	.word	0x08107765
 8107698:	08107765 	.word	0x08107765
 810769c:	08107765 	.word	0x08107765
 81076a0:	08107765 	.word	0x08107765
 81076a4:	08107717 	.word	0x08107717
 81076a8:	08107765 	.word	0x08107765
 81076ac:	08107765 	.word	0x08107765
 81076b0:	08107765 	.word	0x08107765
 81076b4:	08107765 	.word	0x08107765
 81076b8:	08107765 	.word	0x08107765
 81076bc:	08107765 	.word	0x08107765
 81076c0:	08107765 	.word	0x08107765
 81076c4:	08107765 	.word	0x08107765
 81076c8:	08107765 	.word	0x08107765
 81076cc:	08107765 	.word	0x08107765
 81076d0:	08107765 	.word	0x08107765
 81076d4:	08107765 	.word	0x08107765
 81076d8:	08107765 	.word	0x08107765
 81076dc:	08107765 	.word	0x08107765
 81076e0:	08107765 	.word	0x08107765
 81076e4:	08107757 	.word	0x08107757
 81076e8:	2b40      	cmp	r3, #64	; 0x40
 81076ea:	d037      	beq.n	810775c <UART_SetConfig+0x6bc>
 81076ec:	e03a      	b.n	8107764 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81076ee:	f7fd fd17 	bl	8105120 <HAL_RCCEx_GetD3PCLK1Freq>
 81076f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81076f4:	e03c      	b.n	8107770 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81076f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81076fa:	4618      	mov	r0, r3
 81076fc:	f7fd fd26 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107704:	e034      	b.n	8107770 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107706:	f107 0318 	add.w	r3, r7, #24
 810770a:	4618      	mov	r0, r3
 810770c:	f7fd fe72 	bl	81053f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107710:	69fb      	ldr	r3, [r7, #28]
 8107712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107714:	e02c      	b.n	8107770 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107716:	4b09      	ldr	r3, [pc, #36]	; (810773c <UART_SetConfig+0x69c>)
 8107718:	681b      	ldr	r3, [r3, #0]
 810771a:	f003 0320 	and.w	r3, r3, #32
 810771e:	2b00      	cmp	r3, #0
 8107720:	d016      	beq.n	8107750 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107722:	4b06      	ldr	r3, [pc, #24]	; (810773c <UART_SetConfig+0x69c>)
 8107724:	681b      	ldr	r3, [r3, #0]
 8107726:	08db      	lsrs	r3, r3, #3
 8107728:	f003 0303 	and.w	r3, r3, #3
 810772c:	4a07      	ldr	r2, [pc, #28]	; (810774c <UART_SetConfig+0x6ac>)
 810772e:	fa22 f303 	lsr.w	r3, r2, r3
 8107732:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107734:	e01c      	b.n	8107770 <UART_SetConfig+0x6d0>
 8107736:	bf00      	nop
 8107738:	40011400 	.word	0x40011400
 810773c:	58024400 	.word	0x58024400
 8107740:	40007800 	.word	0x40007800
 8107744:	40007c00 	.word	0x40007c00
 8107748:	58000c00 	.word	0x58000c00
 810774c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8107750:	4b9d      	ldr	r3, [pc, #628]	; (81079c8 <UART_SetConfig+0x928>)
 8107752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107754:	e00c      	b.n	8107770 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107756:	4b9d      	ldr	r3, [pc, #628]	; (81079cc <UART_SetConfig+0x92c>)
 8107758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810775a:	e009      	b.n	8107770 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810775c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107762:	e005      	b.n	8107770 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8107764:	2300      	movs	r3, #0
 8107766:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107768:	2301      	movs	r3, #1
 810776a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810776e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107772:	2b00      	cmp	r3, #0
 8107774:	f000 81de 	beq.w	8107b34 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107778:	697b      	ldr	r3, [r7, #20]
 810777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810777c:	4a94      	ldr	r2, [pc, #592]	; (81079d0 <UART_SetConfig+0x930>)
 810777e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107782:	461a      	mov	r2, r3
 8107784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107786:	fbb3 f3f2 	udiv	r3, r3, r2
 810778a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810778c:	697b      	ldr	r3, [r7, #20]
 810778e:	685a      	ldr	r2, [r3, #4]
 8107790:	4613      	mov	r3, r2
 8107792:	005b      	lsls	r3, r3, #1
 8107794:	4413      	add	r3, r2
 8107796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107798:	429a      	cmp	r2, r3
 810779a:	d305      	bcc.n	81077a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810779c:	697b      	ldr	r3, [r7, #20]
 810779e:	685b      	ldr	r3, [r3, #4]
 81077a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81077a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81077a4:	429a      	cmp	r2, r3
 81077a6:	d903      	bls.n	81077b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81077a8:	2301      	movs	r3, #1
 81077aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81077ae:	e1c1      	b.n	8107b34 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81077b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81077b2:	2200      	movs	r2, #0
 81077b4:	60bb      	str	r3, [r7, #8]
 81077b6:	60fa      	str	r2, [r7, #12]
 81077b8:	697b      	ldr	r3, [r7, #20]
 81077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81077bc:	4a84      	ldr	r2, [pc, #528]	; (81079d0 <UART_SetConfig+0x930>)
 81077be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81077c2:	b29b      	uxth	r3, r3
 81077c4:	2200      	movs	r2, #0
 81077c6:	603b      	str	r3, [r7, #0]
 81077c8:	607a      	str	r2, [r7, #4]
 81077ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 81077ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81077d2:	f7f9 fa91 	bl	8100cf8 <__aeabi_uldivmod>
 81077d6:	4602      	mov	r2, r0
 81077d8:	460b      	mov	r3, r1
 81077da:	4610      	mov	r0, r2
 81077dc:	4619      	mov	r1, r3
 81077de:	f04f 0200 	mov.w	r2, #0
 81077e2:	f04f 0300 	mov.w	r3, #0
 81077e6:	020b      	lsls	r3, r1, #8
 81077e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81077ec:	0202      	lsls	r2, r0, #8
 81077ee:	6979      	ldr	r1, [r7, #20]
 81077f0:	6849      	ldr	r1, [r1, #4]
 81077f2:	0849      	lsrs	r1, r1, #1
 81077f4:	2000      	movs	r0, #0
 81077f6:	460c      	mov	r4, r1
 81077f8:	4605      	mov	r5, r0
 81077fa:	eb12 0804 	adds.w	r8, r2, r4
 81077fe:	eb43 0905 	adc.w	r9, r3, r5
 8107802:	697b      	ldr	r3, [r7, #20]
 8107804:	685b      	ldr	r3, [r3, #4]
 8107806:	2200      	movs	r2, #0
 8107808:	469a      	mov	sl, r3
 810780a:	4693      	mov	fp, r2
 810780c:	4652      	mov	r2, sl
 810780e:	465b      	mov	r3, fp
 8107810:	4640      	mov	r0, r8
 8107812:	4649      	mov	r1, r9
 8107814:	f7f9 fa70 	bl	8100cf8 <__aeabi_uldivmod>
 8107818:	4602      	mov	r2, r0
 810781a:	460b      	mov	r3, r1
 810781c:	4613      	mov	r3, r2
 810781e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107826:	d308      	bcc.n	810783a <UART_SetConfig+0x79a>
 8107828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810782a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810782e:	d204      	bcs.n	810783a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8107830:	697b      	ldr	r3, [r7, #20]
 8107832:	681b      	ldr	r3, [r3, #0]
 8107834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8107836:	60da      	str	r2, [r3, #12]
 8107838:	e17c      	b.n	8107b34 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810783a:	2301      	movs	r3, #1
 810783c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8107840:	e178      	b.n	8107b34 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107842:	697b      	ldr	r3, [r7, #20]
 8107844:	69db      	ldr	r3, [r3, #28]
 8107846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810784a:	f040 80c5 	bne.w	81079d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810784e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8107852:	2b20      	cmp	r3, #32
 8107854:	dc48      	bgt.n	81078e8 <UART_SetConfig+0x848>
 8107856:	2b00      	cmp	r3, #0
 8107858:	db7b      	blt.n	8107952 <UART_SetConfig+0x8b2>
 810785a:	2b20      	cmp	r3, #32
 810785c:	d879      	bhi.n	8107952 <UART_SetConfig+0x8b2>
 810785e:	a201      	add	r2, pc, #4	; (adr r2, 8107864 <UART_SetConfig+0x7c4>)
 8107860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107864:	081078ef 	.word	0x081078ef
 8107868:	081078f7 	.word	0x081078f7
 810786c:	08107953 	.word	0x08107953
 8107870:	08107953 	.word	0x08107953
 8107874:	081078ff 	.word	0x081078ff
 8107878:	08107953 	.word	0x08107953
 810787c:	08107953 	.word	0x08107953
 8107880:	08107953 	.word	0x08107953
 8107884:	0810790f 	.word	0x0810790f
 8107888:	08107953 	.word	0x08107953
 810788c:	08107953 	.word	0x08107953
 8107890:	08107953 	.word	0x08107953
 8107894:	08107953 	.word	0x08107953
 8107898:	08107953 	.word	0x08107953
 810789c:	08107953 	.word	0x08107953
 81078a0:	08107953 	.word	0x08107953
 81078a4:	0810791f 	.word	0x0810791f
 81078a8:	08107953 	.word	0x08107953
 81078ac:	08107953 	.word	0x08107953
 81078b0:	08107953 	.word	0x08107953
 81078b4:	08107953 	.word	0x08107953
 81078b8:	08107953 	.word	0x08107953
 81078bc:	08107953 	.word	0x08107953
 81078c0:	08107953 	.word	0x08107953
 81078c4:	08107953 	.word	0x08107953
 81078c8:	08107953 	.word	0x08107953
 81078cc:	08107953 	.word	0x08107953
 81078d0:	08107953 	.word	0x08107953
 81078d4:	08107953 	.word	0x08107953
 81078d8:	08107953 	.word	0x08107953
 81078dc:	08107953 	.word	0x08107953
 81078e0:	08107953 	.word	0x08107953
 81078e4:	08107945 	.word	0x08107945
 81078e8:	2b40      	cmp	r3, #64	; 0x40
 81078ea:	d02e      	beq.n	810794a <UART_SetConfig+0x8aa>
 81078ec:	e031      	b.n	8107952 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81078ee:	f7fb ffd3 	bl	8103898 <HAL_RCC_GetPCLK1Freq>
 81078f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81078f4:	e033      	b.n	810795e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81078f6:	f7fb ffe5 	bl	81038c4 <HAL_RCC_GetPCLK2Freq>
 81078fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81078fc:	e02f      	b.n	810795e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81078fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107902:	4618      	mov	r0, r3
 8107904:	f7fd fc22 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810790a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810790c:	e027      	b.n	810795e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810790e:	f107 0318 	add.w	r3, r7, #24
 8107912:	4618      	mov	r0, r3
 8107914:	f7fd fd6e 	bl	81053f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107918:	69fb      	ldr	r3, [r7, #28]
 810791a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810791c:	e01f      	b.n	810795e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810791e:	4b2d      	ldr	r3, [pc, #180]	; (81079d4 <UART_SetConfig+0x934>)
 8107920:	681b      	ldr	r3, [r3, #0]
 8107922:	f003 0320 	and.w	r3, r3, #32
 8107926:	2b00      	cmp	r3, #0
 8107928:	d009      	beq.n	810793e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810792a:	4b2a      	ldr	r3, [pc, #168]	; (81079d4 <UART_SetConfig+0x934>)
 810792c:	681b      	ldr	r3, [r3, #0]
 810792e:	08db      	lsrs	r3, r3, #3
 8107930:	f003 0303 	and.w	r3, r3, #3
 8107934:	4a24      	ldr	r2, [pc, #144]	; (81079c8 <UART_SetConfig+0x928>)
 8107936:	fa22 f303 	lsr.w	r3, r2, r3
 810793a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810793c:	e00f      	b.n	810795e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810793e:	4b22      	ldr	r3, [pc, #136]	; (81079c8 <UART_SetConfig+0x928>)
 8107940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107942:	e00c      	b.n	810795e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107944:	4b21      	ldr	r3, [pc, #132]	; (81079cc <UART_SetConfig+0x92c>)
 8107946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107948:	e009      	b.n	810795e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810794a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810794e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107950:	e005      	b.n	810795e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8107952:	2300      	movs	r3, #0
 8107954:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107956:	2301      	movs	r3, #1
 8107958:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810795c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810795e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107960:	2b00      	cmp	r3, #0
 8107962:	f000 80e7 	beq.w	8107b34 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107966:	697b      	ldr	r3, [r7, #20]
 8107968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810796a:	4a19      	ldr	r2, [pc, #100]	; (81079d0 <UART_SetConfig+0x930>)
 810796c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107970:	461a      	mov	r2, r3
 8107972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107974:	fbb3 f3f2 	udiv	r3, r3, r2
 8107978:	005a      	lsls	r2, r3, #1
 810797a:	697b      	ldr	r3, [r7, #20]
 810797c:	685b      	ldr	r3, [r3, #4]
 810797e:	085b      	lsrs	r3, r3, #1
 8107980:	441a      	add	r2, r3
 8107982:	697b      	ldr	r3, [r7, #20]
 8107984:	685b      	ldr	r3, [r3, #4]
 8107986:	fbb2 f3f3 	udiv	r3, r2, r3
 810798a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810798e:	2b0f      	cmp	r3, #15
 8107990:	d916      	bls.n	81079c0 <UART_SetConfig+0x920>
 8107992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107998:	d212      	bcs.n	81079c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810799c:	b29b      	uxth	r3, r3
 810799e:	f023 030f 	bic.w	r3, r3, #15
 81079a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81079a6:	085b      	lsrs	r3, r3, #1
 81079a8:	b29b      	uxth	r3, r3
 81079aa:	f003 0307 	and.w	r3, r3, #7
 81079ae:	b29a      	uxth	r2, r3
 81079b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81079b2:	4313      	orrs	r3, r2
 81079b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81079b6:	697b      	ldr	r3, [r7, #20]
 81079b8:	681b      	ldr	r3, [r3, #0]
 81079ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81079bc:	60da      	str	r2, [r3, #12]
 81079be:	e0b9      	b.n	8107b34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81079c0:	2301      	movs	r3, #1
 81079c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81079c6:	e0b5      	b.n	8107b34 <UART_SetConfig+0xa94>
 81079c8:	03d09000 	.word	0x03d09000
 81079cc:	003d0900 	.word	0x003d0900
 81079d0:	081098c4 	.word	0x081098c4
 81079d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81079d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81079dc:	2b20      	cmp	r3, #32
 81079de:	dc49      	bgt.n	8107a74 <UART_SetConfig+0x9d4>
 81079e0:	2b00      	cmp	r3, #0
 81079e2:	db7c      	blt.n	8107ade <UART_SetConfig+0xa3e>
 81079e4:	2b20      	cmp	r3, #32
 81079e6:	d87a      	bhi.n	8107ade <UART_SetConfig+0xa3e>
 81079e8:	a201      	add	r2, pc, #4	; (adr r2, 81079f0 <UART_SetConfig+0x950>)
 81079ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81079ee:	bf00      	nop
 81079f0:	08107a7b 	.word	0x08107a7b
 81079f4:	08107a83 	.word	0x08107a83
 81079f8:	08107adf 	.word	0x08107adf
 81079fc:	08107adf 	.word	0x08107adf
 8107a00:	08107a8b 	.word	0x08107a8b
 8107a04:	08107adf 	.word	0x08107adf
 8107a08:	08107adf 	.word	0x08107adf
 8107a0c:	08107adf 	.word	0x08107adf
 8107a10:	08107a9b 	.word	0x08107a9b
 8107a14:	08107adf 	.word	0x08107adf
 8107a18:	08107adf 	.word	0x08107adf
 8107a1c:	08107adf 	.word	0x08107adf
 8107a20:	08107adf 	.word	0x08107adf
 8107a24:	08107adf 	.word	0x08107adf
 8107a28:	08107adf 	.word	0x08107adf
 8107a2c:	08107adf 	.word	0x08107adf
 8107a30:	08107aab 	.word	0x08107aab
 8107a34:	08107adf 	.word	0x08107adf
 8107a38:	08107adf 	.word	0x08107adf
 8107a3c:	08107adf 	.word	0x08107adf
 8107a40:	08107adf 	.word	0x08107adf
 8107a44:	08107adf 	.word	0x08107adf
 8107a48:	08107adf 	.word	0x08107adf
 8107a4c:	08107adf 	.word	0x08107adf
 8107a50:	08107adf 	.word	0x08107adf
 8107a54:	08107adf 	.word	0x08107adf
 8107a58:	08107adf 	.word	0x08107adf
 8107a5c:	08107adf 	.word	0x08107adf
 8107a60:	08107adf 	.word	0x08107adf
 8107a64:	08107adf 	.word	0x08107adf
 8107a68:	08107adf 	.word	0x08107adf
 8107a6c:	08107adf 	.word	0x08107adf
 8107a70:	08107ad1 	.word	0x08107ad1
 8107a74:	2b40      	cmp	r3, #64	; 0x40
 8107a76:	d02e      	beq.n	8107ad6 <UART_SetConfig+0xa36>
 8107a78:	e031      	b.n	8107ade <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107a7a:	f7fb ff0d 	bl	8103898 <HAL_RCC_GetPCLK1Freq>
 8107a7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107a80:	e033      	b.n	8107aea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107a82:	f7fb ff1f 	bl	81038c4 <HAL_RCC_GetPCLK2Freq>
 8107a86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8107a88:	e02f      	b.n	8107aea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107a8e:	4618      	mov	r0, r3
 8107a90:	f7fd fb5c 	bl	810514c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107a98:	e027      	b.n	8107aea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107a9a:	f107 0318 	add.w	r3, r7, #24
 8107a9e:	4618      	mov	r0, r3
 8107aa0:	f7fd fca8 	bl	81053f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107aa4:	69fb      	ldr	r3, [r7, #28]
 8107aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107aa8:	e01f      	b.n	8107aea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107aaa:	4b2d      	ldr	r3, [pc, #180]	; (8107b60 <UART_SetConfig+0xac0>)
 8107aac:	681b      	ldr	r3, [r3, #0]
 8107aae:	f003 0320 	and.w	r3, r3, #32
 8107ab2:	2b00      	cmp	r3, #0
 8107ab4:	d009      	beq.n	8107aca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107ab6:	4b2a      	ldr	r3, [pc, #168]	; (8107b60 <UART_SetConfig+0xac0>)
 8107ab8:	681b      	ldr	r3, [r3, #0]
 8107aba:	08db      	lsrs	r3, r3, #3
 8107abc:	f003 0303 	and.w	r3, r3, #3
 8107ac0:	4a28      	ldr	r2, [pc, #160]	; (8107b64 <UART_SetConfig+0xac4>)
 8107ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8107ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107ac8:	e00f      	b.n	8107aea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8107aca:	4b26      	ldr	r3, [pc, #152]	; (8107b64 <UART_SetConfig+0xac4>)
 8107acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107ace:	e00c      	b.n	8107aea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107ad0:	4b25      	ldr	r3, [pc, #148]	; (8107b68 <UART_SetConfig+0xac8>)
 8107ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107ad4:	e009      	b.n	8107aea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107ada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107adc:	e005      	b.n	8107aea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8107ade:	2300      	movs	r3, #0
 8107ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8107ae2:	2301      	movs	r3, #1
 8107ae4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8107ae8:	bf00      	nop
    }

    if (pclk != 0U)
 8107aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107aec:	2b00      	cmp	r3, #0
 8107aee:	d021      	beq.n	8107b34 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107af0:	697b      	ldr	r3, [r7, #20]
 8107af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107af4:	4a1d      	ldr	r2, [pc, #116]	; (8107b6c <UART_SetConfig+0xacc>)
 8107af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107afa:	461a      	mov	r2, r3
 8107afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107afe:	fbb3 f2f2 	udiv	r2, r3, r2
 8107b02:	697b      	ldr	r3, [r7, #20]
 8107b04:	685b      	ldr	r3, [r3, #4]
 8107b06:	085b      	lsrs	r3, r3, #1
 8107b08:	441a      	add	r2, r3
 8107b0a:	697b      	ldr	r3, [r7, #20]
 8107b0c:	685b      	ldr	r3, [r3, #4]
 8107b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8107b12:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107b16:	2b0f      	cmp	r3, #15
 8107b18:	d909      	bls.n	8107b2e <UART_SetConfig+0xa8e>
 8107b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107b20:	d205      	bcs.n	8107b2e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8107b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107b24:	b29a      	uxth	r2, r3
 8107b26:	697b      	ldr	r3, [r7, #20]
 8107b28:	681b      	ldr	r3, [r3, #0]
 8107b2a:	60da      	str	r2, [r3, #12]
 8107b2c:	e002      	b.n	8107b34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8107b2e:	2301      	movs	r3, #1
 8107b30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107b34:	697b      	ldr	r3, [r7, #20]
 8107b36:	2201      	movs	r2, #1
 8107b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107b3c:	697b      	ldr	r3, [r7, #20]
 8107b3e:	2201      	movs	r2, #1
 8107b40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107b44:	697b      	ldr	r3, [r7, #20]
 8107b46:	2200      	movs	r2, #0
 8107b48:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8107b4a:	697b      	ldr	r3, [r7, #20]
 8107b4c:	2200      	movs	r2, #0
 8107b4e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8107b50:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8107b54:	4618      	mov	r0, r3
 8107b56:	3748      	adds	r7, #72	; 0x48
 8107b58:	46bd      	mov	sp, r7
 8107b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107b5e:	bf00      	nop
 8107b60:	58024400 	.word	0x58024400
 8107b64:	03d09000 	.word	0x03d09000
 8107b68:	003d0900 	.word	0x003d0900
 8107b6c:	081098c4 	.word	0x081098c4

08107b70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107b70:	b480      	push	{r7}
 8107b72:	b083      	sub	sp, #12
 8107b74:	af00      	add	r7, sp, #0
 8107b76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107b78:	687b      	ldr	r3, [r7, #4]
 8107b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b7c:	f003 0301 	and.w	r3, r3, #1
 8107b80:	2b00      	cmp	r3, #0
 8107b82:	d00a      	beq.n	8107b9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107b84:	687b      	ldr	r3, [r7, #4]
 8107b86:	681b      	ldr	r3, [r3, #0]
 8107b88:	685b      	ldr	r3, [r3, #4]
 8107b8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8107b8e:	687b      	ldr	r3, [r7, #4]
 8107b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107b92:	687b      	ldr	r3, [r7, #4]
 8107b94:	681b      	ldr	r3, [r3, #0]
 8107b96:	430a      	orrs	r2, r1
 8107b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107b9a:	687b      	ldr	r3, [r7, #4]
 8107b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b9e:	f003 0302 	and.w	r3, r3, #2
 8107ba2:	2b00      	cmp	r3, #0
 8107ba4:	d00a      	beq.n	8107bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107ba6:	687b      	ldr	r3, [r7, #4]
 8107ba8:	681b      	ldr	r3, [r3, #0]
 8107baa:	685b      	ldr	r3, [r3, #4]
 8107bac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107bb0:	687b      	ldr	r3, [r7, #4]
 8107bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107bb4:	687b      	ldr	r3, [r7, #4]
 8107bb6:	681b      	ldr	r3, [r3, #0]
 8107bb8:	430a      	orrs	r2, r1
 8107bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107bc0:	f003 0304 	and.w	r3, r3, #4
 8107bc4:	2b00      	cmp	r3, #0
 8107bc6:	d00a      	beq.n	8107bde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107bc8:	687b      	ldr	r3, [r7, #4]
 8107bca:	681b      	ldr	r3, [r3, #0]
 8107bcc:	685b      	ldr	r3, [r3, #4]
 8107bce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107bd2:	687b      	ldr	r3, [r7, #4]
 8107bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107bd6:	687b      	ldr	r3, [r7, #4]
 8107bd8:	681b      	ldr	r3, [r3, #0]
 8107bda:	430a      	orrs	r2, r1
 8107bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107bde:	687b      	ldr	r3, [r7, #4]
 8107be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107be2:	f003 0308 	and.w	r3, r3, #8
 8107be6:	2b00      	cmp	r3, #0
 8107be8:	d00a      	beq.n	8107c00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107bea:	687b      	ldr	r3, [r7, #4]
 8107bec:	681b      	ldr	r3, [r3, #0]
 8107bee:	685b      	ldr	r3, [r3, #4]
 8107bf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107bf4:	687b      	ldr	r3, [r7, #4]
 8107bf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107bf8:	687b      	ldr	r3, [r7, #4]
 8107bfa:	681b      	ldr	r3, [r3, #0]
 8107bfc:	430a      	orrs	r2, r1
 8107bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107c00:	687b      	ldr	r3, [r7, #4]
 8107c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c04:	f003 0310 	and.w	r3, r3, #16
 8107c08:	2b00      	cmp	r3, #0
 8107c0a:	d00a      	beq.n	8107c22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107c0c:	687b      	ldr	r3, [r7, #4]
 8107c0e:	681b      	ldr	r3, [r3, #0]
 8107c10:	689b      	ldr	r3, [r3, #8]
 8107c12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8107c16:	687b      	ldr	r3, [r7, #4]
 8107c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107c1a:	687b      	ldr	r3, [r7, #4]
 8107c1c:	681b      	ldr	r3, [r3, #0]
 8107c1e:	430a      	orrs	r2, r1
 8107c20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107c22:	687b      	ldr	r3, [r7, #4]
 8107c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c26:	f003 0320 	and.w	r3, r3, #32
 8107c2a:	2b00      	cmp	r3, #0
 8107c2c:	d00a      	beq.n	8107c44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	681b      	ldr	r3, [r3, #0]
 8107c32:	689b      	ldr	r3, [r3, #8]
 8107c34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8107c38:	687b      	ldr	r3, [r7, #4]
 8107c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8107c3c:	687b      	ldr	r3, [r7, #4]
 8107c3e:	681b      	ldr	r3, [r3, #0]
 8107c40:	430a      	orrs	r2, r1
 8107c42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8107c44:	687b      	ldr	r3, [r7, #4]
 8107c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107c4c:	2b00      	cmp	r3, #0
 8107c4e:	d01a      	beq.n	8107c86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	681b      	ldr	r3, [r3, #0]
 8107c54:	685b      	ldr	r3, [r3, #4]
 8107c56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8107c5a:	687b      	ldr	r3, [r7, #4]
 8107c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107c5e:	687b      	ldr	r3, [r7, #4]
 8107c60:	681b      	ldr	r3, [r3, #0]
 8107c62:	430a      	orrs	r2, r1
 8107c64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107c66:	687b      	ldr	r3, [r7, #4]
 8107c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107c6e:	d10a      	bne.n	8107c86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107c70:	687b      	ldr	r3, [r7, #4]
 8107c72:	681b      	ldr	r3, [r3, #0]
 8107c74:	685b      	ldr	r3, [r3, #4]
 8107c76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8107c7a:	687b      	ldr	r3, [r7, #4]
 8107c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8107c7e:	687b      	ldr	r3, [r7, #4]
 8107c80:	681b      	ldr	r3, [r3, #0]
 8107c82:	430a      	orrs	r2, r1
 8107c84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8107c86:	687b      	ldr	r3, [r7, #4]
 8107c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107c8e:	2b00      	cmp	r3, #0
 8107c90:	d00a      	beq.n	8107ca8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8107c92:	687b      	ldr	r3, [r7, #4]
 8107c94:	681b      	ldr	r3, [r3, #0]
 8107c96:	685b      	ldr	r3, [r3, #4]
 8107c98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	681b      	ldr	r3, [r3, #0]
 8107ca4:	430a      	orrs	r2, r1
 8107ca6:	605a      	str	r2, [r3, #4]
  }
}
 8107ca8:	bf00      	nop
 8107caa:	370c      	adds	r7, #12
 8107cac:	46bd      	mov	sp, r7
 8107cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cb2:	4770      	bx	lr

08107cb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8107cb4:	b580      	push	{r7, lr}
 8107cb6:	b086      	sub	sp, #24
 8107cb8:	af02      	add	r7, sp, #8
 8107cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107cbc:	687b      	ldr	r3, [r7, #4]
 8107cbe:	2200      	movs	r2, #0
 8107cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8107cc4:	f7fa f80c 	bl	8101ce0 <HAL_GetTick>
 8107cc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107cca:	687b      	ldr	r3, [r7, #4]
 8107ccc:	681b      	ldr	r3, [r3, #0]
 8107cce:	681b      	ldr	r3, [r3, #0]
 8107cd0:	f003 0308 	and.w	r3, r3, #8
 8107cd4:	2b08      	cmp	r3, #8
 8107cd6:	d10e      	bne.n	8107cf6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107cdc:	9300      	str	r3, [sp, #0]
 8107cde:	68fb      	ldr	r3, [r7, #12]
 8107ce0:	2200      	movs	r2, #0
 8107ce2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8107ce6:	6878      	ldr	r0, [r7, #4]
 8107ce8:	f000 f82f 	bl	8107d4a <UART_WaitOnFlagUntilTimeout>
 8107cec:	4603      	mov	r3, r0
 8107cee:	2b00      	cmp	r3, #0
 8107cf0:	d001      	beq.n	8107cf6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107cf2:	2303      	movs	r3, #3
 8107cf4:	e025      	b.n	8107d42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107cf6:	687b      	ldr	r3, [r7, #4]
 8107cf8:	681b      	ldr	r3, [r3, #0]
 8107cfa:	681b      	ldr	r3, [r3, #0]
 8107cfc:	f003 0304 	and.w	r3, r3, #4
 8107d00:	2b04      	cmp	r3, #4
 8107d02:	d10e      	bne.n	8107d22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107d04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107d08:	9300      	str	r3, [sp, #0]
 8107d0a:	68fb      	ldr	r3, [r7, #12]
 8107d0c:	2200      	movs	r2, #0
 8107d0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8107d12:	6878      	ldr	r0, [r7, #4]
 8107d14:	f000 f819 	bl	8107d4a <UART_WaitOnFlagUntilTimeout>
 8107d18:	4603      	mov	r3, r0
 8107d1a:	2b00      	cmp	r3, #0
 8107d1c:	d001      	beq.n	8107d22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107d1e:	2303      	movs	r3, #3
 8107d20:	e00f      	b.n	8107d42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8107d22:	687b      	ldr	r3, [r7, #4]
 8107d24:	2220      	movs	r2, #32
 8107d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8107d2a:	687b      	ldr	r3, [r7, #4]
 8107d2c:	2220      	movs	r2, #32
 8107d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8107d32:	687b      	ldr	r3, [r7, #4]
 8107d34:	2200      	movs	r2, #0
 8107d36:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8107d38:	687b      	ldr	r3, [r7, #4]
 8107d3a:	2200      	movs	r2, #0
 8107d3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107d40:	2300      	movs	r3, #0
}
 8107d42:	4618      	mov	r0, r3
 8107d44:	3710      	adds	r7, #16
 8107d46:	46bd      	mov	sp, r7
 8107d48:	bd80      	pop	{r7, pc}

08107d4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107d4a:	b580      	push	{r7, lr}
 8107d4c:	b09c      	sub	sp, #112	; 0x70
 8107d4e:	af00      	add	r7, sp, #0
 8107d50:	60f8      	str	r0, [r7, #12]
 8107d52:	60b9      	str	r1, [r7, #8]
 8107d54:	603b      	str	r3, [r7, #0]
 8107d56:	4613      	mov	r3, r2
 8107d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107d5a:	e0a9      	b.n	8107eb0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107d62:	f000 80a5 	beq.w	8107eb0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8107d66:	f7f9 ffbb 	bl	8101ce0 <HAL_GetTick>
 8107d6a:	4602      	mov	r2, r0
 8107d6c:	683b      	ldr	r3, [r7, #0]
 8107d6e:	1ad3      	subs	r3, r2, r3
 8107d70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8107d72:	429a      	cmp	r2, r3
 8107d74:	d302      	bcc.n	8107d7c <UART_WaitOnFlagUntilTimeout+0x32>
 8107d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107d78:	2b00      	cmp	r3, #0
 8107d7a:	d140      	bne.n	8107dfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107d7c:	68fb      	ldr	r3, [r7, #12]
 8107d7e:	681b      	ldr	r3, [r3, #0]
 8107d80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107d84:	e853 3f00 	ldrex	r3, [r3]
 8107d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8107d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107d8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107d90:	667b      	str	r3, [r7, #100]	; 0x64
 8107d92:	68fb      	ldr	r3, [r7, #12]
 8107d94:	681b      	ldr	r3, [r3, #0]
 8107d96:	461a      	mov	r2, r3
 8107d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107d9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107d9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8107da0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8107da2:	e841 2300 	strex	r3, r2, [r1]
 8107da6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8107da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107daa:	2b00      	cmp	r3, #0
 8107dac:	d1e6      	bne.n	8107d7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107dae:	68fb      	ldr	r3, [r7, #12]
 8107db0:	681b      	ldr	r3, [r3, #0]
 8107db2:	3308      	adds	r3, #8
 8107db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8107db8:	e853 3f00 	ldrex	r3, [r3]
 8107dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8107dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107dc0:	f023 0301 	bic.w	r3, r3, #1
 8107dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8107dc6:	68fb      	ldr	r3, [r7, #12]
 8107dc8:	681b      	ldr	r3, [r3, #0]
 8107dca:	3308      	adds	r3, #8
 8107dcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8107dce:	64ba      	str	r2, [r7, #72]	; 0x48
 8107dd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107dd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8107dd6:	e841 2300 	strex	r3, r2, [r1]
 8107dda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8107ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8107dde:	2b00      	cmp	r3, #0
 8107de0:	d1e5      	bne.n	8107dae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8107de2:	68fb      	ldr	r3, [r7, #12]
 8107de4:	2220      	movs	r2, #32
 8107de6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8107dea:	68fb      	ldr	r3, [r7, #12]
 8107dec:	2220      	movs	r2, #32
 8107dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8107df2:	68fb      	ldr	r3, [r7, #12]
 8107df4:	2200      	movs	r2, #0
 8107df6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8107dfa:	2303      	movs	r3, #3
 8107dfc:	e069      	b.n	8107ed2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8107dfe:	68fb      	ldr	r3, [r7, #12]
 8107e00:	681b      	ldr	r3, [r3, #0]
 8107e02:	681b      	ldr	r3, [r3, #0]
 8107e04:	f003 0304 	and.w	r3, r3, #4
 8107e08:	2b00      	cmp	r3, #0
 8107e0a:	d051      	beq.n	8107eb0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8107e0c:	68fb      	ldr	r3, [r7, #12]
 8107e0e:	681b      	ldr	r3, [r3, #0]
 8107e10:	69db      	ldr	r3, [r3, #28]
 8107e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107e1a:	d149      	bne.n	8107eb0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107e1c:	68fb      	ldr	r3, [r7, #12]
 8107e1e:	681b      	ldr	r3, [r3, #0]
 8107e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107e24:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107e26:	68fb      	ldr	r3, [r7, #12]
 8107e28:	681b      	ldr	r3, [r3, #0]
 8107e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107e2e:	e853 3f00 	ldrex	r3, [r3]
 8107e32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8107e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107e36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8107e3c:	68fb      	ldr	r3, [r7, #12]
 8107e3e:	681b      	ldr	r3, [r3, #0]
 8107e40:	461a      	mov	r2, r3
 8107e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8107e44:	637b      	str	r3, [r7, #52]	; 0x34
 8107e46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107e48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8107e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107e4c:	e841 2300 	strex	r3, r2, [r1]
 8107e50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8107e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107e54:	2b00      	cmp	r3, #0
 8107e56:	d1e6      	bne.n	8107e26 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107e58:	68fb      	ldr	r3, [r7, #12]
 8107e5a:	681b      	ldr	r3, [r3, #0]
 8107e5c:	3308      	adds	r3, #8
 8107e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107e60:	697b      	ldr	r3, [r7, #20]
 8107e62:	e853 3f00 	ldrex	r3, [r3]
 8107e66:	613b      	str	r3, [r7, #16]
   return(result);
 8107e68:	693b      	ldr	r3, [r7, #16]
 8107e6a:	f023 0301 	bic.w	r3, r3, #1
 8107e6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8107e70:	68fb      	ldr	r3, [r7, #12]
 8107e72:	681b      	ldr	r3, [r3, #0]
 8107e74:	3308      	adds	r3, #8
 8107e76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8107e78:	623a      	str	r2, [r7, #32]
 8107e7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107e7c:	69f9      	ldr	r1, [r7, #28]
 8107e7e:	6a3a      	ldr	r2, [r7, #32]
 8107e80:	e841 2300 	strex	r3, r2, [r1]
 8107e84:	61bb      	str	r3, [r7, #24]
   return(result);
 8107e86:	69bb      	ldr	r3, [r7, #24]
 8107e88:	2b00      	cmp	r3, #0
 8107e8a:	d1e5      	bne.n	8107e58 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8107e8c:	68fb      	ldr	r3, [r7, #12]
 8107e8e:	2220      	movs	r2, #32
 8107e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8107e94:	68fb      	ldr	r3, [r7, #12]
 8107e96:	2220      	movs	r2, #32
 8107e98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107e9c:	68fb      	ldr	r3, [r7, #12]
 8107e9e:	2220      	movs	r2, #32
 8107ea0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107ea4:	68fb      	ldr	r3, [r7, #12]
 8107ea6:	2200      	movs	r2, #0
 8107ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8107eac:	2303      	movs	r3, #3
 8107eae:	e010      	b.n	8107ed2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107eb0:	68fb      	ldr	r3, [r7, #12]
 8107eb2:	681b      	ldr	r3, [r3, #0]
 8107eb4:	69da      	ldr	r2, [r3, #28]
 8107eb6:	68bb      	ldr	r3, [r7, #8]
 8107eb8:	4013      	ands	r3, r2
 8107eba:	68ba      	ldr	r2, [r7, #8]
 8107ebc:	429a      	cmp	r2, r3
 8107ebe:	bf0c      	ite	eq
 8107ec0:	2301      	moveq	r3, #1
 8107ec2:	2300      	movne	r3, #0
 8107ec4:	b2db      	uxtb	r3, r3
 8107ec6:	461a      	mov	r2, r3
 8107ec8:	79fb      	ldrb	r3, [r7, #7]
 8107eca:	429a      	cmp	r2, r3
 8107ecc:	f43f af46 	beq.w	8107d5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107ed0:	2300      	movs	r3, #0
}
 8107ed2:	4618      	mov	r0, r3
 8107ed4:	3770      	adds	r7, #112	; 0x70
 8107ed6:	46bd      	mov	sp, r7
 8107ed8:	bd80      	pop	{r7, pc}

08107eda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8107eda:	b480      	push	{r7}
 8107edc:	b085      	sub	sp, #20
 8107ede:	af00      	add	r7, sp, #0
 8107ee0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107ee2:	687b      	ldr	r3, [r7, #4]
 8107ee4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107ee8:	2b01      	cmp	r3, #1
 8107eea:	d101      	bne.n	8107ef0 <HAL_UARTEx_DisableFifoMode+0x16>
 8107eec:	2302      	movs	r3, #2
 8107eee:	e027      	b.n	8107f40 <HAL_UARTEx_DisableFifoMode+0x66>
 8107ef0:	687b      	ldr	r3, [r7, #4]
 8107ef2:	2201      	movs	r2, #1
 8107ef4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8107ef8:	687b      	ldr	r3, [r7, #4]
 8107efa:	2224      	movs	r2, #36	; 0x24
 8107efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107f00:	687b      	ldr	r3, [r7, #4]
 8107f02:	681b      	ldr	r3, [r3, #0]
 8107f04:	681b      	ldr	r3, [r3, #0]
 8107f06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107f08:	687b      	ldr	r3, [r7, #4]
 8107f0a:	681b      	ldr	r3, [r3, #0]
 8107f0c:	681a      	ldr	r2, [r3, #0]
 8107f0e:	687b      	ldr	r3, [r7, #4]
 8107f10:	681b      	ldr	r3, [r3, #0]
 8107f12:	f022 0201 	bic.w	r2, r2, #1
 8107f16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8107f18:	68fb      	ldr	r3, [r7, #12]
 8107f1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8107f1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8107f20:	687b      	ldr	r3, [r7, #4]
 8107f22:	2200      	movs	r2, #0
 8107f24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107f26:	687b      	ldr	r3, [r7, #4]
 8107f28:	681b      	ldr	r3, [r3, #0]
 8107f2a:	68fa      	ldr	r2, [r7, #12]
 8107f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107f2e:	687b      	ldr	r3, [r7, #4]
 8107f30:	2220      	movs	r2, #32
 8107f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107f36:	687b      	ldr	r3, [r7, #4]
 8107f38:	2200      	movs	r2, #0
 8107f3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107f3e:	2300      	movs	r3, #0
}
 8107f40:	4618      	mov	r0, r3
 8107f42:	3714      	adds	r7, #20
 8107f44:	46bd      	mov	sp, r7
 8107f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f4a:	4770      	bx	lr

08107f4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107f4c:	b580      	push	{r7, lr}
 8107f4e:	b084      	sub	sp, #16
 8107f50:	af00      	add	r7, sp, #0
 8107f52:	6078      	str	r0, [r7, #4]
 8107f54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107f56:	687b      	ldr	r3, [r7, #4]
 8107f58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107f5c:	2b01      	cmp	r3, #1
 8107f5e:	d101      	bne.n	8107f64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8107f60:	2302      	movs	r3, #2
 8107f62:	e02d      	b.n	8107fc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8107f64:	687b      	ldr	r3, [r7, #4]
 8107f66:	2201      	movs	r2, #1
 8107f68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8107f6c:	687b      	ldr	r3, [r7, #4]
 8107f6e:	2224      	movs	r2, #36	; 0x24
 8107f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107f74:	687b      	ldr	r3, [r7, #4]
 8107f76:	681b      	ldr	r3, [r3, #0]
 8107f78:	681b      	ldr	r3, [r3, #0]
 8107f7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107f7c:	687b      	ldr	r3, [r7, #4]
 8107f7e:	681b      	ldr	r3, [r3, #0]
 8107f80:	681a      	ldr	r2, [r3, #0]
 8107f82:	687b      	ldr	r3, [r7, #4]
 8107f84:	681b      	ldr	r3, [r3, #0]
 8107f86:	f022 0201 	bic.w	r2, r2, #1
 8107f8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107f8c:	687b      	ldr	r3, [r7, #4]
 8107f8e:	681b      	ldr	r3, [r3, #0]
 8107f90:	689b      	ldr	r3, [r3, #8]
 8107f92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8107f96:	687b      	ldr	r3, [r7, #4]
 8107f98:	681b      	ldr	r3, [r3, #0]
 8107f9a:	683a      	ldr	r2, [r7, #0]
 8107f9c:	430a      	orrs	r2, r1
 8107f9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107fa0:	6878      	ldr	r0, [r7, #4]
 8107fa2:	f000 f84f 	bl	8108044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8107fa6:	687b      	ldr	r3, [r7, #4]
 8107fa8:	681b      	ldr	r3, [r3, #0]
 8107faa:	68fa      	ldr	r2, [r7, #12]
 8107fac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107fae:	687b      	ldr	r3, [r7, #4]
 8107fb0:	2220      	movs	r2, #32
 8107fb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8107fb6:	687b      	ldr	r3, [r7, #4]
 8107fb8:	2200      	movs	r2, #0
 8107fba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107fbe:	2300      	movs	r3, #0
}
 8107fc0:	4618      	mov	r0, r3
 8107fc2:	3710      	adds	r7, #16
 8107fc4:	46bd      	mov	sp, r7
 8107fc6:	bd80      	pop	{r7, pc}

08107fc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107fc8:	b580      	push	{r7, lr}
 8107fca:	b084      	sub	sp, #16
 8107fcc:	af00      	add	r7, sp, #0
 8107fce:	6078      	str	r0, [r7, #4]
 8107fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107fd2:	687b      	ldr	r3, [r7, #4]
 8107fd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107fd8:	2b01      	cmp	r3, #1
 8107fda:	d101      	bne.n	8107fe0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8107fdc:	2302      	movs	r3, #2
 8107fde:	e02d      	b.n	810803c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	2201      	movs	r2, #1
 8107fe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	2224      	movs	r2, #36	; 0x24
 8107fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107ff0:	687b      	ldr	r3, [r7, #4]
 8107ff2:	681b      	ldr	r3, [r3, #0]
 8107ff4:	681b      	ldr	r3, [r3, #0]
 8107ff6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107ff8:	687b      	ldr	r3, [r7, #4]
 8107ffa:	681b      	ldr	r3, [r3, #0]
 8107ffc:	681a      	ldr	r2, [r3, #0]
 8107ffe:	687b      	ldr	r3, [r7, #4]
 8108000:	681b      	ldr	r3, [r3, #0]
 8108002:	f022 0201 	bic.w	r2, r2, #1
 8108006:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	681b      	ldr	r3, [r3, #0]
 810800c:	689b      	ldr	r3, [r3, #8]
 810800e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	681b      	ldr	r3, [r3, #0]
 8108016:	683a      	ldr	r2, [r7, #0]
 8108018:	430a      	orrs	r2, r1
 810801a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810801c:	6878      	ldr	r0, [r7, #4]
 810801e:	f000 f811 	bl	8108044 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	681b      	ldr	r3, [r3, #0]
 8108026:	68fa      	ldr	r2, [r7, #12]
 8108028:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810802a:	687b      	ldr	r3, [r7, #4]
 810802c:	2220      	movs	r2, #32
 810802e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108032:	687b      	ldr	r3, [r7, #4]
 8108034:	2200      	movs	r2, #0
 8108036:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810803a:	2300      	movs	r3, #0
}
 810803c:	4618      	mov	r0, r3
 810803e:	3710      	adds	r7, #16
 8108040:	46bd      	mov	sp, r7
 8108042:	bd80      	pop	{r7, pc}

08108044 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108044:	b480      	push	{r7}
 8108046:	b085      	sub	sp, #20
 8108048:	af00      	add	r7, sp, #0
 810804a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810804c:	687b      	ldr	r3, [r7, #4]
 810804e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108050:	2b00      	cmp	r3, #0
 8108052:	d108      	bne.n	8108066 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8108054:	687b      	ldr	r3, [r7, #4]
 8108056:	2201      	movs	r2, #1
 8108058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810805c:	687b      	ldr	r3, [r7, #4]
 810805e:	2201      	movs	r2, #1
 8108060:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108064:	e031      	b.n	81080ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108066:	2310      	movs	r3, #16
 8108068:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810806a:	2310      	movs	r3, #16
 810806c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810806e:	687b      	ldr	r3, [r7, #4]
 8108070:	681b      	ldr	r3, [r3, #0]
 8108072:	689b      	ldr	r3, [r3, #8]
 8108074:	0e5b      	lsrs	r3, r3, #25
 8108076:	b2db      	uxtb	r3, r3
 8108078:	f003 0307 	and.w	r3, r3, #7
 810807c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810807e:	687b      	ldr	r3, [r7, #4]
 8108080:	681b      	ldr	r3, [r3, #0]
 8108082:	689b      	ldr	r3, [r3, #8]
 8108084:	0f5b      	lsrs	r3, r3, #29
 8108086:	b2db      	uxtb	r3, r3
 8108088:	f003 0307 	and.w	r3, r3, #7
 810808c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810808e:	7bbb      	ldrb	r3, [r7, #14]
 8108090:	7b3a      	ldrb	r2, [r7, #12]
 8108092:	4911      	ldr	r1, [pc, #68]	; (81080d8 <UARTEx_SetNbDataToProcess+0x94>)
 8108094:	5c8a      	ldrb	r2, [r1, r2]
 8108096:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810809a:	7b3a      	ldrb	r2, [r7, #12]
 810809c:	490f      	ldr	r1, [pc, #60]	; (81080dc <UARTEx_SetNbDataToProcess+0x98>)
 810809e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81080a0:	fb93 f3f2 	sdiv	r3, r3, r2
 81080a4:	b29a      	uxth	r2, r3
 81080a6:	687b      	ldr	r3, [r7, #4]
 81080a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81080ac:	7bfb      	ldrb	r3, [r7, #15]
 81080ae:	7b7a      	ldrb	r2, [r7, #13]
 81080b0:	4909      	ldr	r1, [pc, #36]	; (81080d8 <UARTEx_SetNbDataToProcess+0x94>)
 81080b2:	5c8a      	ldrb	r2, [r1, r2]
 81080b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 81080b8:	7b7a      	ldrb	r2, [r7, #13]
 81080ba:	4908      	ldr	r1, [pc, #32]	; (81080dc <UARTEx_SetNbDataToProcess+0x98>)
 81080bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81080be:	fb93 f3f2 	sdiv	r3, r3, r2
 81080c2:	b29a      	uxth	r2, r3
 81080c4:	687b      	ldr	r3, [r7, #4]
 81080c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81080ca:	bf00      	nop
 81080cc:	3714      	adds	r7, #20
 81080ce:	46bd      	mov	sp, r7
 81080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080d4:	4770      	bx	lr
 81080d6:	bf00      	nop
 81080d8:	081098dc 	.word	0x081098dc
 81080dc:	081098e4 	.word	0x081098e4

081080e0 <__errno>:
 81080e0:	4b01      	ldr	r3, [pc, #4]	; (81080e8 <__errno+0x8>)
 81080e2:	6818      	ldr	r0, [r3, #0]
 81080e4:	4770      	bx	lr
 81080e6:	bf00      	nop
 81080e8:	10000014 	.word	0x10000014

081080ec <__libc_init_array>:
 81080ec:	b570      	push	{r4, r5, r6, lr}
 81080ee:	4d0d      	ldr	r5, [pc, #52]	; (8108124 <__libc_init_array+0x38>)
 81080f0:	4c0d      	ldr	r4, [pc, #52]	; (8108128 <__libc_init_array+0x3c>)
 81080f2:	1b64      	subs	r4, r4, r5
 81080f4:	10a4      	asrs	r4, r4, #2
 81080f6:	2600      	movs	r6, #0
 81080f8:	42a6      	cmp	r6, r4
 81080fa:	d109      	bne.n	8108110 <__libc_init_array+0x24>
 81080fc:	4d0b      	ldr	r5, [pc, #44]	; (810812c <__libc_init_array+0x40>)
 81080fe:	4c0c      	ldr	r4, [pc, #48]	; (8108130 <__libc_init_array+0x44>)
 8108100:	f001 fba8 	bl	8109854 <_init>
 8108104:	1b64      	subs	r4, r4, r5
 8108106:	10a4      	asrs	r4, r4, #2
 8108108:	2600      	movs	r6, #0
 810810a:	42a6      	cmp	r6, r4
 810810c:	d105      	bne.n	810811a <__libc_init_array+0x2e>
 810810e:	bd70      	pop	{r4, r5, r6, pc}
 8108110:	f855 3b04 	ldr.w	r3, [r5], #4
 8108114:	4798      	blx	r3
 8108116:	3601      	adds	r6, #1
 8108118:	e7ee      	b.n	81080f8 <__libc_init_array+0xc>
 810811a:	f855 3b04 	ldr.w	r3, [r5], #4
 810811e:	4798      	blx	r3
 8108120:	3601      	adds	r6, #1
 8108122:	e7f2      	b.n	810810a <__libc_init_array+0x1e>
 8108124:	08109958 	.word	0x08109958
 8108128:	08109958 	.word	0x08109958
 810812c:	08109958 	.word	0x08109958
 8108130:	0810995c 	.word	0x0810995c

08108134 <memset>:
 8108134:	4402      	add	r2, r0
 8108136:	4603      	mov	r3, r0
 8108138:	4293      	cmp	r3, r2
 810813a:	d100      	bne.n	810813e <memset+0xa>
 810813c:	4770      	bx	lr
 810813e:	f803 1b01 	strb.w	r1, [r3], #1
 8108142:	e7f9      	b.n	8108138 <memset+0x4>

08108144 <siprintf>:
 8108144:	b40e      	push	{r1, r2, r3}
 8108146:	b500      	push	{lr}
 8108148:	b09c      	sub	sp, #112	; 0x70
 810814a:	ab1d      	add	r3, sp, #116	; 0x74
 810814c:	9002      	str	r0, [sp, #8]
 810814e:	9006      	str	r0, [sp, #24]
 8108150:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8108154:	4809      	ldr	r0, [pc, #36]	; (810817c <siprintf+0x38>)
 8108156:	9107      	str	r1, [sp, #28]
 8108158:	9104      	str	r1, [sp, #16]
 810815a:	4909      	ldr	r1, [pc, #36]	; (8108180 <siprintf+0x3c>)
 810815c:	f853 2b04 	ldr.w	r2, [r3], #4
 8108160:	9105      	str	r1, [sp, #20]
 8108162:	6800      	ldr	r0, [r0, #0]
 8108164:	9301      	str	r3, [sp, #4]
 8108166:	a902      	add	r1, sp, #8
 8108168:	f000 f868 	bl	810823c <_svfiprintf_r>
 810816c:	9b02      	ldr	r3, [sp, #8]
 810816e:	2200      	movs	r2, #0
 8108170:	701a      	strb	r2, [r3, #0]
 8108172:	b01c      	add	sp, #112	; 0x70
 8108174:	f85d eb04 	ldr.w	lr, [sp], #4
 8108178:	b003      	add	sp, #12
 810817a:	4770      	bx	lr
 810817c:	10000014 	.word	0x10000014
 8108180:	ffff0208 	.word	0xffff0208

08108184 <__ssputs_r>:
 8108184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108188:	688e      	ldr	r6, [r1, #8]
 810818a:	429e      	cmp	r6, r3
 810818c:	4682      	mov	sl, r0
 810818e:	460c      	mov	r4, r1
 8108190:	4690      	mov	r8, r2
 8108192:	461f      	mov	r7, r3
 8108194:	d838      	bhi.n	8108208 <__ssputs_r+0x84>
 8108196:	898a      	ldrh	r2, [r1, #12]
 8108198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810819c:	d032      	beq.n	8108204 <__ssputs_r+0x80>
 810819e:	6825      	ldr	r5, [r4, #0]
 81081a0:	6909      	ldr	r1, [r1, #16]
 81081a2:	eba5 0901 	sub.w	r9, r5, r1
 81081a6:	6965      	ldr	r5, [r4, #20]
 81081a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81081ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81081b0:	3301      	adds	r3, #1
 81081b2:	444b      	add	r3, r9
 81081b4:	106d      	asrs	r5, r5, #1
 81081b6:	429d      	cmp	r5, r3
 81081b8:	bf38      	it	cc
 81081ba:	461d      	movcc	r5, r3
 81081bc:	0553      	lsls	r3, r2, #21
 81081be:	d531      	bpl.n	8108224 <__ssputs_r+0xa0>
 81081c0:	4629      	mov	r1, r5
 81081c2:	f000 fb63 	bl	810888c <_malloc_r>
 81081c6:	4606      	mov	r6, r0
 81081c8:	b950      	cbnz	r0, 81081e0 <__ssputs_r+0x5c>
 81081ca:	230c      	movs	r3, #12
 81081cc:	f8ca 3000 	str.w	r3, [sl]
 81081d0:	89a3      	ldrh	r3, [r4, #12]
 81081d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81081d6:	81a3      	strh	r3, [r4, #12]
 81081d8:	f04f 30ff 	mov.w	r0, #4294967295
 81081dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81081e0:	6921      	ldr	r1, [r4, #16]
 81081e2:	464a      	mov	r2, r9
 81081e4:	f000 fabe 	bl	8108764 <memcpy>
 81081e8:	89a3      	ldrh	r3, [r4, #12]
 81081ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 81081ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81081f2:	81a3      	strh	r3, [r4, #12]
 81081f4:	6126      	str	r6, [r4, #16]
 81081f6:	6165      	str	r5, [r4, #20]
 81081f8:	444e      	add	r6, r9
 81081fa:	eba5 0509 	sub.w	r5, r5, r9
 81081fe:	6026      	str	r6, [r4, #0]
 8108200:	60a5      	str	r5, [r4, #8]
 8108202:	463e      	mov	r6, r7
 8108204:	42be      	cmp	r6, r7
 8108206:	d900      	bls.n	810820a <__ssputs_r+0x86>
 8108208:	463e      	mov	r6, r7
 810820a:	6820      	ldr	r0, [r4, #0]
 810820c:	4632      	mov	r2, r6
 810820e:	4641      	mov	r1, r8
 8108210:	f000 fab6 	bl	8108780 <memmove>
 8108214:	68a3      	ldr	r3, [r4, #8]
 8108216:	1b9b      	subs	r3, r3, r6
 8108218:	60a3      	str	r3, [r4, #8]
 810821a:	6823      	ldr	r3, [r4, #0]
 810821c:	4433      	add	r3, r6
 810821e:	6023      	str	r3, [r4, #0]
 8108220:	2000      	movs	r0, #0
 8108222:	e7db      	b.n	81081dc <__ssputs_r+0x58>
 8108224:	462a      	mov	r2, r5
 8108226:	f000 fba5 	bl	8108974 <_realloc_r>
 810822a:	4606      	mov	r6, r0
 810822c:	2800      	cmp	r0, #0
 810822e:	d1e1      	bne.n	81081f4 <__ssputs_r+0x70>
 8108230:	6921      	ldr	r1, [r4, #16]
 8108232:	4650      	mov	r0, sl
 8108234:	f000 fabe 	bl	81087b4 <_free_r>
 8108238:	e7c7      	b.n	81081ca <__ssputs_r+0x46>
	...

0810823c <_svfiprintf_r>:
 810823c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108240:	4698      	mov	r8, r3
 8108242:	898b      	ldrh	r3, [r1, #12]
 8108244:	061b      	lsls	r3, r3, #24
 8108246:	b09d      	sub	sp, #116	; 0x74
 8108248:	4607      	mov	r7, r0
 810824a:	460d      	mov	r5, r1
 810824c:	4614      	mov	r4, r2
 810824e:	d50e      	bpl.n	810826e <_svfiprintf_r+0x32>
 8108250:	690b      	ldr	r3, [r1, #16]
 8108252:	b963      	cbnz	r3, 810826e <_svfiprintf_r+0x32>
 8108254:	2140      	movs	r1, #64	; 0x40
 8108256:	f000 fb19 	bl	810888c <_malloc_r>
 810825a:	6028      	str	r0, [r5, #0]
 810825c:	6128      	str	r0, [r5, #16]
 810825e:	b920      	cbnz	r0, 810826a <_svfiprintf_r+0x2e>
 8108260:	230c      	movs	r3, #12
 8108262:	603b      	str	r3, [r7, #0]
 8108264:	f04f 30ff 	mov.w	r0, #4294967295
 8108268:	e0d1      	b.n	810840e <_svfiprintf_r+0x1d2>
 810826a:	2340      	movs	r3, #64	; 0x40
 810826c:	616b      	str	r3, [r5, #20]
 810826e:	2300      	movs	r3, #0
 8108270:	9309      	str	r3, [sp, #36]	; 0x24
 8108272:	2320      	movs	r3, #32
 8108274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8108278:	f8cd 800c 	str.w	r8, [sp, #12]
 810827c:	2330      	movs	r3, #48	; 0x30
 810827e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8108428 <_svfiprintf_r+0x1ec>
 8108282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8108286:	f04f 0901 	mov.w	r9, #1
 810828a:	4623      	mov	r3, r4
 810828c:	469a      	mov	sl, r3
 810828e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8108292:	b10a      	cbz	r2, 8108298 <_svfiprintf_r+0x5c>
 8108294:	2a25      	cmp	r2, #37	; 0x25
 8108296:	d1f9      	bne.n	810828c <_svfiprintf_r+0x50>
 8108298:	ebba 0b04 	subs.w	fp, sl, r4
 810829c:	d00b      	beq.n	81082b6 <_svfiprintf_r+0x7a>
 810829e:	465b      	mov	r3, fp
 81082a0:	4622      	mov	r2, r4
 81082a2:	4629      	mov	r1, r5
 81082a4:	4638      	mov	r0, r7
 81082a6:	f7ff ff6d 	bl	8108184 <__ssputs_r>
 81082aa:	3001      	adds	r0, #1
 81082ac:	f000 80aa 	beq.w	8108404 <_svfiprintf_r+0x1c8>
 81082b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81082b2:	445a      	add	r2, fp
 81082b4:	9209      	str	r2, [sp, #36]	; 0x24
 81082b6:	f89a 3000 	ldrb.w	r3, [sl]
 81082ba:	2b00      	cmp	r3, #0
 81082bc:	f000 80a2 	beq.w	8108404 <_svfiprintf_r+0x1c8>
 81082c0:	2300      	movs	r3, #0
 81082c2:	f04f 32ff 	mov.w	r2, #4294967295
 81082c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81082ca:	f10a 0a01 	add.w	sl, sl, #1
 81082ce:	9304      	str	r3, [sp, #16]
 81082d0:	9307      	str	r3, [sp, #28]
 81082d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81082d6:	931a      	str	r3, [sp, #104]	; 0x68
 81082d8:	4654      	mov	r4, sl
 81082da:	2205      	movs	r2, #5
 81082dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 81082e0:	4851      	ldr	r0, [pc, #324]	; (8108428 <_svfiprintf_r+0x1ec>)
 81082e2:	f7f8 f805 	bl	81002f0 <memchr>
 81082e6:	9a04      	ldr	r2, [sp, #16]
 81082e8:	b9d8      	cbnz	r0, 8108322 <_svfiprintf_r+0xe6>
 81082ea:	06d0      	lsls	r0, r2, #27
 81082ec:	bf44      	itt	mi
 81082ee:	2320      	movmi	r3, #32
 81082f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81082f4:	0711      	lsls	r1, r2, #28
 81082f6:	bf44      	itt	mi
 81082f8:	232b      	movmi	r3, #43	; 0x2b
 81082fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81082fe:	f89a 3000 	ldrb.w	r3, [sl]
 8108302:	2b2a      	cmp	r3, #42	; 0x2a
 8108304:	d015      	beq.n	8108332 <_svfiprintf_r+0xf6>
 8108306:	9a07      	ldr	r2, [sp, #28]
 8108308:	4654      	mov	r4, sl
 810830a:	2000      	movs	r0, #0
 810830c:	f04f 0c0a 	mov.w	ip, #10
 8108310:	4621      	mov	r1, r4
 8108312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8108316:	3b30      	subs	r3, #48	; 0x30
 8108318:	2b09      	cmp	r3, #9
 810831a:	d94e      	bls.n	81083ba <_svfiprintf_r+0x17e>
 810831c:	b1b0      	cbz	r0, 810834c <_svfiprintf_r+0x110>
 810831e:	9207      	str	r2, [sp, #28]
 8108320:	e014      	b.n	810834c <_svfiprintf_r+0x110>
 8108322:	eba0 0308 	sub.w	r3, r0, r8
 8108326:	fa09 f303 	lsl.w	r3, r9, r3
 810832a:	4313      	orrs	r3, r2
 810832c:	9304      	str	r3, [sp, #16]
 810832e:	46a2      	mov	sl, r4
 8108330:	e7d2      	b.n	81082d8 <_svfiprintf_r+0x9c>
 8108332:	9b03      	ldr	r3, [sp, #12]
 8108334:	1d19      	adds	r1, r3, #4
 8108336:	681b      	ldr	r3, [r3, #0]
 8108338:	9103      	str	r1, [sp, #12]
 810833a:	2b00      	cmp	r3, #0
 810833c:	bfbb      	ittet	lt
 810833e:	425b      	neglt	r3, r3
 8108340:	f042 0202 	orrlt.w	r2, r2, #2
 8108344:	9307      	strge	r3, [sp, #28]
 8108346:	9307      	strlt	r3, [sp, #28]
 8108348:	bfb8      	it	lt
 810834a:	9204      	strlt	r2, [sp, #16]
 810834c:	7823      	ldrb	r3, [r4, #0]
 810834e:	2b2e      	cmp	r3, #46	; 0x2e
 8108350:	d10c      	bne.n	810836c <_svfiprintf_r+0x130>
 8108352:	7863      	ldrb	r3, [r4, #1]
 8108354:	2b2a      	cmp	r3, #42	; 0x2a
 8108356:	d135      	bne.n	81083c4 <_svfiprintf_r+0x188>
 8108358:	9b03      	ldr	r3, [sp, #12]
 810835a:	1d1a      	adds	r2, r3, #4
 810835c:	681b      	ldr	r3, [r3, #0]
 810835e:	9203      	str	r2, [sp, #12]
 8108360:	2b00      	cmp	r3, #0
 8108362:	bfb8      	it	lt
 8108364:	f04f 33ff 	movlt.w	r3, #4294967295
 8108368:	3402      	adds	r4, #2
 810836a:	9305      	str	r3, [sp, #20]
 810836c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8108438 <_svfiprintf_r+0x1fc>
 8108370:	7821      	ldrb	r1, [r4, #0]
 8108372:	2203      	movs	r2, #3
 8108374:	4650      	mov	r0, sl
 8108376:	f7f7 ffbb 	bl	81002f0 <memchr>
 810837a:	b140      	cbz	r0, 810838e <_svfiprintf_r+0x152>
 810837c:	2340      	movs	r3, #64	; 0x40
 810837e:	eba0 000a 	sub.w	r0, r0, sl
 8108382:	fa03 f000 	lsl.w	r0, r3, r0
 8108386:	9b04      	ldr	r3, [sp, #16]
 8108388:	4303      	orrs	r3, r0
 810838a:	3401      	adds	r4, #1
 810838c:	9304      	str	r3, [sp, #16]
 810838e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108392:	4826      	ldr	r0, [pc, #152]	; (810842c <_svfiprintf_r+0x1f0>)
 8108394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8108398:	2206      	movs	r2, #6
 810839a:	f7f7 ffa9 	bl	81002f0 <memchr>
 810839e:	2800      	cmp	r0, #0
 81083a0:	d038      	beq.n	8108414 <_svfiprintf_r+0x1d8>
 81083a2:	4b23      	ldr	r3, [pc, #140]	; (8108430 <_svfiprintf_r+0x1f4>)
 81083a4:	bb1b      	cbnz	r3, 81083ee <_svfiprintf_r+0x1b2>
 81083a6:	9b03      	ldr	r3, [sp, #12]
 81083a8:	3307      	adds	r3, #7
 81083aa:	f023 0307 	bic.w	r3, r3, #7
 81083ae:	3308      	adds	r3, #8
 81083b0:	9303      	str	r3, [sp, #12]
 81083b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81083b4:	4433      	add	r3, r6
 81083b6:	9309      	str	r3, [sp, #36]	; 0x24
 81083b8:	e767      	b.n	810828a <_svfiprintf_r+0x4e>
 81083ba:	fb0c 3202 	mla	r2, ip, r2, r3
 81083be:	460c      	mov	r4, r1
 81083c0:	2001      	movs	r0, #1
 81083c2:	e7a5      	b.n	8108310 <_svfiprintf_r+0xd4>
 81083c4:	2300      	movs	r3, #0
 81083c6:	3401      	adds	r4, #1
 81083c8:	9305      	str	r3, [sp, #20]
 81083ca:	4619      	mov	r1, r3
 81083cc:	f04f 0c0a 	mov.w	ip, #10
 81083d0:	4620      	mov	r0, r4
 81083d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 81083d6:	3a30      	subs	r2, #48	; 0x30
 81083d8:	2a09      	cmp	r2, #9
 81083da:	d903      	bls.n	81083e4 <_svfiprintf_r+0x1a8>
 81083dc:	2b00      	cmp	r3, #0
 81083de:	d0c5      	beq.n	810836c <_svfiprintf_r+0x130>
 81083e0:	9105      	str	r1, [sp, #20]
 81083e2:	e7c3      	b.n	810836c <_svfiprintf_r+0x130>
 81083e4:	fb0c 2101 	mla	r1, ip, r1, r2
 81083e8:	4604      	mov	r4, r0
 81083ea:	2301      	movs	r3, #1
 81083ec:	e7f0      	b.n	81083d0 <_svfiprintf_r+0x194>
 81083ee:	ab03      	add	r3, sp, #12
 81083f0:	9300      	str	r3, [sp, #0]
 81083f2:	462a      	mov	r2, r5
 81083f4:	4b0f      	ldr	r3, [pc, #60]	; (8108434 <_svfiprintf_r+0x1f8>)
 81083f6:	a904      	add	r1, sp, #16
 81083f8:	4638      	mov	r0, r7
 81083fa:	f3af 8000 	nop.w
 81083fe:	1c42      	adds	r2, r0, #1
 8108400:	4606      	mov	r6, r0
 8108402:	d1d6      	bne.n	81083b2 <_svfiprintf_r+0x176>
 8108404:	89ab      	ldrh	r3, [r5, #12]
 8108406:	065b      	lsls	r3, r3, #25
 8108408:	f53f af2c 	bmi.w	8108264 <_svfiprintf_r+0x28>
 810840c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810840e:	b01d      	add	sp, #116	; 0x74
 8108410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108414:	ab03      	add	r3, sp, #12
 8108416:	9300      	str	r3, [sp, #0]
 8108418:	462a      	mov	r2, r5
 810841a:	4b06      	ldr	r3, [pc, #24]	; (8108434 <_svfiprintf_r+0x1f8>)
 810841c:	a904      	add	r1, sp, #16
 810841e:	4638      	mov	r0, r7
 8108420:	f000 f87a 	bl	8108518 <_printf_i>
 8108424:	e7eb      	b.n	81083fe <_svfiprintf_r+0x1c2>
 8108426:	bf00      	nop
 8108428:	081098ec 	.word	0x081098ec
 810842c:	081098f6 	.word	0x081098f6
 8108430:	00000000 	.word	0x00000000
 8108434:	08108185 	.word	0x08108185
 8108438:	081098f2 	.word	0x081098f2

0810843c <_printf_common>:
 810843c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108440:	4616      	mov	r6, r2
 8108442:	4699      	mov	r9, r3
 8108444:	688a      	ldr	r2, [r1, #8]
 8108446:	690b      	ldr	r3, [r1, #16]
 8108448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810844c:	4293      	cmp	r3, r2
 810844e:	bfb8      	it	lt
 8108450:	4613      	movlt	r3, r2
 8108452:	6033      	str	r3, [r6, #0]
 8108454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8108458:	4607      	mov	r7, r0
 810845a:	460c      	mov	r4, r1
 810845c:	b10a      	cbz	r2, 8108462 <_printf_common+0x26>
 810845e:	3301      	adds	r3, #1
 8108460:	6033      	str	r3, [r6, #0]
 8108462:	6823      	ldr	r3, [r4, #0]
 8108464:	0699      	lsls	r1, r3, #26
 8108466:	bf42      	ittt	mi
 8108468:	6833      	ldrmi	r3, [r6, #0]
 810846a:	3302      	addmi	r3, #2
 810846c:	6033      	strmi	r3, [r6, #0]
 810846e:	6825      	ldr	r5, [r4, #0]
 8108470:	f015 0506 	ands.w	r5, r5, #6
 8108474:	d106      	bne.n	8108484 <_printf_common+0x48>
 8108476:	f104 0a19 	add.w	sl, r4, #25
 810847a:	68e3      	ldr	r3, [r4, #12]
 810847c:	6832      	ldr	r2, [r6, #0]
 810847e:	1a9b      	subs	r3, r3, r2
 8108480:	42ab      	cmp	r3, r5
 8108482:	dc26      	bgt.n	81084d2 <_printf_common+0x96>
 8108484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8108488:	1e13      	subs	r3, r2, #0
 810848a:	6822      	ldr	r2, [r4, #0]
 810848c:	bf18      	it	ne
 810848e:	2301      	movne	r3, #1
 8108490:	0692      	lsls	r2, r2, #26
 8108492:	d42b      	bmi.n	81084ec <_printf_common+0xb0>
 8108494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108498:	4649      	mov	r1, r9
 810849a:	4638      	mov	r0, r7
 810849c:	47c0      	blx	r8
 810849e:	3001      	adds	r0, #1
 81084a0:	d01e      	beq.n	81084e0 <_printf_common+0xa4>
 81084a2:	6823      	ldr	r3, [r4, #0]
 81084a4:	68e5      	ldr	r5, [r4, #12]
 81084a6:	6832      	ldr	r2, [r6, #0]
 81084a8:	f003 0306 	and.w	r3, r3, #6
 81084ac:	2b04      	cmp	r3, #4
 81084ae:	bf08      	it	eq
 81084b0:	1aad      	subeq	r5, r5, r2
 81084b2:	68a3      	ldr	r3, [r4, #8]
 81084b4:	6922      	ldr	r2, [r4, #16]
 81084b6:	bf0c      	ite	eq
 81084b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81084bc:	2500      	movne	r5, #0
 81084be:	4293      	cmp	r3, r2
 81084c0:	bfc4      	itt	gt
 81084c2:	1a9b      	subgt	r3, r3, r2
 81084c4:	18ed      	addgt	r5, r5, r3
 81084c6:	2600      	movs	r6, #0
 81084c8:	341a      	adds	r4, #26
 81084ca:	42b5      	cmp	r5, r6
 81084cc:	d11a      	bne.n	8108504 <_printf_common+0xc8>
 81084ce:	2000      	movs	r0, #0
 81084d0:	e008      	b.n	81084e4 <_printf_common+0xa8>
 81084d2:	2301      	movs	r3, #1
 81084d4:	4652      	mov	r2, sl
 81084d6:	4649      	mov	r1, r9
 81084d8:	4638      	mov	r0, r7
 81084da:	47c0      	blx	r8
 81084dc:	3001      	adds	r0, #1
 81084de:	d103      	bne.n	81084e8 <_printf_common+0xac>
 81084e0:	f04f 30ff 	mov.w	r0, #4294967295
 81084e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81084e8:	3501      	adds	r5, #1
 81084ea:	e7c6      	b.n	810847a <_printf_common+0x3e>
 81084ec:	18e1      	adds	r1, r4, r3
 81084ee:	1c5a      	adds	r2, r3, #1
 81084f0:	2030      	movs	r0, #48	; 0x30
 81084f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81084f6:	4422      	add	r2, r4
 81084f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81084fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8108500:	3302      	adds	r3, #2
 8108502:	e7c7      	b.n	8108494 <_printf_common+0x58>
 8108504:	2301      	movs	r3, #1
 8108506:	4622      	mov	r2, r4
 8108508:	4649      	mov	r1, r9
 810850a:	4638      	mov	r0, r7
 810850c:	47c0      	blx	r8
 810850e:	3001      	adds	r0, #1
 8108510:	d0e6      	beq.n	81084e0 <_printf_common+0xa4>
 8108512:	3601      	adds	r6, #1
 8108514:	e7d9      	b.n	81084ca <_printf_common+0x8e>
	...

08108518 <_printf_i>:
 8108518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810851c:	7e0f      	ldrb	r7, [r1, #24]
 810851e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8108520:	2f78      	cmp	r7, #120	; 0x78
 8108522:	4691      	mov	r9, r2
 8108524:	4680      	mov	r8, r0
 8108526:	460c      	mov	r4, r1
 8108528:	469a      	mov	sl, r3
 810852a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810852e:	d807      	bhi.n	8108540 <_printf_i+0x28>
 8108530:	2f62      	cmp	r7, #98	; 0x62
 8108532:	d80a      	bhi.n	810854a <_printf_i+0x32>
 8108534:	2f00      	cmp	r7, #0
 8108536:	f000 80d8 	beq.w	81086ea <_printf_i+0x1d2>
 810853a:	2f58      	cmp	r7, #88	; 0x58
 810853c:	f000 80a3 	beq.w	8108686 <_printf_i+0x16e>
 8108540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8108544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8108548:	e03a      	b.n	81085c0 <_printf_i+0xa8>
 810854a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810854e:	2b15      	cmp	r3, #21
 8108550:	d8f6      	bhi.n	8108540 <_printf_i+0x28>
 8108552:	a101      	add	r1, pc, #4	; (adr r1, 8108558 <_printf_i+0x40>)
 8108554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8108558:	081085b1 	.word	0x081085b1
 810855c:	081085c5 	.word	0x081085c5
 8108560:	08108541 	.word	0x08108541
 8108564:	08108541 	.word	0x08108541
 8108568:	08108541 	.word	0x08108541
 810856c:	08108541 	.word	0x08108541
 8108570:	081085c5 	.word	0x081085c5
 8108574:	08108541 	.word	0x08108541
 8108578:	08108541 	.word	0x08108541
 810857c:	08108541 	.word	0x08108541
 8108580:	08108541 	.word	0x08108541
 8108584:	081086d1 	.word	0x081086d1
 8108588:	081085f5 	.word	0x081085f5
 810858c:	081086b3 	.word	0x081086b3
 8108590:	08108541 	.word	0x08108541
 8108594:	08108541 	.word	0x08108541
 8108598:	081086f3 	.word	0x081086f3
 810859c:	08108541 	.word	0x08108541
 81085a0:	081085f5 	.word	0x081085f5
 81085a4:	08108541 	.word	0x08108541
 81085a8:	08108541 	.word	0x08108541
 81085ac:	081086bb 	.word	0x081086bb
 81085b0:	682b      	ldr	r3, [r5, #0]
 81085b2:	1d1a      	adds	r2, r3, #4
 81085b4:	681b      	ldr	r3, [r3, #0]
 81085b6:	602a      	str	r2, [r5, #0]
 81085b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81085bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81085c0:	2301      	movs	r3, #1
 81085c2:	e0a3      	b.n	810870c <_printf_i+0x1f4>
 81085c4:	6820      	ldr	r0, [r4, #0]
 81085c6:	6829      	ldr	r1, [r5, #0]
 81085c8:	0606      	lsls	r6, r0, #24
 81085ca:	f101 0304 	add.w	r3, r1, #4
 81085ce:	d50a      	bpl.n	81085e6 <_printf_i+0xce>
 81085d0:	680e      	ldr	r6, [r1, #0]
 81085d2:	602b      	str	r3, [r5, #0]
 81085d4:	2e00      	cmp	r6, #0
 81085d6:	da03      	bge.n	81085e0 <_printf_i+0xc8>
 81085d8:	232d      	movs	r3, #45	; 0x2d
 81085da:	4276      	negs	r6, r6
 81085dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81085e0:	485e      	ldr	r0, [pc, #376]	; (810875c <_printf_i+0x244>)
 81085e2:	230a      	movs	r3, #10
 81085e4:	e019      	b.n	810861a <_printf_i+0x102>
 81085e6:	680e      	ldr	r6, [r1, #0]
 81085e8:	602b      	str	r3, [r5, #0]
 81085ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 81085ee:	bf18      	it	ne
 81085f0:	b236      	sxthne	r6, r6
 81085f2:	e7ef      	b.n	81085d4 <_printf_i+0xbc>
 81085f4:	682b      	ldr	r3, [r5, #0]
 81085f6:	6820      	ldr	r0, [r4, #0]
 81085f8:	1d19      	adds	r1, r3, #4
 81085fa:	6029      	str	r1, [r5, #0]
 81085fc:	0601      	lsls	r1, r0, #24
 81085fe:	d501      	bpl.n	8108604 <_printf_i+0xec>
 8108600:	681e      	ldr	r6, [r3, #0]
 8108602:	e002      	b.n	810860a <_printf_i+0xf2>
 8108604:	0646      	lsls	r6, r0, #25
 8108606:	d5fb      	bpl.n	8108600 <_printf_i+0xe8>
 8108608:	881e      	ldrh	r6, [r3, #0]
 810860a:	4854      	ldr	r0, [pc, #336]	; (810875c <_printf_i+0x244>)
 810860c:	2f6f      	cmp	r7, #111	; 0x6f
 810860e:	bf0c      	ite	eq
 8108610:	2308      	moveq	r3, #8
 8108612:	230a      	movne	r3, #10
 8108614:	2100      	movs	r1, #0
 8108616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810861a:	6865      	ldr	r5, [r4, #4]
 810861c:	60a5      	str	r5, [r4, #8]
 810861e:	2d00      	cmp	r5, #0
 8108620:	bfa2      	ittt	ge
 8108622:	6821      	ldrge	r1, [r4, #0]
 8108624:	f021 0104 	bicge.w	r1, r1, #4
 8108628:	6021      	strge	r1, [r4, #0]
 810862a:	b90e      	cbnz	r6, 8108630 <_printf_i+0x118>
 810862c:	2d00      	cmp	r5, #0
 810862e:	d04d      	beq.n	81086cc <_printf_i+0x1b4>
 8108630:	4615      	mov	r5, r2
 8108632:	fbb6 f1f3 	udiv	r1, r6, r3
 8108636:	fb03 6711 	mls	r7, r3, r1, r6
 810863a:	5dc7      	ldrb	r7, [r0, r7]
 810863c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8108640:	4637      	mov	r7, r6
 8108642:	42bb      	cmp	r3, r7
 8108644:	460e      	mov	r6, r1
 8108646:	d9f4      	bls.n	8108632 <_printf_i+0x11a>
 8108648:	2b08      	cmp	r3, #8
 810864a:	d10b      	bne.n	8108664 <_printf_i+0x14c>
 810864c:	6823      	ldr	r3, [r4, #0]
 810864e:	07de      	lsls	r6, r3, #31
 8108650:	d508      	bpl.n	8108664 <_printf_i+0x14c>
 8108652:	6923      	ldr	r3, [r4, #16]
 8108654:	6861      	ldr	r1, [r4, #4]
 8108656:	4299      	cmp	r1, r3
 8108658:	bfde      	ittt	le
 810865a:	2330      	movle	r3, #48	; 0x30
 810865c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8108660:	f105 35ff 	addle.w	r5, r5, #4294967295
 8108664:	1b52      	subs	r2, r2, r5
 8108666:	6122      	str	r2, [r4, #16]
 8108668:	f8cd a000 	str.w	sl, [sp]
 810866c:	464b      	mov	r3, r9
 810866e:	aa03      	add	r2, sp, #12
 8108670:	4621      	mov	r1, r4
 8108672:	4640      	mov	r0, r8
 8108674:	f7ff fee2 	bl	810843c <_printf_common>
 8108678:	3001      	adds	r0, #1
 810867a:	d14c      	bne.n	8108716 <_printf_i+0x1fe>
 810867c:	f04f 30ff 	mov.w	r0, #4294967295
 8108680:	b004      	add	sp, #16
 8108682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108686:	4835      	ldr	r0, [pc, #212]	; (810875c <_printf_i+0x244>)
 8108688:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 810868c:	6829      	ldr	r1, [r5, #0]
 810868e:	6823      	ldr	r3, [r4, #0]
 8108690:	f851 6b04 	ldr.w	r6, [r1], #4
 8108694:	6029      	str	r1, [r5, #0]
 8108696:	061d      	lsls	r5, r3, #24
 8108698:	d514      	bpl.n	81086c4 <_printf_i+0x1ac>
 810869a:	07df      	lsls	r7, r3, #31
 810869c:	bf44      	itt	mi
 810869e:	f043 0320 	orrmi.w	r3, r3, #32
 81086a2:	6023      	strmi	r3, [r4, #0]
 81086a4:	b91e      	cbnz	r6, 81086ae <_printf_i+0x196>
 81086a6:	6823      	ldr	r3, [r4, #0]
 81086a8:	f023 0320 	bic.w	r3, r3, #32
 81086ac:	6023      	str	r3, [r4, #0]
 81086ae:	2310      	movs	r3, #16
 81086b0:	e7b0      	b.n	8108614 <_printf_i+0xfc>
 81086b2:	6823      	ldr	r3, [r4, #0]
 81086b4:	f043 0320 	orr.w	r3, r3, #32
 81086b8:	6023      	str	r3, [r4, #0]
 81086ba:	2378      	movs	r3, #120	; 0x78
 81086bc:	4828      	ldr	r0, [pc, #160]	; (8108760 <_printf_i+0x248>)
 81086be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81086c2:	e7e3      	b.n	810868c <_printf_i+0x174>
 81086c4:	0659      	lsls	r1, r3, #25
 81086c6:	bf48      	it	mi
 81086c8:	b2b6      	uxthmi	r6, r6
 81086ca:	e7e6      	b.n	810869a <_printf_i+0x182>
 81086cc:	4615      	mov	r5, r2
 81086ce:	e7bb      	b.n	8108648 <_printf_i+0x130>
 81086d0:	682b      	ldr	r3, [r5, #0]
 81086d2:	6826      	ldr	r6, [r4, #0]
 81086d4:	6961      	ldr	r1, [r4, #20]
 81086d6:	1d18      	adds	r0, r3, #4
 81086d8:	6028      	str	r0, [r5, #0]
 81086da:	0635      	lsls	r5, r6, #24
 81086dc:	681b      	ldr	r3, [r3, #0]
 81086de:	d501      	bpl.n	81086e4 <_printf_i+0x1cc>
 81086e0:	6019      	str	r1, [r3, #0]
 81086e2:	e002      	b.n	81086ea <_printf_i+0x1d2>
 81086e4:	0670      	lsls	r0, r6, #25
 81086e6:	d5fb      	bpl.n	81086e0 <_printf_i+0x1c8>
 81086e8:	8019      	strh	r1, [r3, #0]
 81086ea:	2300      	movs	r3, #0
 81086ec:	6123      	str	r3, [r4, #16]
 81086ee:	4615      	mov	r5, r2
 81086f0:	e7ba      	b.n	8108668 <_printf_i+0x150>
 81086f2:	682b      	ldr	r3, [r5, #0]
 81086f4:	1d1a      	adds	r2, r3, #4
 81086f6:	602a      	str	r2, [r5, #0]
 81086f8:	681d      	ldr	r5, [r3, #0]
 81086fa:	6862      	ldr	r2, [r4, #4]
 81086fc:	2100      	movs	r1, #0
 81086fe:	4628      	mov	r0, r5
 8108700:	f7f7 fdf6 	bl	81002f0 <memchr>
 8108704:	b108      	cbz	r0, 810870a <_printf_i+0x1f2>
 8108706:	1b40      	subs	r0, r0, r5
 8108708:	6060      	str	r0, [r4, #4]
 810870a:	6863      	ldr	r3, [r4, #4]
 810870c:	6123      	str	r3, [r4, #16]
 810870e:	2300      	movs	r3, #0
 8108710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108714:	e7a8      	b.n	8108668 <_printf_i+0x150>
 8108716:	6923      	ldr	r3, [r4, #16]
 8108718:	462a      	mov	r2, r5
 810871a:	4649      	mov	r1, r9
 810871c:	4640      	mov	r0, r8
 810871e:	47d0      	blx	sl
 8108720:	3001      	adds	r0, #1
 8108722:	d0ab      	beq.n	810867c <_printf_i+0x164>
 8108724:	6823      	ldr	r3, [r4, #0]
 8108726:	079b      	lsls	r3, r3, #30
 8108728:	d413      	bmi.n	8108752 <_printf_i+0x23a>
 810872a:	68e0      	ldr	r0, [r4, #12]
 810872c:	9b03      	ldr	r3, [sp, #12]
 810872e:	4298      	cmp	r0, r3
 8108730:	bfb8      	it	lt
 8108732:	4618      	movlt	r0, r3
 8108734:	e7a4      	b.n	8108680 <_printf_i+0x168>
 8108736:	2301      	movs	r3, #1
 8108738:	4632      	mov	r2, r6
 810873a:	4649      	mov	r1, r9
 810873c:	4640      	mov	r0, r8
 810873e:	47d0      	blx	sl
 8108740:	3001      	adds	r0, #1
 8108742:	d09b      	beq.n	810867c <_printf_i+0x164>
 8108744:	3501      	adds	r5, #1
 8108746:	68e3      	ldr	r3, [r4, #12]
 8108748:	9903      	ldr	r1, [sp, #12]
 810874a:	1a5b      	subs	r3, r3, r1
 810874c:	42ab      	cmp	r3, r5
 810874e:	dcf2      	bgt.n	8108736 <_printf_i+0x21e>
 8108750:	e7eb      	b.n	810872a <_printf_i+0x212>
 8108752:	2500      	movs	r5, #0
 8108754:	f104 0619 	add.w	r6, r4, #25
 8108758:	e7f5      	b.n	8108746 <_printf_i+0x22e>
 810875a:	bf00      	nop
 810875c:	081098fd 	.word	0x081098fd
 8108760:	0810990e 	.word	0x0810990e

08108764 <memcpy>:
 8108764:	440a      	add	r2, r1
 8108766:	4291      	cmp	r1, r2
 8108768:	f100 33ff 	add.w	r3, r0, #4294967295
 810876c:	d100      	bne.n	8108770 <memcpy+0xc>
 810876e:	4770      	bx	lr
 8108770:	b510      	push	{r4, lr}
 8108772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108776:	f803 4f01 	strb.w	r4, [r3, #1]!
 810877a:	4291      	cmp	r1, r2
 810877c:	d1f9      	bne.n	8108772 <memcpy+0xe>
 810877e:	bd10      	pop	{r4, pc}

08108780 <memmove>:
 8108780:	4288      	cmp	r0, r1
 8108782:	b510      	push	{r4, lr}
 8108784:	eb01 0402 	add.w	r4, r1, r2
 8108788:	d902      	bls.n	8108790 <memmove+0x10>
 810878a:	4284      	cmp	r4, r0
 810878c:	4623      	mov	r3, r4
 810878e:	d807      	bhi.n	81087a0 <memmove+0x20>
 8108790:	1e43      	subs	r3, r0, #1
 8108792:	42a1      	cmp	r1, r4
 8108794:	d008      	beq.n	81087a8 <memmove+0x28>
 8108796:	f811 2b01 	ldrb.w	r2, [r1], #1
 810879a:	f803 2f01 	strb.w	r2, [r3, #1]!
 810879e:	e7f8      	b.n	8108792 <memmove+0x12>
 81087a0:	4402      	add	r2, r0
 81087a2:	4601      	mov	r1, r0
 81087a4:	428a      	cmp	r2, r1
 81087a6:	d100      	bne.n	81087aa <memmove+0x2a>
 81087a8:	bd10      	pop	{r4, pc}
 81087aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 81087ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 81087b2:	e7f7      	b.n	81087a4 <memmove+0x24>

081087b4 <_free_r>:
 81087b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81087b6:	2900      	cmp	r1, #0
 81087b8:	d044      	beq.n	8108844 <_free_r+0x90>
 81087ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81087be:	9001      	str	r0, [sp, #4]
 81087c0:	2b00      	cmp	r3, #0
 81087c2:	f1a1 0404 	sub.w	r4, r1, #4
 81087c6:	bfb8      	it	lt
 81087c8:	18e4      	addlt	r4, r4, r3
 81087ca:	f000 f913 	bl	81089f4 <__malloc_lock>
 81087ce:	4a1e      	ldr	r2, [pc, #120]	; (8108848 <_free_r+0x94>)
 81087d0:	9801      	ldr	r0, [sp, #4]
 81087d2:	6813      	ldr	r3, [r2, #0]
 81087d4:	b933      	cbnz	r3, 81087e4 <_free_r+0x30>
 81087d6:	6063      	str	r3, [r4, #4]
 81087d8:	6014      	str	r4, [r2, #0]
 81087da:	b003      	add	sp, #12
 81087dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81087e0:	f000 b90e 	b.w	8108a00 <__malloc_unlock>
 81087e4:	42a3      	cmp	r3, r4
 81087e6:	d908      	bls.n	81087fa <_free_r+0x46>
 81087e8:	6825      	ldr	r5, [r4, #0]
 81087ea:	1961      	adds	r1, r4, r5
 81087ec:	428b      	cmp	r3, r1
 81087ee:	bf01      	itttt	eq
 81087f0:	6819      	ldreq	r1, [r3, #0]
 81087f2:	685b      	ldreq	r3, [r3, #4]
 81087f4:	1949      	addeq	r1, r1, r5
 81087f6:	6021      	streq	r1, [r4, #0]
 81087f8:	e7ed      	b.n	81087d6 <_free_r+0x22>
 81087fa:	461a      	mov	r2, r3
 81087fc:	685b      	ldr	r3, [r3, #4]
 81087fe:	b10b      	cbz	r3, 8108804 <_free_r+0x50>
 8108800:	42a3      	cmp	r3, r4
 8108802:	d9fa      	bls.n	81087fa <_free_r+0x46>
 8108804:	6811      	ldr	r1, [r2, #0]
 8108806:	1855      	adds	r5, r2, r1
 8108808:	42a5      	cmp	r5, r4
 810880a:	d10b      	bne.n	8108824 <_free_r+0x70>
 810880c:	6824      	ldr	r4, [r4, #0]
 810880e:	4421      	add	r1, r4
 8108810:	1854      	adds	r4, r2, r1
 8108812:	42a3      	cmp	r3, r4
 8108814:	6011      	str	r1, [r2, #0]
 8108816:	d1e0      	bne.n	81087da <_free_r+0x26>
 8108818:	681c      	ldr	r4, [r3, #0]
 810881a:	685b      	ldr	r3, [r3, #4]
 810881c:	6053      	str	r3, [r2, #4]
 810881e:	4421      	add	r1, r4
 8108820:	6011      	str	r1, [r2, #0]
 8108822:	e7da      	b.n	81087da <_free_r+0x26>
 8108824:	d902      	bls.n	810882c <_free_r+0x78>
 8108826:	230c      	movs	r3, #12
 8108828:	6003      	str	r3, [r0, #0]
 810882a:	e7d6      	b.n	81087da <_free_r+0x26>
 810882c:	6825      	ldr	r5, [r4, #0]
 810882e:	1961      	adds	r1, r4, r5
 8108830:	428b      	cmp	r3, r1
 8108832:	bf04      	itt	eq
 8108834:	6819      	ldreq	r1, [r3, #0]
 8108836:	685b      	ldreq	r3, [r3, #4]
 8108838:	6063      	str	r3, [r4, #4]
 810883a:	bf04      	itt	eq
 810883c:	1949      	addeq	r1, r1, r5
 810883e:	6021      	streq	r1, [r4, #0]
 8108840:	6054      	str	r4, [r2, #4]
 8108842:	e7ca      	b.n	81087da <_free_r+0x26>
 8108844:	b003      	add	sp, #12
 8108846:	bd30      	pop	{r4, r5, pc}
 8108848:	100001e4 	.word	0x100001e4

0810884c <sbrk_aligned>:
 810884c:	b570      	push	{r4, r5, r6, lr}
 810884e:	4e0e      	ldr	r6, [pc, #56]	; (8108888 <sbrk_aligned+0x3c>)
 8108850:	460c      	mov	r4, r1
 8108852:	6831      	ldr	r1, [r6, #0]
 8108854:	4605      	mov	r5, r0
 8108856:	b911      	cbnz	r1, 810885e <sbrk_aligned+0x12>
 8108858:	f000 f8bc 	bl	81089d4 <_sbrk_r>
 810885c:	6030      	str	r0, [r6, #0]
 810885e:	4621      	mov	r1, r4
 8108860:	4628      	mov	r0, r5
 8108862:	f000 f8b7 	bl	81089d4 <_sbrk_r>
 8108866:	1c43      	adds	r3, r0, #1
 8108868:	d00a      	beq.n	8108880 <sbrk_aligned+0x34>
 810886a:	1cc4      	adds	r4, r0, #3
 810886c:	f024 0403 	bic.w	r4, r4, #3
 8108870:	42a0      	cmp	r0, r4
 8108872:	d007      	beq.n	8108884 <sbrk_aligned+0x38>
 8108874:	1a21      	subs	r1, r4, r0
 8108876:	4628      	mov	r0, r5
 8108878:	f000 f8ac 	bl	81089d4 <_sbrk_r>
 810887c:	3001      	adds	r0, #1
 810887e:	d101      	bne.n	8108884 <sbrk_aligned+0x38>
 8108880:	f04f 34ff 	mov.w	r4, #4294967295
 8108884:	4620      	mov	r0, r4
 8108886:	bd70      	pop	{r4, r5, r6, pc}
 8108888:	100001e8 	.word	0x100001e8

0810888c <_malloc_r>:
 810888c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108890:	1ccd      	adds	r5, r1, #3
 8108892:	f025 0503 	bic.w	r5, r5, #3
 8108896:	3508      	adds	r5, #8
 8108898:	2d0c      	cmp	r5, #12
 810889a:	bf38      	it	cc
 810889c:	250c      	movcc	r5, #12
 810889e:	2d00      	cmp	r5, #0
 81088a0:	4607      	mov	r7, r0
 81088a2:	db01      	blt.n	81088a8 <_malloc_r+0x1c>
 81088a4:	42a9      	cmp	r1, r5
 81088a6:	d905      	bls.n	81088b4 <_malloc_r+0x28>
 81088a8:	230c      	movs	r3, #12
 81088aa:	603b      	str	r3, [r7, #0]
 81088ac:	2600      	movs	r6, #0
 81088ae:	4630      	mov	r0, r6
 81088b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81088b4:	4e2e      	ldr	r6, [pc, #184]	; (8108970 <_malloc_r+0xe4>)
 81088b6:	f000 f89d 	bl	81089f4 <__malloc_lock>
 81088ba:	6833      	ldr	r3, [r6, #0]
 81088bc:	461c      	mov	r4, r3
 81088be:	bb34      	cbnz	r4, 810890e <_malloc_r+0x82>
 81088c0:	4629      	mov	r1, r5
 81088c2:	4638      	mov	r0, r7
 81088c4:	f7ff ffc2 	bl	810884c <sbrk_aligned>
 81088c8:	1c43      	adds	r3, r0, #1
 81088ca:	4604      	mov	r4, r0
 81088cc:	d14d      	bne.n	810896a <_malloc_r+0xde>
 81088ce:	6834      	ldr	r4, [r6, #0]
 81088d0:	4626      	mov	r6, r4
 81088d2:	2e00      	cmp	r6, #0
 81088d4:	d140      	bne.n	8108958 <_malloc_r+0xcc>
 81088d6:	6823      	ldr	r3, [r4, #0]
 81088d8:	4631      	mov	r1, r6
 81088da:	4638      	mov	r0, r7
 81088dc:	eb04 0803 	add.w	r8, r4, r3
 81088e0:	f000 f878 	bl	81089d4 <_sbrk_r>
 81088e4:	4580      	cmp	r8, r0
 81088e6:	d13a      	bne.n	810895e <_malloc_r+0xd2>
 81088e8:	6821      	ldr	r1, [r4, #0]
 81088ea:	3503      	adds	r5, #3
 81088ec:	1a6d      	subs	r5, r5, r1
 81088ee:	f025 0503 	bic.w	r5, r5, #3
 81088f2:	3508      	adds	r5, #8
 81088f4:	2d0c      	cmp	r5, #12
 81088f6:	bf38      	it	cc
 81088f8:	250c      	movcc	r5, #12
 81088fa:	4629      	mov	r1, r5
 81088fc:	4638      	mov	r0, r7
 81088fe:	f7ff ffa5 	bl	810884c <sbrk_aligned>
 8108902:	3001      	adds	r0, #1
 8108904:	d02b      	beq.n	810895e <_malloc_r+0xd2>
 8108906:	6823      	ldr	r3, [r4, #0]
 8108908:	442b      	add	r3, r5
 810890a:	6023      	str	r3, [r4, #0]
 810890c:	e00e      	b.n	810892c <_malloc_r+0xa0>
 810890e:	6822      	ldr	r2, [r4, #0]
 8108910:	1b52      	subs	r2, r2, r5
 8108912:	d41e      	bmi.n	8108952 <_malloc_r+0xc6>
 8108914:	2a0b      	cmp	r2, #11
 8108916:	d916      	bls.n	8108946 <_malloc_r+0xba>
 8108918:	1961      	adds	r1, r4, r5
 810891a:	42a3      	cmp	r3, r4
 810891c:	6025      	str	r5, [r4, #0]
 810891e:	bf18      	it	ne
 8108920:	6059      	strne	r1, [r3, #4]
 8108922:	6863      	ldr	r3, [r4, #4]
 8108924:	bf08      	it	eq
 8108926:	6031      	streq	r1, [r6, #0]
 8108928:	5162      	str	r2, [r4, r5]
 810892a:	604b      	str	r3, [r1, #4]
 810892c:	4638      	mov	r0, r7
 810892e:	f104 060b 	add.w	r6, r4, #11
 8108932:	f000 f865 	bl	8108a00 <__malloc_unlock>
 8108936:	f026 0607 	bic.w	r6, r6, #7
 810893a:	1d23      	adds	r3, r4, #4
 810893c:	1af2      	subs	r2, r6, r3
 810893e:	d0b6      	beq.n	81088ae <_malloc_r+0x22>
 8108940:	1b9b      	subs	r3, r3, r6
 8108942:	50a3      	str	r3, [r4, r2]
 8108944:	e7b3      	b.n	81088ae <_malloc_r+0x22>
 8108946:	6862      	ldr	r2, [r4, #4]
 8108948:	42a3      	cmp	r3, r4
 810894a:	bf0c      	ite	eq
 810894c:	6032      	streq	r2, [r6, #0]
 810894e:	605a      	strne	r2, [r3, #4]
 8108950:	e7ec      	b.n	810892c <_malloc_r+0xa0>
 8108952:	4623      	mov	r3, r4
 8108954:	6864      	ldr	r4, [r4, #4]
 8108956:	e7b2      	b.n	81088be <_malloc_r+0x32>
 8108958:	4634      	mov	r4, r6
 810895a:	6876      	ldr	r6, [r6, #4]
 810895c:	e7b9      	b.n	81088d2 <_malloc_r+0x46>
 810895e:	230c      	movs	r3, #12
 8108960:	603b      	str	r3, [r7, #0]
 8108962:	4638      	mov	r0, r7
 8108964:	f000 f84c 	bl	8108a00 <__malloc_unlock>
 8108968:	e7a1      	b.n	81088ae <_malloc_r+0x22>
 810896a:	6025      	str	r5, [r4, #0]
 810896c:	e7de      	b.n	810892c <_malloc_r+0xa0>
 810896e:	bf00      	nop
 8108970:	100001e4 	.word	0x100001e4

08108974 <_realloc_r>:
 8108974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108978:	4680      	mov	r8, r0
 810897a:	4614      	mov	r4, r2
 810897c:	460e      	mov	r6, r1
 810897e:	b921      	cbnz	r1, 810898a <_realloc_r+0x16>
 8108980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108984:	4611      	mov	r1, r2
 8108986:	f7ff bf81 	b.w	810888c <_malloc_r>
 810898a:	b92a      	cbnz	r2, 8108998 <_realloc_r+0x24>
 810898c:	f7ff ff12 	bl	81087b4 <_free_r>
 8108990:	4625      	mov	r5, r4
 8108992:	4628      	mov	r0, r5
 8108994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108998:	f000 f838 	bl	8108a0c <_malloc_usable_size_r>
 810899c:	4284      	cmp	r4, r0
 810899e:	4607      	mov	r7, r0
 81089a0:	d802      	bhi.n	81089a8 <_realloc_r+0x34>
 81089a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 81089a6:	d812      	bhi.n	81089ce <_realloc_r+0x5a>
 81089a8:	4621      	mov	r1, r4
 81089aa:	4640      	mov	r0, r8
 81089ac:	f7ff ff6e 	bl	810888c <_malloc_r>
 81089b0:	4605      	mov	r5, r0
 81089b2:	2800      	cmp	r0, #0
 81089b4:	d0ed      	beq.n	8108992 <_realloc_r+0x1e>
 81089b6:	42bc      	cmp	r4, r7
 81089b8:	4622      	mov	r2, r4
 81089ba:	4631      	mov	r1, r6
 81089bc:	bf28      	it	cs
 81089be:	463a      	movcs	r2, r7
 81089c0:	f7ff fed0 	bl	8108764 <memcpy>
 81089c4:	4631      	mov	r1, r6
 81089c6:	4640      	mov	r0, r8
 81089c8:	f7ff fef4 	bl	81087b4 <_free_r>
 81089cc:	e7e1      	b.n	8108992 <_realloc_r+0x1e>
 81089ce:	4635      	mov	r5, r6
 81089d0:	e7df      	b.n	8108992 <_realloc_r+0x1e>
	...

081089d4 <_sbrk_r>:
 81089d4:	b538      	push	{r3, r4, r5, lr}
 81089d6:	4d06      	ldr	r5, [pc, #24]	; (81089f0 <_sbrk_r+0x1c>)
 81089d8:	2300      	movs	r3, #0
 81089da:	4604      	mov	r4, r0
 81089dc:	4608      	mov	r0, r1
 81089de:	602b      	str	r3, [r5, #0]
 81089e0:	f7f9 f876 	bl	8101ad0 <_sbrk>
 81089e4:	1c43      	adds	r3, r0, #1
 81089e6:	d102      	bne.n	81089ee <_sbrk_r+0x1a>
 81089e8:	682b      	ldr	r3, [r5, #0]
 81089ea:	b103      	cbz	r3, 81089ee <_sbrk_r+0x1a>
 81089ec:	6023      	str	r3, [r4, #0]
 81089ee:	bd38      	pop	{r3, r4, r5, pc}
 81089f0:	100001ec 	.word	0x100001ec

081089f4 <__malloc_lock>:
 81089f4:	4801      	ldr	r0, [pc, #4]	; (81089fc <__malloc_lock+0x8>)
 81089f6:	f000 b811 	b.w	8108a1c <__retarget_lock_acquire_recursive>
 81089fa:	bf00      	nop
 81089fc:	100001f0 	.word	0x100001f0

08108a00 <__malloc_unlock>:
 8108a00:	4801      	ldr	r0, [pc, #4]	; (8108a08 <__malloc_unlock+0x8>)
 8108a02:	f000 b80c 	b.w	8108a1e <__retarget_lock_release_recursive>
 8108a06:	bf00      	nop
 8108a08:	100001f0 	.word	0x100001f0

08108a0c <_malloc_usable_size_r>:
 8108a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8108a10:	1f18      	subs	r0, r3, #4
 8108a12:	2b00      	cmp	r3, #0
 8108a14:	bfbc      	itt	lt
 8108a16:	580b      	ldrlt	r3, [r1, r0]
 8108a18:	18c0      	addlt	r0, r0, r3
 8108a1a:	4770      	bx	lr

08108a1c <__retarget_lock_acquire_recursive>:
 8108a1c:	4770      	bx	lr

08108a1e <__retarget_lock_release_recursive>:
 8108a1e:	4770      	bx	lr

08108a20 <pow>:
 8108a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108a22:	ed2d 8b02 	vpush	{d8}
 8108a26:	eeb0 8a40 	vmov.f32	s16, s0
 8108a2a:	eef0 8a60 	vmov.f32	s17, s1
 8108a2e:	ec55 4b11 	vmov	r4, r5, d1
 8108a32:	f000 f865 	bl	8108b00 <__ieee754_pow>
 8108a36:	4622      	mov	r2, r4
 8108a38:	462b      	mov	r3, r5
 8108a3a:	4620      	mov	r0, r4
 8108a3c:	4629      	mov	r1, r5
 8108a3e:	ec57 6b10 	vmov	r6, r7, d0
 8108a42:	f7f8 f8fb 	bl	8100c3c <__aeabi_dcmpun>
 8108a46:	2800      	cmp	r0, #0
 8108a48:	d13b      	bne.n	8108ac2 <pow+0xa2>
 8108a4a:	ec51 0b18 	vmov	r0, r1, d8
 8108a4e:	2200      	movs	r2, #0
 8108a50:	2300      	movs	r3, #0
 8108a52:	f7f8 f8c1 	bl	8100bd8 <__aeabi_dcmpeq>
 8108a56:	b1b8      	cbz	r0, 8108a88 <pow+0x68>
 8108a58:	2200      	movs	r2, #0
 8108a5a:	2300      	movs	r3, #0
 8108a5c:	4620      	mov	r0, r4
 8108a5e:	4629      	mov	r1, r5
 8108a60:	f7f8 f8ba 	bl	8100bd8 <__aeabi_dcmpeq>
 8108a64:	2800      	cmp	r0, #0
 8108a66:	d146      	bne.n	8108af6 <pow+0xd6>
 8108a68:	ec45 4b10 	vmov	d0, r4, r5
 8108a6c:	f000 fe61 	bl	8109732 <finite>
 8108a70:	b338      	cbz	r0, 8108ac2 <pow+0xa2>
 8108a72:	2200      	movs	r2, #0
 8108a74:	2300      	movs	r3, #0
 8108a76:	4620      	mov	r0, r4
 8108a78:	4629      	mov	r1, r5
 8108a7a:	f7f8 f8b7 	bl	8100bec <__aeabi_dcmplt>
 8108a7e:	b300      	cbz	r0, 8108ac2 <pow+0xa2>
 8108a80:	f7ff fb2e 	bl	81080e0 <__errno>
 8108a84:	2322      	movs	r3, #34	; 0x22
 8108a86:	e01b      	b.n	8108ac0 <pow+0xa0>
 8108a88:	ec47 6b10 	vmov	d0, r6, r7
 8108a8c:	f000 fe51 	bl	8109732 <finite>
 8108a90:	b9e0      	cbnz	r0, 8108acc <pow+0xac>
 8108a92:	eeb0 0a48 	vmov.f32	s0, s16
 8108a96:	eef0 0a68 	vmov.f32	s1, s17
 8108a9a:	f000 fe4a 	bl	8109732 <finite>
 8108a9e:	b1a8      	cbz	r0, 8108acc <pow+0xac>
 8108aa0:	ec45 4b10 	vmov	d0, r4, r5
 8108aa4:	f000 fe45 	bl	8109732 <finite>
 8108aa8:	b180      	cbz	r0, 8108acc <pow+0xac>
 8108aaa:	4632      	mov	r2, r6
 8108aac:	463b      	mov	r3, r7
 8108aae:	4630      	mov	r0, r6
 8108ab0:	4639      	mov	r1, r7
 8108ab2:	f7f8 f8c3 	bl	8100c3c <__aeabi_dcmpun>
 8108ab6:	2800      	cmp	r0, #0
 8108ab8:	d0e2      	beq.n	8108a80 <pow+0x60>
 8108aba:	f7ff fb11 	bl	81080e0 <__errno>
 8108abe:	2321      	movs	r3, #33	; 0x21
 8108ac0:	6003      	str	r3, [r0, #0]
 8108ac2:	ecbd 8b02 	vpop	{d8}
 8108ac6:	ec47 6b10 	vmov	d0, r6, r7
 8108aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108acc:	2200      	movs	r2, #0
 8108ace:	2300      	movs	r3, #0
 8108ad0:	4630      	mov	r0, r6
 8108ad2:	4639      	mov	r1, r7
 8108ad4:	f7f8 f880 	bl	8100bd8 <__aeabi_dcmpeq>
 8108ad8:	2800      	cmp	r0, #0
 8108ada:	d0f2      	beq.n	8108ac2 <pow+0xa2>
 8108adc:	eeb0 0a48 	vmov.f32	s0, s16
 8108ae0:	eef0 0a68 	vmov.f32	s1, s17
 8108ae4:	f000 fe25 	bl	8109732 <finite>
 8108ae8:	2800      	cmp	r0, #0
 8108aea:	d0ea      	beq.n	8108ac2 <pow+0xa2>
 8108aec:	ec45 4b10 	vmov	d0, r4, r5
 8108af0:	f000 fe1f 	bl	8109732 <finite>
 8108af4:	e7c3      	b.n	8108a7e <pow+0x5e>
 8108af6:	4f01      	ldr	r7, [pc, #4]	; (8108afc <pow+0xdc>)
 8108af8:	2600      	movs	r6, #0
 8108afa:	e7e2      	b.n	8108ac2 <pow+0xa2>
 8108afc:	3ff00000 	.word	0x3ff00000

08108b00 <__ieee754_pow>:
 8108b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108b04:	ed2d 8b06 	vpush	{d8-d10}
 8108b08:	b089      	sub	sp, #36	; 0x24
 8108b0a:	ed8d 1b00 	vstr	d1, [sp]
 8108b0e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8108b12:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8108b16:	ea58 0102 	orrs.w	r1, r8, r2
 8108b1a:	ec57 6b10 	vmov	r6, r7, d0
 8108b1e:	d115      	bne.n	8108b4c <__ieee754_pow+0x4c>
 8108b20:	19b3      	adds	r3, r6, r6
 8108b22:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8108b26:	4152      	adcs	r2, r2
 8108b28:	4299      	cmp	r1, r3
 8108b2a:	4b89      	ldr	r3, [pc, #548]	; (8108d50 <__ieee754_pow+0x250>)
 8108b2c:	4193      	sbcs	r3, r2
 8108b2e:	f080 84d2 	bcs.w	81094d6 <__ieee754_pow+0x9d6>
 8108b32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8108b36:	4630      	mov	r0, r6
 8108b38:	4639      	mov	r1, r7
 8108b3a:	f7f7 fc2f 	bl	810039c <__adddf3>
 8108b3e:	ec41 0b10 	vmov	d0, r0, r1
 8108b42:	b009      	add	sp, #36	; 0x24
 8108b44:	ecbd 8b06 	vpop	{d8-d10}
 8108b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108b4c:	4b81      	ldr	r3, [pc, #516]	; (8108d54 <__ieee754_pow+0x254>)
 8108b4e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8108b52:	429c      	cmp	r4, r3
 8108b54:	ee10 aa10 	vmov	sl, s0
 8108b58:	463d      	mov	r5, r7
 8108b5a:	dc06      	bgt.n	8108b6a <__ieee754_pow+0x6a>
 8108b5c:	d101      	bne.n	8108b62 <__ieee754_pow+0x62>
 8108b5e:	2e00      	cmp	r6, #0
 8108b60:	d1e7      	bne.n	8108b32 <__ieee754_pow+0x32>
 8108b62:	4598      	cmp	r8, r3
 8108b64:	dc01      	bgt.n	8108b6a <__ieee754_pow+0x6a>
 8108b66:	d10f      	bne.n	8108b88 <__ieee754_pow+0x88>
 8108b68:	b172      	cbz	r2, 8108b88 <__ieee754_pow+0x88>
 8108b6a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8108b6e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8108b72:	ea55 050a 	orrs.w	r5, r5, sl
 8108b76:	d1dc      	bne.n	8108b32 <__ieee754_pow+0x32>
 8108b78:	e9dd 3200 	ldrd	r3, r2, [sp]
 8108b7c:	18db      	adds	r3, r3, r3
 8108b7e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8108b82:	4152      	adcs	r2, r2
 8108b84:	429d      	cmp	r5, r3
 8108b86:	e7d0      	b.n	8108b2a <__ieee754_pow+0x2a>
 8108b88:	2d00      	cmp	r5, #0
 8108b8a:	da3b      	bge.n	8108c04 <__ieee754_pow+0x104>
 8108b8c:	4b72      	ldr	r3, [pc, #456]	; (8108d58 <__ieee754_pow+0x258>)
 8108b8e:	4598      	cmp	r8, r3
 8108b90:	dc51      	bgt.n	8108c36 <__ieee754_pow+0x136>
 8108b92:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8108b96:	4598      	cmp	r8, r3
 8108b98:	f340 84ac 	ble.w	81094f4 <__ieee754_pow+0x9f4>
 8108b9c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8108ba0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8108ba4:	2b14      	cmp	r3, #20
 8108ba6:	dd0f      	ble.n	8108bc8 <__ieee754_pow+0xc8>
 8108ba8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8108bac:	fa22 f103 	lsr.w	r1, r2, r3
 8108bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8108bb4:	4293      	cmp	r3, r2
 8108bb6:	f040 849d 	bne.w	81094f4 <__ieee754_pow+0x9f4>
 8108bba:	f001 0101 	and.w	r1, r1, #1
 8108bbe:	f1c1 0302 	rsb	r3, r1, #2
 8108bc2:	9304      	str	r3, [sp, #16]
 8108bc4:	b182      	cbz	r2, 8108be8 <__ieee754_pow+0xe8>
 8108bc6:	e05f      	b.n	8108c88 <__ieee754_pow+0x188>
 8108bc8:	2a00      	cmp	r2, #0
 8108bca:	d15b      	bne.n	8108c84 <__ieee754_pow+0x184>
 8108bcc:	f1c3 0314 	rsb	r3, r3, #20
 8108bd0:	fa48 f103 	asr.w	r1, r8, r3
 8108bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8108bd8:	4543      	cmp	r3, r8
 8108bda:	f040 8488 	bne.w	81094ee <__ieee754_pow+0x9ee>
 8108bde:	f001 0101 	and.w	r1, r1, #1
 8108be2:	f1c1 0302 	rsb	r3, r1, #2
 8108be6:	9304      	str	r3, [sp, #16]
 8108be8:	4b5c      	ldr	r3, [pc, #368]	; (8108d5c <__ieee754_pow+0x25c>)
 8108bea:	4598      	cmp	r8, r3
 8108bec:	d132      	bne.n	8108c54 <__ieee754_pow+0x154>
 8108bee:	f1b9 0f00 	cmp.w	r9, #0
 8108bf2:	f280 8478 	bge.w	81094e6 <__ieee754_pow+0x9e6>
 8108bf6:	4959      	ldr	r1, [pc, #356]	; (8108d5c <__ieee754_pow+0x25c>)
 8108bf8:	4632      	mov	r2, r6
 8108bfa:	463b      	mov	r3, r7
 8108bfc:	2000      	movs	r0, #0
 8108bfe:	f7f7 fead 	bl	810095c <__aeabi_ddiv>
 8108c02:	e79c      	b.n	8108b3e <__ieee754_pow+0x3e>
 8108c04:	2300      	movs	r3, #0
 8108c06:	9304      	str	r3, [sp, #16]
 8108c08:	2a00      	cmp	r2, #0
 8108c0a:	d13d      	bne.n	8108c88 <__ieee754_pow+0x188>
 8108c0c:	4b51      	ldr	r3, [pc, #324]	; (8108d54 <__ieee754_pow+0x254>)
 8108c0e:	4598      	cmp	r8, r3
 8108c10:	d1ea      	bne.n	8108be8 <__ieee754_pow+0xe8>
 8108c12:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8108c16:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8108c1a:	ea53 030a 	orrs.w	r3, r3, sl
 8108c1e:	f000 845a 	beq.w	81094d6 <__ieee754_pow+0x9d6>
 8108c22:	4b4f      	ldr	r3, [pc, #316]	; (8108d60 <__ieee754_pow+0x260>)
 8108c24:	429c      	cmp	r4, r3
 8108c26:	dd08      	ble.n	8108c3a <__ieee754_pow+0x13a>
 8108c28:	f1b9 0f00 	cmp.w	r9, #0
 8108c2c:	f2c0 8457 	blt.w	81094de <__ieee754_pow+0x9de>
 8108c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8108c34:	e783      	b.n	8108b3e <__ieee754_pow+0x3e>
 8108c36:	2302      	movs	r3, #2
 8108c38:	e7e5      	b.n	8108c06 <__ieee754_pow+0x106>
 8108c3a:	f1b9 0f00 	cmp.w	r9, #0
 8108c3e:	f04f 0000 	mov.w	r0, #0
 8108c42:	f04f 0100 	mov.w	r1, #0
 8108c46:	f6bf af7a 	bge.w	8108b3e <__ieee754_pow+0x3e>
 8108c4a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8108c4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8108c52:	e774      	b.n	8108b3e <__ieee754_pow+0x3e>
 8108c54:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8108c58:	d106      	bne.n	8108c68 <__ieee754_pow+0x168>
 8108c5a:	4632      	mov	r2, r6
 8108c5c:	463b      	mov	r3, r7
 8108c5e:	4630      	mov	r0, r6
 8108c60:	4639      	mov	r1, r7
 8108c62:	f7f7 fd51 	bl	8100708 <__aeabi_dmul>
 8108c66:	e76a      	b.n	8108b3e <__ieee754_pow+0x3e>
 8108c68:	4b3e      	ldr	r3, [pc, #248]	; (8108d64 <__ieee754_pow+0x264>)
 8108c6a:	4599      	cmp	r9, r3
 8108c6c:	d10c      	bne.n	8108c88 <__ieee754_pow+0x188>
 8108c6e:	2d00      	cmp	r5, #0
 8108c70:	db0a      	blt.n	8108c88 <__ieee754_pow+0x188>
 8108c72:	ec47 6b10 	vmov	d0, r6, r7
 8108c76:	b009      	add	sp, #36	; 0x24
 8108c78:	ecbd 8b06 	vpop	{d8-d10}
 8108c7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108c80:	f000 bc6c 	b.w	810955c <__ieee754_sqrt>
 8108c84:	2300      	movs	r3, #0
 8108c86:	9304      	str	r3, [sp, #16]
 8108c88:	ec47 6b10 	vmov	d0, r6, r7
 8108c8c:	f000 fd48 	bl	8109720 <fabs>
 8108c90:	ec51 0b10 	vmov	r0, r1, d0
 8108c94:	f1ba 0f00 	cmp.w	sl, #0
 8108c98:	d129      	bne.n	8108cee <__ieee754_pow+0x1ee>
 8108c9a:	b124      	cbz	r4, 8108ca6 <__ieee754_pow+0x1a6>
 8108c9c:	4b2f      	ldr	r3, [pc, #188]	; (8108d5c <__ieee754_pow+0x25c>)
 8108c9e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8108ca2:	429a      	cmp	r2, r3
 8108ca4:	d123      	bne.n	8108cee <__ieee754_pow+0x1ee>
 8108ca6:	f1b9 0f00 	cmp.w	r9, #0
 8108caa:	da05      	bge.n	8108cb8 <__ieee754_pow+0x1b8>
 8108cac:	4602      	mov	r2, r0
 8108cae:	460b      	mov	r3, r1
 8108cb0:	2000      	movs	r0, #0
 8108cb2:	492a      	ldr	r1, [pc, #168]	; (8108d5c <__ieee754_pow+0x25c>)
 8108cb4:	f7f7 fe52 	bl	810095c <__aeabi_ddiv>
 8108cb8:	2d00      	cmp	r5, #0
 8108cba:	f6bf af40 	bge.w	8108b3e <__ieee754_pow+0x3e>
 8108cbe:	9b04      	ldr	r3, [sp, #16]
 8108cc0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8108cc4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8108cc8:	4323      	orrs	r3, r4
 8108cca:	d108      	bne.n	8108cde <__ieee754_pow+0x1de>
 8108ccc:	4602      	mov	r2, r0
 8108cce:	460b      	mov	r3, r1
 8108cd0:	4610      	mov	r0, r2
 8108cd2:	4619      	mov	r1, r3
 8108cd4:	f7f7 fb60 	bl	8100398 <__aeabi_dsub>
 8108cd8:	4602      	mov	r2, r0
 8108cda:	460b      	mov	r3, r1
 8108cdc:	e78f      	b.n	8108bfe <__ieee754_pow+0xfe>
 8108cde:	9b04      	ldr	r3, [sp, #16]
 8108ce0:	2b01      	cmp	r3, #1
 8108ce2:	f47f af2c 	bne.w	8108b3e <__ieee754_pow+0x3e>
 8108ce6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8108cea:	4619      	mov	r1, r3
 8108cec:	e727      	b.n	8108b3e <__ieee754_pow+0x3e>
 8108cee:	0feb      	lsrs	r3, r5, #31
 8108cf0:	3b01      	subs	r3, #1
 8108cf2:	9306      	str	r3, [sp, #24]
 8108cf4:	9a06      	ldr	r2, [sp, #24]
 8108cf6:	9b04      	ldr	r3, [sp, #16]
 8108cf8:	4313      	orrs	r3, r2
 8108cfa:	d102      	bne.n	8108d02 <__ieee754_pow+0x202>
 8108cfc:	4632      	mov	r2, r6
 8108cfe:	463b      	mov	r3, r7
 8108d00:	e7e6      	b.n	8108cd0 <__ieee754_pow+0x1d0>
 8108d02:	4b19      	ldr	r3, [pc, #100]	; (8108d68 <__ieee754_pow+0x268>)
 8108d04:	4598      	cmp	r8, r3
 8108d06:	f340 80fb 	ble.w	8108f00 <__ieee754_pow+0x400>
 8108d0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8108d0e:	4598      	cmp	r8, r3
 8108d10:	4b13      	ldr	r3, [pc, #76]	; (8108d60 <__ieee754_pow+0x260>)
 8108d12:	dd0c      	ble.n	8108d2e <__ieee754_pow+0x22e>
 8108d14:	429c      	cmp	r4, r3
 8108d16:	dc0f      	bgt.n	8108d38 <__ieee754_pow+0x238>
 8108d18:	f1b9 0f00 	cmp.w	r9, #0
 8108d1c:	da0f      	bge.n	8108d3e <__ieee754_pow+0x23e>
 8108d1e:	2000      	movs	r0, #0
 8108d20:	b009      	add	sp, #36	; 0x24
 8108d22:	ecbd 8b06 	vpop	{d8-d10}
 8108d26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108d2a:	f000 bcf0 	b.w	810970e <__math_oflow>
 8108d2e:	429c      	cmp	r4, r3
 8108d30:	dbf2      	blt.n	8108d18 <__ieee754_pow+0x218>
 8108d32:	4b0a      	ldr	r3, [pc, #40]	; (8108d5c <__ieee754_pow+0x25c>)
 8108d34:	429c      	cmp	r4, r3
 8108d36:	dd19      	ble.n	8108d6c <__ieee754_pow+0x26c>
 8108d38:	f1b9 0f00 	cmp.w	r9, #0
 8108d3c:	dcef      	bgt.n	8108d1e <__ieee754_pow+0x21e>
 8108d3e:	2000      	movs	r0, #0
 8108d40:	b009      	add	sp, #36	; 0x24
 8108d42:	ecbd 8b06 	vpop	{d8-d10}
 8108d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108d4a:	f000 bcd7 	b.w	81096fc <__math_uflow>
 8108d4e:	bf00      	nop
 8108d50:	fff00000 	.word	0xfff00000
 8108d54:	7ff00000 	.word	0x7ff00000
 8108d58:	433fffff 	.word	0x433fffff
 8108d5c:	3ff00000 	.word	0x3ff00000
 8108d60:	3fefffff 	.word	0x3fefffff
 8108d64:	3fe00000 	.word	0x3fe00000
 8108d68:	41e00000 	.word	0x41e00000
 8108d6c:	4b60      	ldr	r3, [pc, #384]	; (8108ef0 <__ieee754_pow+0x3f0>)
 8108d6e:	2200      	movs	r2, #0
 8108d70:	f7f7 fb12 	bl	8100398 <__aeabi_dsub>
 8108d74:	a354      	add	r3, pc, #336	; (adr r3, 8108ec8 <__ieee754_pow+0x3c8>)
 8108d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d7a:	4604      	mov	r4, r0
 8108d7c:	460d      	mov	r5, r1
 8108d7e:	f7f7 fcc3 	bl	8100708 <__aeabi_dmul>
 8108d82:	a353      	add	r3, pc, #332	; (adr r3, 8108ed0 <__ieee754_pow+0x3d0>)
 8108d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108d88:	4606      	mov	r6, r0
 8108d8a:	460f      	mov	r7, r1
 8108d8c:	4620      	mov	r0, r4
 8108d8e:	4629      	mov	r1, r5
 8108d90:	f7f7 fcba 	bl	8100708 <__aeabi_dmul>
 8108d94:	4b57      	ldr	r3, [pc, #348]	; (8108ef4 <__ieee754_pow+0x3f4>)
 8108d96:	4682      	mov	sl, r0
 8108d98:	468b      	mov	fp, r1
 8108d9a:	2200      	movs	r2, #0
 8108d9c:	4620      	mov	r0, r4
 8108d9e:	4629      	mov	r1, r5
 8108da0:	f7f7 fcb2 	bl	8100708 <__aeabi_dmul>
 8108da4:	4602      	mov	r2, r0
 8108da6:	460b      	mov	r3, r1
 8108da8:	a14b      	add	r1, pc, #300	; (adr r1, 8108ed8 <__ieee754_pow+0x3d8>)
 8108daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108dae:	f7f7 faf3 	bl	8100398 <__aeabi_dsub>
 8108db2:	4622      	mov	r2, r4
 8108db4:	462b      	mov	r3, r5
 8108db6:	f7f7 fca7 	bl	8100708 <__aeabi_dmul>
 8108dba:	4602      	mov	r2, r0
 8108dbc:	460b      	mov	r3, r1
 8108dbe:	2000      	movs	r0, #0
 8108dc0:	494d      	ldr	r1, [pc, #308]	; (8108ef8 <__ieee754_pow+0x3f8>)
 8108dc2:	f7f7 fae9 	bl	8100398 <__aeabi_dsub>
 8108dc6:	4622      	mov	r2, r4
 8108dc8:	4680      	mov	r8, r0
 8108dca:	4689      	mov	r9, r1
 8108dcc:	462b      	mov	r3, r5
 8108dce:	4620      	mov	r0, r4
 8108dd0:	4629      	mov	r1, r5
 8108dd2:	f7f7 fc99 	bl	8100708 <__aeabi_dmul>
 8108dd6:	4602      	mov	r2, r0
 8108dd8:	460b      	mov	r3, r1
 8108dda:	4640      	mov	r0, r8
 8108ddc:	4649      	mov	r1, r9
 8108dde:	f7f7 fc93 	bl	8100708 <__aeabi_dmul>
 8108de2:	a33f      	add	r3, pc, #252	; (adr r3, 8108ee0 <__ieee754_pow+0x3e0>)
 8108de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108de8:	f7f7 fc8e 	bl	8100708 <__aeabi_dmul>
 8108dec:	4602      	mov	r2, r0
 8108dee:	460b      	mov	r3, r1
 8108df0:	4650      	mov	r0, sl
 8108df2:	4659      	mov	r1, fp
 8108df4:	f7f7 fad0 	bl	8100398 <__aeabi_dsub>
 8108df8:	4602      	mov	r2, r0
 8108dfa:	460b      	mov	r3, r1
 8108dfc:	4680      	mov	r8, r0
 8108dfe:	4689      	mov	r9, r1
 8108e00:	4630      	mov	r0, r6
 8108e02:	4639      	mov	r1, r7
 8108e04:	f7f7 faca 	bl	810039c <__adddf3>
 8108e08:	2000      	movs	r0, #0
 8108e0a:	4632      	mov	r2, r6
 8108e0c:	463b      	mov	r3, r7
 8108e0e:	4604      	mov	r4, r0
 8108e10:	460d      	mov	r5, r1
 8108e12:	f7f7 fac1 	bl	8100398 <__aeabi_dsub>
 8108e16:	4602      	mov	r2, r0
 8108e18:	460b      	mov	r3, r1
 8108e1a:	4640      	mov	r0, r8
 8108e1c:	4649      	mov	r1, r9
 8108e1e:	f7f7 fabb 	bl	8100398 <__aeabi_dsub>
 8108e22:	9b04      	ldr	r3, [sp, #16]
 8108e24:	9a06      	ldr	r2, [sp, #24]
 8108e26:	3b01      	subs	r3, #1
 8108e28:	4313      	orrs	r3, r2
 8108e2a:	4682      	mov	sl, r0
 8108e2c:	468b      	mov	fp, r1
 8108e2e:	f040 81e7 	bne.w	8109200 <__ieee754_pow+0x700>
 8108e32:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8108ee8 <__ieee754_pow+0x3e8>
 8108e36:	eeb0 8a47 	vmov.f32	s16, s14
 8108e3a:	eef0 8a67 	vmov.f32	s17, s15
 8108e3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8108e42:	2600      	movs	r6, #0
 8108e44:	4632      	mov	r2, r6
 8108e46:	463b      	mov	r3, r7
 8108e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8108e4c:	f7f7 faa4 	bl	8100398 <__aeabi_dsub>
 8108e50:	4622      	mov	r2, r4
 8108e52:	462b      	mov	r3, r5
 8108e54:	f7f7 fc58 	bl	8100708 <__aeabi_dmul>
 8108e58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8108e5c:	4680      	mov	r8, r0
 8108e5e:	4689      	mov	r9, r1
 8108e60:	4650      	mov	r0, sl
 8108e62:	4659      	mov	r1, fp
 8108e64:	f7f7 fc50 	bl	8100708 <__aeabi_dmul>
 8108e68:	4602      	mov	r2, r0
 8108e6a:	460b      	mov	r3, r1
 8108e6c:	4640      	mov	r0, r8
 8108e6e:	4649      	mov	r1, r9
 8108e70:	f7f7 fa94 	bl	810039c <__adddf3>
 8108e74:	4632      	mov	r2, r6
 8108e76:	463b      	mov	r3, r7
 8108e78:	4680      	mov	r8, r0
 8108e7a:	4689      	mov	r9, r1
 8108e7c:	4620      	mov	r0, r4
 8108e7e:	4629      	mov	r1, r5
 8108e80:	f7f7 fc42 	bl	8100708 <__aeabi_dmul>
 8108e84:	460b      	mov	r3, r1
 8108e86:	4604      	mov	r4, r0
 8108e88:	460d      	mov	r5, r1
 8108e8a:	4602      	mov	r2, r0
 8108e8c:	4649      	mov	r1, r9
 8108e8e:	4640      	mov	r0, r8
 8108e90:	f7f7 fa84 	bl	810039c <__adddf3>
 8108e94:	4b19      	ldr	r3, [pc, #100]	; (8108efc <__ieee754_pow+0x3fc>)
 8108e96:	4299      	cmp	r1, r3
 8108e98:	ec45 4b19 	vmov	d9, r4, r5
 8108e9c:	4606      	mov	r6, r0
 8108e9e:	460f      	mov	r7, r1
 8108ea0:	468b      	mov	fp, r1
 8108ea2:	f340 82f1 	ble.w	8109488 <__ieee754_pow+0x988>
 8108ea6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8108eaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8108eae:	4303      	orrs	r3, r0
 8108eb0:	f000 81e4 	beq.w	810927c <__ieee754_pow+0x77c>
 8108eb4:	ec51 0b18 	vmov	r0, r1, d8
 8108eb8:	2200      	movs	r2, #0
 8108eba:	2300      	movs	r3, #0
 8108ebc:	f7f7 fe96 	bl	8100bec <__aeabi_dcmplt>
 8108ec0:	3800      	subs	r0, #0
 8108ec2:	bf18      	it	ne
 8108ec4:	2001      	movne	r0, #1
 8108ec6:	e72b      	b.n	8108d20 <__ieee754_pow+0x220>
 8108ec8:	60000000 	.word	0x60000000
 8108ecc:	3ff71547 	.word	0x3ff71547
 8108ed0:	f85ddf44 	.word	0xf85ddf44
 8108ed4:	3e54ae0b 	.word	0x3e54ae0b
 8108ed8:	55555555 	.word	0x55555555
 8108edc:	3fd55555 	.word	0x3fd55555
 8108ee0:	652b82fe 	.word	0x652b82fe
 8108ee4:	3ff71547 	.word	0x3ff71547
 8108ee8:	00000000 	.word	0x00000000
 8108eec:	bff00000 	.word	0xbff00000
 8108ef0:	3ff00000 	.word	0x3ff00000
 8108ef4:	3fd00000 	.word	0x3fd00000
 8108ef8:	3fe00000 	.word	0x3fe00000
 8108efc:	408fffff 	.word	0x408fffff
 8108f00:	4bd5      	ldr	r3, [pc, #852]	; (8109258 <__ieee754_pow+0x758>)
 8108f02:	402b      	ands	r3, r5
 8108f04:	2200      	movs	r2, #0
 8108f06:	b92b      	cbnz	r3, 8108f14 <__ieee754_pow+0x414>
 8108f08:	4bd4      	ldr	r3, [pc, #848]	; (810925c <__ieee754_pow+0x75c>)
 8108f0a:	f7f7 fbfd 	bl	8100708 <__aeabi_dmul>
 8108f0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8108f12:	460c      	mov	r4, r1
 8108f14:	1523      	asrs	r3, r4, #20
 8108f16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8108f1a:	4413      	add	r3, r2
 8108f1c:	9305      	str	r3, [sp, #20]
 8108f1e:	4bd0      	ldr	r3, [pc, #832]	; (8109260 <__ieee754_pow+0x760>)
 8108f20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8108f24:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8108f28:	429c      	cmp	r4, r3
 8108f2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8108f2e:	dd08      	ble.n	8108f42 <__ieee754_pow+0x442>
 8108f30:	4bcc      	ldr	r3, [pc, #816]	; (8109264 <__ieee754_pow+0x764>)
 8108f32:	429c      	cmp	r4, r3
 8108f34:	f340 8162 	ble.w	81091fc <__ieee754_pow+0x6fc>
 8108f38:	9b05      	ldr	r3, [sp, #20]
 8108f3a:	3301      	adds	r3, #1
 8108f3c:	9305      	str	r3, [sp, #20]
 8108f3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8108f42:	2400      	movs	r4, #0
 8108f44:	00e3      	lsls	r3, r4, #3
 8108f46:	9307      	str	r3, [sp, #28]
 8108f48:	4bc7      	ldr	r3, [pc, #796]	; (8109268 <__ieee754_pow+0x768>)
 8108f4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8108f4e:	ed93 7b00 	vldr	d7, [r3]
 8108f52:	4629      	mov	r1, r5
 8108f54:	ec53 2b17 	vmov	r2, r3, d7
 8108f58:	eeb0 9a47 	vmov.f32	s18, s14
 8108f5c:	eef0 9a67 	vmov.f32	s19, s15
 8108f60:	4682      	mov	sl, r0
 8108f62:	f7f7 fa19 	bl	8100398 <__aeabi_dsub>
 8108f66:	4652      	mov	r2, sl
 8108f68:	4606      	mov	r6, r0
 8108f6a:	460f      	mov	r7, r1
 8108f6c:	462b      	mov	r3, r5
 8108f6e:	ec51 0b19 	vmov	r0, r1, d9
 8108f72:	f7f7 fa13 	bl	810039c <__adddf3>
 8108f76:	4602      	mov	r2, r0
 8108f78:	460b      	mov	r3, r1
 8108f7a:	2000      	movs	r0, #0
 8108f7c:	49bb      	ldr	r1, [pc, #748]	; (810926c <__ieee754_pow+0x76c>)
 8108f7e:	f7f7 fced 	bl	810095c <__aeabi_ddiv>
 8108f82:	ec41 0b1a 	vmov	d10, r0, r1
 8108f86:	4602      	mov	r2, r0
 8108f88:	460b      	mov	r3, r1
 8108f8a:	4630      	mov	r0, r6
 8108f8c:	4639      	mov	r1, r7
 8108f8e:	f7f7 fbbb 	bl	8100708 <__aeabi_dmul>
 8108f92:	2300      	movs	r3, #0
 8108f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8108f98:	9302      	str	r3, [sp, #8]
 8108f9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8108f9e:	46ab      	mov	fp, r5
 8108fa0:	106d      	asrs	r5, r5, #1
 8108fa2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8108fa6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8108faa:	ec41 0b18 	vmov	d8, r0, r1
 8108fae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8108fb2:	2200      	movs	r2, #0
 8108fb4:	4640      	mov	r0, r8
 8108fb6:	4649      	mov	r1, r9
 8108fb8:	4614      	mov	r4, r2
 8108fba:	461d      	mov	r5, r3
 8108fbc:	f7f7 fba4 	bl	8100708 <__aeabi_dmul>
 8108fc0:	4602      	mov	r2, r0
 8108fc2:	460b      	mov	r3, r1
 8108fc4:	4630      	mov	r0, r6
 8108fc6:	4639      	mov	r1, r7
 8108fc8:	f7f7 f9e6 	bl	8100398 <__aeabi_dsub>
 8108fcc:	ec53 2b19 	vmov	r2, r3, d9
 8108fd0:	4606      	mov	r6, r0
 8108fd2:	460f      	mov	r7, r1
 8108fd4:	4620      	mov	r0, r4
 8108fd6:	4629      	mov	r1, r5
 8108fd8:	f7f7 f9de 	bl	8100398 <__aeabi_dsub>
 8108fdc:	4602      	mov	r2, r0
 8108fde:	460b      	mov	r3, r1
 8108fe0:	4650      	mov	r0, sl
 8108fe2:	4659      	mov	r1, fp
 8108fe4:	f7f7 f9d8 	bl	8100398 <__aeabi_dsub>
 8108fe8:	4642      	mov	r2, r8
 8108fea:	464b      	mov	r3, r9
 8108fec:	f7f7 fb8c 	bl	8100708 <__aeabi_dmul>
 8108ff0:	4602      	mov	r2, r0
 8108ff2:	460b      	mov	r3, r1
 8108ff4:	4630      	mov	r0, r6
 8108ff6:	4639      	mov	r1, r7
 8108ff8:	f7f7 f9ce 	bl	8100398 <__aeabi_dsub>
 8108ffc:	ec53 2b1a 	vmov	r2, r3, d10
 8109000:	f7f7 fb82 	bl	8100708 <__aeabi_dmul>
 8109004:	ec53 2b18 	vmov	r2, r3, d8
 8109008:	ec41 0b19 	vmov	d9, r0, r1
 810900c:	ec51 0b18 	vmov	r0, r1, d8
 8109010:	f7f7 fb7a 	bl	8100708 <__aeabi_dmul>
 8109014:	a37c      	add	r3, pc, #496	; (adr r3, 8109208 <__ieee754_pow+0x708>)
 8109016:	e9d3 2300 	ldrd	r2, r3, [r3]
 810901a:	4604      	mov	r4, r0
 810901c:	460d      	mov	r5, r1
 810901e:	f7f7 fb73 	bl	8100708 <__aeabi_dmul>
 8109022:	a37b      	add	r3, pc, #492	; (adr r3, 8109210 <__ieee754_pow+0x710>)
 8109024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109028:	f7f7 f9b8 	bl	810039c <__adddf3>
 810902c:	4622      	mov	r2, r4
 810902e:	462b      	mov	r3, r5
 8109030:	f7f7 fb6a 	bl	8100708 <__aeabi_dmul>
 8109034:	a378      	add	r3, pc, #480	; (adr r3, 8109218 <__ieee754_pow+0x718>)
 8109036:	e9d3 2300 	ldrd	r2, r3, [r3]
 810903a:	f7f7 f9af 	bl	810039c <__adddf3>
 810903e:	4622      	mov	r2, r4
 8109040:	462b      	mov	r3, r5
 8109042:	f7f7 fb61 	bl	8100708 <__aeabi_dmul>
 8109046:	a376      	add	r3, pc, #472	; (adr r3, 8109220 <__ieee754_pow+0x720>)
 8109048:	e9d3 2300 	ldrd	r2, r3, [r3]
 810904c:	f7f7 f9a6 	bl	810039c <__adddf3>
 8109050:	4622      	mov	r2, r4
 8109052:	462b      	mov	r3, r5
 8109054:	f7f7 fb58 	bl	8100708 <__aeabi_dmul>
 8109058:	a373      	add	r3, pc, #460	; (adr r3, 8109228 <__ieee754_pow+0x728>)
 810905a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810905e:	f7f7 f99d 	bl	810039c <__adddf3>
 8109062:	4622      	mov	r2, r4
 8109064:	462b      	mov	r3, r5
 8109066:	f7f7 fb4f 	bl	8100708 <__aeabi_dmul>
 810906a:	a371      	add	r3, pc, #452	; (adr r3, 8109230 <__ieee754_pow+0x730>)
 810906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109070:	f7f7 f994 	bl	810039c <__adddf3>
 8109074:	4622      	mov	r2, r4
 8109076:	4606      	mov	r6, r0
 8109078:	460f      	mov	r7, r1
 810907a:	462b      	mov	r3, r5
 810907c:	4620      	mov	r0, r4
 810907e:	4629      	mov	r1, r5
 8109080:	f7f7 fb42 	bl	8100708 <__aeabi_dmul>
 8109084:	4602      	mov	r2, r0
 8109086:	460b      	mov	r3, r1
 8109088:	4630      	mov	r0, r6
 810908a:	4639      	mov	r1, r7
 810908c:	f7f7 fb3c 	bl	8100708 <__aeabi_dmul>
 8109090:	4642      	mov	r2, r8
 8109092:	4604      	mov	r4, r0
 8109094:	460d      	mov	r5, r1
 8109096:	464b      	mov	r3, r9
 8109098:	ec51 0b18 	vmov	r0, r1, d8
 810909c:	f7f7 f97e 	bl	810039c <__adddf3>
 81090a0:	ec53 2b19 	vmov	r2, r3, d9
 81090a4:	f7f7 fb30 	bl	8100708 <__aeabi_dmul>
 81090a8:	4622      	mov	r2, r4
 81090aa:	462b      	mov	r3, r5
 81090ac:	f7f7 f976 	bl	810039c <__adddf3>
 81090b0:	4642      	mov	r2, r8
 81090b2:	4682      	mov	sl, r0
 81090b4:	468b      	mov	fp, r1
 81090b6:	464b      	mov	r3, r9
 81090b8:	4640      	mov	r0, r8
 81090ba:	4649      	mov	r1, r9
 81090bc:	f7f7 fb24 	bl	8100708 <__aeabi_dmul>
 81090c0:	4b6b      	ldr	r3, [pc, #428]	; (8109270 <__ieee754_pow+0x770>)
 81090c2:	2200      	movs	r2, #0
 81090c4:	4606      	mov	r6, r0
 81090c6:	460f      	mov	r7, r1
 81090c8:	f7f7 f968 	bl	810039c <__adddf3>
 81090cc:	4652      	mov	r2, sl
 81090ce:	465b      	mov	r3, fp
 81090d0:	f7f7 f964 	bl	810039c <__adddf3>
 81090d4:	2000      	movs	r0, #0
 81090d6:	4604      	mov	r4, r0
 81090d8:	460d      	mov	r5, r1
 81090da:	4602      	mov	r2, r0
 81090dc:	460b      	mov	r3, r1
 81090de:	4640      	mov	r0, r8
 81090e0:	4649      	mov	r1, r9
 81090e2:	f7f7 fb11 	bl	8100708 <__aeabi_dmul>
 81090e6:	4b62      	ldr	r3, [pc, #392]	; (8109270 <__ieee754_pow+0x770>)
 81090e8:	4680      	mov	r8, r0
 81090ea:	4689      	mov	r9, r1
 81090ec:	2200      	movs	r2, #0
 81090ee:	4620      	mov	r0, r4
 81090f0:	4629      	mov	r1, r5
 81090f2:	f7f7 f951 	bl	8100398 <__aeabi_dsub>
 81090f6:	4632      	mov	r2, r6
 81090f8:	463b      	mov	r3, r7
 81090fa:	f7f7 f94d 	bl	8100398 <__aeabi_dsub>
 81090fe:	4602      	mov	r2, r0
 8109100:	460b      	mov	r3, r1
 8109102:	4650      	mov	r0, sl
 8109104:	4659      	mov	r1, fp
 8109106:	f7f7 f947 	bl	8100398 <__aeabi_dsub>
 810910a:	ec53 2b18 	vmov	r2, r3, d8
 810910e:	f7f7 fafb 	bl	8100708 <__aeabi_dmul>
 8109112:	4622      	mov	r2, r4
 8109114:	4606      	mov	r6, r0
 8109116:	460f      	mov	r7, r1
 8109118:	462b      	mov	r3, r5
 810911a:	ec51 0b19 	vmov	r0, r1, d9
 810911e:	f7f7 faf3 	bl	8100708 <__aeabi_dmul>
 8109122:	4602      	mov	r2, r0
 8109124:	460b      	mov	r3, r1
 8109126:	4630      	mov	r0, r6
 8109128:	4639      	mov	r1, r7
 810912a:	f7f7 f937 	bl	810039c <__adddf3>
 810912e:	4606      	mov	r6, r0
 8109130:	460f      	mov	r7, r1
 8109132:	4602      	mov	r2, r0
 8109134:	460b      	mov	r3, r1
 8109136:	4640      	mov	r0, r8
 8109138:	4649      	mov	r1, r9
 810913a:	f7f7 f92f 	bl	810039c <__adddf3>
 810913e:	a33e      	add	r3, pc, #248	; (adr r3, 8109238 <__ieee754_pow+0x738>)
 8109140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109144:	2000      	movs	r0, #0
 8109146:	4604      	mov	r4, r0
 8109148:	460d      	mov	r5, r1
 810914a:	f7f7 fadd 	bl	8100708 <__aeabi_dmul>
 810914e:	4642      	mov	r2, r8
 8109150:	ec41 0b18 	vmov	d8, r0, r1
 8109154:	464b      	mov	r3, r9
 8109156:	4620      	mov	r0, r4
 8109158:	4629      	mov	r1, r5
 810915a:	f7f7 f91d 	bl	8100398 <__aeabi_dsub>
 810915e:	4602      	mov	r2, r0
 8109160:	460b      	mov	r3, r1
 8109162:	4630      	mov	r0, r6
 8109164:	4639      	mov	r1, r7
 8109166:	f7f7 f917 	bl	8100398 <__aeabi_dsub>
 810916a:	a335      	add	r3, pc, #212	; (adr r3, 8109240 <__ieee754_pow+0x740>)
 810916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109170:	f7f7 faca 	bl	8100708 <__aeabi_dmul>
 8109174:	a334      	add	r3, pc, #208	; (adr r3, 8109248 <__ieee754_pow+0x748>)
 8109176:	e9d3 2300 	ldrd	r2, r3, [r3]
 810917a:	4606      	mov	r6, r0
 810917c:	460f      	mov	r7, r1
 810917e:	4620      	mov	r0, r4
 8109180:	4629      	mov	r1, r5
 8109182:	f7f7 fac1 	bl	8100708 <__aeabi_dmul>
 8109186:	4602      	mov	r2, r0
 8109188:	460b      	mov	r3, r1
 810918a:	4630      	mov	r0, r6
 810918c:	4639      	mov	r1, r7
 810918e:	f7f7 f905 	bl	810039c <__adddf3>
 8109192:	9a07      	ldr	r2, [sp, #28]
 8109194:	4b37      	ldr	r3, [pc, #220]	; (8109274 <__ieee754_pow+0x774>)
 8109196:	4413      	add	r3, r2
 8109198:	e9d3 2300 	ldrd	r2, r3, [r3]
 810919c:	f7f7 f8fe 	bl	810039c <__adddf3>
 81091a0:	4682      	mov	sl, r0
 81091a2:	9805      	ldr	r0, [sp, #20]
 81091a4:	468b      	mov	fp, r1
 81091a6:	f7f7 fa45 	bl	8100634 <__aeabi_i2d>
 81091aa:	9a07      	ldr	r2, [sp, #28]
 81091ac:	4b32      	ldr	r3, [pc, #200]	; (8109278 <__ieee754_pow+0x778>)
 81091ae:	4413      	add	r3, r2
 81091b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 81091b4:	4606      	mov	r6, r0
 81091b6:	460f      	mov	r7, r1
 81091b8:	4652      	mov	r2, sl
 81091ba:	465b      	mov	r3, fp
 81091bc:	ec51 0b18 	vmov	r0, r1, d8
 81091c0:	f7f7 f8ec 	bl	810039c <__adddf3>
 81091c4:	4642      	mov	r2, r8
 81091c6:	464b      	mov	r3, r9
 81091c8:	f7f7 f8e8 	bl	810039c <__adddf3>
 81091cc:	4632      	mov	r2, r6
 81091ce:	463b      	mov	r3, r7
 81091d0:	f7f7 f8e4 	bl	810039c <__adddf3>
 81091d4:	2000      	movs	r0, #0
 81091d6:	4632      	mov	r2, r6
 81091d8:	463b      	mov	r3, r7
 81091da:	4604      	mov	r4, r0
 81091dc:	460d      	mov	r5, r1
 81091de:	f7f7 f8db 	bl	8100398 <__aeabi_dsub>
 81091e2:	4642      	mov	r2, r8
 81091e4:	464b      	mov	r3, r9
 81091e6:	f7f7 f8d7 	bl	8100398 <__aeabi_dsub>
 81091ea:	ec53 2b18 	vmov	r2, r3, d8
 81091ee:	f7f7 f8d3 	bl	8100398 <__aeabi_dsub>
 81091f2:	4602      	mov	r2, r0
 81091f4:	460b      	mov	r3, r1
 81091f6:	4650      	mov	r0, sl
 81091f8:	4659      	mov	r1, fp
 81091fa:	e610      	b.n	8108e1e <__ieee754_pow+0x31e>
 81091fc:	2401      	movs	r4, #1
 81091fe:	e6a1      	b.n	8108f44 <__ieee754_pow+0x444>
 8109200:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8109250 <__ieee754_pow+0x750>
 8109204:	e617      	b.n	8108e36 <__ieee754_pow+0x336>
 8109206:	bf00      	nop
 8109208:	4a454eef 	.word	0x4a454eef
 810920c:	3fca7e28 	.word	0x3fca7e28
 8109210:	93c9db65 	.word	0x93c9db65
 8109214:	3fcd864a 	.word	0x3fcd864a
 8109218:	a91d4101 	.word	0xa91d4101
 810921c:	3fd17460 	.word	0x3fd17460
 8109220:	518f264d 	.word	0x518f264d
 8109224:	3fd55555 	.word	0x3fd55555
 8109228:	db6fabff 	.word	0xdb6fabff
 810922c:	3fdb6db6 	.word	0x3fdb6db6
 8109230:	33333303 	.word	0x33333303
 8109234:	3fe33333 	.word	0x3fe33333
 8109238:	e0000000 	.word	0xe0000000
 810923c:	3feec709 	.word	0x3feec709
 8109240:	dc3a03fd 	.word	0xdc3a03fd
 8109244:	3feec709 	.word	0x3feec709
 8109248:	145b01f5 	.word	0x145b01f5
 810924c:	be3e2fe0 	.word	0xbe3e2fe0
 8109250:	00000000 	.word	0x00000000
 8109254:	3ff00000 	.word	0x3ff00000
 8109258:	7ff00000 	.word	0x7ff00000
 810925c:	43400000 	.word	0x43400000
 8109260:	0003988e 	.word	0x0003988e
 8109264:	000bb679 	.word	0x000bb679
 8109268:	08109920 	.word	0x08109920
 810926c:	3ff00000 	.word	0x3ff00000
 8109270:	40080000 	.word	0x40080000
 8109274:	08109940 	.word	0x08109940
 8109278:	08109930 	.word	0x08109930
 810927c:	a3b5      	add	r3, pc, #724	; (adr r3, 8109554 <__ieee754_pow+0xa54>)
 810927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109282:	4640      	mov	r0, r8
 8109284:	4649      	mov	r1, r9
 8109286:	f7f7 f889 	bl	810039c <__adddf3>
 810928a:	4622      	mov	r2, r4
 810928c:	ec41 0b1a 	vmov	d10, r0, r1
 8109290:	462b      	mov	r3, r5
 8109292:	4630      	mov	r0, r6
 8109294:	4639      	mov	r1, r7
 8109296:	f7f7 f87f 	bl	8100398 <__aeabi_dsub>
 810929a:	4602      	mov	r2, r0
 810929c:	460b      	mov	r3, r1
 810929e:	ec51 0b1a 	vmov	r0, r1, d10
 81092a2:	f7f7 fcc1 	bl	8100c28 <__aeabi_dcmpgt>
 81092a6:	2800      	cmp	r0, #0
 81092a8:	f47f ae04 	bne.w	8108eb4 <__ieee754_pow+0x3b4>
 81092ac:	4aa4      	ldr	r2, [pc, #656]	; (8109540 <__ieee754_pow+0xa40>)
 81092ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 81092b2:	4293      	cmp	r3, r2
 81092b4:	f340 8108 	ble.w	81094c8 <__ieee754_pow+0x9c8>
 81092b8:	151b      	asrs	r3, r3, #20
 81092ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 81092be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 81092c2:	fa4a f303 	asr.w	r3, sl, r3
 81092c6:	445b      	add	r3, fp
 81092c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 81092cc:	4e9d      	ldr	r6, [pc, #628]	; (8109544 <__ieee754_pow+0xa44>)
 81092ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 81092d2:	4116      	asrs	r6, r2
 81092d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 81092d8:	2000      	movs	r0, #0
 81092da:	ea23 0106 	bic.w	r1, r3, r6
 81092de:	f1c2 0214 	rsb	r2, r2, #20
 81092e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 81092e6:	fa4a fa02 	asr.w	sl, sl, r2
 81092ea:	f1bb 0f00 	cmp.w	fp, #0
 81092ee:	4602      	mov	r2, r0
 81092f0:	460b      	mov	r3, r1
 81092f2:	4620      	mov	r0, r4
 81092f4:	4629      	mov	r1, r5
 81092f6:	bfb8      	it	lt
 81092f8:	f1ca 0a00 	rsblt	sl, sl, #0
 81092fc:	f7f7 f84c 	bl	8100398 <__aeabi_dsub>
 8109300:	ec41 0b19 	vmov	d9, r0, r1
 8109304:	4642      	mov	r2, r8
 8109306:	464b      	mov	r3, r9
 8109308:	ec51 0b19 	vmov	r0, r1, d9
 810930c:	f7f7 f846 	bl	810039c <__adddf3>
 8109310:	a37b      	add	r3, pc, #492	; (adr r3, 8109500 <__ieee754_pow+0xa00>)
 8109312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109316:	2000      	movs	r0, #0
 8109318:	4604      	mov	r4, r0
 810931a:	460d      	mov	r5, r1
 810931c:	f7f7 f9f4 	bl	8100708 <__aeabi_dmul>
 8109320:	ec53 2b19 	vmov	r2, r3, d9
 8109324:	4606      	mov	r6, r0
 8109326:	460f      	mov	r7, r1
 8109328:	4620      	mov	r0, r4
 810932a:	4629      	mov	r1, r5
 810932c:	f7f7 f834 	bl	8100398 <__aeabi_dsub>
 8109330:	4602      	mov	r2, r0
 8109332:	460b      	mov	r3, r1
 8109334:	4640      	mov	r0, r8
 8109336:	4649      	mov	r1, r9
 8109338:	f7f7 f82e 	bl	8100398 <__aeabi_dsub>
 810933c:	a372      	add	r3, pc, #456	; (adr r3, 8109508 <__ieee754_pow+0xa08>)
 810933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109342:	f7f7 f9e1 	bl	8100708 <__aeabi_dmul>
 8109346:	a372      	add	r3, pc, #456	; (adr r3, 8109510 <__ieee754_pow+0xa10>)
 8109348:	e9d3 2300 	ldrd	r2, r3, [r3]
 810934c:	4680      	mov	r8, r0
 810934e:	4689      	mov	r9, r1
 8109350:	4620      	mov	r0, r4
 8109352:	4629      	mov	r1, r5
 8109354:	f7f7 f9d8 	bl	8100708 <__aeabi_dmul>
 8109358:	4602      	mov	r2, r0
 810935a:	460b      	mov	r3, r1
 810935c:	4640      	mov	r0, r8
 810935e:	4649      	mov	r1, r9
 8109360:	f7f7 f81c 	bl	810039c <__adddf3>
 8109364:	4604      	mov	r4, r0
 8109366:	460d      	mov	r5, r1
 8109368:	4602      	mov	r2, r0
 810936a:	460b      	mov	r3, r1
 810936c:	4630      	mov	r0, r6
 810936e:	4639      	mov	r1, r7
 8109370:	f7f7 f814 	bl	810039c <__adddf3>
 8109374:	4632      	mov	r2, r6
 8109376:	463b      	mov	r3, r7
 8109378:	4680      	mov	r8, r0
 810937a:	4689      	mov	r9, r1
 810937c:	f7f7 f80c 	bl	8100398 <__aeabi_dsub>
 8109380:	4602      	mov	r2, r0
 8109382:	460b      	mov	r3, r1
 8109384:	4620      	mov	r0, r4
 8109386:	4629      	mov	r1, r5
 8109388:	f7f7 f806 	bl	8100398 <__aeabi_dsub>
 810938c:	4642      	mov	r2, r8
 810938e:	4606      	mov	r6, r0
 8109390:	460f      	mov	r7, r1
 8109392:	464b      	mov	r3, r9
 8109394:	4640      	mov	r0, r8
 8109396:	4649      	mov	r1, r9
 8109398:	f7f7 f9b6 	bl	8100708 <__aeabi_dmul>
 810939c:	a35e      	add	r3, pc, #376	; (adr r3, 8109518 <__ieee754_pow+0xa18>)
 810939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81093a2:	4604      	mov	r4, r0
 81093a4:	460d      	mov	r5, r1
 81093a6:	f7f7 f9af 	bl	8100708 <__aeabi_dmul>
 81093aa:	a35d      	add	r3, pc, #372	; (adr r3, 8109520 <__ieee754_pow+0xa20>)
 81093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81093b0:	f7f6 fff2 	bl	8100398 <__aeabi_dsub>
 81093b4:	4622      	mov	r2, r4
 81093b6:	462b      	mov	r3, r5
 81093b8:	f7f7 f9a6 	bl	8100708 <__aeabi_dmul>
 81093bc:	a35a      	add	r3, pc, #360	; (adr r3, 8109528 <__ieee754_pow+0xa28>)
 81093be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81093c2:	f7f6 ffeb 	bl	810039c <__adddf3>
 81093c6:	4622      	mov	r2, r4
 81093c8:	462b      	mov	r3, r5
 81093ca:	f7f7 f99d 	bl	8100708 <__aeabi_dmul>
 81093ce:	a358      	add	r3, pc, #352	; (adr r3, 8109530 <__ieee754_pow+0xa30>)
 81093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81093d4:	f7f6 ffe0 	bl	8100398 <__aeabi_dsub>
 81093d8:	4622      	mov	r2, r4
 81093da:	462b      	mov	r3, r5
 81093dc:	f7f7 f994 	bl	8100708 <__aeabi_dmul>
 81093e0:	a355      	add	r3, pc, #340	; (adr r3, 8109538 <__ieee754_pow+0xa38>)
 81093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81093e6:	f7f6 ffd9 	bl	810039c <__adddf3>
 81093ea:	4622      	mov	r2, r4
 81093ec:	462b      	mov	r3, r5
 81093ee:	f7f7 f98b 	bl	8100708 <__aeabi_dmul>
 81093f2:	4602      	mov	r2, r0
 81093f4:	460b      	mov	r3, r1
 81093f6:	4640      	mov	r0, r8
 81093f8:	4649      	mov	r1, r9
 81093fa:	f7f6 ffcd 	bl	8100398 <__aeabi_dsub>
 81093fe:	4604      	mov	r4, r0
 8109400:	460d      	mov	r5, r1
 8109402:	4602      	mov	r2, r0
 8109404:	460b      	mov	r3, r1
 8109406:	4640      	mov	r0, r8
 8109408:	4649      	mov	r1, r9
 810940a:	f7f7 f97d 	bl	8100708 <__aeabi_dmul>
 810940e:	2200      	movs	r2, #0
 8109410:	ec41 0b19 	vmov	d9, r0, r1
 8109414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8109418:	4620      	mov	r0, r4
 810941a:	4629      	mov	r1, r5
 810941c:	f7f6 ffbc 	bl	8100398 <__aeabi_dsub>
 8109420:	4602      	mov	r2, r0
 8109422:	460b      	mov	r3, r1
 8109424:	ec51 0b19 	vmov	r0, r1, d9
 8109428:	f7f7 fa98 	bl	810095c <__aeabi_ddiv>
 810942c:	4632      	mov	r2, r6
 810942e:	4604      	mov	r4, r0
 8109430:	460d      	mov	r5, r1
 8109432:	463b      	mov	r3, r7
 8109434:	4640      	mov	r0, r8
 8109436:	4649      	mov	r1, r9
 8109438:	f7f7 f966 	bl	8100708 <__aeabi_dmul>
 810943c:	4632      	mov	r2, r6
 810943e:	463b      	mov	r3, r7
 8109440:	f7f6 ffac 	bl	810039c <__adddf3>
 8109444:	4602      	mov	r2, r0
 8109446:	460b      	mov	r3, r1
 8109448:	4620      	mov	r0, r4
 810944a:	4629      	mov	r1, r5
 810944c:	f7f6 ffa4 	bl	8100398 <__aeabi_dsub>
 8109450:	4642      	mov	r2, r8
 8109452:	464b      	mov	r3, r9
 8109454:	f7f6 ffa0 	bl	8100398 <__aeabi_dsub>
 8109458:	460b      	mov	r3, r1
 810945a:	4602      	mov	r2, r0
 810945c:	493a      	ldr	r1, [pc, #232]	; (8109548 <__ieee754_pow+0xa48>)
 810945e:	2000      	movs	r0, #0
 8109460:	f7f6 ff9a 	bl	8100398 <__aeabi_dsub>
 8109464:	ec41 0b10 	vmov	d0, r0, r1
 8109468:	ee10 3a90 	vmov	r3, s1
 810946c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8109470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109474:	da2b      	bge.n	81094ce <__ieee754_pow+0x9ce>
 8109476:	4650      	mov	r0, sl
 8109478:	f000 f966 	bl	8109748 <scalbn>
 810947c:	ec51 0b10 	vmov	r0, r1, d0
 8109480:	ec53 2b18 	vmov	r2, r3, d8
 8109484:	f7ff bbed 	b.w	8108c62 <__ieee754_pow+0x162>
 8109488:	4b30      	ldr	r3, [pc, #192]	; (810954c <__ieee754_pow+0xa4c>)
 810948a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810948e:	429e      	cmp	r6, r3
 8109490:	f77f af0c 	ble.w	81092ac <__ieee754_pow+0x7ac>
 8109494:	4b2e      	ldr	r3, [pc, #184]	; (8109550 <__ieee754_pow+0xa50>)
 8109496:	440b      	add	r3, r1
 8109498:	4303      	orrs	r3, r0
 810949a:	d009      	beq.n	81094b0 <__ieee754_pow+0x9b0>
 810949c:	ec51 0b18 	vmov	r0, r1, d8
 81094a0:	2200      	movs	r2, #0
 81094a2:	2300      	movs	r3, #0
 81094a4:	f7f7 fba2 	bl	8100bec <__aeabi_dcmplt>
 81094a8:	3800      	subs	r0, #0
 81094aa:	bf18      	it	ne
 81094ac:	2001      	movne	r0, #1
 81094ae:	e447      	b.n	8108d40 <__ieee754_pow+0x240>
 81094b0:	4622      	mov	r2, r4
 81094b2:	462b      	mov	r3, r5
 81094b4:	f7f6 ff70 	bl	8100398 <__aeabi_dsub>
 81094b8:	4642      	mov	r2, r8
 81094ba:	464b      	mov	r3, r9
 81094bc:	f7f7 fbaa 	bl	8100c14 <__aeabi_dcmpge>
 81094c0:	2800      	cmp	r0, #0
 81094c2:	f43f aef3 	beq.w	81092ac <__ieee754_pow+0x7ac>
 81094c6:	e7e9      	b.n	810949c <__ieee754_pow+0x99c>
 81094c8:	f04f 0a00 	mov.w	sl, #0
 81094cc:	e71a      	b.n	8109304 <__ieee754_pow+0x804>
 81094ce:	ec51 0b10 	vmov	r0, r1, d0
 81094d2:	4619      	mov	r1, r3
 81094d4:	e7d4      	b.n	8109480 <__ieee754_pow+0x980>
 81094d6:	491c      	ldr	r1, [pc, #112]	; (8109548 <__ieee754_pow+0xa48>)
 81094d8:	2000      	movs	r0, #0
 81094da:	f7ff bb30 	b.w	8108b3e <__ieee754_pow+0x3e>
 81094de:	2000      	movs	r0, #0
 81094e0:	2100      	movs	r1, #0
 81094e2:	f7ff bb2c 	b.w	8108b3e <__ieee754_pow+0x3e>
 81094e6:	4630      	mov	r0, r6
 81094e8:	4639      	mov	r1, r7
 81094ea:	f7ff bb28 	b.w	8108b3e <__ieee754_pow+0x3e>
 81094ee:	9204      	str	r2, [sp, #16]
 81094f0:	f7ff bb7a 	b.w	8108be8 <__ieee754_pow+0xe8>
 81094f4:	2300      	movs	r3, #0
 81094f6:	f7ff bb64 	b.w	8108bc2 <__ieee754_pow+0xc2>
 81094fa:	bf00      	nop
 81094fc:	f3af 8000 	nop.w
 8109500:	00000000 	.word	0x00000000
 8109504:	3fe62e43 	.word	0x3fe62e43
 8109508:	fefa39ef 	.word	0xfefa39ef
 810950c:	3fe62e42 	.word	0x3fe62e42
 8109510:	0ca86c39 	.word	0x0ca86c39
 8109514:	be205c61 	.word	0xbe205c61
 8109518:	72bea4d0 	.word	0x72bea4d0
 810951c:	3e663769 	.word	0x3e663769
 8109520:	c5d26bf1 	.word	0xc5d26bf1
 8109524:	3ebbbd41 	.word	0x3ebbbd41
 8109528:	af25de2c 	.word	0xaf25de2c
 810952c:	3f11566a 	.word	0x3f11566a
 8109530:	16bebd93 	.word	0x16bebd93
 8109534:	3f66c16c 	.word	0x3f66c16c
 8109538:	5555553e 	.word	0x5555553e
 810953c:	3fc55555 	.word	0x3fc55555
 8109540:	3fe00000 	.word	0x3fe00000
 8109544:	000fffff 	.word	0x000fffff
 8109548:	3ff00000 	.word	0x3ff00000
 810954c:	4090cbff 	.word	0x4090cbff
 8109550:	3f6f3400 	.word	0x3f6f3400
 8109554:	652b82fe 	.word	0x652b82fe
 8109558:	3c971547 	.word	0x3c971547

0810955c <__ieee754_sqrt>:
 810955c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109560:	ec55 4b10 	vmov	r4, r5, d0
 8109564:	4e55      	ldr	r6, [pc, #340]	; (81096bc <__ieee754_sqrt+0x160>)
 8109566:	43ae      	bics	r6, r5
 8109568:	ee10 0a10 	vmov	r0, s0
 810956c:	ee10 3a10 	vmov	r3, s0
 8109570:	462a      	mov	r2, r5
 8109572:	4629      	mov	r1, r5
 8109574:	d110      	bne.n	8109598 <__ieee754_sqrt+0x3c>
 8109576:	ee10 2a10 	vmov	r2, s0
 810957a:	462b      	mov	r3, r5
 810957c:	f7f7 f8c4 	bl	8100708 <__aeabi_dmul>
 8109580:	4602      	mov	r2, r0
 8109582:	460b      	mov	r3, r1
 8109584:	4620      	mov	r0, r4
 8109586:	4629      	mov	r1, r5
 8109588:	f7f6 ff08 	bl	810039c <__adddf3>
 810958c:	4604      	mov	r4, r0
 810958e:	460d      	mov	r5, r1
 8109590:	ec45 4b10 	vmov	d0, r4, r5
 8109594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109598:	2d00      	cmp	r5, #0
 810959a:	dc10      	bgt.n	81095be <__ieee754_sqrt+0x62>
 810959c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 81095a0:	4330      	orrs	r0, r6
 81095a2:	d0f5      	beq.n	8109590 <__ieee754_sqrt+0x34>
 81095a4:	b15d      	cbz	r5, 81095be <__ieee754_sqrt+0x62>
 81095a6:	ee10 2a10 	vmov	r2, s0
 81095aa:	462b      	mov	r3, r5
 81095ac:	ee10 0a10 	vmov	r0, s0
 81095b0:	f7f6 fef2 	bl	8100398 <__aeabi_dsub>
 81095b4:	4602      	mov	r2, r0
 81095b6:	460b      	mov	r3, r1
 81095b8:	f7f7 f9d0 	bl	810095c <__aeabi_ddiv>
 81095bc:	e7e6      	b.n	810958c <__ieee754_sqrt+0x30>
 81095be:	1512      	asrs	r2, r2, #20
 81095c0:	d074      	beq.n	81096ac <__ieee754_sqrt+0x150>
 81095c2:	07d4      	lsls	r4, r2, #31
 81095c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 81095c8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 81095cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81095d0:	bf5e      	ittt	pl
 81095d2:	0fda      	lsrpl	r2, r3, #31
 81095d4:	005b      	lslpl	r3, r3, #1
 81095d6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 81095da:	2400      	movs	r4, #0
 81095dc:	0fda      	lsrs	r2, r3, #31
 81095de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 81095e2:	107f      	asrs	r7, r7, #1
 81095e4:	005b      	lsls	r3, r3, #1
 81095e6:	2516      	movs	r5, #22
 81095e8:	4620      	mov	r0, r4
 81095ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 81095ee:	1886      	adds	r6, r0, r2
 81095f0:	428e      	cmp	r6, r1
 81095f2:	bfde      	ittt	le
 81095f4:	1b89      	suble	r1, r1, r6
 81095f6:	18b0      	addle	r0, r6, r2
 81095f8:	18a4      	addle	r4, r4, r2
 81095fa:	0049      	lsls	r1, r1, #1
 81095fc:	3d01      	subs	r5, #1
 81095fe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8109602:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8109606:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810960a:	d1f0      	bne.n	81095ee <__ieee754_sqrt+0x92>
 810960c:	462a      	mov	r2, r5
 810960e:	f04f 0e20 	mov.w	lr, #32
 8109612:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8109616:	4281      	cmp	r1, r0
 8109618:	eb06 0c05 	add.w	ip, r6, r5
 810961c:	dc02      	bgt.n	8109624 <__ieee754_sqrt+0xc8>
 810961e:	d113      	bne.n	8109648 <__ieee754_sqrt+0xec>
 8109620:	459c      	cmp	ip, r3
 8109622:	d811      	bhi.n	8109648 <__ieee754_sqrt+0xec>
 8109624:	f1bc 0f00 	cmp.w	ip, #0
 8109628:	eb0c 0506 	add.w	r5, ip, r6
 810962c:	da43      	bge.n	81096b6 <__ieee754_sqrt+0x15a>
 810962e:	2d00      	cmp	r5, #0
 8109630:	db41      	blt.n	81096b6 <__ieee754_sqrt+0x15a>
 8109632:	f100 0801 	add.w	r8, r0, #1
 8109636:	1a09      	subs	r1, r1, r0
 8109638:	459c      	cmp	ip, r3
 810963a:	bf88      	it	hi
 810963c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8109640:	eba3 030c 	sub.w	r3, r3, ip
 8109644:	4432      	add	r2, r6
 8109646:	4640      	mov	r0, r8
 8109648:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 810964c:	f1be 0e01 	subs.w	lr, lr, #1
 8109650:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8109654:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8109658:	ea4f 0656 	mov.w	r6, r6, lsr #1
 810965c:	d1db      	bne.n	8109616 <__ieee754_sqrt+0xba>
 810965e:	430b      	orrs	r3, r1
 8109660:	d006      	beq.n	8109670 <__ieee754_sqrt+0x114>
 8109662:	1c50      	adds	r0, r2, #1
 8109664:	bf13      	iteet	ne
 8109666:	3201      	addne	r2, #1
 8109668:	3401      	addeq	r4, #1
 810966a:	4672      	moveq	r2, lr
 810966c:	f022 0201 	bicne.w	r2, r2, #1
 8109670:	1063      	asrs	r3, r4, #1
 8109672:	0852      	lsrs	r2, r2, #1
 8109674:	07e1      	lsls	r1, r4, #31
 8109676:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810967a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810967e:	bf48      	it	mi
 8109680:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8109684:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8109688:	4614      	mov	r4, r2
 810968a:	e781      	b.n	8109590 <__ieee754_sqrt+0x34>
 810968c:	0ad9      	lsrs	r1, r3, #11
 810968e:	3815      	subs	r0, #21
 8109690:	055b      	lsls	r3, r3, #21
 8109692:	2900      	cmp	r1, #0
 8109694:	d0fa      	beq.n	810968c <__ieee754_sqrt+0x130>
 8109696:	02cd      	lsls	r5, r1, #11
 8109698:	d50a      	bpl.n	81096b0 <__ieee754_sqrt+0x154>
 810969a:	f1c2 0420 	rsb	r4, r2, #32
 810969e:	fa23 f404 	lsr.w	r4, r3, r4
 81096a2:	1e55      	subs	r5, r2, #1
 81096a4:	4093      	lsls	r3, r2
 81096a6:	4321      	orrs	r1, r4
 81096a8:	1b42      	subs	r2, r0, r5
 81096aa:	e78a      	b.n	81095c2 <__ieee754_sqrt+0x66>
 81096ac:	4610      	mov	r0, r2
 81096ae:	e7f0      	b.n	8109692 <__ieee754_sqrt+0x136>
 81096b0:	0049      	lsls	r1, r1, #1
 81096b2:	3201      	adds	r2, #1
 81096b4:	e7ef      	b.n	8109696 <__ieee754_sqrt+0x13a>
 81096b6:	4680      	mov	r8, r0
 81096b8:	e7bd      	b.n	8109636 <__ieee754_sqrt+0xda>
 81096ba:	bf00      	nop
 81096bc:	7ff00000 	.word	0x7ff00000

081096c0 <with_errno>:
 81096c0:	b570      	push	{r4, r5, r6, lr}
 81096c2:	4604      	mov	r4, r0
 81096c4:	460d      	mov	r5, r1
 81096c6:	4616      	mov	r6, r2
 81096c8:	f7fe fd0a 	bl	81080e0 <__errno>
 81096cc:	4629      	mov	r1, r5
 81096ce:	6006      	str	r6, [r0, #0]
 81096d0:	4620      	mov	r0, r4
 81096d2:	bd70      	pop	{r4, r5, r6, pc}

081096d4 <xflow>:
 81096d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81096d6:	4614      	mov	r4, r2
 81096d8:	461d      	mov	r5, r3
 81096da:	b108      	cbz	r0, 81096e0 <xflow+0xc>
 81096dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 81096e0:	e9cd 2300 	strd	r2, r3, [sp]
 81096e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 81096e8:	4620      	mov	r0, r4
 81096ea:	4629      	mov	r1, r5
 81096ec:	f7f7 f80c 	bl	8100708 <__aeabi_dmul>
 81096f0:	2222      	movs	r2, #34	; 0x22
 81096f2:	b003      	add	sp, #12
 81096f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81096f8:	f7ff bfe2 	b.w	81096c0 <with_errno>

081096fc <__math_uflow>:
 81096fc:	b508      	push	{r3, lr}
 81096fe:	2200      	movs	r2, #0
 8109700:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8109704:	f7ff ffe6 	bl	81096d4 <xflow>
 8109708:	ec41 0b10 	vmov	d0, r0, r1
 810970c:	bd08      	pop	{r3, pc}

0810970e <__math_oflow>:
 810970e:	b508      	push	{r3, lr}
 8109710:	2200      	movs	r2, #0
 8109712:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8109716:	f7ff ffdd 	bl	81096d4 <xflow>
 810971a:	ec41 0b10 	vmov	d0, r0, r1
 810971e:	bd08      	pop	{r3, pc}

08109720 <fabs>:
 8109720:	ec51 0b10 	vmov	r0, r1, d0
 8109724:	ee10 2a10 	vmov	r2, s0
 8109728:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810972c:	ec43 2b10 	vmov	d0, r2, r3
 8109730:	4770      	bx	lr

08109732 <finite>:
 8109732:	b082      	sub	sp, #8
 8109734:	ed8d 0b00 	vstr	d0, [sp]
 8109738:	9801      	ldr	r0, [sp, #4]
 810973a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810973e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8109742:	0fc0      	lsrs	r0, r0, #31
 8109744:	b002      	add	sp, #8
 8109746:	4770      	bx	lr

08109748 <scalbn>:
 8109748:	b570      	push	{r4, r5, r6, lr}
 810974a:	ec55 4b10 	vmov	r4, r5, d0
 810974e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8109752:	4606      	mov	r6, r0
 8109754:	462b      	mov	r3, r5
 8109756:	b99a      	cbnz	r2, 8109780 <scalbn+0x38>
 8109758:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810975c:	4323      	orrs	r3, r4
 810975e:	d036      	beq.n	81097ce <scalbn+0x86>
 8109760:	4b39      	ldr	r3, [pc, #228]	; (8109848 <scalbn+0x100>)
 8109762:	4629      	mov	r1, r5
 8109764:	ee10 0a10 	vmov	r0, s0
 8109768:	2200      	movs	r2, #0
 810976a:	f7f6 ffcd 	bl	8100708 <__aeabi_dmul>
 810976e:	4b37      	ldr	r3, [pc, #220]	; (810984c <scalbn+0x104>)
 8109770:	429e      	cmp	r6, r3
 8109772:	4604      	mov	r4, r0
 8109774:	460d      	mov	r5, r1
 8109776:	da10      	bge.n	810979a <scalbn+0x52>
 8109778:	a32b      	add	r3, pc, #172	; (adr r3, 8109828 <scalbn+0xe0>)
 810977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810977e:	e03a      	b.n	81097f6 <scalbn+0xae>
 8109780:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8109784:	428a      	cmp	r2, r1
 8109786:	d10c      	bne.n	81097a2 <scalbn+0x5a>
 8109788:	ee10 2a10 	vmov	r2, s0
 810978c:	4620      	mov	r0, r4
 810978e:	4629      	mov	r1, r5
 8109790:	f7f6 fe04 	bl	810039c <__adddf3>
 8109794:	4604      	mov	r4, r0
 8109796:	460d      	mov	r5, r1
 8109798:	e019      	b.n	81097ce <scalbn+0x86>
 810979a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810979e:	460b      	mov	r3, r1
 81097a0:	3a36      	subs	r2, #54	; 0x36
 81097a2:	4432      	add	r2, r6
 81097a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 81097a8:	428a      	cmp	r2, r1
 81097aa:	dd08      	ble.n	81097be <scalbn+0x76>
 81097ac:	2d00      	cmp	r5, #0
 81097ae:	a120      	add	r1, pc, #128	; (adr r1, 8109830 <scalbn+0xe8>)
 81097b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 81097b4:	da1c      	bge.n	81097f0 <scalbn+0xa8>
 81097b6:	a120      	add	r1, pc, #128	; (adr r1, 8109838 <scalbn+0xf0>)
 81097b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 81097bc:	e018      	b.n	81097f0 <scalbn+0xa8>
 81097be:	2a00      	cmp	r2, #0
 81097c0:	dd08      	ble.n	81097d4 <scalbn+0x8c>
 81097c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 81097c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 81097ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 81097ce:	ec45 4b10 	vmov	d0, r4, r5
 81097d2:	bd70      	pop	{r4, r5, r6, pc}
 81097d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 81097d8:	da19      	bge.n	810980e <scalbn+0xc6>
 81097da:	f24c 3350 	movw	r3, #50000	; 0xc350
 81097de:	429e      	cmp	r6, r3
 81097e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 81097e4:	dd0a      	ble.n	81097fc <scalbn+0xb4>
 81097e6:	a112      	add	r1, pc, #72	; (adr r1, 8109830 <scalbn+0xe8>)
 81097e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 81097ec:	2b00      	cmp	r3, #0
 81097ee:	d1e2      	bne.n	81097b6 <scalbn+0x6e>
 81097f0:	a30f      	add	r3, pc, #60	; (adr r3, 8109830 <scalbn+0xe8>)
 81097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81097f6:	f7f6 ff87 	bl	8100708 <__aeabi_dmul>
 81097fa:	e7cb      	b.n	8109794 <scalbn+0x4c>
 81097fc:	a10a      	add	r1, pc, #40	; (adr r1, 8109828 <scalbn+0xe0>)
 81097fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109802:	2b00      	cmp	r3, #0
 8109804:	d0b8      	beq.n	8109778 <scalbn+0x30>
 8109806:	a10e      	add	r1, pc, #56	; (adr r1, 8109840 <scalbn+0xf8>)
 8109808:	e9d1 0100 	ldrd	r0, r1, [r1]
 810980c:	e7b4      	b.n	8109778 <scalbn+0x30>
 810980e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8109812:	3236      	adds	r2, #54	; 0x36
 8109814:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8109818:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810981c:	4620      	mov	r0, r4
 810981e:	4b0c      	ldr	r3, [pc, #48]	; (8109850 <scalbn+0x108>)
 8109820:	2200      	movs	r2, #0
 8109822:	e7e8      	b.n	81097f6 <scalbn+0xae>
 8109824:	f3af 8000 	nop.w
 8109828:	c2f8f359 	.word	0xc2f8f359
 810982c:	01a56e1f 	.word	0x01a56e1f
 8109830:	8800759c 	.word	0x8800759c
 8109834:	7e37e43c 	.word	0x7e37e43c
 8109838:	8800759c 	.word	0x8800759c
 810983c:	fe37e43c 	.word	0xfe37e43c
 8109840:	c2f8f359 	.word	0xc2f8f359
 8109844:	81a56e1f 	.word	0x81a56e1f
 8109848:	43500000 	.word	0x43500000
 810984c:	ffff3cb0 	.word	0xffff3cb0
 8109850:	3c900000 	.word	0x3c900000

08109854 <_init>:
 8109854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109856:	bf00      	nop
 8109858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810985a:	bc08      	pop	{r3}
 810985c:	469e      	mov	lr, r3
 810985e:	4770      	bx	lr

08109860 <_fini>:
 8109860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109862:	bf00      	nop
 8109864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8109866:	bc08      	pop	{r3}
 8109868:	469e      	mov	lr, r3
 810986a:	4770      	bx	lr

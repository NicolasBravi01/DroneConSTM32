
imu_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7f4  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0810aa98  0810aa98  0001aa98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810b02c  0810b02c  0001b02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810b034  0810b034  0001b034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810b038  0810b038  0001b038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  10000000  0810b03c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000114  100001f0  0810b22c  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10000304  0810b22c  00020304  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001648f  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027b7  00000000  00000000  000366af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f00  00000000  00000000  00038e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e08  00000000  00000000  00039d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003aaf6  00000000  00000000  0003ab70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001440a  00000000  00000000  00075666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f4b0  00000000  00000000  00089a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00208f20  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000548c  00000000  00000000  00208f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001f0 	.word	0x100001f0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810aa7c 	.word	0x0810aa7c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001f4 	.word	0x100001f4
 81002dc:	0810aa7c 	.word	0x0810aa7c

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9aa 	b.w	8101104 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468e      	mov	lr, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	d14d      	bne.n	8100ede <__udivmoddi4+0xaa>
 8100e42:	428a      	cmp	r2, r1
 8100e44:	4694      	mov	ip, r2
 8100e46:	d969      	bls.n	8100f1c <__udivmoddi4+0xe8>
 8100e48:	fab2 f282 	clz	r2, r2
 8100e4c:	b152      	cbz	r2, 8100e64 <__udivmoddi4+0x30>
 8100e4e:	fa01 f302 	lsl.w	r3, r1, r2
 8100e52:	f1c2 0120 	rsb	r1, r2, #32
 8100e56:	fa20 f101 	lsr.w	r1, r0, r1
 8100e5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8100e5e:	ea41 0e03 	orr.w	lr, r1, r3
 8100e62:	4094      	lsls	r4, r2
 8100e64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100e68:	0c21      	lsrs	r1, r4, #16
 8100e6a:	fbbe f6f8 	udiv	r6, lr, r8
 8100e6e:	fa1f f78c 	uxth.w	r7, ip
 8100e72:	fb08 e316 	mls	r3, r8, r6, lr
 8100e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8100e7a:	fb06 f107 	mul.w	r1, r6, r7
 8100e7e:	4299      	cmp	r1, r3
 8100e80:	d90a      	bls.n	8100e98 <__udivmoddi4+0x64>
 8100e82:	eb1c 0303 	adds.w	r3, ip, r3
 8100e86:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e8a:	f080 811f 	bcs.w	81010cc <__udivmoddi4+0x298>
 8100e8e:	4299      	cmp	r1, r3
 8100e90:	f240 811c 	bls.w	81010cc <__udivmoddi4+0x298>
 8100e94:	3e02      	subs	r6, #2
 8100e96:	4463      	add	r3, ip
 8100e98:	1a5b      	subs	r3, r3, r1
 8100e9a:	b2a4      	uxth	r4, r4
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea8:	fb00 f707 	mul.w	r7, r0, r7
 8100eac:	42a7      	cmp	r7, r4
 8100eae:	d90a      	bls.n	8100ec6 <__udivmoddi4+0x92>
 8100eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	f080 810a 	bcs.w	81010d0 <__udivmoddi4+0x29c>
 8100ebc:	42a7      	cmp	r7, r4
 8100ebe:	f240 8107 	bls.w	81010d0 <__udivmoddi4+0x29c>
 8100ec2:	4464      	add	r4, ip
 8100ec4:	3802      	subs	r0, #2
 8100ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100eca:	1be4      	subs	r4, r4, r7
 8100ecc:	2600      	movs	r6, #0
 8100ece:	b11d      	cbz	r5, 8100ed8 <__udivmoddi4+0xa4>
 8100ed0:	40d4      	lsrs	r4, r2
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed8:	4631      	mov	r1, r6
 8100eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ede:	428b      	cmp	r3, r1
 8100ee0:	d909      	bls.n	8100ef6 <__udivmoddi4+0xc2>
 8100ee2:	2d00      	cmp	r5, #0
 8100ee4:	f000 80ef 	beq.w	81010c6 <__udivmoddi4+0x292>
 8100ee8:	2600      	movs	r6, #0
 8100eea:	e9c5 0100 	strd	r0, r1, [r5]
 8100eee:	4630      	mov	r0, r6
 8100ef0:	4631      	mov	r1, r6
 8100ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef6:	fab3 f683 	clz	r6, r3
 8100efa:	2e00      	cmp	r6, #0
 8100efc:	d14a      	bne.n	8100f94 <__udivmoddi4+0x160>
 8100efe:	428b      	cmp	r3, r1
 8100f00:	d302      	bcc.n	8100f08 <__udivmoddi4+0xd4>
 8100f02:	4282      	cmp	r2, r0
 8100f04:	f200 80f9 	bhi.w	81010fa <__udivmoddi4+0x2c6>
 8100f08:	1a84      	subs	r4, r0, r2
 8100f0a:	eb61 0303 	sbc.w	r3, r1, r3
 8100f0e:	2001      	movs	r0, #1
 8100f10:	469e      	mov	lr, r3
 8100f12:	2d00      	cmp	r5, #0
 8100f14:	d0e0      	beq.n	8100ed8 <__udivmoddi4+0xa4>
 8100f16:	e9c5 4e00 	strd	r4, lr, [r5]
 8100f1a:	e7dd      	b.n	8100ed8 <__udivmoddi4+0xa4>
 8100f1c:	b902      	cbnz	r2, 8100f20 <__udivmoddi4+0xec>
 8100f1e:	deff      	udf	#255	; 0xff
 8100f20:	fab2 f282 	clz	r2, r2
 8100f24:	2a00      	cmp	r2, #0
 8100f26:	f040 8092 	bne.w	810104e <__udivmoddi4+0x21a>
 8100f2a:	eba1 010c 	sub.w	r1, r1, ip
 8100f2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f32:	fa1f fe8c 	uxth.w	lr, ip
 8100f36:	2601      	movs	r6, #1
 8100f38:	0c20      	lsrs	r0, r4, #16
 8100f3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8100f3e:	fb07 1113 	mls	r1, r7, r3, r1
 8100f42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100f46:	fb0e f003 	mul.w	r0, lr, r3
 8100f4a:	4288      	cmp	r0, r1
 8100f4c:	d908      	bls.n	8100f60 <__udivmoddi4+0x12c>
 8100f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8100f52:	f103 38ff 	add.w	r8, r3, #4294967295
 8100f56:	d202      	bcs.n	8100f5e <__udivmoddi4+0x12a>
 8100f58:	4288      	cmp	r0, r1
 8100f5a:	f200 80cb 	bhi.w	81010f4 <__udivmoddi4+0x2c0>
 8100f5e:	4643      	mov	r3, r8
 8100f60:	1a09      	subs	r1, r1, r0
 8100f62:	b2a4      	uxth	r4, r4
 8100f64:	fbb1 f0f7 	udiv	r0, r1, r7
 8100f68:	fb07 1110 	mls	r1, r7, r0, r1
 8100f6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8100f70:	fb0e fe00 	mul.w	lr, lr, r0
 8100f74:	45a6      	cmp	lr, r4
 8100f76:	d908      	bls.n	8100f8a <__udivmoddi4+0x156>
 8100f78:	eb1c 0404 	adds.w	r4, ip, r4
 8100f7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8100f80:	d202      	bcs.n	8100f88 <__udivmoddi4+0x154>
 8100f82:	45a6      	cmp	lr, r4
 8100f84:	f200 80bb 	bhi.w	81010fe <__udivmoddi4+0x2ca>
 8100f88:	4608      	mov	r0, r1
 8100f8a:	eba4 040e 	sub.w	r4, r4, lr
 8100f8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8100f92:	e79c      	b.n	8100ece <__udivmoddi4+0x9a>
 8100f94:	f1c6 0720 	rsb	r7, r6, #32
 8100f98:	40b3      	lsls	r3, r6
 8100f9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8100fa2:	fa20 f407 	lsr.w	r4, r0, r7
 8100fa6:	fa01 f306 	lsl.w	r3, r1, r6
 8100faa:	431c      	orrs	r4, r3
 8100fac:	40f9      	lsrs	r1, r7
 8100fae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fb2:	fa00 f306 	lsl.w	r3, r0, r6
 8100fb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8100fba:	0c20      	lsrs	r0, r4, #16
 8100fbc:	fa1f fe8c 	uxth.w	lr, ip
 8100fc0:	fb09 1118 	mls	r1, r9, r8, r1
 8100fc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100fc8:	fb08 f00e 	mul.w	r0, r8, lr
 8100fcc:	4288      	cmp	r0, r1
 8100fce:	fa02 f206 	lsl.w	r2, r2, r6
 8100fd2:	d90b      	bls.n	8100fec <__udivmoddi4+0x1b8>
 8100fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8100fd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fdc:	f080 8088 	bcs.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe0:	4288      	cmp	r0, r1
 8100fe2:	f240 8085 	bls.w	81010f0 <__udivmoddi4+0x2bc>
 8100fe6:	f1a8 0802 	sub.w	r8, r8, #2
 8100fea:	4461      	add	r1, ip
 8100fec:	1a09      	subs	r1, r1, r0
 8100fee:	b2a4      	uxth	r4, r4
 8100ff0:	fbb1 f0f9 	udiv	r0, r1, r9
 8100ff4:	fb09 1110 	mls	r1, r9, r0, r1
 8100ff8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100ffc:	fb00 fe0e 	mul.w	lr, r0, lr
 8101000:	458e      	cmp	lr, r1
 8101002:	d908      	bls.n	8101016 <__udivmoddi4+0x1e2>
 8101004:	eb1c 0101 	adds.w	r1, ip, r1
 8101008:	f100 34ff 	add.w	r4, r0, #4294967295
 810100c:	d26c      	bcs.n	81010e8 <__udivmoddi4+0x2b4>
 810100e:	458e      	cmp	lr, r1
 8101010:	d96a      	bls.n	81010e8 <__udivmoddi4+0x2b4>
 8101012:	3802      	subs	r0, #2
 8101014:	4461      	add	r1, ip
 8101016:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 810101a:	fba0 9402 	umull	r9, r4, r0, r2
 810101e:	eba1 010e 	sub.w	r1, r1, lr
 8101022:	42a1      	cmp	r1, r4
 8101024:	46c8      	mov	r8, r9
 8101026:	46a6      	mov	lr, r4
 8101028:	d356      	bcc.n	81010d8 <__udivmoddi4+0x2a4>
 810102a:	d053      	beq.n	81010d4 <__udivmoddi4+0x2a0>
 810102c:	b15d      	cbz	r5, 8101046 <__udivmoddi4+0x212>
 810102e:	ebb3 0208 	subs.w	r2, r3, r8
 8101032:	eb61 010e 	sbc.w	r1, r1, lr
 8101036:	fa01 f707 	lsl.w	r7, r1, r7
 810103a:	fa22 f306 	lsr.w	r3, r2, r6
 810103e:	40f1      	lsrs	r1, r6
 8101040:	431f      	orrs	r7, r3
 8101042:	e9c5 7100 	strd	r7, r1, [r5]
 8101046:	2600      	movs	r6, #0
 8101048:	4631      	mov	r1, r6
 810104a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810104e:	f1c2 0320 	rsb	r3, r2, #32
 8101052:	40d8      	lsrs	r0, r3
 8101054:	fa0c fc02 	lsl.w	ip, ip, r2
 8101058:	fa21 f303 	lsr.w	r3, r1, r3
 810105c:	4091      	lsls	r1, r2
 810105e:	4301      	orrs	r1, r0
 8101060:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8101064:	fa1f fe8c 	uxth.w	lr, ip
 8101068:	fbb3 f0f7 	udiv	r0, r3, r7
 810106c:	fb07 3610 	mls	r6, r7, r0, r3
 8101070:	0c0b      	lsrs	r3, r1, #16
 8101072:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8101076:	fb00 f60e 	mul.w	r6, r0, lr
 810107a:	429e      	cmp	r6, r3
 810107c:	fa04 f402 	lsl.w	r4, r4, r2
 8101080:	d908      	bls.n	8101094 <__udivmoddi4+0x260>
 8101082:	eb1c 0303 	adds.w	r3, ip, r3
 8101086:	f100 38ff 	add.w	r8, r0, #4294967295
 810108a:	d22f      	bcs.n	81010ec <__udivmoddi4+0x2b8>
 810108c:	429e      	cmp	r6, r3
 810108e:	d92d      	bls.n	81010ec <__udivmoddi4+0x2b8>
 8101090:	3802      	subs	r0, #2
 8101092:	4463      	add	r3, ip
 8101094:	1b9b      	subs	r3, r3, r6
 8101096:	b289      	uxth	r1, r1
 8101098:	fbb3 f6f7 	udiv	r6, r3, r7
 810109c:	fb07 3316 	mls	r3, r7, r6, r3
 81010a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81010a4:	fb06 f30e 	mul.w	r3, r6, lr
 81010a8:	428b      	cmp	r3, r1
 81010aa:	d908      	bls.n	81010be <__udivmoddi4+0x28a>
 81010ac:	eb1c 0101 	adds.w	r1, ip, r1
 81010b0:	f106 38ff 	add.w	r8, r6, #4294967295
 81010b4:	d216      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 81010b6:	428b      	cmp	r3, r1
 81010b8:	d914      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 81010ba:	3e02      	subs	r6, #2
 81010bc:	4461      	add	r1, ip
 81010be:	1ac9      	subs	r1, r1, r3
 81010c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 81010c4:	e738      	b.n	8100f38 <__udivmoddi4+0x104>
 81010c6:	462e      	mov	r6, r5
 81010c8:	4628      	mov	r0, r5
 81010ca:	e705      	b.n	8100ed8 <__udivmoddi4+0xa4>
 81010cc:	4606      	mov	r6, r0
 81010ce:	e6e3      	b.n	8100e98 <__udivmoddi4+0x64>
 81010d0:	4618      	mov	r0, r3
 81010d2:	e6f8      	b.n	8100ec6 <__udivmoddi4+0x92>
 81010d4:	454b      	cmp	r3, r9
 81010d6:	d2a9      	bcs.n	810102c <__udivmoddi4+0x1f8>
 81010d8:	ebb9 0802 	subs.w	r8, r9, r2
 81010dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 81010e0:	3801      	subs	r0, #1
 81010e2:	e7a3      	b.n	810102c <__udivmoddi4+0x1f8>
 81010e4:	4646      	mov	r6, r8
 81010e6:	e7ea      	b.n	81010be <__udivmoddi4+0x28a>
 81010e8:	4620      	mov	r0, r4
 81010ea:	e794      	b.n	8101016 <__udivmoddi4+0x1e2>
 81010ec:	4640      	mov	r0, r8
 81010ee:	e7d1      	b.n	8101094 <__udivmoddi4+0x260>
 81010f0:	46d0      	mov	r8, sl
 81010f2:	e77b      	b.n	8100fec <__udivmoddi4+0x1b8>
 81010f4:	3b02      	subs	r3, #2
 81010f6:	4461      	add	r1, ip
 81010f8:	e732      	b.n	8100f60 <__udivmoddi4+0x12c>
 81010fa:	4630      	mov	r0, r6
 81010fc:	e709      	b.n	8100f12 <__udivmoddi4+0xde>
 81010fe:	4464      	add	r4, ip
 8101100:	3802      	subs	r0, #2
 8101102:	e742      	b.n	8100f8a <__udivmoddi4+0x156>

08101104 <__aeabi_idiv0>:
 8101104:	4770      	bx	lr
 8101106:	bf00      	nop

08101108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101108:	b480      	push	{r7}
 810110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810110c:	4b09      	ldr	r3, [pc, #36]	; (8101134 <SystemInit+0x2c>)
 810110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101112:	4a08      	ldr	r2, [pc, #32]	; (8101134 <SystemInit+0x2c>)
 8101114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <SystemInit+0x2c>)
 810111e:	691b      	ldr	r3, [r3, #16]
 8101120:	4a04      	ldr	r2, [pc, #16]	; (8101134 <SystemInit+0x2c>)
 8101122:	f043 0310 	orr.w	r3, r3, #16
 8101126:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101128:	bf00      	nop
 810112a:	46bd      	mov	sp, r7
 810112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101130:	4770      	bx	lr
 8101132:	bf00      	nop
 8101134:	e000ed00 	.word	0xe000ed00

08101138 <IMU_MPU6050_Init>:
// 65.5 LSB/Â°/s for +- 500Â°/s
float Acc_LSB_Sensitivity = 8192.0;
float Gyro_LSB_Sensitivity = 65.5;

int8_t IMU_MPU6050_Init(void)
{
 8101138:	b580      	push	{r7, lr}
 810113a:	b086      	sub	sp, #24
 810113c:	af04      	add	r7, sp, #16
	uint8_t Data;
	HAL_StatusTypeDef ret;
	// double check i2c comunication
	ret = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 2, 1000); // 2 prove su 1000 ms ognuna
 810113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101142:	2202      	movs	r2, #2
 8101144:	21d0      	movs	r1, #208	; 0xd0
 8101146:	485f      	ldr	r0, [pc, #380]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101148:	f001 fc56 	bl	81029f8 <HAL_I2C_IsDeviceReady>
 810114c:	4603      	mov	r3, r0
 810114e:	71fb      	strb	r3, [r7, #7]
	if(ret != HAL_OK)
 8101150:	79fb      	ldrb	r3, [r7, #7]
 8101152:	2b00      	cmp	r3, #0
 8101154:	d002      	beq.n	810115c <IMU_MPU6050_Init+0x24>
	{
		return -1;
 8101156:	f04f 33ff 	mov.w	r3, #4294967295
 810115a:	e0af      	b.n	81012bc <IMU_MPU6050_Init+0x184>
	}

	uint8_t check;
	ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 810115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101160:	9302      	str	r3, [sp, #8]
 8101162:	2301      	movs	r3, #1
 8101164:	9301      	str	r3, [sp, #4]
 8101166:	1d7b      	adds	r3, r7, #5
 8101168:	9300      	str	r3, [sp, #0]
 810116a:	2301      	movs	r3, #1
 810116c:	2275      	movs	r2, #117	; 0x75
 810116e:	21d0      	movs	r1, #208	; 0xd0
 8101170:	4854      	ldr	r0, [pc, #336]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101172:	f001 fb27 	bl	81027c4 <HAL_I2C_Mem_Read>
 8101176:	4603      	mov	r3, r0
 8101178:	71fb      	strb	r3, [r7, #7]
	// verifica se la scheda e il modulo comunicano correttamente con l'i2c
	// prima prova con API di i2c "is device ready"
	// 2a prova leggendo su registro "who am i register"

	if((ret != HAL_OK) || (check != 0x68))
 810117a:	79fb      	ldrb	r3, [r7, #7]
 810117c:	2b00      	cmp	r3, #0
 810117e:	d102      	bne.n	8101186 <IMU_MPU6050_Init+0x4e>
 8101180:	797b      	ldrb	r3, [r7, #5]
 8101182:	2b68      	cmp	r3, #104	; 0x68
 8101184:	d002      	beq.n	810118c <IMU_MPU6050_Init+0x54>
	{
		return -1;
 8101186:	f04f 33ff 	mov.w	r3, #4294967295
 810118a:	e097      	b.n	81012bc <IMU_MPU6050_Init+0x184>
	}

	// Power management configuration register
	Data = 0;
 810118c:	2300      	movs	r3, #0
 810118e:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8101190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101194:	9302      	str	r3, [sp, #8]
 8101196:	2301      	movs	r3, #1
 8101198:	9301      	str	r3, [sp, #4]
 810119a:	1dbb      	adds	r3, r7, #6
 810119c:	9300      	str	r3, [sp, #0]
 810119e:	2301      	movs	r3, #1
 81011a0:	226b      	movs	r2, #107	; 0x6b
 81011a2:	21d0      	movs	r1, #208	; 0xd0
 81011a4:	4847      	ldr	r0, [pc, #284]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011a6:	f001 f9f9 	bl	810259c <HAL_I2C_Mem_Write>
 81011aa:	4603      	mov	r3, r0
 81011ac:	71fb      	strb	r3, [r7, #7]
	//Accelerometer Configuration register

	//set accelerometer's full scale range toÂ± 4g (AFS SEL-1)

	//no self-test
	Data = 0x08;
 81011ae:	2308      	movs	r3, #8
 81011b0:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 81011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011b6:	9302      	str	r3, [sp, #8]
 81011b8:	2301      	movs	r3, #1
 81011ba:	9301      	str	r3, [sp, #4]
 81011bc:	1dbb      	adds	r3, r7, #6
 81011be:	9300      	str	r3, [sp, #0]
 81011c0:	2301      	movs	r3, #1
 81011c2:	221c      	movs	r2, #28
 81011c4:	21d0      	movs	r1, #208	; 0xd0
 81011c6:	483f      	ldr	r0, [pc, #252]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011c8:	f001 f9e8 	bl	810259c <HAL_I2C_Mem_Write>
 81011cc:	4603      	mov	r3, r0
 81011ce:	71fb      	strb	r3, [r7, #7]

	//Gyroscope Configuration register
	//set gyroscope's full scale range to Â± 508 / (FS_SEL-1)
	//no self-test

	Data = 0x08;
 81011d0:	2308      	movs	r3, #8
 81011d2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 81011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011d8:	9302      	str	r3, [sp, #8]
 81011da:	2301      	movs	r3, #1
 81011dc:	9301      	str	r3, [sp, #4]
 81011de:	1dbb      	adds	r3, r7, #6
 81011e0:	9300      	str	r3, [sp, #0]
 81011e2:	2301      	movs	r3, #1
 81011e4:	221b      	movs	r2, #27
 81011e6:	21d0      	movs	r1, #208	; 0xd0
 81011e8:	4836      	ldr	r0, [pc, #216]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81011ea:	f001 f9d7 	bl	810259c <HAL_I2C_Mem_Write>
	//Acc: 184Hz bandwidth, 2.0ms delay
	//Gyro: 188Hz bandwidth, 1.9ms delay
	//Note with DLPF gyroscope frequency reduces to 1kHz Note ace max frequency is 1kHz:
	// Note ACC max frequency is 1kHz

	Data = 0x01;
 81011ee:	2301      	movs	r3, #1
 81011f0:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1, &Data, 1, 1000);
 81011f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011f6:	9302      	str	r3, [sp, #8]
 81011f8:	2301      	movs	r3, #1
 81011fa:	9301      	str	r3, [sp, #4]
 81011fc:	1dbb      	adds	r3, r7, #6
 81011fe:	9300      	str	r3, [sp, #0]
 8101200:	2301      	movs	r3, #1
 8101202:	221a      	movs	r2, #26
 8101204:	21d0      	movs	r1, #208	; 0xd0
 8101206:	482f      	ldr	r0, [pc, #188]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101208:	f001 f9c8 	bl	810259c <HAL_I2C_Mem_Write>
 810120c:	4603      	mov	r3, r0
 810120e:	71fb      	strb	r3, [r7, #7]
	//Sample Rate Divider register

	//Sample Rate Gyroscope Output Rate (1+ SHPLRT DIV)
	//set sample rate to 20Hz, 50ms (SMPLRT_DIV=49)

	Data = 0x31;
 8101210:	2331      	movs	r3, #49	; 0x31
 8101212:	71bb      	strb	r3, [r7, #6]

	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8101214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101218:	9302      	str	r3, [sp, #8]
 810121a:	2301      	movs	r3, #1
 810121c:	9301      	str	r3, [sp, #4]
 810121e:	1dbb      	adds	r3, r7, #6
 8101220:	9300      	str	r3, [sp, #0]
 8101222:	2301      	movs	r3, #1
 8101224:	2219      	movs	r2, #25
 8101226:	21d0      	movs	r1, #208	; 0xd0
 8101228:	4826      	ldr	r0, [pc, #152]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810122a:	f001 f9b7 	bl	810259c <HAL_I2C_Mem_Write>
 810122e:	4603      	mov	r3, r0
 8101230:	71fb      	strb	r3, [r7, #7]

	//User Control register
	//enable FIFO buffer
	Data = 0x40;
 8101232:	2340      	movs	r3, #64	; 0x40
 8101234:	71bb      	strb	r3, [r7, #6]

	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 8101236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810123a:	9302      	str	r3, [sp, #8]
 810123c:	2301      	movs	r3, #1
 810123e:	9301      	str	r3, [sp, #4]
 8101240:	1dbb      	adds	r3, r7, #6
 8101242:	9300      	str	r3, [sp, #0]
 8101244:	2301      	movs	r3, #1
 8101246:	226a      	movs	r2, #106	; 0x6a
 8101248:	21d0      	movs	r1, #208	; 0xd0
 810124a:	481e      	ldr	r0, [pc, #120]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810124c:	f001 f9a6 	bl	810259c <HAL_I2C_Mem_Write>
 8101250:	4603      	mov	r3, r0
 8101252:	71fb      	strb	r3, [r7, #7]
	//FIFO Enable register

	//select accelerometer's and gyroscope's Data for FIFO buffer
	Data = 0x78;
 8101254:	2378      	movs	r3, #120	; 0x78
 8101256:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 8101258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810125c:	9302      	str	r3, [sp, #8]
 810125e:	2301      	movs	r3, #1
 8101260:	9301      	str	r3, [sp, #4]
 8101262:	1dbb      	adds	r3, r7, #6
 8101264:	9300      	str	r3, [sp, #0]
 8101266:	2301      	movs	r3, #1
 8101268:	2223      	movs	r2, #35	; 0x23
 810126a:	21d0      	movs	r1, #208	; 0xd0
 810126c:	4815      	ldr	r0, [pc, #84]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 810126e:	f001 f995 	bl	810259c <HAL_I2C_Mem_Write>
 8101272:	4603      	mov	r3, r0
 8101274:	71fb      	strb	r3, [r7, #7]

	//INT Pin Bypass Enable Configuration register
	//configure interrupt signal (default)

	Data= 0x00;
 8101276:	2300      	movs	r3, #0
 8101278:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_PIN_CFG_REG, 1, &Data, 1, 1000);
 810127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810127e:	9302      	str	r3, [sp, #8]
 8101280:	2301      	movs	r3, #1
 8101282:	9301      	str	r3, [sp, #4]
 8101284:	1dbb      	adds	r3, r7, #6
 8101286:	9300      	str	r3, [sp, #0]
 8101288:	2301      	movs	r3, #1
 810128a:	2237      	movs	r2, #55	; 0x37
 810128c:	21d0      	movs	r1, #208	; 0xd0
 810128e:	480d      	ldr	r0, [pc, #52]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 8101290:	f001 f984 	bl	810259c <HAL_I2C_Mem_Write>
 8101294:	4603      	mov	r3, r0
 8101296:	71fb      	strb	r3, [r7, #7]

	//enable Data Ready interrupt (Data_ROY EN-1)

	//(write operation to all of the sensor registers has been completed)

	Data = 0x01;
 8101298:	2301      	movs	r3, #1
 810129a:	71bb      	strb	r3, [r7, #6]

	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_ENABLE_REG, 1, &Data, 1, 1000);
 810129c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012a0:	9302      	str	r3, [sp, #8]
 81012a2:	2301      	movs	r3, #1
 81012a4:	9301      	str	r3, [sp, #4]
 81012a6:	1dbb      	adds	r3, r7, #6
 81012a8:	9300      	str	r3, [sp, #0]
 81012aa:	2301      	movs	r3, #1
 81012ac:	2238      	movs	r2, #56	; 0x38
 81012ae:	21d0      	movs	r1, #208	; 0xd0
 81012b0:	4804      	ldr	r0, [pc, #16]	; (81012c4 <IMU_MPU6050_Init+0x18c>)
 81012b2:	f001 f973 	bl	810259c <HAL_I2C_Mem_Write>
 81012b6:	4603      	mov	r3, r0
 81012b8:	71fb      	strb	r3, [r7, #7]

	return 0;
 81012ba:	2300      	movs	r3, #0

}
 81012bc:	4618      	mov	r0, r3
 81012be:	3708      	adds	r7, #8
 81012c0:	46bd      	mov	sp, r7
 81012c2:	bd80      	pop	{r7, pc}
 81012c4:	10000210 	.word	0x10000210

081012c8 <IMU_MPU6050_Read_Acc_Gyro>:

void IMU_MPU6050_Read_Acc_Gyro (MPU6050_Data* y){
 81012c8:	b580      	push	{r7, lr}
 81012ca:	b08c      	sub	sp, #48	; 0x30
 81012cc:	af04      	add	r7, sp, #16
 81012ce:	6078      	str	r0, [r7, #4]

	uint8_t Data[12]; //3acc, 3vel, 2byte each

	uint16_t counts = Read_FIFO_Count();
 81012d0:	f000 f8ee 	bl	81014b0 <Read_FIFO_Count>
 81012d4:	4603      	mov	r3, r0
 81012d6:	83fb      	strh	r3, [r7, #30]
	printf("counts %d\r\n", counts);
 81012d8:	8bfb      	ldrh	r3, [r7, #30]
 81012da:	4619      	mov	r1, r3
 81012dc:	4869      	ldr	r0, [pc, #420]	; (8101484 <IMU_MPU6050_Read_Acc_Gyro+0x1bc>)
 81012de:	f005 fd4b 	bl	8106d78 <iprintf>
	int16_t app = 0;
 81012e2:	2300      	movs	r3, #0
 81012e4:	83bb      	strh	r3, [r7, #28]

	if(counts >= 12)
 81012e6:	8bfb      	ldrh	r3, [r7, #30]
 81012e8:	2b0b      	cmp	r3, #11
 81012ea:	f240 80c6 	bls.w	810147a <IMU_MPU6050_Read_Acc_Gyro+0x1b2>
	{

		//Read 3acc, 3vel from FIFO buffer

		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_R_W_REG, 1, Data, 12, 1000);
 81012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012f2:	9302      	str	r3, [sp, #8]
 81012f4:	230c      	movs	r3, #12
 81012f6:	9301      	str	r3, [sp, #4]
 81012f8:	f107 030c 	add.w	r3, r7, #12
 81012fc:	9300      	str	r3, [sp, #0]
 81012fe:	2301      	movs	r3, #1
 8101300:	2274      	movs	r2, #116	; 0x74
 8101302:	21d0      	movs	r1, #208	; 0xd0
 8101304:	4860      	ldr	r0, [pc, #384]	; (8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1c0>)
 8101306:	f001 fa5d 	bl	81027c4 <HAL_I2C_Mem_Read>
 810130a:	4603      	mov	r3, r0
 810130c:	76fb      	strb	r3, [r7, #27]


		if(ret == HAL_OK) {
 810130e:	7efb      	ldrb	r3, [r7, #27]
 8101310:	2b00      	cmp	r3, #0
 8101312:	f040 808e 	bne.w	8101432 <IMU_MPU6050_Read_Acc_Gyro+0x16a>

			//Store acquisitions in MPU6050 Data

			app = (int16_t) Data[0] << 8 | (int16_t) Data[1];
 8101316:	7b3b      	ldrb	r3, [r7, #12]
 8101318:	021b      	lsls	r3, r3, #8
 810131a:	b21a      	sxth	r2, r3
 810131c:	7b7b      	ldrb	r3, [r7, #13]
 810131e:	b21b      	sxth	r3, r3
 8101320:	4313      	orrs	r3, r2
 8101322:	83bb      	strh	r3, [r7, #28]
			y->Ax_raw = (app / Acc_LSB_Sensitivity)*g;
 8101324:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8101328:	ee07 3a90 	vmov	s15, r3
 810132c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101330:	4b56      	ldr	r3, [pc, #344]	; (810148c <IMU_MPU6050_Read_Acc_Gyro+0x1c4>)
 8101332:	edd3 7a00 	vldr	s15, [r3]
 8101336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810133a:	4b55      	ldr	r3, [pc, #340]	; (8101490 <IMU_MPU6050_Read_Acc_Gyro+0x1c8>)
 810133c:	edd3 7a00 	vldr	s15, [r3]
 8101340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101344:	687b      	ldr	r3, [r7, #4]
 8101346:	edc3 7a00 	vstr	s15, [r3]

			app = (int16_t) Data[2] << 8 | (int16_t) Data[3];
 810134a:	7bbb      	ldrb	r3, [r7, #14]
 810134c:	021b      	lsls	r3, r3, #8
 810134e:	b21a      	sxth	r2, r3
 8101350:	7bfb      	ldrb	r3, [r7, #15]
 8101352:	b21b      	sxth	r3, r3
 8101354:	4313      	orrs	r3, r2
 8101356:	83bb      	strh	r3, [r7, #28]
			y->Ay_raw = (app / Acc_LSB_Sensitivity)*g;
 8101358:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 810135c:	ee07 3a90 	vmov	s15, r3
 8101360:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101364:	4b49      	ldr	r3, [pc, #292]	; (810148c <IMU_MPU6050_Read_Acc_Gyro+0x1c4>)
 8101366:	edd3 7a00 	vldr	s15, [r3]
 810136a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810136e:	4b48      	ldr	r3, [pc, #288]	; (8101490 <IMU_MPU6050_Read_Acc_Gyro+0x1c8>)
 8101370:	edd3 7a00 	vldr	s15, [r3]
 8101374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101378:	687b      	ldr	r3, [r7, #4]
 810137a:	edc3 7a01 	vstr	s15, [r3, #4]

			app = (int16_t) Data[4] << 8 | (int16_t) Data[5];
 810137e:	7c3b      	ldrb	r3, [r7, #16]
 8101380:	021b      	lsls	r3, r3, #8
 8101382:	b21a      	sxth	r2, r3
 8101384:	7c7b      	ldrb	r3, [r7, #17]
 8101386:	b21b      	sxth	r3, r3
 8101388:	4313      	orrs	r3, r2
 810138a:	83bb      	strh	r3, [r7, #28]
			y->Az_raw = (app / Acc_LSB_Sensitivity)*g;
 810138c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8101390:	ee07 3a90 	vmov	s15, r3
 8101394:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101398:	4b3c      	ldr	r3, [pc, #240]	; (810148c <IMU_MPU6050_Read_Acc_Gyro+0x1c4>)
 810139a:	edd3 7a00 	vldr	s15, [r3]
 810139e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013a2:	4b3b      	ldr	r3, [pc, #236]	; (8101490 <IMU_MPU6050_Read_Acc_Gyro+0x1c8>)
 81013a4:	edd3 7a00 	vldr	s15, [r3]
 81013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013ac:	687b      	ldr	r3, [r7, #4]
 81013ae:	edc3 7a02 	vstr	s15, [r3, #8]



			app = (int16_t) Data[6] << 8 | (int16_t) Data[7];
 81013b2:	7cbb      	ldrb	r3, [r7, #18]
 81013b4:	021b      	lsls	r3, r3, #8
 81013b6:	b21a      	sxth	r2, r3
 81013b8:	7cfb      	ldrb	r3, [r7, #19]
 81013ba:	b21b      	sxth	r3, r3
 81013bc:	4313      	orrs	r3, r2
 81013be:	83bb      	strh	r3, [r7, #28]
			y->Wx_raw = (app / Gyro_LSB_Sensitivity);
 81013c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 81013c4:	ee07 3a90 	vmov	s15, r3
 81013c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81013cc:	4b31      	ldr	r3, [pc, #196]	; (8101494 <IMU_MPU6050_Read_Acc_Gyro+0x1cc>)
 81013ce:	ed93 7a00 	vldr	s14, [r3]
 81013d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	edc3 7a03 	vstr	s15, [r3, #12]

			app = (int16_t) Data[8] << 8 | (int16_t) Data[9];
 81013dc:	7d3b      	ldrb	r3, [r7, #20]
 81013de:	021b      	lsls	r3, r3, #8
 81013e0:	b21a      	sxth	r2, r3
 81013e2:	7d7b      	ldrb	r3, [r7, #21]
 81013e4:	b21b      	sxth	r3, r3
 81013e6:	4313      	orrs	r3, r2
 81013e8:	83bb      	strh	r3, [r7, #28]
			y->Wy_raw = (app / Gyro_LSB_Sensitivity);
 81013ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 81013ee:	ee07 3a90 	vmov	s15, r3
 81013f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81013f6:	4b27      	ldr	r3, [pc, #156]	; (8101494 <IMU_MPU6050_Read_Acc_Gyro+0x1cc>)
 81013f8:	ed93 7a00 	vldr	s14, [r3]
 81013fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101400:	687b      	ldr	r3, [r7, #4]
 8101402:	edc3 7a04 	vstr	s15, [r3, #16]

			app = (int16_t) Data[10] << 8 | (int16_t) Data[11];
 8101406:	7dbb      	ldrb	r3, [r7, #22]
 8101408:	021b      	lsls	r3, r3, #8
 810140a:	b21a      	sxth	r2, r3
 810140c:	7dfb      	ldrb	r3, [r7, #23]
 810140e:	b21b      	sxth	r3, r3
 8101410:	4313      	orrs	r3, r2
 8101412:	83bb      	strh	r3, [r7, #28]
			y->Wz_raw = (app / Gyro_LSB_Sensitivity);
 8101414:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8101418:	ee07 3a90 	vmov	s15, r3
 810141c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101420:	4b1c      	ldr	r3, [pc, #112]	; (8101494 <IMU_MPU6050_Read_Acc_Gyro+0x1cc>)
 8101422:	ed93 7a00 	vldr	s14, [r3]
 8101426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810142a:	687b      	ldr	r3, [r7, #4]
 810142c:	edc3 7a05 	vstr	s15, [r3, #20]
 8101430:	e018      	b.n	8101464 <IMU_MPU6050_Read_Acc_Gyro+0x19c>

		}

		else
		{
			printf("Error I2C\r\n");
 8101432:	4819      	ldr	r0, [pc, #100]	; (8101498 <IMU_MPU6050_Read_Acc_Gyro+0x1d0>)
 8101434:	f005 fd26 	bl	8106e84 <puts>

			switch(ret)
 8101438:	7efb      	ldrb	r3, [r7, #27]
 810143a:	2b03      	cmp	r3, #3
 810143c:	d00e      	beq.n	810145c <IMU_MPU6050_Read_Acc_Gyro+0x194>
 810143e:	2b03      	cmp	r3, #3
 8101440:	dc10      	bgt.n	8101464 <IMU_MPU6050_Read_Acc_Gyro+0x19c>
 8101442:	2b01      	cmp	r3, #1
 8101444:	d002      	beq.n	810144c <IMU_MPU6050_Read_Acc_Gyro+0x184>
 8101446:	2b02      	cmp	r3, #2
 8101448:	d004      	beq.n	8101454 <IMU_MPU6050_Read_Acc_Gyro+0x18c>
 810144a:	e00b      	b.n	8101464 <IMU_MPU6050_Read_Acc_Gyro+0x19c>
			{
				case HAL_ERROR: printf("HAL_ERROR\r\n"); break;
 810144c:	4813      	ldr	r0, [pc, #76]	; (810149c <IMU_MPU6050_Read_Acc_Gyro+0x1d4>)
 810144e:	f005 fd19 	bl	8106e84 <puts>
 8101452:	e007      	b.n	8101464 <IMU_MPU6050_Read_Acc_Gyro+0x19c>
				case HAL_BUSY: printf("HAL_BUSY\r\n"); break;
 8101454:	4812      	ldr	r0, [pc, #72]	; (81014a0 <IMU_MPU6050_Read_Acc_Gyro+0x1d8>)
 8101456:	f005 fd15 	bl	8106e84 <puts>
 810145a:	e003      	b.n	8101464 <IMU_MPU6050_Read_Acc_Gyro+0x19c>
				case HAL_TIMEOUT: printf("HAL_TIMEOUT\r\n"); break;
 810145c:	4811      	ldr	r0, [pc, #68]	; (81014a4 <IMU_MPU6050_Read_Acc_Gyro+0x1dc>)
 810145e:	f005 fd11 	bl	8106e84 <puts>
 8101462:	bf00      	nop
			}

		}

		if(counts>12)
 8101464:	8bfb      	ldrh	r3, [r7, #30]
 8101466:	2b0c      	cmp	r3, #12
 8101468:	d907      	bls.n	810147a <IMU_MPU6050_Read_Acc_Gyro+0x1b2>
		{
			printf("Delay\r\n");
 810146a:	480f      	ldr	r0, [pc, #60]	; (81014a8 <IMU_MPU6050_Read_Acc_Gyro+0x1e0>)
 810146c:	f005 fd0a 	bl	8106e84 <puts>
			printf("Reset FIFO buffer\r\n");
 8101470:	480e      	ldr	r0, [pc, #56]	; (81014ac <IMU_MPU6050_Read_Acc_Gyro+0x1e4>)
 8101472:	f005 fd07 	bl	8106e84 <puts>
			Reset_Reable_FIFO();
 8101476:	f000 f84f 	bl	8101518 <Reset_Reable_FIFO>
		}
	}
}
 810147a:	bf00      	nop
 810147c:	3720      	adds	r7, #32
 810147e:	46bd      	mov	sp, r7
 8101480:	bd80      	pop	{r7, pc}
 8101482:	bf00      	nop
 8101484:	0810aa98 	.word	0x0810aa98
 8101488:	10000210 	.word	0x10000210
 810148c:	1000000c 	.word	0x1000000c
 8101490:	10000008 	.word	0x10000008
 8101494:	10000010 	.word	0x10000010
 8101498:	0810aaa4 	.word	0x0810aaa4
 810149c:	0810aab0 	.word	0x0810aab0
 81014a0:	0810aabc 	.word	0x0810aabc
 81014a4:	0810aac8 	.word	0x0810aac8
 81014a8:	0810aad8 	.word	0x0810aad8
 81014ac:	0810aae0 	.word	0x0810aae0

081014b0 <Read_FIFO_Count>:

// Read FIFO Count register
// Output: FIFO Count (n byte)

uint16_t Read_FIFO_Count()
{
 81014b0:	b580      	push	{r7, lr}
 81014b2:	b086      	sub	sp, #24
 81014b4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint16_t fifo_count = 0;
 81014b6:	2300      	movs	r3, #0
 81014b8:	80fb      	strh	r3, [r7, #6]
	uint8_t Rec_Data[2];

	//Read Fifo_Count_H
	ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_COUNT_H_REG, 1, Rec_Data, 1, 1000);
 81014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81014be:	9302      	str	r3, [sp, #8]
 81014c0:	2301      	movs	r3, #1
 81014c2:	9301      	str	r3, [sp, #4]
 81014c4:	463b      	mov	r3, r7
 81014c6:	9300      	str	r3, [sp, #0]
 81014c8:	2301      	movs	r3, #1
 81014ca:	2272      	movs	r2, #114	; 0x72
 81014cc:	21d0      	movs	r1, #208	; 0xd0
 81014ce:	4811      	ldr	r0, [pc, #68]	; (8101514 <Read_FIFO_Count+0x64>)
 81014d0:	f001 f978 	bl	81027c4 <HAL_I2C_Mem_Read>
 81014d4:	4603      	mov	r3, r0
 81014d6:	717b      	strb	r3, [r7, #5]

	//Read Fifo_Count_L
	ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_COUNT_L_REG, 1, Rec_Data +1, 1, 1000);
 81014d8:	463b      	mov	r3, r7
 81014da:	3301      	adds	r3, #1
 81014dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 81014e0:	9202      	str	r2, [sp, #8]
 81014e2:	2201      	movs	r2, #1
 81014e4:	9201      	str	r2, [sp, #4]
 81014e6:	9300      	str	r3, [sp, #0]
 81014e8:	2301      	movs	r3, #1
 81014ea:	2273      	movs	r2, #115	; 0x73
 81014ec:	21d0      	movs	r1, #208	; 0xd0
 81014ee:	4809      	ldr	r0, [pc, #36]	; (8101514 <Read_FIFO_Count+0x64>)
 81014f0:	f001 f968 	bl	81027c4 <HAL_I2C_Mem_Read>
 81014f4:	4603      	mov	r3, r0
 81014f6:	717b      	strb	r3, [r7, #5]

	//Get FIFO Count value
	fifo_count = (uint16_t)(Rec_Data[0]<<8 | Rec_Data[1]);
 81014f8:	783b      	ldrb	r3, [r7, #0]
 81014fa:	021b      	lsls	r3, r3, #8
 81014fc:	b21a      	sxth	r2, r3
 81014fe:	787b      	ldrb	r3, [r7, #1]
 8101500:	b21b      	sxth	r3, r3
 8101502:	4313      	orrs	r3, r2
 8101504:	b21b      	sxth	r3, r3
 8101506:	80fb      	strh	r3, [r7, #6]

	return fifo_count;
 8101508:	88fb      	ldrh	r3, [r7, #6]
}
 810150a:	4618      	mov	r0, r3
 810150c:	3708      	adds	r7, #8
 810150e:	46bd      	mov	sp, r7
 8101510:	bd80      	pop	{r7, pc}
 8101512:	bf00      	nop
 8101514:	10000210 	.word	0x10000210

08101518 <Reset_Reable_FIFO>:

// Reset and reable Fifo butter
void Reset_Reable_FIFO(){
 8101518:	b580      	push	{r7, lr}
 810151a:	b086      	sub	sp, #24
 810151c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;

	//Reset FIFO
	uint8_t Data = 0x04;
 810151e:	2304      	movs	r3, #4
 8101520:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 8101522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101526:	9302      	str	r3, [sp, #8]
 8101528:	2301      	movs	r3, #1
 810152a:	9301      	str	r3, [sp, #4]
 810152c:	1dbb      	adds	r3, r7, #6
 810152e:	9300      	str	r3, [sp, #0]
 8101530:	2301      	movs	r3, #1
 8101532:	226a      	movs	r2, #106	; 0x6a
 8101534:	21d0      	movs	r1, #208	; 0xd0
 8101536:	480d      	ldr	r0, [pc, #52]	; (810156c <Reset_Reable_FIFO+0x54>)
 8101538:	f001 f830 	bl	810259c <HAL_I2C_Mem_Write>
 810153c:	4603      	mov	r3, r0
 810153e:	71fb      	strb	r3, [r7, #7]

	//Reable FIFO
	Data = 0x40;
 8101540:	2340      	movs	r3, #64	; 0x40
 8101542:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 8101544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101548:	9302      	str	r3, [sp, #8]
 810154a:	2301      	movs	r3, #1
 810154c:	9301      	str	r3, [sp, #4]
 810154e:	1dbb      	adds	r3, r7, #6
 8101550:	9300      	str	r3, [sp, #0]
 8101552:	2301      	movs	r3, #1
 8101554:	226a      	movs	r2, #106	; 0x6a
 8101556:	21d0      	movs	r1, #208	; 0xd0
 8101558:	4804      	ldr	r0, [pc, #16]	; (810156c <Reset_Reable_FIFO+0x54>)
 810155a:	f001 f81f 	bl	810259c <HAL_I2C_Mem_Write>
 810155e:	4603      	mov	r3, r0
 8101560:	71fb      	strb	r3, [r7, #7]
}
 8101562:	bf00      	nop
 8101564:	3708      	adds	r7, #8
 8101566:	46bd      	mov	sp, r7
 8101568:	bd80      	pop	{r7, pc}
 810156a:	bf00      	nop
 810156c:	10000210 	.word	0x10000210

08101570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101570:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101574:	b08c      	sub	sp, #48	; 0x30
 8101576:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101578:	4b43      	ldr	r3, [pc, #268]	; (8101688 <main+0x118>)
 810157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810157e:	4a42      	ldr	r2, [pc, #264]	; (8101688 <main+0x118>)
 8101580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101588:	4b3f      	ldr	r3, [pc, #252]	; (8101688 <main+0x118>)
 810158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101592:	607b      	str	r3, [r7, #4]
 8101594:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101596:	2001      	movs	r0, #1
 8101598:	f000 ff5e 	bl	8102458 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810159c:	f001 feec 	bl	8103378 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81015a0:	2201      	movs	r2, #1
 81015a2:	2102      	movs	r1, #2
 81015a4:	2000      	movs	r0, #0
 81015a6:	f001 fe6d 	bl	8103284 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81015aa:	4b38      	ldr	r3, [pc, #224]	; (810168c <main+0x11c>)
 81015ac:	681b      	ldr	r3, [r3, #0]
 81015ae:	091b      	lsrs	r3, r3, #4
 81015b0:	f003 030f 	and.w	r3, r3, #15
 81015b4:	2b07      	cmp	r3, #7
 81015b6:	d108      	bne.n	81015ca <main+0x5a>
 81015b8:	4b35      	ldr	r3, [pc, #212]	; (8101690 <main+0x120>)
 81015ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81015be:	4a34      	ldr	r2, [pc, #208]	; (8101690 <main+0x120>)
 81015c0:	f043 0301 	orr.w	r3, r3, #1
 81015c4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81015c8:	e007      	b.n	81015da <main+0x6a>
 81015ca:	4b31      	ldr	r3, [pc, #196]	; (8101690 <main+0x120>)
 81015cc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81015d0:	4a2f      	ldr	r2, [pc, #188]	; (8101690 <main+0x120>)
 81015d2:	f043 0301 	orr.w	r3, r3, #1
 81015d6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81015da:	f000 fb77 	bl	8101ccc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81015de:	f000 f8ef 	bl	81017c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 81015e2:	f000 f8a1 	bl	8101728 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 81015e6:	f000 f85f 	bl	81016a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Data y;
  IMU_MPU6050_Init();
 81015ea:	f7ff fda5 	bl	8101138 <IMU_MPU6050_Init>
  printf("Start\r\n");
 81015ee:	4829      	ldr	r0, [pc, #164]	; (8101694 <main+0x124>)
 81015f0:	f005 fc48 	bl	8106e84 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag_MPU6050_Data_Ready == 1)
 81015f4:	4b28      	ldr	r3, [pc, #160]	; (8101698 <main+0x128>)
 81015f6:	681b      	ldr	r3, [r3, #0]
 81015f8:	2b01      	cmp	r3, #1
 81015fa:	d1fb      	bne.n	81015f4 <main+0x84>
	  {
	  		  flag_MPU6050_Data_Ready = 0;
 81015fc:	4b26      	ldr	r3, [pc, #152]	; (8101698 <main+0x128>)
 81015fe:	2200      	movs	r2, #0
 8101600:	601a      	str	r2, [r3, #0]
	  		  IMU_MPU6050_Read_Acc_Gyro(&y);
 8101602:	f107 0308 	add.w	r3, r7, #8
 8101606:	4618      	mov	r0, r3
 8101608:	f7ff fe5e 	bl	81012c8 <IMU_MPU6050_Read_Acc_Gyro>
	  		  printf("Ax: %f, Ay: %f, Az: %f [m/s^2]\r\n",y.Ax_raw,y.Ay_raw,y.Az_raw);
 810160c:	68bb      	ldr	r3, [r7, #8]
 810160e:	4618      	mov	r0, r3
 8101610:	f7ff f822 	bl	8100658 <__aeabi_f2d>
 8101614:	4680      	mov	r8, r0
 8101616:	4689      	mov	r9, r1
 8101618:	68fb      	ldr	r3, [r7, #12]
 810161a:	4618      	mov	r0, r3
 810161c:	f7ff f81c 	bl	8100658 <__aeabi_f2d>
 8101620:	4604      	mov	r4, r0
 8101622:	460d      	mov	r5, r1
 8101624:	693b      	ldr	r3, [r7, #16]
 8101626:	4618      	mov	r0, r3
 8101628:	f7ff f816 	bl	8100658 <__aeabi_f2d>
 810162c:	4602      	mov	r2, r0
 810162e:	460b      	mov	r3, r1
 8101630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8101634:	e9cd 4500 	strd	r4, r5, [sp]
 8101638:	4642      	mov	r2, r8
 810163a:	464b      	mov	r3, r9
 810163c:	4817      	ldr	r0, [pc, #92]	; (810169c <main+0x12c>)
 810163e:	f005 fb9b 	bl	8106d78 <iprintf>
	  		  printf("Gx: %f, Gy: %f, Gz: %f [degree/s]\r\n", y.Wx_raw, y.Wy_raw, y.Wz_raw);
 8101642:	697b      	ldr	r3, [r7, #20]
 8101644:	4618      	mov	r0, r3
 8101646:	f7ff f807 	bl	8100658 <__aeabi_f2d>
 810164a:	4680      	mov	r8, r0
 810164c:	4689      	mov	r9, r1
 810164e:	69bb      	ldr	r3, [r7, #24]
 8101650:	4618      	mov	r0, r3
 8101652:	f7ff f801 	bl	8100658 <__aeabi_f2d>
 8101656:	4604      	mov	r4, r0
 8101658:	460d      	mov	r5, r1
 810165a:	69fb      	ldr	r3, [r7, #28]
 810165c:	4618      	mov	r0, r3
 810165e:	f7fe fffb 	bl	8100658 <__aeabi_f2d>
 8101662:	4602      	mov	r2, r0
 8101664:	460b      	mov	r3, r1
 8101666:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810166a:	e9cd 4500 	strd	r4, r5, [sp]
 810166e:	4642      	mov	r2, r8
 8101670:	464b      	mov	r3, r9
 8101672:	480b      	ldr	r0, [pc, #44]	; (81016a0 <main+0x130>)
 8101674:	f005 fb80 	bl	8106d78 <iprintf>
	  		  printf("\r\n");
 8101678:	480a      	ldr	r0, [pc, #40]	; (81016a4 <main+0x134>)
 810167a:	f005 fc03 	bl	8106e84 <puts>
	  		  HAL_Delay(250);
 810167e:	20fa      	movs	r0, #250	; 0xfa
 8101680:	f000 fbd8 	bl	8101e34 <HAL_Delay>
	  if(flag_MPU6050_Data_Ready == 1)
 8101684:	e7b6      	b.n	81015f4 <main+0x84>
 8101686:	bf00      	nop
 8101688:	58024400 	.word	0x58024400
 810168c:	e000ed00 	.word	0xe000ed00
 8101690:	58026400 	.word	0x58026400
 8101694:	0810aaf4 	.word	0x0810aaf4
 8101698:	1000020c 	.word	0x1000020c
 810169c:	0810aafc 	.word	0x0810aafc
 81016a0:	0810ab20 	.word	0x0810ab20
 81016a4:	0810ab44 	.word	0x0810ab44

081016a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 81016a8:	b580      	push	{r7, lr}
 81016aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 81016ac:	4b1b      	ldr	r3, [pc, #108]	; (810171c <MX_I2C1_Init+0x74>)
 81016ae:	4a1c      	ldr	r2, [pc, #112]	; (8101720 <MX_I2C1_Init+0x78>)
 81016b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 81016b2:	4b1a      	ldr	r3, [pc, #104]	; (810171c <MX_I2C1_Init+0x74>)
 81016b4:	4a1b      	ldr	r2, [pc, #108]	; (8101724 <MX_I2C1_Init+0x7c>)
 81016b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81016b8:	4b18      	ldr	r3, [pc, #96]	; (810171c <MX_I2C1_Init+0x74>)
 81016ba:	2200      	movs	r2, #0
 81016bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81016be:	4b17      	ldr	r3, [pc, #92]	; (810171c <MX_I2C1_Init+0x74>)
 81016c0:	2201      	movs	r2, #1
 81016c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81016c4:	4b15      	ldr	r3, [pc, #84]	; (810171c <MX_I2C1_Init+0x74>)
 81016c6:	2200      	movs	r2, #0
 81016c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81016ca:	4b14      	ldr	r3, [pc, #80]	; (810171c <MX_I2C1_Init+0x74>)
 81016cc:	2200      	movs	r2, #0
 81016ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81016d0:	4b12      	ldr	r3, [pc, #72]	; (810171c <MX_I2C1_Init+0x74>)
 81016d2:	2200      	movs	r2, #0
 81016d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81016d6:	4b11      	ldr	r3, [pc, #68]	; (810171c <MX_I2C1_Init+0x74>)
 81016d8:	2200      	movs	r2, #0
 81016da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81016dc:	4b0f      	ldr	r3, [pc, #60]	; (810171c <MX_I2C1_Init+0x74>)
 81016de:	2200      	movs	r2, #0
 81016e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81016e2:	480e      	ldr	r0, [pc, #56]	; (810171c <MX_I2C1_Init+0x74>)
 81016e4:	f000 feca 	bl	810247c <HAL_I2C_Init>
 81016e8:	4603      	mov	r3, r0
 81016ea:	2b00      	cmp	r3, #0
 81016ec:	d001      	beq.n	81016f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81016ee:	f000 f8e3 	bl	81018b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81016f2:	2100      	movs	r1, #0
 81016f4:	4809      	ldr	r0, [pc, #36]	; (810171c <MX_I2C1_Init+0x74>)
 81016f6:	f001 fd2d 	bl	8103154 <HAL_I2CEx_ConfigAnalogFilter>
 81016fa:	4603      	mov	r3, r0
 81016fc:	2b00      	cmp	r3, #0
 81016fe:	d001      	beq.n	8101704 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101700:	f000 f8da 	bl	81018b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101704:	2100      	movs	r1, #0
 8101706:	4805      	ldr	r0, [pc, #20]	; (810171c <MX_I2C1_Init+0x74>)
 8101708:	f001 fd6f 	bl	81031ea <HAL_I2CEx_ConfigDigitalFilter>
 810170c:	4603      	mov	r3, r0
 810170e:	2b00      	cmp	r3, #0
 8101710:	d001      	beq.n	8101716 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101712:	f000 f8d1 	bl	81018b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101716:	bf00      	nop
 8101718:	bd80      	pop	{r7, pc}
 810171a:	bf00      	nop
 810171c:	10000210 	.word	0x10000210
 8101720:	40005400 	.word	0x40005400
 8101724:	307075b1 	.word	0x307075b1

08101728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101728:	b580      	push	{r7, lr}
 810172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810172c:	4b22      	ldr	r3, [pc, #136]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 810172e:	4a23      	ldr	r2, [pc, #140]	; (81017bc <MX_USART3_UART_Init+0x94>)
 8101730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101732:	4b21      	ldr	r3, [pc, #132]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 8101734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810173a:	4b1f      	ldr	r3, [pc, #124]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 810173c:	2200      	movs	r2, #0
 810173e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101740:	4b1d      	ldr	r3, [pc, #116]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 8101742:	2200      	movs	r2, #0
 8101744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101746:	4b1c      	ldr	r3, [pc, #112]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 8101748:	2200      	movs	r2, #0
 810174a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810174c:	4b1a      	ldr	r3, [pc, #104]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 810174e:	220c      	movs	r2, #12
 8101750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101752:	4b19      	ldr	r3, [pc, #100]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 8101754:	2200      	movs	r2, #0
 8101756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101758:	4b17      	ldr	r3, [pc, #92]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 810175a:	2200      	movs	r2, #0
 810175c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810175e:	4b16      	ldr	r3, [pc, #88]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 8101760:	2200      	movs	r2, #0
 8101762:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101764:	4b14      	ldr	r3, [pc, #80]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 8101766:	2200      	movs	r2, #0
 8101768:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810176a:	4b13      	ldr	r3, [pc, #76]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 810176c:	2200      	movs	r2, #0
 810176e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101770:	4811      	ldr	r0, [pc, #68]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 8101772:	f003 fb4f 	bl	8104e14 <HAL_UART_Init>
 8101776:	4603      	mov	r3, r0
 8101778:	2b00      	cmp	r3, #0
 810177a:	d001      	beq.n	8101780 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810177c:	f000 f89c 	bl	81018b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101780:	2100      	movs	r1, #0
 8101782:	480d      	ldr	r0, [pc, #52]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 8101784:	f004 fb82 	bl	8105e8c <HAL_UARTEx_SetTxFifoThreshold>
 8101788:	4603      	mov	r3, r0
 810178a:	2b00      	cmp	r3, #0
 810178c:	d001      	beq.n	8101792 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810178e:	f000 f893 	bl	81018b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101792:	2100      	movs	r1, #0
 8101794:	4808      	ldr	r0, [pc, #32]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 8101796:	f004 fbb7 	bl	8105f08 <HAL_UARTEx_SetRxFifoThreshold>
 810179a:	4603      	mov	r3, r0
 810179c:	2b00      	cmp	r3, #0
 810179e:	d001      	beq.n	81017a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81017a0:	f000 f88a 	bl	81018b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81017a4:	4804      	ldr	r0, [pc, #16]	; (81017b8 <MX_USART3_UART_Init+0x90>)
 81017a6:	f004 fb38 	bl	8105e1a <HAL_UARTEx_DisableFifoMode>
 81017aa:	4603      	mov	r3, r0
 81017ac:	2b00      	cmp	r3, #0
 81017ae:	d001      	beq.n	81017b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81017b0:	f000 f882 	bl	81018b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81017b4:	bf00      	nop
 81017b6:	bd80      	pop	{r7, pc}
 81017b8:	1000025c 	.word	0x1000025c
 81017bc:	40004800 	.word	0x40004800

081017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81017c0:	b580      	push	{r7, lr}
 81017c2:	b088      	sub	sp, #32
 81017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017c6:	f107 030c 	add.w	r3, r7, #12
 81017ca:	2200      	movs	r2, #0
 81017cc:	601a      	str	r2, [r3, #0]
 81017ce:	605a      	str	r2, [r3, #4]
 81017d0:	609a      	str	r2, [r3, #8]
 81017d2:	60da      	str	r2, [r3, #12]
 81017d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81017d6:	4b23      	ldr	r3, [pc, #140]	; (8101864 <MX_GPIO_Init+0xa4>)
 81017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017dc:	4a21      	ldr	r2, [pc, #132]	; (8101864 <MX_GPIO_Init+0xa4>)
 81017de:	f043 0301 	orr.w	r3, r3, #1
 81017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017e6:	4b1f      	ldr	r3, [pc, #124]	; (8101864 <MX_GPIO_Init+0xa4>)
 81017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017ec:	f003 0301 	and.w	r3, r3, #1
 81017f0:	60bb      	str	r3, [r7, #8]
 81017f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81017f4:	4b1b      	ldr	r3, [pc, #108]	; (8101864 <MX_GPIO_Init+0xa4>)
 81017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017fa:	4a1a      	ldr	r2, [pc, #104]	; (8101864 <MX_GPIO_Init+0xa4>)
 81017fc:	f043 0308 	orr.w	r3, r3, #8
 8101800:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101804:	4b17      	ldr	r3, [pc, #92]	; (8101864 <MX_GPIO_Init+0xa4>)
 8101806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810180a:	f003 0308 	and.w	r3, r3, #8
 810180e:	607b      	str	r3, [r7, #4]
 8101810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101812:	4b14      	ldr	r3, [pc, #80]	; (8101864 <MX_GPIO_Init+0xa4>)
 8101814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101818:	4a12      	ldr	r2, [pc, #72]	; (8101864 <MX_GPIO_Init+0xa4>)
 810181a:	f043 0302 	orr.w	r3, r3, #2
 810181e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101822:	4b10      	ldr	r3, [pc, #64]	; (8101864 <MX_GPIO_Init+0xa4>)
 8101824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101828:	f003 0302 	and.w	r3, r3, #2
 810182c:	603b      	str	r3, [r7, #0]
 810182e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101830:	2308      	movs	r3, #8
 8101832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101834:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810183a:	2300      	movs	r3, #0
 810183c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810183e:	f107 030c 	add.w	r3, r7, #12
 8101842:	4619      	mov	r1, r3
 8101844:	4808      	ldr	r0, [pc, #32]	; (8101868 <MX_GPIO_Init+0xa8>)
 8101846:	f000 fc3d 	bl	81020c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 810184a:	2200      	movs	r2, #0
 810184c:	2100      	movs	r1, #0
 810184e:	2009      	movs	r0, #9
 8101850:	f000 fbef 	bl	8102032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8101854:	2009      	movs	r0, #9
 8101856:	f000 fc06 	bl	8102066 <HAL_NVIC_EnableIRQ>

}
 810185a:	bf00      	nop
 810185c:	3720      	adds	r7, #32
 810185e:	46bd      	mov	sp, r7
 8101860:	bd80      	pop	{r7, pc}
 8101862:	bf00      	nop
 8101864:	58024400 	.word	0x58024400
 8101868:	58020000 	.word	0x58020000

0810186c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 810186c:	b480      	push	{r7}
 810186e:	b083      	sub	sp, #12
 8101870:	af00      	add	r7, sp, #0
 8101872:	4603      	mov	r3, r0
 8101874:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3)
 8101876:	88fb      	ldrh	r3, [r7, #6]
 8101878:	2b08      	cmp	r3, #8
 810187a:	d102      	bne.n	8101882 <HAL_GPIO_EXTI_Callback+0x16>
	{
		flag_MPU6050_Data_Ready = 1;
 810187c:	4b04      	ldr	r3, [pc, #16]	; (8101890 <HAL_GPIO_EXTI_Callback+0x24>)
 810187e:	2201      	movs	r2, #1
 8101880:	601a      	str	r2, [r3, #0]
	}
}
 8101882:	bf00      	nop
 8101884:	370c      	adds	r7, #12
 8101886:	46bd      	mov	sp, r7
 8101888:	f85d 7b04 	ldr.w	r7, [sp], #4
 810188c:	4770      	bx	lr
 810188e:	bf00      	nop
 8101890:	1000020c 	.word	0x1000020c

08101894 <__io_putchar>:

int __io_putchar(int ch)
{
 8101894:	b580      	push	{r7, lr}
 8101896:	b082      	sub	sp, #8
 8101898:	af00      	add	r7, sp, #0
 810189a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch,1, 0xFFFF);
 810189c:	1d39      	adds	r1, r7, #4
 810189e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81018a2:	2201      	movs	r2, #1
 81018a4:	4803      	ldr	r0, [pc, #12]	; (81018b4 <__io_putchar+0x20>)
 81018a6:	f003 fb05 	bl	8104eb4 <HAL_UART_Transmit>
	return ch;
 81018aa:	687b      	ldr	r3, [r7, #4]
}
 81018ac:	4618      	mov	r0, r3
 81018ae:	3708      	adds	r7, #8
 81018b0:	46bd      	mov	sp, r7
 81018b2:	bd80      	pop	{r7, pc}
 81018b4:	1000025c 	.word	0x1000025c

081018b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81018b8:	b480      	push	{r7}
 81018ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81018bc:	b672      	cpsid	i
}
 81018be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81018c0:	e7fe      	b.n	81018c0 <Error_Handler+0x8>
	...

081018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81018c4:	b480      	push	{r7}
 81018c6:	b083      	sub	sp, #12
 81018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81018ca:	4b0a      	ldr	r3, [pc, #40]	; (81018f4 <HAL_MspInit+0x30>)
 81018cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81018d0:	4a08      	ldr	r2, [pc, #32]	; (81018f4 <HAL_MspInit+0x30>)
 81018d2:	f043 0302 	orr.w	r3, r3, #2
 81018d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81018da:	4b06      	ldr	r3, [pc, #24]	; (81018f4 <HAL_MspInit+0x30>)
 81018dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81018e0:	f003 0302 	and.w	r3, r3, #2
 81018e4:	607b      	str	r3, [r7, #4]
 81018e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81018e8:	bf00      	nop
 81018ea:	370c      	adds	r7, #12
 81018ec:	46bd      	mov	sp, r7
 81018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018f2:	4770      	bx	lr
 81018f4:	58024400 	.word	0x58024400

081018f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 81018f8:	b580      	push	{r7, lr}
 81018fa:	b0b8      	sub	sp, #224	; 0xe0
 81018fc:	af00      	add	r7, sp, #0
 81018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101900:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101904:	2200      	movs	r2, #0
 8101906:	601a      	str	r2, [r3, #0]
 8101908:	605a      	str	r2, [r3, #4]
 810190a:	609a      	str	r2, [r3, #8]
 810190c:	60da      	str	r2, [r3, #12]
 810190e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101910:	f107 0310 	add.w	r3, r7, #16
 8101914:	22bc      	movs	r2, #188	; 0xbc
 8101916:	2100      	movs	r1, #0
 8101918:	4618      	mov	r0, r3
 810191a:	f004 fbab 	bl	8106074 <memset>
  if(hi2c->Instance==I2C1)
 810191e:	687b      	ldr	r3, [r7, #4]
 8101920:	681b      	ldr	r3, [r3, #0]
 8101922:	4a24      	ldr	r2, [pc, #144]	; (81019b4 <HAL_I2C_MspInit+0xbc>)
 8101924:	4293      	cmp	r3, r2
 8101926:	d141      	bne.n	81019ac <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101928:	2308      	movs	r3, #8
 810192a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 810192c:	2300      	movs	r3, #0
 810192e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101932:	f107 0310 	add.w	r3, r7, #16
 8101936:	4618      	mov	r0, r3
 8101938:	f001 ff04 	bl	8103744 <HAL_RCCEx_PeriphCLKConfig>
 810193c:	4603      	mov	r3, r0
 810193e:	2b00      	cmp	r3, #0
 8101940:	d001      	beq.n	8101946 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8101942:	f7ff ffb9 	bl	81018b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101946:	4b1c      	ldr	r3, [pc, #112]	; (81019b8 <HAL_I2C_MspInit+0xc0>)
 8101948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810194c:	4a1a      	ldr	r2, [pc, #104]	; (81019b8 <HAL_I2C_MspInit+0xc0>)
 810194e:	f043 0302 	orr.w	r3, r3, #2
 8101952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101956:	4b18      	ldr	r3, [pc, #96]	; (81019b8 <HAL_I2C_MspInit+0xc0>)
 8101958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810195c:	f003 0302 	and.w	r3, r3, #2
 8101960:	60fb      	str	r3, [r7, #12]
 8101962:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8101964:	23c0      	movs	r3, #192	; 0xc0
 8101966:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810196a:	2312      	movs	r3, #18
 810196c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101970:	2300      	movs	r3, #0
 8101972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101976:	2300      	movs	r3, #0
 8101978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810197c:	2304      	movs	r3, #4
 810197e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101982:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101986:	4619      	mov	r1, r3
 8101988:	480c      	ldr	r0, [pc, #48]	; (81019bc <HAL_I2C_MspInit+0xc4>)
 810198a:	f000 fb9b 	bl	81020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810198e:	4b0a      	ldr	r3, [pc, #40]	; (81019b8 <HAL_I2C_MspInit+0xc0>)
 8101990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101994:	4a08      	ldr	r2, [pc, #32]	; (81019b8 <HAL_I2C_MspInit+0xc0>)
 8101996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810199a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810199e:	4b06      	ldr	r3, [pc, #24]	; (81019b8 <HAL_I2C_MspInit+0xc0>)
 81019a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81019a8:	60bb      	str	r3, [r7, #8]
 81019aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 81019ac:	bf00      	nop
 81019ae:	37e0      	adds	r7, #224	; 0xe0
 81019b0:	46bd      	mov	sp, r7
 81019b2:	bd80      	pop	{r7, pc}
 81019b4:	40005400 	.word	0x40005400
 81019b8:	58024400 	.word	0x58024400
 81019bc:	58020400 	.word	0x58020400

081019c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81019c0:	b580      	push	{r7, lr}
 81019c2:	b0b8      	sub	sp, #224	; 0xe0
 81019c4:	af00      	add	r7, sp, #0
 81019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81019cc:	2200      	movs	r2, #0
 81019ce:	601a      	str	r2, [r3, #0]
 81019d0:	605a      	str	r2, [r3, #4]
 81019d2:	609a      	str	r2, [r3, #8]
 81019d4:	60da      	str	r2, [r3, #12]
 81019d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81019d8:	f107 0310 	add.w	r3, r7, #16
 81019dc:	22bc      	movs	r2, #188	; 0xbc
 81019de:	2100      	movs	r1, #0
 81019e0:	4618      	mov	r0, r3
 81019e2:	f004 fb47 	bl	8106074 <memset>
  if(huart->Instance==USART3)
 81019e6:	687b      	ldr	r3, [r7, #4]
 81019e8:	681b      	ldr	r3, [r3, #0]
 81019ea:	4a25      	ldr	r2, [pc, #148]	; (8101a80 <HAL_UART_MspInit+0xc0>)
 81019ec:	4293      	cmp	r3, r2
 81019ee:	d142      	bne.n	8101a76 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81019f0:	2302      	movs	r3, #2
 81019f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81019f4:	2300      	movs	r3, #0
 81019f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81019fa:	f107 0310 	add.w	r3, r7, #16
 81019fe:	4618      	mov	r0, r3
 8101a00:	f001 fea0 	bl	8103744 <HAL_RCCEx_PeriphCLKConfig>
 8101a04:	4603      	mov	r3, r0
 8101a06:	2b00      	cmp	r3, #0
 8101a08:	d001      	beq.n	8101a0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101a0a:	f7ff ff55 	bl	81018b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101a0e:	4b1d      	ldr	r3, [pc, #116]	; (8101a84 <HAL_UART_MspInit+0xc4>)
 8101a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a14:	4a1b      	ldr	r2, [pc, #108]	; (8101a84 <HAL_UART_MspInit+0xc4>)
 8101a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101a1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101a1e:	4b19      	ldr	r3, [pc, #100]	; (8101a84 <HAL_UART_MspInit+0xc4>)
 8101a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101a28:	60fb      	str	r3, [r7, #12]
 8101a2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a2c:	4b15      	ldr	r3, [pc, #84]	; (8101a84 <HAL_UART_MspInit+0xc4>)
 8101a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a32:	4a14      	ldr	r2, [pc, #80]	; (8101a84 <HAL_UART_MspInit+0xc4>)
 8101a34:	f043 0308 	orr.w	r3, r3, #8
 8101a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a3c:	4b11      	ldr	r3, [pc, #68]	; (8101a84 <HAL_UART_MspInit+0xc4>)
 8101a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a42:	f003 0308 	and.w	r3, r3, #8
 8101a46:	60bb      	str	r3, [r7, #8]
 8101a48:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101a4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101a4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a52:	2302      	movs	r3, #2
 8101a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a58:	2300      	movs	r3, #0
 8101a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a5e:	2300      	movs	r3, #0
 8101a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101a64:	2307      	movs	r3, #7
 8101a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101a6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101a6e:	4619      	mov	r1, r3
 8101a70:	4805      	ldr	r0, [pc, #20]	; (8101a88 <HAL_UART_MspInit+0xc8>)
 8101a72:	f000 fb27 	bl	81020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101a76:	bf00      	nop
 8101a78:	37e0      	adds	r7, #224	; 0xe0
 8101a7a:	46bd      	mov	sp, r7
 8101a7c:	bd80      	pop	{r7, pc}
 8101a7e:	bf00      	nop
 8101a80:	40004800 	.word	0x40004800
 8101a84:	58024400 	.word	0x58024400
 8101a88:	58020c00 	.word	0x58020c00

08101a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101a8c:	b480      	push	{r7}
 8101a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101a90:	e7fe      	b.n	8101a90 <NMI_Handler+0x4>

08101a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101a92:	b480      	push	{r7}
 8101a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101a96:	e7fe      	b.n	8101a96 <HardFault_Handler+0x4>

08101a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101a98:	b480      	push	{r7}
 8101a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101a9c:	e7fe      	b.n	8101a9c <MemManage_Handler+0x4>

08101a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101a9e:	b480      	push	{r7}
 8101aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101aa2:	e7fe      	b.n	8101aa2 <BusFault_Handler+0x4>

08101aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101aa4:	b480      	push	{r7}
 8101aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101aa8:	e7fe      	b.n	8101aa8 <UsageFault_Handler+0x4>

08101aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101aaa:	b480      	push	{r7}
 8101aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101aae:	bf00      	nop
 8101ab0:	46bd      	mov	sp, r7
 8101ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ab6:	4770      	bx	lr

08101ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101ab8:	b480      	push	{r7}
 8101aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101abc:	bf00      	nop
 8101abe:	46bd      	mov	sp, r7
 8101ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ac4:	4770      	bx	lr

08101ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101ac6:	b480      	push	{r7}
 8101ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101aca:	bf00      	nop
 8101acc:	46bd      	mov	sp, r7
 8101ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ad2:	4770      	bx	lr

08101ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101ad4:	b580      	push	{r7, lr}
 8101ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101ad8:	f000 f98c 	bl	8101df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101adc:	bf00      	nop
 8101ade:	bd80      	pop	{r7, pc}

08101ae0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8101ae0:	b580      	push	{r7, lr}
 8101ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8101ae4:	2008      	movs	r0, #8
 8101ae6:	f000 fc9d 	bl	8102424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8101aea:	bf00      	nop
 8101aec:	bd80      	pop	{r7, pc}

08101aee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101aee:	b480      	push	{r7}
 8101af0:	af00      	add	r7, sp, #0
	return 1;
 8101af2:	2301      	movs	r3, #1
}
 8101af4:	4618      	mov	r0, r3
 8101af6:	46bd      	mov	sp, r7
 8101af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101afc:	4770      	bx	lr

08101afe <_kill>:

int _kill(int pid, int sig)
{
 8101afe:	b580      	push	{r7, lr}
 8101b00:	b082      	sub	sp, #8
 8101b02:	af00      	add	r7, sp, #0
 8101b04:	6078      	str	r0, [r7, #4]
 8101b06:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101b08:	f004 fa8a 	bl	8106020 <__errno>
 8101b0c:	4603      	mov	r3, r0
 8101b0e:	2216      	movs	r2, #22
 8101b10:	601a      	str	r2, [r3, #0]
	return -1;
 8101b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101b16:	4618      	mov	r0, r3
 8101b18:	3708      	adds	r7, #8
 8101b1a:	46bd      	mov	sp, r7
 8101b1c:	bd80      	pop	{r7, pc}

08101b1e <_exit>:

void _exit (int status)
{
 8101b1e:	b580      	push	{r7, lr}
 8101b20:	b082      	sub	sp, #8
 8101b22:	af00      	add	r7, sp, #0
 8101b24:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101b26:	f04f 31ff 	mov.w	r1, #4294967295
 8101b2a:	6878      	ldr	r0, [r7, #4]
 8101b2c:	f7ff ffe7 	bl	8101afe <_kill>
	while (1) {}		/* Make sure we hang here */
 8101b30:	e7fe      	b.n	8101b30 <_exit+0x12>

08101b32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101b32:	b580      	push	{r7, lr}
 8101b34:	b086      	sub	sp, #24
 8101b36:	af00      	add	r7, sp, #0
 8101b38:	60f8      	str	r0, [r7, #12]
 8101b3a:	60b9      	str	r1, [r7, #8]
 8101b3c:	607a      	str	r2, [r7, #4]
	int DataIdx;


	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b3e:	2300      	movs	r3, #0
 8101b40:	617b      	str	r3, [r7, #20]
 8101b42:	e00a      	b.n	8101b5a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101b44:	f3af 8000 	nop.w
 8101b48:	4601      	mov	r1, r0
 8101b4a:	68bb      	ldr	r3, [r7, #8]
 8101b4c:	1c5a      	adds	r2, r3, #1
 8101b4e:	60ba      	str	r2, [r7, #8]
 8101b50:	b2ca      	uxtb	r2, r1
 8101b52:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b54:	697b      	ldr	r3, [r7, #20]
 8101b56:	3301      	adds	r3, #1
 8101b58:	617b      	str	r3, [r7, #20]
 8101b5a:	697a      	ldr	r2, [r7, #20]
 8101b5c:	687b      	ldr	r3, [r7, #4]
 8101b5e:	429a      	cmp	r2, r3
 8101b60:	dbf0      	blt.n	8101b44 <_read+0x12>
	}

return len;
 8101b62:	687b      	ldr	r3, [r7, #4]
}
 8101b64:	4618      	mov	r0, r3
 8101b66:	3718      	adds	r7, #24
 8101b68:	46bd      	mov	sp, r7
 8101b6a:	bd80      	pop	{r7, pc}

08101b6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101b6c:	b580      	push	{r7, lr}
 8101b6e:	b086      	sub	sp, #24
 8101b70:	af00      	add	r7, sp, #0
 8101b72:	60f8      	str	r0, [r7, #12]
 8101b74:	60b9      	str	r1, [r7, #8]
 8101b76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b78:	2300      	movs	r3, #0
 8101b7a:	617b      	str	r3, [r7, #20]
 8101b7c:	e009      	b.n	8101b92 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101b7e:	68bb      	ldr	r3, [r7, #8]
 8101b80:	1c5a      	adds	r2, r3, #1
 8101b82:	60ba      	str	r2, [r7, #8]
 8101b84:	781b      	ldrb	r3, [r3, #0]
 8101b86:	4618      	mov	r0, r3
 8101b88:	f7ff fe84 	bl	8101894 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b8c:	697b      	ldr	r3, [r7, #20]
 8101b8e:	3301      	adds	r3, #1
 8101b90:	617b      	str	r3, [r7, #20]
 8101b92:	697a      	ldr	r2, [r7, #20]
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	429a      	cmp	r2, r3
 8101b98:	dbf1      	blt.n	8101b7e <_write+0x12>
	}
	return len;
 8101b9a:	687b      	ldr	r3, [r7, #4]
}
 8101b9c:	4618      	mov	r0, r3
 8101b9e:	3718      	adds	r7, #24
 8101ba0:	46bd      	mov	sp, r7
 8101ba2:	bd80      	pop	{r7, pc}

08101ba4 <_close>:

int _close(int file)
{
 8101ba4:	b480      	push	{r7}
 8101ba6:	b083      	sub	sp, #12
 8101ba8:	af00      	add	r7, sp, #0
 8101baa:	6078      	str	r0, [r7, #4]
	return -1;
 8101bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101bb0:	4618      	mov	r0, r3
 8101bb2:	370c      	adds	r7, #12
 8101bb4:	46bd      	mov	sp, r7
 8101bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bba:	4770      	bx	lr

08101bbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101bbc:	b480      	push	{r7}
 8101bbe:	b083      	sub	sp, #12
 8101bc0:	af00      	add	r7, sp, #0
 8101bc2:	6078      	str	r0, [r7, #4]
 8101bc4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101bc6:	683b      	ldr	r3, [r7, #0]
 8101bc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101bcc:	605a      	str	r2, [r3, #4]
	return 0;
 8101bce:	2300      	movs	r3, #0
}
 8101bd0:	4618      	mov	r0, r3
 8101bd2:	370c      	adds	r7, #12
 8101bd4:	46bd      	mov	sp, r7
 8101bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bda:	4770      	bx	lr

08101bdc <_isatty>:

int _isatty(int file)
{
 8101bdc:	b480      	push	{r7}
 8101bde:	b083      	sub	sp, #12
 8101be0:	af00      	add	r7, sp, #0
 8101be2:	6078      	str	r0, [r7, #4]
	return 1;
 8101be4:	2301      	movs	r3, #1
}
 8101be6:	4618      	mov	r0, r3
 8101be8:	370c      	adds	r7, #12
 8101bea:	46bd      	mov	sp, r7
 8101bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bf0:	4770      	bx	lr

08101bf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101bf2:	b480      	push	{r7}
 8101bf4:	b085      	sub	sp, #20
 8101bf6:	af00      	add	r7, sp, #0
 8101bf8:	60f8      	str	r0, [r7, #12]
 8101bfa:	60b9      	str	r1, [r7, #8]
 8101bfc:	607a      	str	r2, [r7, #4]
	return 0;
 8101bfe:	2300      	movs	r3, #0
}
 8101c00:	4618      	mov	r0, r3
 8101c02:	3714      	adds	r7, #20
 8101c04:	46bd      	mov	sp, r7
 8101c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c0a:	4770      	bx	lr

08101c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101c0c:	b580      	push	{r7, lr}
 8101c0e:	b086      	sub	sp, #24
 8101c10:	af00      	add	r7, sp, #0
 8101c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101c14:	4a14      	ldr	r2, [pc, #80]	; (8101c68 <_sbrk+0x5c>)
 8101c16:	4b15      	ldr	r3, [pc, #84]	; (8101c6c <_sbrk+0x60>)
 8101c18:	1ad3      	subs	r3, r2, r3
 8101c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101c1c:	697b      	ldr	r3, [r7, #20]
 8101c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101c20:	4b13      	ldr	r3, [pc, #76]	; (8101c70 <_sbrk+0x64>)
 8101c22:	681b      	ldr	r3, [r3, #0]
 8101c24:	2b00      	cmp	r3, #0
 8101c26:	d102      	bne.n	8101c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101c28:	4b11      	ldr	r3, [pc, #68]	; (8101c70 <_sbrk+0x64>)
 8101c2a:	4a12      	ldr	r2, [pc, #72]	; (8101c74 <_sbrk+0x68>)
 8101c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101c2e:	4b10      	ldr	r3, [pc, #64]	; (8101c70 <_sbrk+0x64>)
 8101c30:	681a      	ldr	r2, [r3, #0]
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	4413      	add	r3, r2
 8101c36:	693a      	ldr	r2, [r7, #16]
 8101c38:	429a      	cmp	r2, r3
 8101c3a:	d207      	bcs.n	8101c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101c3c:	f004 f9f0 	bl	8106020 <__errno>
 8101c40:	4603      	mov	r3, r0
 8101c42:	220c      	movs	r2, #12
 8101c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101c46:	f04f 33ff 	mov.w	r3, #4294967295
 8101c4a:	e009      	b.n	8101c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101c4c:	4b08      	ldr	r3, [pc, #32]	; (8101c70 <_sbrk+0x64>)
 8101c4e:	681b      	ldr	r3, [r3, #0]
 8101c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101c52:	4b07      	ldr	r3, [pc, #28]	; (8101c70 <_sbrk+0x64>)
 8101c54:	681a      	ldr	r2, [r3, #0]
 8101c56:	687b      	ldr	r3, [r7, #4]
 8101c58:	4413      	add	r3, r2
 8101c5a:	4a05      	ldr	r2, [pc, #20]	; (8101c70 <_sbrk+0x64>)
 8101c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101c5e:	68fb      	ldr	r3, [r7, #12]
}
 8101c60:	4618      	mov	r0, r3
 8101c62:	3718      	adds	r7, #24
 8101c64:	46bd      	mov	sp, r7
 8101c66:	bd80      	pop	{r7, pc}
 8101c68:	10048000 	.word	0x10048000
 8101c6c:	00000400 	.word	0x00000400
 8101c70:	100002ec 	.word	0x100002ec
 8101c74:	10000308 	.word	0x10000308

08101c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101c7c:	f7ff fa44 	bl	8101108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101c80:	480c      	ldr	r0, [pc, #48]	; (8101cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101c82:	490d      	ldr	r1, [pc, #52]	; (8101cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101c84:	4a0d      	ldr	r2, [pc, #52]	; (8101cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101c88:	e002      	b.n	8101c90 <LoopCopyDataInit>

08101c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101c8e:	3304      	adds	r3, #4

08101c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101c94:	d3f9      	bcc.n	8101c8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101c96:	4a0a      	ldr	r2, [pc, #40]	; (8101cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101c98:	4c0a      	ldr	r4, [pc, #40]	; (8101cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101c9c:	e001      	b.n	8101ca2 <LoopFillZerobss>

08101c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101ca0:	3204      	adds	r2, #4

08101ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101ca4:	d3fb      	bcc.n	8101c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101ca6:	f004 f9c1 	bl	810602c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101caa:	f7ff fc61 	bl	8101570 <main>
  bx  lr
 8101cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101cb0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101cb4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101cb8:	100001f0 	.word	0x100001f0
  ldr r2, =_sidata
 8101cbc:	0810b03c 	.word	0x0810b03c
  ldr r2, =_sbss
 8101cc0:	100001f0 	.word	0x100001f0
  ldr r4, =_ebss
 8101cc4:	10000304 	.word	0x10000304

08101cc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101cc8:	e7fe      	b.n	8101cc8 <ADC3_IRQHandler>
	...

08101ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101ccc:	b580      	push	{r7, lr}
 8101cce:	b082      	sub	sp, #8
 8101cd0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101cd2:	4b28      	ldr	r3, [pc, #160]	; (8101d74 <HAL_Init+0xa8>)
 8101cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101cd8:	4a26      	ldr	r2, [pc, #152]	; (8101d74 <HAL_Init+0xa8>)
 8101cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101ce2:	4b24      	ldr	r3, [pc, #144]	; (8101d74 <HAL_Init+0xa8>)
 8101ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101cec:	603b      	str	r3, [r7, #0]
 8101cee:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101cf0:	4b21      	ldr	r3, [pc, #132]	; (8101d78 <HAL_Init+0xac>)
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101cfc:	4a1e      	ldr	r2, [pc, #120]	; (8101d78 <HAL_Init+0xac>)
 8101cfe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101d02:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101d04:	4b1c      	ldr	r3, [pc, #112]	; (8101d78 <HAL_Init+0xac>)
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	4a1b      	ldr	r2, [pc, #108]	; (8101d78 <HAL_Init+0xac>)
 8101d0a:	f043 0301 	orr.w	r3, r3, #1
 8101d0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101d10:	2003      	movs	r0, #3
 8101d12:	f000 f983 	bl	810201c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101d16:	f001 fb3d 	bl	8103394 <HAL_RCC_GetSysClockFreq>
 8101d1a:	4602      	mov	r2, r0
 8101d1c:	4b15      	ldr	r3, [pc, #84]	; (8101d74 <HAL_Init+0xa8>)
 8101d1e:	699b      	ldr	r3, [r3, #24]
 8101d20:	0a1b      	lsrs	r3, r3, #8
 8101d22:	f003 030f 	and.w	r3, r3, #15
 8101d26:	4915      	ldr	r1, [pc, #84]	; (8101d7c <HAL_Init+0xb0>)
 8101d28:	5ccb      	ldrb	r3, [r1, r3]
 8101d2a:	f003 031f 	and.w	r3, r3, #31
 8101d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8101d32:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101d34:	4b0f      	ldr	r3, [pc, #60]	; (8101d74 <HAL_Init+0xa8>)
 8101d36:	699b      	ldr	r3, [r3, #24]
 8101d38:	f003 030f 	and.w	r3, r3, #15
 8101d3c:	4a0f      	ldr	r2, [pc, #60]	; (8101d7c <HAL_Init+0xb0>)
 8101d3e:	5cd3      	ldrb	r3, [r2, r3]
 8101d40:	f003 031f 	and.w	r3, r3, #31
 8101d44:	687a      	ldr	r2, [r7, #4]
 8101d46:	fa22 f303 	lsr.w	r3, r2, r3
 8101d4a:	4a0d      	ldr	r2, [pc, #52]	; (8101d80 <HAL_Init+0xb4>)
 8101d4c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101d4e:	4b0c      	ldr	r3, [pc, #48]	; (8101d80 <HAL_Init+0xb4>)
 8101d50:	681b      	ldr	r3, [r3, #0]
 8101d52:	4a0c      	ldr	r2, [pc, #48]	; (8101d84 <HAL_Init+0xb8>)
 8101d54:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101d56:	2000      	movs	r0, #0
 8101d58:	f000 f816 	bl	8101d88 <HAL_InitTick>
 8101d5c:	4603      	mov	r3, r0
 8101d5e:	2b00      	cmp	r3, #0
 8101d60:	d001      	beq.n	8101d66 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101d62:	2301      	movs	r3, #1
 8101d64:	e002      	b.n	8101d6c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101d66:	f7ff fdad 	bl	81018c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101d6a:	2300      	movs	r3, #0
}
 8101d6c:	4618      	mov	r0, r3
 8101d6e:	3708      	adds	r7, #8
 8101d70:	46bd      	mov	sp, r7
 8101d72:	bd80      	pop	{r7, pc}
 8101d74:	58024400 	.word	0x58024400
 8101d78:	40024400 	.word	0x40024400
 8101d7c:	0810ab48 	.word	0x0810ab48
 8101d80:	10000004 	.word	0x10000004
 8101d84:	10000000 	.word	0x10000000

08101d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101d88:	b580      	push	{r7, lr}
 8101d8a:	b082      	sub	sp, #8
 8101d8c:	af00      	add	r7, sp, #0
 8101d8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101d90:	4b15      	ldr	r3, [pc, #84]	; (8101de8 <HAL_InitTick+0x60>)
 8101d92:	781b      	ldrb	r3, [r3, #0]
 8101d94:	2b00      	cmp	r3, #0
 8101d96:	d101      	bne.n	8101d9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101d98:	2301      	movs	r3, #1
 8101d9a:	e021      	b.n	8101de0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101d9c:	4b13      	ldr	r3, [pc, #76]	; (8101dec <HAL_InitTick+0x64>)
 8101d9e:	681a      	ldr	r2, [r3, #0]
 8101da0:	4b11      	ldr	r3, [pc, #68]	; (8101de8 <HAL_InitTick+0x60>)
 8101da2:	781b      	ldrb	r3, [r3, #0]
 8101da4:	4619      	mov	r1, r3
 8101da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8101dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8101db2:	4618      	mov	r0, r3
 8101db4:	f000 f965 	bl	8102082 <HAL_SYSTICK_Config>
 8101db8:	4603      	mov	r3, r0
 8101dba:	2b00      	cmp	r3, #0
 8101dbc:	d001      	beq.n	8101dc2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101dbe:	2301      	movs	r3, #1
 8101dc0:	e00e      	b.n	8101de0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	2b0f      	cmp	r3, #15
 8101dc6:	d80a      	bhi.n	8101dde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101dc8:	2200      	movs	r2, #0
 8101dca:	6879      	ldr	r1, [r7, #4]
 8101dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8101dd0:	f000 f92f 	bl	8102032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101dd4:	4a06      	ldr	r2, [pc, #24]	; (8101df0 <HAL_InitTick+0x68>)
 8101dd6:	687b      	ldr	r3, [r7, #4]
 8101dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101dda:	2300      	movs	r3, #0
 8101ddc:	e000      	b.n	8101de0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101dde:	2301      	movs	r3, #1
}
 8101de0:	4618      	mov	r0, r3
 8101de2:	3708      	adds	r7, #8
 8101de4:	46bd      	mov	sp, r7
 8101de6:	bd80      	pop	{r7, pc}
 8101de8:	10000018 	.word	0x10000018
 8101dec:	10000000 	.word	0x10000000
 8101df0:	10000014 	.word	0x10000014

08101df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101df4:	b480      	push	{r7}
 8101df6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101df8:	4b06      	ldr	r3, [pc, #24]	; (8101e14 <HAL_IncTick+0x20>)
 8101dfa:	781b      	ldrb	r3, [r3, #0]
 8101dfc:	461a      	mov	r2, r3
 8101dfe:	4b06      	ldr	r3, [pc, #24]	; (8101e18 <HAL_IncTick+0x24>)
 8101e00:	681b      	ldr	r3, [r3, #0]
 8101e02:	4413      	add	r3, r2
 8101e04:	4a04      	ldr	r2, [pc, #16]	; (8101e18 <HAL_IncTick+0x24>)
 8101e06:	6013      	str	r3, [r2, #0]
}
 8101e08:	bf00      	nop
 8101e0a:	46bd      	mov	sp, r7
 8101e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e10:	4770      	bx	lr
 8101e12:	bf00      	nop
 8101e14:	10000018 	.word	0x10000018
 8101e18:	100002f0 	.word	0x100002f0

08101e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101e1c:	b480      	push	{r7}
 8101e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8101e20:	4b03      	ldr	r3, [pc, #12]	; (8101e30 <HAL_GetTick+0x14>)
 8101e22:	681b      	ldr	r3, [r3, #0]
}
 8101e24:	4618      	mov	r0, r3
 8101e26:	46bd      	mov	sp, r7
 8101e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e2c:	4770      	bx	lr
 8101e2e:	bf00      	nop
 8101e30:	100002f0 	.word	0x100002f0

08101e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101e34:	b580      	push	{r7, lr}
 8101e36:	b084      	sub	sp, #16
 8101e38:	af00      	add	r7, sp, #0
 8101e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101e3c:	f7ff ffee 	bl	8101e1c <HAL_GetTick>
 8101e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101e42:	687b      	ldr	r3, [r7, #4]
 8101e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101e46:	68fb      	ldr	r3, [r7, #12]
 8101e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101e4c:	d005      	beq.n	8101e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101e4e:	4b0a      	ldr	r3, [pc, #40]	; (8101e78 <HAL_Delay+0x44>)
 8101e50:	781b      	ldrb	r3, [r3, #0]
 8101e52:	461a      	mov	r2, r3
 8101e54:	68fb      	ldr	r3, [r7, #12]
 8101e56:	4413      	add	r3, r2
 8101e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101e5a:	bf00      	nop
 8101e5c:	f7ff ffde 	bl	8101e1c <HAL_GetTick>
 8101e60:	4602      	mov	r2, r0
 8101e62:	68bb      	ldr	r3, [r7, #8]
 8101e64:	1ad3      	subs	r3, r2, r3
 8101e66:	68fa      	ldr	r2, [r7, #12]
 8101e68:	429a      	cmp	r2, r3
 8101e6a:	d8f7      	bhi.n	8101e5c <HAL_Delay+0x28>
  {
  }
}
 8101e6c:	bf00      	nop
 8101e6e:	bf00      	nop
 8101e70:	3710      	adds	r7, #16
 8101e72:	46bd      	mov	sp, r7
 8101e74:	bd80      	pop	{r7, pc}
 8101e76:	bf00      	nop
 8101e78:	10000018 	.word	0x10000018

08101e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101e7c:	b480      	push	{r7}
 8101e7e:	b085      	sub	sp, #20
 8101e80:	af00      	add	r7, sp, #0
 8101e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	f003 0307 	and.w	r3, r3, #7
 8101e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101e8c:	4b0c      	ldr	r3, [pc, #48]	; (8101ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8101e8e:	68db      	ldr	r3, [r3, #12]
 8101e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101e92:	68ba      	ldr	r2, [r7, #8]
 8101e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101e98:	4013      	ands	r3, r2
 8101e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101e9c:	68fb      	ldr	r3, [r7, #12]
 8101e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101ea0:	68bb      	ldr	r3, [r7, #8]
 8101ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101eae:	4a04      	ldr	r2, [pc, #16]	; (8101ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8101eb0:	68bb      	ldr	r3, [r7, #8]
 8101eb2:	60d3      	str	r3, [r2, #12]
}
 8101eb4:	bf00      	nop
 8101eb6:	3714      	adds	r7, #20
 8101eb8:	46bd      	mov	sp, r7
 8101eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ebe:	4770      	bx	lr
 8101ec0:	e000ed00 	.word	0xe000ed00

08101ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101ec4:	b480      	push	{r7}
 8101ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101ec8:	4b04      	ldr	r3, [pc, #16]	; (8101edc <__NVIC_GetPriorityGrouping+0x18>)
 8101eca:	68db      	ldr	r3, [r3, #12]
 8101ecc:	0a1b      	lsrs	r3, r3, #8
 8101ece:	f003 0307 	and.w	r3, r3, #7
}
 8101ed2:	4618      	mov	r0, r3
 8101ed4:	46bd      	mov	sp, r7
 8101ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eda:	4770      	bx	lr
 8101edc:	e000ed00 	.word	0xe000ed00

08101ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101ee0:	b480      	push	{r7}
 8101ee2:	b083      	sub	sp, #12
 8101ee4:	af00      	add	r7, sp, #0
 8101ee6:	4603      	mov	r3, r0
 8101ee8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101eee:	2b00      	cmp	r3, #0
 8101ef0:	db0b      	blt.n	8101f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101ef2:	88fb      	ldrh	r3, [r7, #6]
 8101ef4:	f003 021f 	and.w	r2, r3, #31
 8101ef8:	4907      	ldr	r1, [pc, #28]	; (8101f18 <__NVIC_EnableIRQ+0x38>)
 8101efa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101efe:	095b      	lsrs	r3, r3, #5
 8101f00:	2001      	movs	r0, #1
 8101f02:	fa00 f202 	lsl.w	r2, r0, r2
 8101f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101f0a:	bf00      	nop
 8101f0c:	370c      	adds	r7, #12
 8101f0e:	46bd      	mov	sp, r7
 8101f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f14:	4770      	bx	lr
 8101f16:	bf00      	nop
 8101f18:	e000e100 	.word	0xe000e100

08101f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101f1c:	b480      	push	{r7}
 8101f1e:	b083      	sub	sp, #12
 8101f20:	af00      	add	r7, sp, #0
 8101f22:	4603      	mov	r3, r0
 8101f24:	6039      	str	r1, [r7, #0]
 8101f26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f2c:	2b00      	cmp	r3, #0
 8101f2e:	db0a      	blt.n	8101f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101f30:	683b      	ldr	r3, [r7, #0]
 8101f32:	b2da      	uxtb	r2, r3
 8101f34:	490c      	ldr	r1, [pc, #48]	; (8101f68 <__NVIC_SetPriority+0x4c>)
 8101f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f3a:	0112      	lsls	r2, r2, #4
 8101f3c:	b2d2      	uxtb	r2, r2
 8101f3e:	440b      	add	r3, r1
 8101f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101f44:	e00a      	b.n	8101f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101f46:	683b      	ldr	r3, [r7, #0]
 8101f48:	b2da      	uxtb	r2, r3
 8101f4a:	4908      	ldr	r1, [pc, #32]	; (8101f6c <__NVIC_SetPriority+0x50>)
 8101f4c:	88fb      	ldrh	r3, [r7, #6]
 8101f4e:	f003 030f 	and.w	r3, r3, #15
 8101f52:	3b04      	subs	r3, #4
 8101f54:	0112      	lsls	r2, r2, #4
 8101f56:	b2d2      	uxtb	r2, r2
 8101f58:	440b      	add	r3, r1
 8101f5a:	761a      	strb	r2, [r3, #24]
}
 8101f5c:	bf00      	nop
 8101f5e:	370c      	adds	r7, #12
 8101f60:	46bd      	mov	sp, r7
 8101f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f66:	4770      	bx	lr
 8101f68:	e000e100 	.word	0xe000e100
 8101f6c:	e000ed00 	.word	0xe000ed00

08101f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101f70:	b480      	push	{r7}
 8101f72:	b089      	sub	sp, #36	; 0x24
 8101f74:	af00      	add	r7, sp, #0
 8101f76:	60f8      	str	r0, [r7, #12]
 8101f78:	60b9      	str	r1, [r7, #8]
 8101f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101f7c:	68fb      	ldr	r3, [r7, #12]
 8101f7e:	f003 0307 	and.w	r3, r3, #7
 8101f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101f84:	69fb      	ldr	r3, [r7, #28]
 8101f86:	f1c3 0307 	rsb	r3, r3, #7
 8101f8a:	2b04      	cmp	r3, #4
 8101f8c:	bf28      	it	cs
 8101f8e:	2304      	movcs	r3, #4
 8101f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101f92:	69fb      	ldr	r3, [r7, #28]
 8101f94:	3304      	adds	r3, #4
 8101f96:	2b06      	cmp	r3, #6
 8101f98:	d902      	bls.n	8101fa0 <NVIC_EncodePriority+0x30>
 8101f9a:	69fb      	ldr	r3, [r7, #28]
 8101f9c:	3b03      	subs	r3, #3
 8101f9e:	e000      	b.n	8101fa2 <NVIC_EncodePriority+0x32>
 8101fa0:	2300      	movs	r3, #0
 8101fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8101fa8:	69bb      	ldr	r3, [r7, #24]
 8101faa:	fa02 f303 	lsl.w	r3, r2, r3
 8101fae:	43da      	mvns	r2, r3
 8101fb0:	68bb      	ldr	r3, [r7, #8]
 8101fb2:	401a      	ands	r2, r3
 8101fb4:	697b      	ldr	r3, [r7, #20]
 8101fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8101fbc:	697b      	ldr	r3, [r7, #20]
 8101fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8101fc2:	43d9      	mvns	r1, r3
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101fc8:	4313      	orrs	r3, r2
         );
}
 8101fca:	4618      	mov	r0, r3
 8101fcc:	3724      	adds	r7, #36	; 0x24
 8101fce:	46bd      	mov	sp, r7
 8101fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fd4:	4770      	bx	lr
	...

08101fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101fd8:	b580      	push	{r7, lr}
 8101fda:	b082      	sub	sp, #8
 8101fdc:	af00      	add	r7, sp, #0
 8101fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	3b01      	subs	r3, #1
 8101fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101fe8:	d301      	bcc.n	8101fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101fea:	2301      	movs	r3, #1
 8101fec:	e00f      	b.n	810200e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101fee:	4a0a      	ldr	r2, [pc, #40]	; (8102018 <SysTick_Config+0x40>)
 8101ff0:	687b      	ldr	r3, [r7, #4]
 8101ff2:	3b01      	subs	r3, #1
 8101ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101ff6:	210f      	movs	r1, #15
 8101ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8101ffc:	f7ff ff8e 	bl	8101f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102000:	4b05      	ldr	r3, [pc, #20]	; (8102018 <SysTick_Config+0x40>)
 8102002:	2200      	movs	r2, #0
 8102004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102006:	4b04      	ldr	r3, [pc, #16]	; (8102018 <SysTick_Config+0x40>)
 8102008:	2207      	movs	r2, #7
 810200a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810200c:	2300      	movs	r3, #0
}
 810200e:	4618      	mov	r0, r3
 8102010:	3708      	adds	r7, #8
 8102012:	46bd      	mov	sp, r7
 8102014:	bd80      	pop	{r7, pc}
 8102016:	bf00      	nop
 8102018:	e000e010 	.word	0xe000e010

0810201c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810201c:	b580      	push	{r7, lr}
 810201e:	b082      	sub	sp, #8
 8102020:	af00      	add	r7, sp, #0
 8102022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102024:	6878      	ldr	r0, [r7, #4]
 8102026:	f7ff ff29 	bl	8101e7c <__NVIC_SetPriorityGrouping>
}
 810202a:	bf00      	nop
 810202c:	3708      	adds	r7, #8
 810202e:	46bd      	mov	sp, r7
 8102030:	bd80      	pop	{r7, pc}

08102032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102032:	b580      	push	{r7, lr}
 8102034:	b086      	sub	sp, #24
 8102036:	af00      	add	r7, sp, #0
 8102038:	4603      	mov	r3, r0
 810203a:	60b9      	str	r1, [r7, #8]
 810203c:	607a      	str	r2, [r7, #4]
 810203e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102040:	f7ff ff40 	bl	8101ec4 <__NVIC_GetPriorityGrouping>
 8102044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102046:	687a      	ldr	r2, [r7, #4]
 8102048:	68b9      	ldr	r1, [r7, #8]
 810204a:	6978      	ldr	r0, [r7, #20]
 810204c:	f7ff ff90 	bl	8101f70 <NVIC_EncodePriority>
 8102050:	4602      	mov	r2, r0
 8102052:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102056:	4611      	mov	r1, r2
 8102058:	4618      	mov	r0, r3
 810205a:	f7ff ff5f 	bl	8101f1c <__NVIC_SetPriority>
}
 810205e:	bf00      	nop
 8102060:	3718      	adds	r7, #24
 8102062:	46bd      	mov	sp, r7
 8102064:	bd80      	pop	{r7, pc}

08102066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102066:	b580      	push	{r7, lr}
 8102068:	b082      	sub	sp, #8
 810206a:	af00      	add	r7, sp, #0
 810206c:	4603      	mov	r3, r0
 810206e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102070:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102074:	4618      	mov	r0, r3
 8102076:	f7ff ff33 	bl	8101ee0 <__NVIC_EnableIRQ>
}
 810207a:	bf00      	nop
 810207c:	3708      	adds	r7, #8
 810207e:	46bd      	mov	sp, r7
 8102080:	bd80      	pop	{r7, pc}

08102082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102082:	b580      	push	{r7, lr}
 8102084:	b082      	sub	sp, #8
 8102086:	af00      	add	r7, sp, #0
 8102088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810208a:	6878      	ldr	r0, [r7, #4]
 810208c:	f7ff ffa4 	bl	8101fd8 <SysTick_Config>
 8102090:	4603      	mov	r3, r0
}
 8102092:	4618      	mov	r0, r3
 8102094:	3708      	adds	r7, #8
 8102096:	46bd      	mov	sp, r7
 8102098:	bd80      	pop	{r7, pc}
	...

0810209c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810209c:	b480      	push	{r7}
 810209e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81020a0:	4b07      	ldr	r3, [pc, #28]	; (81020c0 <HAL_GetCurrentCPUID+0x24>)
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	091b      	lsrs	r3, r3, #4
 81020a6:	f003 030f 	and.w	r3, r3, #15
 81020aa:	2b07      	cmp	r3, #7
 81020ac:	d101      	bne.n	81020b2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81020ae:	2303      	movs	r3, #3
 81020b0:	e000      	b.n	81020b4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81020b2:	2301      	movs	r3, #1
  }
}
 81020b4:	4618      	mov	r0, r3
 81020b6:	46bd      	mov	sp, r7
 81020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020bc:	4770      	bx	lr
 81020be:	bf00      	nop
 81020c0:	e000ed00 	.word	0xe000ed00

081020c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81020c4:	b480      	push	{r7}
 81020c6:	b089      	sub	sp, #36	; 0x24
 81020c8:	af00      	add	r7, sp, #0
 81020ca:	6078      	str	r0, [r7, #4]
 81020cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81020ce:	2300      	movs	r3, #0
 81020d0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81020d2:	4b89      	ldr	r3, [pc, #548]	; (81022f8 <HAL_GPIO_Init+0x234>)
 81020d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81020d6:	e194      	b.n	8102402 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81020d8:	683b      	ldr	r3, [r7, #0]
 81020da:	681a      	ldr	r2, [r3, #0]
 81020dc:	2101      	movs	r1, #1
 81020de:	69fb      	ldr	r3, [r7, #28]
 81020e0:	fa01 f303 	lsl.w	r3, r1, r3
 81020e4:	4013      	ands	r3, r2
 81020e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81020e8:	693b      	ldr	r3, [r7, #16]
 81020ea:	2b00      	cmp	r3, #0
 81020ec:	f000 8186 	beq.w	81023fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81020f0:	683b      	ldr	r3, [r7, #0]
 81020f2:	685b      	ldr	r3, [r3, #4]
 81020f4:	f003 0303 	and.w	r3, r3, #3
 81020f8:	2b01      	cmp	r3, #1
 81020fa:	d005      	beq.n	8102108 <HAL_GPIO_Init+0x44>
 81020fc:	683b      	ldr	r3, [r7, #0]
 81020fe:	685b      	ldr	r3, [r3, #4]
 8102100:	f003 0303 	and.w	r3, r3, #3
 8102104:	2b02      	cmp	r3, #2
 8102106:	d130      	bne.n	810216a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102108:	687b      	ldr	r3, [r7, #4]
 810210a:	689b      	ldr	r3, [r3, #8]
 810210c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810210e:	69fb      	ldr	r3, [r7, #28]
 8102110:	005b      	lsls	r3, r3, #1
 8102112:	2203      	movs	r2, #3
 8102114:	fa02 f303 	lsl.w	r3, r2, r3
 8102118:	43db      	mvns	r3, r3
 810211a:	69ba      	ldr	r2, [r7, #24]
 810211c:	4013      	ands	r3, r2
 810211e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102120:	683b      	ldr	r3, [r7, #0]
 8102122:	68da      	ldr	r2, [r3, #12]
 8102124:	69fb      	ldr	r3, [r7, #28]
 8102126:	005b      	lsls	r3, r3, #1
 8102128:	fa02 f303 	lsl.w	r3, r2, r3
 810212c:	69ba      	ldr	r2, [r7, #24]
 810212e:	4313      	orrs	r3, r2
 8102130:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102132:	687b      	ldr	r3, [r7, #4]
 8102134:	69ba      	ldr	r2, [r7, #24]
 8102136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	685b      	ldr	r3, [r3, #4]
 810213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810213e:	2201      	movs	r2, #1
 8102140:	69fb      	ldr	r3, [r7, #28]
 8102142:	fa02 f303 	lsl.w	r3, r2, r3
 8102146:	43db      	mvns	r3, r3
 8102148:	69ba      	ldr	r2, [r7, #24]
 810214a:	4013      	ands	r3, r2
 810214c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810214e:	683b      	ldr	r3, [r7, #0]
 8102150:	685b      	ldr	r3, [r3, #4]
 8102152:	091b      	lsrs	r3, r3, #4
 8102154:	f003 0201 	and.w	r2, r3, #1
 8102158:	69fb      	ldr	r3, [r7, #28]
 810215a:	fa02 f303 	lsl.w	r3, r2, r3
 810215e:	69ba      	ldr	r2, [r7, #24]
 8102160:	4313      	orrs	r3, r2
 8102162:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102164:	687b      	ldr	r3, [r7, #4]
 8102166:	69ba      	ldr	r2, [r7, #24]
 8102168:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810216a:	683b      	ldr	r3, [r7, #0]
 810216c:	685b      	ldr	r3, [r3, #4]
 810216e:	f003 0303 	and.w	r3, r3, #3
 8102172:	2b03      	cmp	r3, #3
 8102174:	d017      	beq.n	81021a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102176:	687b      	ldr	r3, [r7, #4]
 8102178:	68db      	ldr	r3, [r3, #12]
 810217a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810217c:	69fb      	ldr	r3, [r7, #28]
 810217e:	005b      	lsls	r3, r3, #1
 8102180:	2203      	movs	r2, #3
 8102182:	fa02 f303 	lsl.w	r3, r2, r3
 8102186:	43db      	mvns	r3, r3
 8102188:	69ba      	ldr	r2, [r7, #24]
 810218a:	4013      	ands	r3, r2
 810218c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810218e:	683b      	ldr	r3, [r7, #0]
 8102190:	689a      	ldr	r2, [r3, #8]
 8102192:	69fb      	ldr	r3, [r7, #28]
 8102194:	005b      	lsls	r3, r3, #1
 8102196:	fa02 f303 	lsl.w	r3, r2, r3
 810219a:	69ba      	ldr	r2, [r7, #24]
 810219c:	4313      	orrs	r3, r2
 810219e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81021a0:	687b      	ldr	r3, [r7, #4]
 81021a2:	69ba      	ldr	r2, [r7, #24]
 81021a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81021a6:	683b      	ldr	r3, [r7, #0]
 81021a8:	685b      	ldr	r3, [r3, #4]
 81021aa:	f003 0303 	and.w	r3, r3, #3
 81021ae:	2b02      	cmp	r3, #2
 81021b0:	d123      	bne.n	81021fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81021b2:	69fb      	ldr	r3, [r7, #28]
 81021b4:	08da      	lsrs	r2, r3, #3
 81021b6:	687b      	ldr	r3, [r7, #4]
 81021b8:	3208      	adds	r2, #8
 81021ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81021c0:	69fb      	ldr	r3, [r7, #28]
 81021c2:	f003 0307 	and.w	r3, r3, #7
 81021c6:	009b      	lsls	r3, r3, #2
 81021c8:	220f      	movs	r2, #15
 81021ca:	fa02 f303 	lsl.w	r3, r2, r3
 81021ce:	43db      	mvns	r3, r3
 81021d0:	69ba      	ldr	r2, [r7, #24]
 81021d2:	4013      	ands	r3, r2
 81021d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81021d6:	683b      	ldr	r3, [r7, #0]
 81021d8:	691a      	ldr	r2, [r3, #16]
 81021da:	69fb      	ldr	r3, [r7, #28]
 81021dc:	f003 0307 	and.w	r3, r3, #7
 81021e0:	009b      	lsls	r3, r3, #2
 81021e2:	fa02 f303 	lsl.w	r3, r2, r3
 81021e6:	69ba      	ldr	r2, [r7, #24]
 81021e8:	4313      	orrs	r3, r2
 81021ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81021ec:	69fb      	ldr	r3, [r7, #28]
 81021ee:	08da      	lsrs	r2, r3, #3
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	3208      	adds	r2, #8
 81021f4:	69b9      	ldr	r1, [r7, #24]
 81021f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	681b      	ldr	r3, [r3, #0]
 81021fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102200:	69fb      	ldr	r3, [r7, #28]
 8102202:	005b      	lsls	r3, r3, #1
 8102204:	2203      	movs	r2, #3
 8102206:	fa02 f303 	lsl.w	r3, r2, r3
 810220a:	43db      	mvns	r3, r3
 810220c:	69ba      	ldr	r2, [r7, #24]
 810220e:	4013      	ands	r3, r2
 8102210:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102212:	683b      	ldr	r3, [r7, #0]
 8102214:	685b      	ldr	r3, [r3, #4]
 8102216:	f003 0203 	and.w	r2, r3, #3
 810221a:	69fb      	ldr	r3, [r7, #28]
 810221c:	005b      	lsls	r3, r3, #1
 810221e:	fa02 f303 	lsl.w	r3, r2, r3
 8102222:	69ba      	ldr	r2, [r7, #24]
 8102224:	4313      	orrs	r3, r2
 8102226:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102228:	687b      	ldr	r3, [r7, #4]
 810222a:	69ba      	ldr	r2, [r7, #24]
 810222c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810222e:	683b      	ldr	r3, [r7, #0]
 8102230:	685b      	ldr	r3, [r3, #4]
 8102232:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102236:	2b00      	cmp	r3, #0
 8102238:	f000 80e0 	beq.w	81023fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810223c:	4b2f      	ldr	r3, [pc, #188]	; (81022fc <HAL_GPIO_Init+0x238>)
 810223e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102242:	4a2e      	ldr	r2, [pc, #184]	; (81022fc <HAL_GPIO_Init+0x238>)
 8102244:	f043 0302 	orr.w	r3, r3, #2
 8102248:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810224c:	4b2b      	ldr	r3, [pc, #172]	; (81022fc <HAL_GPIO_Init+0x238>)
 810224e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102252:	f003 0302 	and.w	r3, r3, #2
 8102256:	60fb      	str	r3, [r7, #12]
 8102258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810225a:	4a29      	ldr	r2, [pc, #164]	; (8102300 <HAL_GPIO_Init+0x23c>)
 810225c:	69fb      	ldr	r3, [r7, #28]
 810225e:	089b      	lsrs	r3, r3, #2
 8102260:	3302      	adds	r3, #2
 8102262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102268:	69fb      	ldr	r3, [r7, #28]
 810226a:	f003 0303 	and.w	r3, r3, #3
 810226e:	009b      	lsls	r3, r3, #2
 8102270:	220f      	movs	r2, #15
 8102272:	fa02 f303 	lsl.w	r3, r2, r3
 8102276:	43db      	mvns	r3, r3
 8102278:	69ba      	ldr	r2, [r7, #24]
 810227a:	4013      	ands	r3, r2
 810227c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	4a20      	ldr	r2, [pc, #128]	; (8102304 <HAL_GPIO_Init+0x240>)
 8102282:	4293      	cmp	r3, r2
 8102284:	d052      	beq.n	810232c <HAL_GPIO_Init+0x268>
 8102286:	687b      	ldr	r3, [r7, #4]
 8102288:	4a1f      	ldr	r2, [pc, #124]	; (8102308 <HAL_GPIO_Init+0x244>)
 810228a:	4293      	cmp	r3, r2
 810228c:	d031      	beq.n	81022f2 <HAL_GPIO_Init+0x22e>
 810228e:	687b      	ldr	r3, [r7, #4]
 8102290:	4a1e      	ldr	r2, [pc, #120]	; (810230c <HAL_GPIO_Init+0x248>)
 8102292:	4293      	cmp	r3, r2
 8102294:	d02b      	beq.n	81022ee <HAL_GPIO_Init+0x22a>
 8102296:	687b      	ldr	r3, [r7, #4]
 8102298:	4a1d      	ldr	r2, [pc, #116]	; (8102310 <HAL_GPIO_Init+0x24c>)
 810229a:	4293      	cmp	r3, r2
 810229c:	d025      	beq.n	81022ea <HAL_GPIO_Init+0x226>
 810229e:	687b      	ldr	r3, [r7, #4]
 81022a0:	4a1c      	ldr	r2, [pc, #112]	; (8102314 <HAL_GPIO_Init+0x250>)
 81022a2:	4293      	cmp	r3, r2
 81022a4:	d01f      	beq.n	81022e6 <HAL_GPIO_Init+0x222>
 81022a6:	687b      	ldr	r3, [r7, #4]
 81022a8:	4a1b      	ldr	r2, [pc, #108]	; (8102318 <HAL_GPIO_Init+0x254>)
 81022aa:	4293      	cmp	r3, r2
 81022ac:	d019      	beq.n	81022e2 <HAL_GPIO_Init+0x21e>
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	4a1a      	ldr	r2, [pc, #104]	; (810231c <HAL_GPIO_Init+0x258>)
 81022b2:	4293      	cmp	r3, r2
 81022b4:	d013      	beq.n	81022de <HAL_GPIO_Init+0x21a>
 81022b6:	687b      	ldr	r3, [r7, #4]
 81022b8:	4a19      	ldr	r2, [pc, #100]	; (8102320 <HAL_GPIO_Init+0x25c>)
 81022ba:	4293      	cmp	r3, r2
 81022bc:	d00d      	beq.n	81022da <HAL_GPIO_Init+0x216>
 81022be:	687b      	ldr	r3, [r7, #4]
 81022c0:	4a18      	ldr	r2, [pc, #96]	; (8102324 <HAL_GPIO_Init+0x260>)
 81022c2:	4293      	cmp	r3, r2
 81022c4:	d007      	beq.n	81022d6 <HAL_GPIO_Init+0x212>
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	4a17      	ldr	r2, [pc, #92]	; (8102328 <HAL_GPIO_Init+0x264>)
 81022ca:	4293      	cmp	r3, r2
 81022cc:	d101      	bne.n	81022d2 <HAL_GPIO_Init+0x20e>
 81022ce:	2309      	movs	r3, #9
 81022d0:	e02d      	b.n	810232e <HAL_GPIO_Init+0x26a>
 81022d2:	230a      	movs	r3, #10
 81022d4:	e02b      	b.n	810232e <HAL_GPIO_Init+0x26a>
 81022d6:	2308      	movs	r3, #8
 81022d8:	e029      	b.n	810232e <HAL_GPIO_Init+0x26a>
 81022da:	2307      	movs	r3, #7
 81022dc:	e027      	b.n	810232e <HAL_GPIO_Init+0x26a>
 81022de:	2306      	movs	r3, #6
 81022e0:	e025      	b.n	810232e <HAL_GPIO_Init+0x26a>
 81022e2:	2305      	movs	r3, #5
 81022e4:	e023      	b.n	810232e <HAL_GPIO_Init+0x26a>
 81022e6:	2304      	movs	r3, #4
 81022e8:	e021      	b.n	810232e <HAL_GPIO_Init+0x26a>
 81022ea:	2303      	movs	r3, #3
 81022ec:	e01f      	b.n	810232e <HAL_GPIO_Init+0x26a>
 81022ee:	2302      	movs	r3, #2
 81022f0:	e01d      	b.n	810232e <HAL_GPIO_Init+0x26a>
 81022f2:	2301      	movs	r3, #1
 81022f4:	e01b      	b.n	810232e <HAL_GPIO_Init+0x26a>
 81022f6:	bf00      	nop
 81022f8:	580000c0 	.word	0x580000c0
 81022fc:	58024400 	.word	0x58024400
 8102300:	58000400 	.word	0x58000400
 8102304:	58020000 	.word	0x58020000
 8102308:	58020400 	.word	0x58020400
 810230c:	58020800 	.word	0x58020800
 8102310:	58020c00 	.word	0x58020c00
 8102314:	58021000 	.word	0x58021000
 8102318:	58021400 	.word	0x58021400
 810231c:	58021800 	.word	0x58021800
 8102320:	58021c00 	.word	0x58021c00
 8102324:	58022000 	.word	0x58022000
 8102328:	58022400 	.word	0x58022400
 810232c:	2300      	movs	r3, #0
 810232e:	69fa      	ldr	r2, [r7, #28]
 8102330:	f002 0203 	and.w	r2, r2, #3
 8102334:	0092      	lsls	r2, r2, #2
 8102336:	4093      	lsls	r3, r2
 8102338:	69ba      	ldr	r2, [r7, #24]
 810233a:	4313      	orrs	r3, r2
 810233c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810233e:	4938      	ldr	r1, [pc, #224]	; (8102420 <HAL_GPIO_Init+0x35c>)
 8102340:	69fb      	ldr	r3, [r7, #28]
 8102342:	089b      	lsrs	r3, r3, #2
 8102344:	3302      	adds	r3, #2
 8102346:	69ba      	ldr	r2, [r7, #24]
 8102348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810234c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102350:	681b      	ldr	r3, [r3, #0]
 8102352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102354:	693b      	ldr	r3, [r7, #16]
 8102356:	43db      	mvns	r3, r3
 8102358:	69ba      	ldr	r2, [r7, #24]
 810235a:	4013      	ands	r3, r2
 810235c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810235e:	683b      	ldr	r3, [r7, #0]
 8102360:	685b      	ldr	r3, [r3, #4]
 8102362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102366:	2b00      	cmp	r3, #0
 8102368:	d003      	beq.n	8102372 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810236a:	69ba      	ldr	r2, [r7, #24]
 810236c:	693b      	ldr	r3, [r7, #16]
 810236e:	4313      	orrs	r3, r2
 8102370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102376:	69bb      	ldr	r3, [r7, #24]
 8102378:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810237a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810237e:	685b      	ldr	r3, [r3, #4]
 8102380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102382:	693b      	ldr	r3, [r7, #16]
 8102384:	43db      	mvns	r3, r3
 8102386:	69ba      	ldr	r2, [r7, #24]
 8102388:	4013      	ands	r3, r2
 810238a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 810238c:	683b      	ldr	r3, [r7, #0]
 810238e:	685b      	ldr	r3, [r3, #4]
 8102390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102394:	2b00      	cmp	r3, #0
 8102396:	d003      	beq.n	81023a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102398:	69ba      	ldr	r2, [r7, #24]
 810239a:	693b      	ldr	r3, [r7, #16]
 810239c:	4313      	orrs	r3, r2
 810239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81023a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81023a4:	69bb      	ldr	r3, [r7, #24]
 81023a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81023a8:	697b      	ldr	r3, [r7, #20]
 81023aa:	685b      	ldr	r3, [r3, #4]
 81023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81023ae:	693b      	ldr	r3, [r7, #16]
 81023b0:	43db      	mvns	r3, r3
 81023b2:	69ba      	ldr	r2, [r7, #24]
 81023b4:	4013      	ands	r3, r2
 81023b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81023b8:	683b      	ldr	r3, [r7, #0]
 81023ba:	685b      	ldr	r3, [r3, #4]
 81023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81023c0:	2b00      	cmp	r3, #0
 81023c2:	d003      	beq.n	81023cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81023c4:	69ba      	ldr	r2, [r7, #24]
 81023c6:	693b      	ldr	r3, [r7, #16]
 81023c8:	4313      	orrs	r3, r2
 81023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81023cc:	697b      	ldr	r3, [r7, #20]
 81023ce:	69ba      	ldr	r2, [r7, #24]
 81023d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81023d2:	697b      	ldr	r3, [r7, #20]
 81023d4:	681b      	ldr	r3, [r3, #0]
 81023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81023d8:	693b      	ldr	r3, [r7, #16]
 81023da:	43db      	mvns	r3, r3
 81023dc:	69ba      	ldr	r2, [r7, #24]
 81023de:	4013      	ands	r3, r2
 81023e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81023e2:	683b      	ldr	r3, [r7, #0]
 81023e4:	685b      	ldr	r3, [r3, #4]
 81023e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81023ea:	2b00      	cmp	r3, #0
 81023ec:	d003      	beq.n	81023f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81023ee:	69ba      	ldr	r2, [r7, #24]
 81023f0:	693b      	ldr	r3, [r7, #16]
 81023f2:	4313      	orrs	r3, r2
 81023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81023f6:	697b      	ldr	r3, [r7, #20]
 81023f8:	69ba      	ldr	r2, [r7, #24]
 81023fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81023fc:	69fb      	ldr	r3, [r7, #28]
 81023fe:	3301      	adds	r3, #1
 8102400:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102402:	683b      	ldr	r3, [r7, #0]
 8102404:	681a      	ldr	r2, [r3, #0]
 8102406:	69fb      	ldr	r3, [r7, #28]
 8102408:	fa22 f303 	lsr.w	r3, r2, r3
 810240c:	2b00      	cmp	r3, #0
 810240e:	f47f ae63 	bne.w	81020d8 <HAL_GPIO_Init+0x14>
  }
}
 8102412:	bf00      	nop
 8102414:	bf00      	nop
 8102416:	3724      	adds	r7, #36	; 0x24
 8102418:	46bd      	mov	sp, r7
 810241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810241e:	4770      	bx	lr
 8102420:	58000400 	.word	0x58000400

08102424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8102424:	b580      	push	{r7, lr}
 8102426:	b082      	sub	sp, #8
 8102428:	af00      	add	r7, sp, #0
 810242a:	4603      	mov	r3, r0
 810242c:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 810242e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102432:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8102436:	88fb      	ldrh	r3, [r7, #6]
 8102438:	4013      	ands	r3, r2
 810243a:	2b00      	cmp	r3, #0
 810243c:	d008      	beq.n	8102450 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 810243e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102442:	88fb      	ldrh	r3, [r7, #6]
 8102444:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8102448:	88fb      	ldrh	r3, [r7, #6]
 810244a:	4618      	mov	r0, r3
 810244c:	f7ff fa0e 	bl	810186c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8102450:	bf00      	nop
 8102452:	3708      	adds	r7, #8
 8102454:	46bd      	mov	sp, r7
 8102456:	bd80      	pop	{r7, pc}

08102458 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102458:	b480      	push	{r7}
 810245a:	b083      	sub	sp, #12
 810245c:	af00      	add	r7, sp, #0
 810245e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102460:	4b05      	ldr	r3, [pc, #20]	; (8102478 <HAL_HSEM_ActivateNotification+0x20>)
 8102462:	681a      	ldr	r2, [r3, #0]
 8102464:	4904      	ldr	r1, [pc, #16]	; (8102478 <HAL_HSEM_ActivateNotification+0x20>)
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	4313      	orrs	r3, r2
 810246a:	600b      	str	r3, [r1, #0]
#endif
}
 810246c:	bf00      	nop
 810246e:	370c      	adds	r7, #12
 8102470:	46bd      	mov	sp, r7
 8102472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102476:	4770      	bx	lr
 8102478:	58026510 	.word	0x58026510

0810247c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810247c:	b580      	push	{r7, lr}
 810247e:	b082      	sub	sp, #8
 8102480:	af00      	add	r7, sp, #0
 8102482:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	2b00      	cmp	r3, #0
 8102488:	d101      	bne.n	810248e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810248a:	2301      	movs	r3, #1
 810248c:	e081      	b.n	8102592 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102494:	b2db      	uxtb	r3, r3
 8102496:	2b00      	cmp	r3, #0
 8102498:	d106      	bne.n	81024a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	2200      	movs	r2, #0
 810249e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81024a2:	6878      	ldr	r0, [r7, #4]
 81024a4:	f7ff fa28 	bl	81018f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	2224      	movs	r2, #36	; 0x24
 81024ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81024b0:	687b      	ldr	r3, [r7, #4]
 81024b2:	681b      	ldr	r3, [r3, #0]
 81024b4:	681a      	ldr	r2, [r3, #0]
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	f022 0201 	bic.w	r2, r2, #1
 81024be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81024c0:	687b      	ldr	r3, [r7, #4]
 81024c2:	685a      	ldr	r2, [r3, #4]
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	681b      	ldr	r3, [r3, #0]
 81024c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 81024cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81024ce:	687b      	ldr	r3, [r7, #4]
 81024d0:	681b      	ldr	r3, [r3, #0]
 81024d2:	689a      	ldr	r2, [r3, #8]
 81024d4:	687b      	ldr	r3, [r7, #4]
 81024d6:	681b      	ldr	r3, [r3, #0]
 81024d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81024dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	68db      	ldr	r3, [r3, #12]
 81024e2:	2b01      	cmp	r3, #1
 81024e4:	d107      	bne.n	81024f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	689a      	ldr	r2, [r3, #8]
 81024ea:	687b      	ldr	r3, [r7, #4]
 81024ec:	681b      	ldr	r3, [r3, #0]
 81024ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81024f2:	609a      	str	r2, [r3, #8]
 81024f4:	e006      	b.n	8102504 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	689a      	ldr	r2, [r3, #8]
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	681b      	ldr	r3, [r3, #0]
 81024fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8102502:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	68db      	ldr	r3, [r3, #12]
 8102508:	2b02      	cmp	r3, #2
 810250a:	d104      	bne.n	8102516 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102514:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	681b      	ldr	r3, [r3, #0]
 810251a:	685b      	ldr	r3, [r3, #4]
 810251c:	687a      	ldr	r2, [r7, #4]
 810251e:	6812      	ldr	r2, [r2, #0]
 8102520:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8102528:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810252a:	687b      	ldr	r3, [r7, #4]
 810252c:	681b      	ldr	r3, [r3, #0]
 810252e:	68da      	ldr	r2, [r3, #12]
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	681b      	ldr	r3, [r3, #0]
 8102534:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102538:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	691a      	ldr	r2, [r3, #16]
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	695b      	ldr	r3, [r3, #20]
 8102542:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	699b      	ldr	r3, [r3, #24]
 810254a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810254c:	687b      	ldr	r3, [r7, #4]
 810254e:	681b      	ldr	r3, [r3, #0]
 8102550:	430a      	orrs	r2, r1
 8102552:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	69d9      	ldr	r1, [r3, #28]
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	6a1a      	ldr	r2, [r3, #32]
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	681b      	ldr	r3, [r3, #0]
 8102560:	430a      	orrs	r2, r1
 8102562:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	681a      	ldr	r2, [r3, #0]
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	681b      	ldr	r3, [r3, #0]
 810256e:	f042 0201 	orr.w	r2, r2, #1
 8102572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	2200      	movs	r2, #0
 8102578:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	2220      	movs	r2, #32
 810257e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	2200      	movs	r2, #0
 8102586:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	2200      	movs	r2, #0
 810258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102590:	2300      	movs	r3, #0
}
 8102592:	4618      	mov	r0, r3
 8102594:	3708      	adds	r7, #8
 8102596:	46bd      	mov	sp, r7
 8102598:	bd80      	pop	{r7, pc}
	...

0810259c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810259c:	b580      	push	{r7, lr}
 810259e:	b088      	sub	sp, #32
 81025a0:	af02      	add	r7, sp, #8
 81025a2:	60f8      	str	r0, [r7, #12]
 81025a4:	4608      	mov	r0, r1
 81025a6:	4611      	mov	r1, r2
 81025a8:	461a      	mov	r2, r3
 81025aa:	4603      	mov	r3, r0
 81025ac:	817b      	strh	r3, [r7, #10]
 81025ae:	460b      	mov	r3, r1
 81025b0:	813b      	strh	r3, [r7, #8]
 81025b2:	4613      	mov	r3, r2
 81025b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81025b6:	68fb      	ldr	r3, [r7, #12]
 81025b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81025bc:	b2db      	uxtb	r3, r3
 81025be:	2b20      	cmp	r3, #32
 81025c0:	f040 80f9 	bne.w	81027b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81025c4:	6a3b      	ldr	r3, [r7, #32]
 81025c6:	2b00      	cmp	r3, #0
 81025c8:	d002      	beq.n	81025d0 <HAL_I2C_Mem_Write+0x34>
 81025ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81025cc:	2b00      	cmp	r3, #0
 81025ce:	d105      	bne.n	81025dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81025d0:	68fb      	ldr	r3, [r7, #12]
 81025d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 81025d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81025d8:	2301      	movs	r3, #1
 81025da:	e0ed      	b.n	81027b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81025dc:	68fb      	ldr	r3, [r7, #12]
 81025de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81025e2:	2b01      	cmp	r3, #1
 81025e4:	d101      	bne.n	81025ea <HAL_I2C_Mem_Write+0x4e>
 81025e6:	2302      	movs	r3, #2
 81025e8:	e0e6      	b.n	81027b8 <HAL_I2C_Mem_Write+0x21c>
 81025ea:	68fb      	ldr	r3, [r7, #12]
 81025ec:	2201      	movs	r2, #1
 81025ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81025f2:	f7ff fc13 	bl	8101e1c <HAL_GetTick>
 81025f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81025f8:	697b      	ldr	r3, [r7, #20]
 81025fa:	9300      	str	r3, [sp, #0]
 81025fc:	2319      	movs	r3, #25
 81025fe:	2201      	movs	r2, #1
 8102600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8102604:	68f8      	ldr	r0, [r7, #12]
 8102606:	f000 fbcb 	bl	8102da0 <I2C_WaitOnFlagUntilTimeout>
 810260a:	4603      	mov	r3, r0
 810260c:	2b00      	cmp	r3, #0
 810260e:	d001      	beq.n	8102614 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8102610:	2301      	movs	r3, #1
 8102612:	e0d1      	b.n	81027b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8102614:	68fb      	ldr	r3, [r7, #12]
 8102616:	2221      	movs	r2, #33	; 0x21
 8102618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810261c:	68fb      	ldr	r3, [r7, #12]
 810261e:	2240      	movs	r2, #64	; 0x40
 8102620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102624:	68fb      	ldr	r3, [r7, #12]
 8102626:	2200      	movs	r2, #0
 8102628:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810262a:	68fb      	ldr	r3, [r7, #12]
 810262c:	6a3a      	ldr	r2, [r7, #32]
 810262e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102630:	68fb      	ldr	r3, [r7, #12]
 8102632:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102634:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102636:	68fb      	ldr	r3, [r7, #12]
 8102638:	2200      	movs	r2, #0
 810263a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810263c:	88f8      	ldrh	r0, [r7, #6]
 810263e:	893a      	ldrh	r2, [r7, #8]
 8102640:	8979      	ldrh	r1, [r7, #10]
 8102642:	697b      	ldr	r3, [r7, #20]
 8102644:	9301      	str	r3, [sp, #4]
 8102646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102648:	9300      	str	r3, [sp, #0]
 810264a:	4603      	mov	r3, r0
 810264c:	68f8      	ldr	r0, [r7, #12]
 810264e:	f000 fadb 	bl	8102c08 <I2C_RequestMemoryWrite>
 8102652:	4603      	mov	r3, r0
 8102654:	2b00      	cmp	r3, #0
 8102656:	d005      	beq.n	8102664 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102658:	68fb      	ldr	r3, [r7, #12]
 810265a:	2200      	movs	r2, #0
 810265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102660:	2301      	movs	r3, #1
 8102662:	e0a9      	b.n	81027b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102664:	68fb      	ldr	r3, [r7, #12]
 8102666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102668:	b29b      	uxth	r3, r3
 810266a:	2bff      	cmp	r3, #255	; 0xff
 810266c:	d90e      	bls.n	810268c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810266e:	68fb      	ldr	r3, [r7, #12]
 8102670:	22ff      	movs	r2, #255	; 0xff
 8102672:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102674:	68fb      	ldr	r3, [r7, #12]
 8102676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102678:	b2da      	uxtb	r2, r3
 810267a:	8979      	ldrh	r1, [r7, #10]
 810267c:	2300      	movs	r3, #0
 810267e:	9300      	str	r3, [sp, #0]
 8102680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102684:	68f8      	ldr	r0, [r7, #12]
 8102686:	f000 fd33 	bl	81030f0 <I2C_TransferConfig>
 810268a:	e00f      	b.n	81026ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810268c:	68fb      	ldr	r3, [r7, #12]
 810268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102690:	b29a      	uxth	r2, r3
 8102692:	68fb      	ldr	r3, [r7, #12]
 8102694:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102696:	68fb      	ldr	r3, [r7, #12]
 8102698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810269a:	b2da      	uxtb	r2, r3
 810269c:	8979      	ldrh	r1, [r7, #10]
 810269e:	2300      	movs	r3, #0
 81026a0:	9300      	str	r3, [sp, #0]
 81026a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81026a6:	68f8      	ldr	r0, [r7, #12]
 81026a8:	f000 fd22 	bl	81030f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81026ac:	697a      	ldr	r2, [r7, #20]
 81026ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81026b0:	68f8      	ldr	r0, [r7, #12]
 81026b2:	f000 fbb5 	bl	8102e20 <I2C_WaitOnTXISFlagUntilTimeout>
 81026b6:	4603      	mov	r3, r0
 81026b8:	2b00      	cmp	r3, #0
 81026ba:	d001      	beq.n	81026c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 81026bc:	2301      	movs	r3, #1
 81026be:	e07b      	b.n	81027b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81026c0:	68fb      	ldr	r3, [r7, #12]
 81026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026c4:	781a      	ldrb	r2, [r3, #0]
 81026c6:	68fb      	ldr	r3, [r7, #12]
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81026cc:	68fb      	ldr	r3, [r7, #12]
 81026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026d0:	1c5a      	adds	r2, r3, #1
 81026d2:	68fb      	ldr	r3, [r7, #12]
 81026d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81026d6:	68fb      	ldr	r3, [r7, #12]
 81026d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81026da:	b29b      	uxth	r3, r3
 81026dc:	3b01      	subs	r3, #1
 81026de:	b29a      	uxth	r2, r3
 81026e0:	68fb      	ldr	r3, [r7, #12]
 81026e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81026e4:	68fb      	ldr	r3, [r7, #12]
 81026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81026e8:	3b01      	subs	r3, #1
 81026ea:	b29a      	uxth	r2, r3
 81026ec:	68fb      	ldr	r3, [r7, #12]
 81026ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81026f0:	68fb      	ldr	r3, [r7, #12]
 81026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81026f4:	b29b      	uxth	r3, r3
 81026f6:	2b00      	cmp	r3, #0
 81026f8:	d034      	beq.n	8102764 <HAL_I2C_Mem_Write+0x1c8>
 81026fa:	68fb      	ldr	r3, [r7, #12]
 81026fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81026fe:	2b00      	cmp	r3, #0
 8102700:	d130      	bne.n	8102764 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102702:	697b      	ldr	r3, [r7, #20]
 8102704:	9300      	str	r3, [sp, #0]
 8102706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102708:	2200      	movs	r2, #0
 810270a:	2180      	movs	r1, #128	; 0x80
 810270c:	68f8      	ldr	r0, [r7, #12]
 810270e:	f000 fb47 	bl	8102da0 <I2C_WaitOnFlagUntilTimeout>
 8102712:	4603      	mov	r3, r0
 8102714:	2b00      	cmp	r3, #0
 8102716:	d001      	beq.n	810271c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8102718:	2301      	movs	r3, #1
 810271a:	e04d      	b.n	81027b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810271c:	68fb      	ldr	r3, [r7, #12]
 810271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102720:	b29b      	uxth	r3, r3
 8102722:	2bff      	cmp	r3, #255	; 0xff
 8102724:	d90e      	bls.n	8102744 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102726:	68fb      	ldr	r3, [r7, #12]
 8102728:	22ff      	movs	r2, #255	; 0xff
 810272a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810272c:	68fb      	ldr	r3, [r7, #12]
 810272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102730:	b2da      	uxtb	r2, r3
 8102732:	8979      	ldrh	r1, [r7, #10]
 8102734:	2300      	movs	r3, #0
 8102736:	9300      	str	r3, [sp, #0]
 8102738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810273c:	68f8      	ldr	r0, [r7, #12]
 810273e:	f000 fcd7 	bl	81030f0 <I2C_TransferConfig>
 8102742:	e00f      	b.n	8102764 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102744:	68fb      	ldr	r3, [r7, #12]
 8102746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102748:	b29a      	uxth	r2, r3
 810274a:	68fb      	ldr	r3, [r7, #12]
 810274c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810274e:	68fb      	ldr	r3, [r7, #12]
 8102750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102752:	b2da      	uxtb	r2, r3
 8102754:	8979      	ldrh	r1, [r7, #10]
 8102756:	2300      	movs	r3, #0
 8102758:	9300      	str	r3, [sp, #0]
 810275a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810275e:	68f8      	ldr	r0, [r7, #12]
 8102760:	f000 fcc6 	bl	81030f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8102764:	68fb      	ldr	r3, [r7, #12]
 8102766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102768:	b29b      	uxth	r3, r3
 810276a:	2b00      	cmp	r3, #0
 810276c:	d19e      	bne.n	81026ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810276e:	697a      	ldr	r2, [r7, #20]
 8102770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102772:	68f8      	ldr	r0, [r7, #12]
 8102774:	f000 fb94 	bl	8102ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102778:	4603      	mov	r3, r0
 810277a:	2b00      	cmp	r3, #0
 810277c:	d001      	beq.n	8102782 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810277e:	2301      	movs	r3, #1
 8102780:	e01a      	b.n	81027b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102782:	68fb      	ldr	r3, [r7, #12]
 8102784:	681b      	ldr	r3, [r3, #0]
 8102786:	2220      	movs	r2, #32
 8102788:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810278a:	68fb      	ldr	r3, [r7, #12]
 810278c:	681b      	ldr	r3, [r3, #0]
 810278e:	6859      	ldr	r1, [r3, #4]
 8102790:	68fb      	ldr	r3, [r7, #12]
 8102792:	681a      	ldr	r2, [r3, #0]
 8102794:	4b0a      	ldr	r3, [pc, #40]	; (81027c0 <HAL_I2C_Mem_Write+0x224>)
 8102796:	400b      	ands	r3, r1
 8102798:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810279a:	68fb      	ldr	r3, [r7, #12]
 810279c:	2220      	movs	r2, #32
 810279e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81027a2:	68fb      	ldr	r3, [r7, #12]
 81027a4:	2200      	movs	r2, #0
 81027a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81027aa:	68fb      	ldr	r3, [r7, #12]
 81027ac:	2200      	movs	r2, #0
 81027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81027b2:	2300      	movs	r3, #0
 81027b4:	e000      	b.n	81027b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 81027b6:	2302      	movs	r3, #2
  }
}
 81027b8:	4618      	mov	r0, r3
 81027ba:	3718      	adds	r7, #24
 81027bc:	46bd      	mov	sp, r7
 81027be:	bd80      	pop	{r7, pc}
 81027c0:	fe00e800 	.word	0xfe00e800

081027c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81027c4:	b580      	push	{r7, lr}
 81027c6:	b088      	sub	sp, #32
 81027c8:	af02      	add	r7, sp, #8
 81027ca:	60f8      	str	r0, [r7, #12]
 81027cc:	4608      	mov	r0, r1
 81027ce:	4611      	mov	r1, r2
 81027d0:	461a      	mov	r2, r3
 81027d2:	4603      	mov	r3, r0
 81027d4:	817b      	strh	r3, [r7, #10]
 81027d6:	460b      	mov	r3, r1
 81027d8:	813b      	strh	r3, [r7, #8]
 81027da:	4613      	mov	r3, r2
 81027dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81027de:	68fb      	ldr	r3, [r7, #12]
 81027e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81027e4:	b2db      	uxtb	r3, r3
 81027e6:	2b20      	cmp	r3, #32
 81027e8:	f040 80fd 	bne.w	81029e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81027ec:	6a3b      	ldr	r3, [r7, #32]
 81027ee:	2b00      	cmp	r3, #0
 81027f0:	d002      	beq.n	81027f8 <HAL_I2C_Mem_Read+0x34>
 81027f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81027f4:	2b00      	cmp	r3, #0
 81027f6:	d105      	bne.n	8102804 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81027f8:	68fb      	ldr	r3, [r7, #12]
 81027fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 81027fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102800:	2301      	movs	r3, #1
 8102802:	e0f1      	b.n	81029e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102804:	68fb      	ldr	r3, [r7, #12]
 8102806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810280a:	2b01      	cmp	r3, #1
 810280c:	d101      	bne.n	8102812 <HAL_I2C_Mem_Read+0x4e>
 810280e:	2302      	movs	r3, #2
 8102810:	e0ea      	b.n	81029e8 <HAL_I2C_Mem_Read+0x224>
 8102812:	68fb      	ldr	r3, [r7, #12]
 8102814:	2201      	movs	r2, #1
 8102816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810281a:	f7ff faff 	bl	8101e1c <HAL_GetTick>
 810281e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102820:	697b      	ldr	r3, [r7, #20]
 8102822:	9300      	str	r3, [sp, #0]
 8102824:	2319      	movs	r3, #25
 8102826:	2201      	movs	r2, #1
 8102828:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810282c:	68f8      	ldr	r0, [r7, #12]
 810282e:	f000 fab7 	bl	8102da0 <I2C_WaitOnFlagUntilTimeout>
 8102832:	4603      	mov	r3, r0
 8102834:	2b00      	cmp	r3, #0
 8102836:	d001      	beq.n	810283c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8102838:	2301      	movs	r3, #1
 810283a:	e0d5      	b.n	81029e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810283c:	68fb      	ldr	r3, [r7, #12]
 810283e:	2222      	movs	r2, #34	; 0x22
 8102840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102844:	68fb      	ldr	r3, [r7, #12]
 8102846:	2240      	movs	r2, #64	; 0x40
 8102848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810284c:	68fb      	ldr	r3, [r7, #12]
 810284e:	2200      	movs	r2, #0
 8102850:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102852:	68fb      	ldr	r3, [r7, #12]
 8102854:	6a3a      	ldr	r2, [r7, #32]
 8102856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102858:	68fb      	ldr	r3, [r7, #12]
 810285a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 810285c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810285e:	68fb      	ldr	r3, [r7, #12]
 8102860:	2200      	movs	r2, #0
 8102862:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102864:	88f8      	ldrh	r0, [r7, #6]
 8102866:	893a      	ldrh	r2, [r7, #8]
 8102868:	8979      	ldrh	r1, [r7, #10]
 810286a:	697b      	ldr	r3, [r7, #20]
 810286c:	9301      	str	r3, [sp, #4]
 810286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102870:	9300      	str	r3, [sp, #0]
 8102872:	4603      	mov	r3, r0
 8102874:	68f8      	ldr	r0, [r7, #12]
 8102876:	f000 fa1b 	bl	8102cb0 <I2C_RequestMemoryRead>
 810287a:	4603      	mov	r3, r0
 810287c:	2b00      	cmp	r3, #0
 810287e:	d005      	beq.n	810288c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102880:	68fb      	ldr	r3, [r7, #12]
 8102882:	2200      	movs	r2, #0
 8102884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102888:	2301      	movs	r3, #1
 810288a:	e0ad      	b.n	81029e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810288c:	68fb      	ldr	r3, [r7, #12]
 810288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102890:	b29b      	uxth	r3, r3
 8102892:	2bff      	cmp	r3, #255	; 0xff
 8102894:	d90e      	bls.n	81028b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102896:	68fb      	ldr	r3, [r7, #12]
 8102898:	22ff      	movs	r2, #255	; 0xff
 810289a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810289c:	68fb      	ldr	r3, [r7, #12]
 810289e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81028a0:	b2da      	uxtb	r2, r3
 81028a2:	8979      	ldrh	r1, [r7, #10]
 81028a4:	4b52      	ldr	r3, [pc, #328]	; (81029f0 <HAL_I2C_Mem_Read+0x22c>)
 81028a6:	9300      	str	r3, [sp, #0]
 81028a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81028ac:	68f8      	ldr	r0, [r7, #12]
 81028ae:	f000 fc1f 	bl	81030f0 <I2C_TransferConfig>
 81028b2:	e00f      	b.n	81028d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81028b4:	68fb      	ldr	r3, [r7, #12]
 81028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81028b8:	b29a      	uxth	r2, r3
 81028ba:	68fb      	ldr	r3, [r7, #12]
 81028bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81028be:	68fb      	ldr	r3, [r7, #12]
 81028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81028c2:	b2da      	uxtb	r2, r3
 81028c4:	8979      	ldrh	r1, [r7, #10]
 81028c6:	4b4a      	ldr	r3, [pc, #296]	; (81029f0 <HAL_I2C_Mem_Read+0x22c>)
 81028c8:	9300      	str	r3, [sp, #0]
 81028ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81028ce:	68f8      	ldr	r0, [r7, #12]
 81028d0:	f000 fc0e 	bl	81030f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81028d4:	697b      	ldr	r3, [r7, #20]
 81028d6:	9300      	str	r3, [sp, #0]
 81028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81028da:	2200      	movs	r2, #0
 81028dc:	2104      	movs	r1, #4
 81028de:	68f8      	ldr	r0, [r7, #12]
 81028e0:	f000 fa5e 	bl	8102da0 <I2C_WaitOnFlagUntilTimeout>
 81028e4:	4603      	mov	r3, r0
 81028e6:	2b00      	cmp	r3, #0
 81028e8:	d001      	beq.n	81028ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81028ea:	2301      	movs	r3, #1
 81028ec:	e07c      	b.n	81029e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81028ee:	68fb      	ldr	r3, [r7, #12]
 81028f0:	681b      	ldr	r3, [r3, #0]
 81028f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81028f4:	68fb      	ldr	r3, [r7, #12]
 81028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81028f8:	b2d2      	uxtb	r2, r2
 81028fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81028fc:	68fb      	ldr	r3, [r7, #12]
 81028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102900:	1c5a      	adds	r2, r3, #1
 8102902:	68fb      	ldr	r3, [r7, #12]
 8102904:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8102906:	68fb      	ldr	r3, [r7, #12]
 8102908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810290a:	3b01      	subs	r3, #1
 810290c:	b29a      	uxth	r2, r3
 810290e:	68fb      	ldr	r3, [r7, #12]
 8102910:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8102912:	68fb      	ldr	r3, [r7, #12]
 8102914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102916:	b29b      	uxth	r3, r3
 8102918:	3b01      	subs	r3, #1
 810291a:	b29a      	uxth	r2, r3
 810291c:	68fb      	ldr	r3, [r7, #12]
 810291e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102920:	68fb      	ldr	r3, [r7, #12]
 8102922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102924:	b29b      	uxth	r3, r3
 8102926:	2b00      	cmp	r3, #0
 8102928:	d034      	beq.n	8102994 <HAL_I2C_Mem_Read+0x1d0>
 810292a:	68fb      	ldr	r3, [r7, #12]
 810292c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810292e:	2b00      	cmp	r3, #0
 8102930:	d130      	bne.n	8102994 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102932:	697b      	ldr	r3, [r7, #20]
 8102934:	9300      	str	r3, [sp, #0]
 8102936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102938:	2200      	movs	r2, #0
 810293a:	2180      	movs	r1, #128	; 0x80
 810293c:	68f8      	ldr	r0, [r7, #12]
 810293e:	f000 fa2f 	bl	8102da0 <I2C_WaitOnFlagUntilTimeout>
 8102942:	4603      	mov	r3, r0
 8102944:	2b00      	cmp	r3, #0
 8102946:	d001      	beq.n	810294c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8102948:	2301      	movs	r3, #1
 810294a:	e04d      	b.n	81029e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810294c:	68fb      	ldr	r3, [r7, #12]
 810294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102950:	b29b      	uxth	r3, r3
 8102952:	2bff      	cmp	r3, #255	; 0xff
 8102954:	d90e      	bls.n	8102974 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102956:	68fb      	ldr	r3, [r7, #12]
 8102958:	22ff      	movs	r2, #255	; 0xff
 810295a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 810295c:	68fb      	ldr	r3, [r7, #12]
 810295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102960:	b2da      	uxtb	r2, r3
 8102962:	8979      	ldrh	r1, [r7, #10]
 8102964:	2300      	movs	r3, #0
 8102966:	9300      	str	r3, [sp, #0]
 8102968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810296c:	68f8      	ldr	r0, [r7, #12]
 810296e:	f000 fbbf 	bl	81030f0 <I2C_TransferConfig>
 8102972:	e00f      	b.n	8102994 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102974:	68fb      	ldr	r3, [r7, #12]
 8102976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102978:	b29a      	uxth	r2, r3
 810297a:	68fb      	ldr	r3, [r7, #12]
 810297c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 810297e:	68fb      	ldr	r3, [r7, #12]
 8102980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102982:	b2da      	uxtb	r2, r3
 8102984:	8979      	ldrh	r1, [r7, #10]
 8102986:	2300      	movs	r3, #0
 8102988:	9300      	str	r3, [sp, #0]
 810298a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810298e:	68f8      	ldr	r0, [r7, #12]
 8102990:	f000 fbae 	bl	81030f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8102994:	68fb      	ldr	r3, [r7, #12]
 8102996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102998:	b29b      	uxth	r3, r3
 810299a:	2b00      	cmp	r3, #0
 810299c:	d19a      	bne.n	81028d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810299e:	697a      	ldr	r2, [r7, #20]
 81029a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81029a2:	68f8      	ldr	r0, [r7, #12]
 81029a4:	f000 fa7c 	bl	8102ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 81029a8:	4603      	mov	r3, r0
 81029aa:	2b00      	cmp	r3, #0
 81029ac:	d001      	beq.n	81029b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 81029ae:	2301      	movs	r3, #1
 81029b0:	e01a      	b.n	81029e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81029b2:	68fb      	ldr	r3, [r7, #12]
 81029b4:	681b      	ldr	r3, [r3, #0]
 81029b6:	2220      	movs	r2, #32
 81029b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81029ba:	68fb      	ldr	r3, [r7, #12]
 81029bc:	681b      	ldr	r3, [r3, #0]
 81029be:	6859      	ldr	r1, [r3, #4]
 81029c0:	68fb      	ldr	r3, [r7, #12]
 81029c2:	681a      	ldr	r2, [r3, #0]
 81029c4:	4b0b      	ldr	r3, [pc, #44]	; (81029f4 <HAL_I2C_Mem_Read+0x230>)
 81029c6:	400b      	ands	r3, r1
 81029c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81029ca:	68fb      	ldr	r3, [r7, #12]
 81029cc:	2220      	movs	r2, #32
 81029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81029d2:	68fb      	ldr	r3, [r7, #12]
 81029d4:	2200      	movs	r2, #0
 81029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81029da:	68fb      	ldr	r3, [r7, #12]
 81029dc:	2200      	movs	r2, #0
 81029de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81029e2:	2300      	movs	r3, #0
 81029e4:	e000      	b.n	81029e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81029e6:	2302      	movs	r3, #2
  }
}
 81029e8:	4618      	mov	r0, r3
 81029ea:	3718      	adds	r7, #24
 81029ec:	46bd      	mov	sp, r7
 81029ee:	bd80      	pop	{r7, pc}
 81029f0:	80002400 	.word	0x80002400
 81029f4:	fe00e800 	.word	0xfe00e800

081029f8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 81029f8:	b580      	push	{r7, lr}
 81029fa:	b08a      	sub	sp, #40	; 0x28
 81029fc:	af02      	add	r7, sp, #8
 81029fe:	60f8      	str	r0, [r7, #12]
 8102a00:	607a      	str	r2, [r7, #4]
 8102a02:	603b      	str	r3, [r7, #0]
 8102a04:	460b      	mov	r3, r1
 8102a06:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8102a08:	2300      	movs	r3, #0
 8102a0a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102a0c:	68fb      	ldr	r3, [r7, #12]
 8102a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102a12:	b2db      	uxtb	r3, r3
 8102a14:	2b20      	cmp	r3, #32
 8102a16:	f040 80f1 	bne.w	8102bfc <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8102a1a:	68fb      	ldr	r3, [r7, #12]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	699b      	ldr	r3, [r3, #24]
 8102a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102a28:	d101      	bne.n	8102a2e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8102a2a:	2302      	movs	r3, #2
 8102a2c:	e0e7      	b.n	8102bfe <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102a2e:	68fb      	ldr	r3, [r7, #12]
 8102a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102a34:	2b01      	cmp	r3, #1
 8102a36:	d101      	bne.n	8102a3c <HAL_I2C_IsDeviceReady+0x44>
 8102a38:	2302      	movs	r3, #2
 8102a3a:	e0e0      	b.n	8102bfe <HAL_I2C_IsDeviceReady+0x206>
 8102a3c:	68fb      	ldr	r3, [r7, #12]
 8102a3e:	2201      	movs	r2, #1
 8102a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102a44:	68fb      	ldr	r3, [r7, #12]
 8102a46:	2224      	movs	r2, #36	; 0x24
 8102a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102a4c:	68fb      	ldr	r3, [r7, #12]
 8102a4e:	2200      	movs	r2, #0
 8102a50:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8102a52:	68fb      	ldr	r3, [r7, #12]
 8102a54:	68db      	ldr	r3, [r3, #12]
 8102a56:	2b01      	cmp	r3, #1
 8102a58:	d107      	bne.n	8102a6a <HAL_I2C_IsDeviceReady+0x72>
 8102a5a:	897b      	ldrh	r3, [r7, #10]
 8102a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8102a60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8102a68:	e004      	b.n	8102a74 <HAL_I2C_IsDeviceReady+0x7c>
 8102a6a:	897b      	ldrh	r3, [r7, #10]
 8102a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8102a70:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8102a74:	68fa      	ldr	r2, [r7, #12]
 8102a76:	6812      	ldr	r2, [r2, #0]
 8102a78:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8102a7a:	f7ff f9cf 	bl	8101e1c <HAL_GetTick>
 8102a7e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102a80:	68fb      	ldr	r3, [r7, #12]
 8102a82:	681b      	ldr	r3, [r3, #0]
 8102a84:	699b      	ldr	r3, [r3, #24]
 8102a86:	f003 0320 	and.w	r3, r3, #32
 8102a8a:	2b20      	cmp	r3, #32
 8102a8c:	bf0c      	ite	eq
 8102a8e:	2301      	moveq	r3, #1
 8102a90:	2300      	movne	r3, #0
 8102a92:	b2db      	uxtb	r3, r3
 8102a94:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102a96:	68fb      	ldr	r3, [r7, #12]
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	699b      	ldr	r3, [r3, #24]
 8102a9c:	f003 0310 	and.w	r3, r3, #16
 8102aa0:	2b10      	cmp	r3, #16
 8102aa2:	bf0c      	ite	eq
 8102aa4:	2301      	moveq	r3, #1
 8102aa6:	2300      	movne	r3, #0
 8102aa8:	b2db      	uxtb	r3, r3
 8102aaa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102aac:	e034      	b.n	8102b18 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8102aae:	683b      	ldr	r3, [r7, #0]
 8102ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ab4:	d01a      	beq.n	8102aec <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8102ab6:	f7ff f9b1 	bl	8101e1c <HAL_GetTick>
 8102aba:	4602      	mov	r2, r0
 8102abc:	69bb      	ldr	r3, [r7, #24]
 8102abe:	1ad3      	subs	r3, r2, r3
 8102ac0:	683a      	ldr	r2, [r7, #0]
 8102ac2:	429a      	cmp	r2, r3
 8102ac4:	d302      	bcc.n	8102acc <HAL_I2C_IsDeviceReady+0xd4>
 8102ac6:	683b      	ldr	r3, [r7, #0]
 8102ac8:	2b00      	cmp	r3, #0
 8102aca:	d10f      	bne.n	8102aec <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8102acc:	68fb      	ldr	r3, [r7, #12]
 8102ace:	2220      	movs	r2, #32
 8102ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102ad4:	68fb      	ldr	r3, [r7, #12]
 8102ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102ad8:	f043 0220 	orr.w	r2, r3, #32
 8102adc:	68fb      	ldr	r3, [r7, #12]
 8102ade:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8102ae0:	68fb      	ldr	r3, [r7, #12]
 8102ae2:	2200      	movs	r2, #0
 8102ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8102ae8:	2301      	movs	r3, #1
 8102aea:	e088      	b.n	8102bfe <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102aec:	68fb      	ldr	r3, [r7, #12]
 8102aee:	681b      	ldr	r3, [r3, #0]
 8102af0:	699b      	ldr	r3, [r3, #24]
 8102af2:	f003 0320 	and.w	r3, r3, #32
 8102af6:	2b20      	cmp	r3, #32
 8102af8:	bf0c      	ite	eq
 8102afa:	2301      	moveq	r3, #1
 8102afc:	2300      	movne	r3, #0
 8102afe:	b2db      	uxtb	r3, r3
 8102b00:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102b02:	68fb      	ldr	r3, [r7, #12]
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	699b      	ldr	r3, [r3, #24]
 8102b08:	f003 0310 	and.w	r3, r3, #16
 8102b0c:	2b10      	cmp	r3, #16
 8102b0e:	bf0c      	ite	eq
 8102b10:	2301      	moveq	r3, #1
 8102b12:	2300      	movne	r3, #0
 8102b14:	b2db      	uxtb	r3, r3
 8102b16:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102b18:	7ffb      	ldrb	r3, [r7, #31]
 8102b1a:	2b00      	cmp	r3, #0
 8102b1c:	d102      	bne.n	8102b24 <HAL_I2C_IsDeviceReady+0x12c>
 8102b1e:	7fbb      	ldrb	r3, [r7, #30]
 8102b20:	2b00      	cmp	r3, #0
 8102b22:	d0c4      	beq.n	8102aae <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8102b24:	68fb      	ldr	r3, [r7, #12]
 8102b26:	681b      	ldr	r3, [r3, #0]
 8102b28:	699b      	ldr	r3, [r3, #24]
 8102b2a:	f003 0310 	and.w	r3, r3, #16
 8102b2e:	2b10      	cmp	r3, #16
 8102b30:	d01a      	beq.n	8102b68 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102b32:	69bb      	ldr	r3, [r7, #24]
 8102b34:	9300      	str	r3, [sp, #0]
 8102b36:	683b      	ldr	r3, [r7, #0]
 8102b38:	2200      	movs	r2, #0
 8102b3a:	2120      	movs	r1, #32
 8102b3c:	68f8      	ldr	r0, [r7, #12]
 8102b3e:	f000 f92f 	bl	8102da0 <I2C_WaitOnFlagUntilTimeout>
 8102b42:	4603      	mov	r3, r0
 8102b44:	2b00      	cmp	r3, #0
 8102b46:	d001      	beq.n	8102b4c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8102b48:	2301      	movs	r3, #1
 8102b4a:	e058      	b.n	8102bfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102b4c:	68fb      	ldr	r3, [r7, #12]
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	2220      	movs	r2, #32
 8102b52:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8102b54:	68fb      	ldr	r3, [r7, #12]
 8102b56:	2220      	movs	r2, #32
 8102b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102b5c:	68fb      	ldr	r3, [r7, #12]
 8102b5e:	2200      	movs	r2, #0
 8102b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8102b64:	2300      	movs	r3, #0
 8102b66:	e04a      	b.n	8102bfe <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102b68:	69bb      	ldr	r3, [r7, #24]
 8102b6a:	9300      	str	r3, [sp, #0]
 8102b6c:	683b      	ldr	r3, [r7, #0]
 8102b6e:	2200      	movs	r2, #0
 8102b70:	2120      	movs	r1, #32
 8102b72:	68f8      	ldr	r0, [r7, #12]
 8102b74:	f000 f914 	bl	8102da0 <I2C_WaitOnFlagUntilTimeout>
 8102b78:	4603      	mov	r3, r0
 8102b7a:	2b00      	cmp	r3, #0
 8102b7c:	d001      	beq.n	8102b82 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8102b7e:	2301      	movs	r3, #1
 8102b80:	e03d      	b.n	8102bfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102b82:	68fb      	ldr	r3, [r7, #12]
 8102b84:	681b      	ldr	r3, [r3, #0]
 8102b86:	2210      	movs	r2, #16
 8102b88:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102b8a:	68fb      	ldr	r3, [r7, #12]
 8102b8c:	681b      	ldr	r3, [r3, #0]
 8102b8e:	2220      	movs	r2, #32
 8102b90:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8102b92:	697b      	ldr	r3, [r7, #20]
 8102b94:	687a      	ldr	r2, [r7, #4]
 8102b96:	429a      	cmp	r2, r3
 8102b98:	d118      	bne.n	8102bcc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102b9a:	68fb      	ldr	r3, [r7, #12]
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	685a      	ldr	r2, [r3, #4]
 8102ba0:	68fb      	ldr	r3, [r7, #12]
 8102ba2:	681b      	ldr	r3, [r3, #0]
 8102ba4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102ba8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102baa:	69bb      	ldr	r3, [r7, #24]
 8102bac:	9300      	str	r3, [sp, #0]
 8102bae:	683b      	ldr	r3, [r7, #0]
 8102bb0:	2200      	movs	r2, #0
 8102bb2:	2120      	movs	r1, #32
 8102bb4:	68f8      	ldr	r0, [r7, #12]
 8102bb6:	f000 f8f3 	bl	8102da0 <I2C_WaitOnFlagUntilTimeout>
 8102bba:	4603      	mov	r3, r0
 8102bbc:	2b00      	cmp	r3, #0
 8102bbe:	d001      	beq.n	8102bc4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8102bc0:	2301      	movs	r3, #1
 8102bc2:	e01c      	b.n	8102bfe <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102bc4:	68fb      	ldr	r3, [r7, #12]
 8102bc6:	681b      	ldr	r3, [r3, #0]
 8102bc8:	2220      	movs	r2, #32
 8102bca:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8102bcc:	697b      	ldr	r3, [r7, #20]
 8102bce:	3301      	adds	r3, #1
 8102bd0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8102bd2:	697b      	ldr	r3, [r7, #20]
 8102bd4:	687a      	ldr	r2, [r7, #4]
 8102bd6:	429a      	cmp	r2, r3
 8102bd8:	f63f af3b 	bhi.w	8102a52 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8102bdc:	68fb      	ldr	r3, [r7, #12]
 8102bde:	2220      	movs	r2, #32
 8102be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102be4:	68fb      	ldr	r3, [r7, #12]
 8102be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102be8:	f043 0220 	orr.w	r2, r3, #32
 8102bec:	68fb      	ldr	r3, [r7, #12]
 8102bee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102bf0:	68fb      	ldr	r3, [r7, #12]
 8102bf2:	2200      	movs	r2, #0
 8102bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102bf8:	2301      	movs	r3, #1
 8102bfa:	e000      	b.n	8102bfe <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8102bfc:	2302      	movs	r3, #2
  }
}
 8102bfe:	4618      	mov	r0, r3
 8102c00:	3720      	adds	r7, #32
 8102c02:	46bd      	mov	sp, r7
 8102c04:	bd80      	pop	{r7, pc}
	...

08102c08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8102c08:	b580      	push	{r7, lr}
 8102c0a:	b086      	sub	sp, #24
 8102c0c:	af02      	add	r7, sp, #8
 8102c0e:	60f8      	str	r0, [r7, #12]
 8102c10:	4608      	mov	r0, r1
 8102c12:	4611      	mov	r1, r2
 8102c14:	461a      	mov	r2, r3
 8102c16:	4603      	mov	r3, r0
 8102c18:	817b      	strh	r3, [r7, #10]
 8102c1a:	460b      	mov	r3, r1
 8102c1c:	813b      	strh	r3, [r7, #8]
 8102c1e:	4613      	mov	r3, r2
 8102c20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8102c22:	88fb      	ldrh	r3, [r7, #6]
 8102c24:	b2da      	uxtb	r2, r3
 8102c26:	8979      	ldrh	r1, [r7, #10]
 8102c28:	4b20      	ldr	r3, [pc, #128]	; (8102cac <I2C_RequestMemoryWrite+0xa4>)
 8102c2a:	9300      	str	r3, [sp, #0]
 8102c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102c30:	68f8      	ldr	r0, [r7, #12]
 8102c32:	f000 fa5d 	bl	81030f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102c36:	69fa      	ldr	r2, [r7, #28]
 8102c38:	69b9      	ldr	r1, [r7, #24]
 8102c3a:	68f8      	ldr	r0, [r7, #12]
 8102c3c:	f000 f8f0 	bl	8102e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8102c40:	4603      	mov	r3, r0
 8102c42:	2b00      	cmp	r3, #0
 8102c44:	d001      	beq.n	8102c4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8102c46:	2301      	movs	r3, #1
 8102c48:	e02c      	b.n	8102ca4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102c4a:	88fb      	ldrh	r3, [r7, #6]
 8102c4c:	2b01      	cmp	r3, #1
 8102c4e:	d105      	bne.n	8102c5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102c50:	893b      	ldrh	r3, [r7, #8]
 8102c52:	b2da      	uxtb	r2, r3
 8102c54:	68fb      	ldr	r3, [r7, #12]
 8102c56:	681b      	ldr	r3, [r3, #0]
 8102c58:	629a      	str	r2, [r3, #40]	; 0x28
 8102c5a:	e015      	b.n	8102c88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102c5c:	893b      	ldrh	r3, [r7, #8]
 8102c5e:	0a1b      	lsrs	r3, r3, #8
 8102c60:	b29b      	uxth	r3, r3
 8102c62:	b2da      	uxtb	r2, r3
 8102c64:	68fb      	ldr	r3, [r7, #12]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102c6a:	69fa      	ldr	r2, [r7, #28]
 8102c6c:	69b9      	ldr	r1, [r7, #24]
 8102c6e:	68f8      	ldr	r0, [r7, #12]
 8102c70:	f000 f8d6 	bl	8102e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8102c74:	4603      	mov	r3, r0
 8102c76:	2b00      	cmp	r3, #0
 8102c78:	d001      	beq.n	8102c7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8102c7a:	2301      	movs	r3, #1
 8102c7c:	e012      	b.n	8102ca4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102c7e:	893b      	ldrh	r3, [r7, #8]
 8102c80:	b2da      	uxtb	r2, r3
 8102c82:	68fb      	ldr	r3, [r7, #12]
 8102c84:	681b      	ldr	r3, [r3, #0]
 8102c86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8102c88:	69fb      	ldr	r3, [r7, #28]
 8102c8a:	9300      	str	r3, [sp, #0]
 8102c8c:	69bb      	ldr	r3, [r7, #24]
 8102c8e:	2200      	movs	r2, #0
 8102c90:	2180      	movs	r1, #128	; 0x80
 8102c92:	68f8      	ldr	r0, [r7, #12]
 8102c94:	f000 f884 	bl	8102da0 <I2C_WaitOnFlagUntilTimeout>
 8102c98:	4603      	mov	r3, r0
 8102c9a:	2b00      	cmp	r3, #0
 8102c9c:	d001      	beq.n	8102ca2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8102c9e:	2301      	movs	r3, #1
 8102ca0:	e000      	b.n	8102ca4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8102ca2:	2300      	movs	r3, #0
}
 8102ca4:	4618      	mov	r0, r3
 8102ca6:	3710      	adds	r7, #16
 8102ca8:	46bd      	mov	sp, r7
 8102caa:	bd80      	pop	{r7, pc}
 8102cac:	80002000 	.word	0x80002000

08102cb0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8102cb0:	b580      	push	{r7, lr}
 8102cb2:	b086      	sub	sp, #24
 8102cb4:	af02      	add	r7, sp, #8
 8102cb6:	60f8      	str	r0, [r7, #12]
 8102cb8:	4608      	mov	r0, r1
 8102cba:	4611      	mov	r1, r2
 8102cbc:	461a      	mov	r2, r3
 8102cbe:	4603      	mov	r3, r0
 8102cc0:	817b      	strh	r3, [r7, #10]
 8102cc2:	460b      	mov	r3, r1
 8102cc4:	813b      	strh	r3, [r7, #8]
 8102cc6:	4613      	mov	r3, r2
 8102cc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8102cca:	88fb      	ldrh	r3, [r7, #6]
 8102ccc:	b2da      	uxtb	r2, r3
 8102cce:	8979      	ldrh	r1, [r7, #10]
 8102cd0:	4b20      	ldr	r3, [pc, #128]	; (8102d54 <I2C_RequestMemoryRead+0xa4>)
 8102cd2:	9300      	str	r3, [sp, #0]
 8102cd4:	2300      	movs	r3, #0
 8102cd6:	68f8      	ldr	r0, [r7, #12]
 8102cd8:	f000 fa0a 	bl	81030f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102cdc:	69fa      	ldr	r2, [r7, #28]
 8102cde:	69b9      	ldr	r1, [r7, #24]
 8102ce0:	68f8      	ldr	r0, [r7, #12]
 8102ce2:	f000 f89d 	bl	8102e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8102ce6:	4603      	mov	r3, r0
 8102ce8:	2b00      	cmp	r3, #0
 8102cea:	d001      	beq.n	8102cf0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102cec:	2301      	movs	r3, #1
 8102cee:	e02c      	b.n	8102d4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102cf0:	88fb      	ldrh	r3, [r7, #6]
 8102cf2:	2b01      	cmp	r3, #1
 8102cf4:	d105      	bne.n	8102d02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102cf6:	893b      	ldrh	r3, [r7, #8]
 8102cf8:	b2da      	uxtb	r2, r3
 8102cfa:	68fb      	ldr	r3, [r7, #12]
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8102d00:	e015      	b.n	8102d2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102d02:	893b      	ldrh	r3, [r7, #8]
 8102d04:	0a1b      	lsrs	r3, r3, #8
 8102d06:	b29b      	uxth	r3, r3
 8102d08:	b2da      	uxtb	r2, r3
 8102d0a:	68fb      	ldr	r3, [r7, #12]
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102d10:	69fa      	ldr	r2, [r7, #28]
 8102d12:	69b9      	ldr	r1, [r7, #24]
 8102d14:	68f8      	ldr	r0, [r7, #12]
 8102d16:	f000 f883 	bl	8102e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8102d1a:	4603      	mov	r3, r0
 8102d1c:	2b00      	cmp	r3, #0
 8102d1e:	d001      	beq.n	8102d24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8102d20:	2301      	movs	r3, #1
 8102d22:	e012      	b.n	8102d4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102d24:	893b      	ldrh	r3, [r7, #8]
 8102d26:	b2da      	uxtb	r2, r3
 8102d28:	68fb      	ldr	r3, [r7, #12]
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8102d2e:	69fb      	ldr	r3, [r7, #28]
 8102d30:	9300      	str	r3, [sp, #0]
 8102d32:	69bb      	ldr	r3, [r7, #24]
 8102d34:	2200      	movs	r2, #0
 8102d36:	2140      	movs	r1, #64	; 0x40
 8102d38:	68f8      	ldr	r0, [r7, #12]
 8102d3a:	f000 f831 	bl	8102da0 <I2C_WaitOnFlagUntilTimeout>
 8102d3e:	4603      	mov	r3, r0
 8102d40:	2b00      	cmp	r3, #0
 8102d42:	d001      	beq.n	8102d48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8102d44:	2301      	movs	r3, #1
 8102d46:	e000      	b.n	8102d4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8102d48:	2300      	movs	r3, #0
}
 8102d4a:	4618      	mov	r0, r3
 8102d4c:	3710      	adds	r7, #16
 8102d4e:	46bd      	mov	sp, r7
 8102d50:	bd80      	pop	{r7, pc}
 8102d52:	bf00      	nop
 8102d54:	80002000 	.word	0x80002000

08102d58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102d58:	b480      	push	{r7}
 8102d5a:	b083      	sub	sp, #12
 8102d5c:	af00      	add	r7, sp, #0
 8102d5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	699b      	ldr	r3, [r3, #24]
 8102d66:	f003 0302 	and.w	r3, r3, #2
 8102d6a:	2b02      	cmp	r3, #2
 8102d6c:	d103      	bne.n	8102d76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	681b      	ldr	r3, [r3, #0]
 8102d72:	2200      	movs	r2, #0
 8102d74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	681b      	ldr	r3, [r3, #0]
 8102d7a:	699b      	ldr	r3, [r3, #24]
 8102d7c:	f003 0301 	and.w	r3, r3, #1
 8102d80:	2b01      	cmp	r3, #1
 8102d82:	d007      	beq.n	8102d94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	681b      	ldr	r3, [r3, #0]
 8102d88:	699a      	ldr	r2, [r3, #24]
 8102d8a:	687b      	ldr	r3, [r7, #4]
 8102d8c:	681b      	ldr	r3, [r3, #0]
 8102d8e:	f042 0201 	orr.w	r2, r2, #1
 8102d92:	619a      	str	r2, [r3, #24]
  }
}
 8102d94:	bf00      	nop
 8102d96:	370c      	adds	r7, #12
 8102d98:	46bd      	mov	sp, r7
 8102d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d9e:	4770      	bx	lr

08102da0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102da0:	b580      	push	{r7, lr}
 8102da2:	b084      	sub	sp, #16
 8102da4:	af00      	add	r7, sp, #0
 8102da6:	60f8      	str	r0, [r7, #12]
 8102da8:	60b9      	str	r1, [r7, #8]
 8102daa:	603b      	str	r3, [r7, #0]
 8102dac:	4613      	mov	r3, r2
 8102dae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102db0:	e022      	b.n	8102df8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102db2:	683b      	ldr	r3, [r7, #0]
 8102db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102db8:	d01e      	beq.n	8102df8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102dba:	f7ff f82f 	bl	8101e1c <HAL_GetTick>
 8102dbe:	4602      	mov	r2, r0
 8102dc0:	69bb      	ldr	r3, [r7, #24]
 8102dc2:	1ad3      	subs	r3, r2, r3
 8102dc4:	683a      	ldr	r2, [r7, #0]
 8102dc6:	429a      	cmp	r2, r3
 8102dc8:	d302      	bcc.n	8102dd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8102dca:	683b      	ldr	r3, [r7, #0]
 8102dcc:	2b00      	cmp	r3, #0
 8102dce:	d113      	bne.n	8102df8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102dd0:	68fb      	ldr	r3, [r7, #12]
 8102dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102dd4:	f043 0220 	orr.w	r2, r3, #32
 8102dd8:	68fb      	ldr	r3, [r7, #12]
 8102dda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102ddc:	68fb      	ldr	r3, [r7, #12]
 8102dde:	2220      	movs	r2, #32
 8102de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102de4:	68fb      	ldr	r3, [r7, #12]
 8102de6:	2200      	movs	r2, #0
 8102de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102dec:	68fb      	ldr	r3, [r7, #12]
 8102dee:	2200      	movs	r2, #0
 8102df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102df4:	2301      	movs	r3, #1
 8102df6:	e00f      	b.n	8102e18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102df8:	68fb      	ldr	r3, [r7, #12]
 8102dfa:	681b      	ldr	r3, [r3, #0]
 8102dfc:	699a      	ldr	r2, [r3, #24]
 8102dfe:	68bb      	ldr	r3, [r7, #8]
 8102e00:	4013      	ands	r3, r2
 8102e02:	68ba      	ldr	r2, [r7, #8]
 8102e04:	429a      	cmp	r2, r3
 8102e06:	bf0c      	ite	eq
 8102e08:	2301      	moveq	r3, #1
 8102e0a:	2300      	movne	r3, #0
 8102e0c:	b2db      	uxtb	r3, r3
 8102e0e:	461a      	mov	r2, r3
 8102e10:	79fb      	ldrb	r3, [r7, #7]
 8102e12:	429a      	cmp	r2, r3
 8102e14:	d0cd      	beq.n	8102db2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8102e16:	2300      	movs	r3, #0
}
 8102e18:	4618      	mov	r0, r3
 8102e1a:	3710      	adds	r7, #16
 8102e1c:	46bd      	mov	sp, r7
 8102e1e:	bd80      	pop	{r7, pc}

08102e20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102e20:	b580      	push	{r7, lr}
 8102e22:	b084      	sub	sp, #16
 8102e24:	af00      	add	r7, sp, #0
 8102e26:	60f8      	str	r0, [r7, #12]
 8102e28:	60b9      	str	r1, [r7, #8]
 8102e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102e2c:	e02c      	b.n	8102e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102e2e:	687a      	ldr	r2, [r7, #4]
 8102e30:	68b9      	ldr	r1, [r7, #8]
 8102e32:	68f8      	ldr	r0, [r7, #12]
 8102e34:	f000 f870 	bl	8102f18 <I2C_IsErrorOccurred>
 8102e38:	4603      	mov	r3, r0
 8102e3a:	2b00      	cmp	r3, #0
 8102e3c:	d001      	beq.n	8102e42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102e3e:	2301      	movs	r3, #1
 8102e40:	e02a      	b.n	8102e98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102e42:	68bb      	ldr	r3, [r7, #8]
 8102e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102e48:	d01e      	beq.n	8102e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102e4a:	f7fe ffe7 	bl	8101e1c <HAL_GetTick>
 8102e4e:	4602      	mov	r2, r0
 8102e50:	687b      	ldr	r3, [r7, #4]
 8102e52:	1ad3      	subs	r3, r2, r3
 8102e54:	68ba      	ldr	r2, [r7, #8]
 8102e56:	429a      	cmp	r2, r3
 8102e58:	d302      	bcc.n	8102e60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102e5a:	68bb      	ldr	r3, [r7, #8]
 8102e5c:	2b00      	cmp	r3, #0
 8102e5e:	d113      	bne.n	8102e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102e60:	68fb      	ldr	r3, [r7, #12]
 8102e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102e64:	f043 0220 	orr.w	r2, r3, #32
 8102e68:	68fb      	ldr	r3, [r7, #12]
 8102e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102e6c:	68fb      	ldr	r3, [r7, #12]
 8102e6e:	2220      	movs	r2, #32
 8102e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102e74:	68fb      	ldr	r3, [r7, #12]
 8102e76:	2200      	movs	r2, #0
 8102e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102e7c:	68fb      	ldr	r3, [r7, #12]
 8102e7e:	2200      	movs	r2, #0
 8102e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102e84:	2301      	movs	r3, #1
 8102e86:	e007      	b.n	8102e98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102e88:	68fb      	ldr	r3, [r7, #12]
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	699b      	ldr	r3, [r3, #24]
 8102e8e:	f003 0302 	and.w	r3, r3, #2
 8102e92:	2b02      	cmp	r3, #2
 8102e94:	d1cb      	bne.n	8102e2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102e96:	2300      	movs	r3, #0
}
 8102e98:	4618      	mov	r0, r3
 8102e9a:	3710      	adds	r7, #16
 8102e9c:	46bd      	mov	sp, r7
 8102e9e:	bd80      	pop	{r7, pc}

08102ea0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102ea0:	b580      	push	{r7, lr}
 8102ea2:	b084      	sub	sp, #16
 8102ea4:	af00      	add	r7, sp, #0
 8102ea6:	60f8      	str	r0, [r7, #12]
 8102ea8:	60b9      	str	r1, [r7, #8]
 8102eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102eac:	e028      	b.n	8102f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102eae:	687a      	ldr	r2, [r7, #4]
 8102eb0:	68b9      	ldr	r1, [r7, #8]
 8102eb2:	68f8      	ldr	r0, [r7, #12]
 8102eb4:	f000 f830 	bl	8102f18 <I2C_IsErrorOccurred>
 8102eb8:	4603      	mov	r3, r0
 8102eba:	2b00      	cmp	r3, #0
 8102ebc:	d001      	beq.n	8102ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102ebe:	2301      	movs	r3, #1
 8102ec0:	e026      	b.n	8102f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102ec2:	f7fe ffab 	bl	8101e1c <HAL_GetTick>
 8102ec6:	4602      	mov	r2, r0
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	1ad3      	subs	r3, r2, r3
 8102ecc:	68ba      	ldr	r2, [r7, #8]
 8102ece:	429a      	cmp	r2, r3
 8102ed0:	d302      	bcc.n	8102ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102ed2:	68bb      	ldr	r3, [r7, #8]
 8102ed4:	2b00      	cmp	r3, #0
 8102ed6:	d113      	bne.n	8102f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102ed8:	68fb      	ldr	r3, [r7, #12]
 8102eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102edc:	f043 0220 	orr.w	r2, r3, #32
 8102ee0:	68fb      	ldr	r3, [r7, #12]
 8102ee2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102ee4:	68fb      	ldr	r3, [r7, #12]
 8102ee6:	2220      	movs	r2, #32
 8102ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102eec:	68fb      	ldr	r3, [r7, #12]
 8102eee:	2200      	movs	r2, #0
 8102ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102ef4:	68fb      	ldr	r3, [r7, #12]
 8102ef6:	2200      	movs	r2, #0
 8102ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102efc:	2301      	movs	r3, #1
 8102efe:	e007      	b.n	8102f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102f00:	68fb      	ldr	r3, [r7, #12]
 8102f02:	681b      	ldr	r3, [r3, #0]
 8102f04:	699b      	ldr	r3, [r3, #24]
 8102f06:	f003 0320 	and.w	r3, r3, #32
 8102f0a:	2b20      	cmp	r3, #32
 8102f0c:	d1cf      	bne.n	8102eae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8102f0e:	2300      	movs	r3, #0
}
 8102f10:	4618      	mov	r0, r3
 8102f12:	3710      	adds	r7, #16
 8102f14:	46bd      	mov	sp, r7
 8102f16:	bd80      	pop	{r7, pc}

08102f18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102f18:	b580      	push	{r7, lr}
 8102f1a:	b08a      	sub	sp, #40	; 0x28
 8102f1c:	af00      	add	r7, sp, #0
 8102f1e:	60f8      	str	r0, [r7, #12]
 8102f20:	60b9      	str	r1, [r7, #8]
 8102f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102f24:	2300      	movs	r3, #0
 8102f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8102f2a:	68fb      	ldr	r3, [r7, #12]
 8102f2c:	681b      	ldr	r3, [r3, #0]
 8102f2e:	699b      	ldr	r3, [r3, #24]
 8102f30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8102f32:	2300      	movs	r3, #0
 8102f34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8102f36:	687b      	ldr	r3, [r7, #4]
 8102f38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8102f3a:	69bb      	ldr	r3, [r7, #24]
 8102f3c:	f003 0310 	and.w	r3, r3, #16
 8102f40:	2b00      	cmp	r3, #0
 8102f42:	d075      	beq.n	8103030 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102f44:	68fb      	ldr	r3, [r7, #12]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	2210      	movs	r2, #16
 8102f4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102f4c:	e056      	b.n	8102ffc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102f4e:	68bb      	ldr	r3, [r7, #8]
 8102f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102f54:	d052      	beq.n	8102ffc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8102f56:	f7fe ff61 	bl	8101e1c <HAL_GetTick>
 8102f5a:	4602      	mov	r2, r0
 8102f5c:	69fb      	ldr	r3, [r7, #28]
 8102f5e:	1ad3      	subs	r3, r2, r3
 8102f60:	68ba      	ldr	r2, [r7, #8]
 8102f62:	429a      	cmp	r2, r3
 8102f64:	d302      	bcc.n	8102f6c <I2C_IsErrorOccurred+0x54>
 8102f66:	68bb      	ldr	r3, [r7, #8]
 8102f68:	2b00      	cmp	r3, #0
 8102f6a:	d147      	bne.n	8102ffc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8102f6c:	68fb      	ldr	r3, [r7, #12]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	685b      	ldr	r3, [r3, #4]
 8102f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102f76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8102f78:	68fb      	ldr	r3, [r7, #12]
 8102f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8102f7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8102f80:	68fb      	ldr	r3, [r7, #12]
 8102f82:	681b      	ldr	r3, [r3, #0]
 8102f84:	699b      	ldr	r3, [r3, #24]
 8102f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102f8e:	d12e      	bne.n	8102fee <I2C_IsErrorOccurred+0xd6>
 8102f90:	697b      	ldr	r3, [r7, #20]
 8102f92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102f96:	d02a      	beq.n	8102fee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8102f98:	7cfb      	ldrb	r3, [r7, #19]
 8102f9a:	2b20      	cmp	r3, #32
 8102f9c:	d027      	beq.n	8102fee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102f9e:	68fb      	ldr	r3, [r7, #12]
 8102fa0:	681b      	ldr	r3, [r3, #0]
 8102fa2:	685a      	ldr	r2, [r3, #4]
 8102fa4:	68fb      	ldr	r3, [r7, #12]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102fac:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8102fae:	f7fe ff35 	bl	8101e1c <HAL_GetTick>
 8102fb2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102fb4:	e01b      	b.n	8102fee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8102fb6:	f7fe ff31 	bl	8101e1c <HAL_GetTick>
 8102fba:	4602      	mov	r2, r0
 8102fbc:	69fb      	ldr	r3, [r7, #28]
 8102fbe:	1ad3      	subs	r3, r2, r3
 8102fc0:	2b19      	cmp	r3, #25
 8102fc2:	d914      	bls.n	8102fee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102fc4:	68fb      	ldr	r3, [r7, #12]
 8102fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102fc8:	f043 0220 	orr.w	r2, r3, #32
 8102fcc:	68fb      	ldr	r3, [r7, #12]
 8102fce:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8102fd0:	68fb      	ldr	r3, [r7, #12]
 8102fd2:	2220      	movs	r2, #32
 8102fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8102fd8:	68fb      	ldr	r3, [r7, #12]
 8102fda:	2200      	movs	r2, #0
 8102fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8102fe0:	68fb      	ldr	r3, [r7, #12]
 8102fe2:	2200      	movs	r2, #0
 8102fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8102fe8:	2301      	movs	r3, #1
 8102fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102fee:	68fb      	ldr	r3, [r7, #12]
 8102ff0:	681b      	ldr	r3, [r3, #0]
 8102ff2:	699b      	ldr	r3, [r3, #24]
 8102ff4:	f003 0320 	and.w	r3, r3, #32
 8102ff8:	2b20      	cmp	r3, #32
 8102ffa:	d1dc      	bne.n	8102fb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102ffc:	68fb      	ldr	r3, [r7, #12]
 8102ffe:	681b      	ldr	r3, [r3, #0]
 8103000:	699b      	ldr	r3, [r3, #24]
 8103002:	f003 0320 	and.w	r3, r3, #32
 8103006:	2b20      	cmp	r3, #32
 8103008:	d003      	beq.n	8103012 <I2C_IsErrorOccurred+0xfa>
 810300a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810300e:	2b00      	cmp	r3, #0
 8103010:	d09d      	beq.n	8102f4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8103012:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103016:	2b00      	cmp	r3, #0
 8103018:	d103      	bne.n	8103022 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810301a:	68fb      	ldr	r3, [r7, #12]
 810301c:	681b      	ldr	r3, [r3, #0]
 810301e:	2220      	movs	r2, #32
 8103020:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8103022:	6a3b      	ldr	r3, [r7, #32]
 8103024:	f043 0304 	orr.w	r3, r3, #4
 8103028:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 810302a:	2301      	movs	r3, #1
 810302c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8103030:	68fb      	ldr	r3, [r7, #12]
 8103032:	681b      	ldr	r3, [r3, #0]
 8103034:	699b      	ldr	r3, [r3, #24]
 8103036:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8103038:	69bb      	ldr	r3, [r7, #24]
 810303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810303e:	2b00      	cmp	r3, #0
 8103040:	d00b      	beq.n	810305a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8103042:	6a3b      	ldr	r3, [r7, #32]
 8103044:	f043 0301 	orr.w	r3, r3, #1
 8103048:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 810304a:	68fb      	ldr	r3, [r7, #12]
 810304c:	681b      	ldr	r3, [r3, #0]
 810304e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8103052:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103054:	2301      	movs	r3, #1
 8103056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 810305a:	69bb      	ldr	r3, [r7, #24]
 810305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103060:	2b00      	cmp	r3, #0
 8103062:	d00b      	beq.n	810307c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8103064:	6a3b      	ldr	r3, [r7, #32]
 8103066:	f043 0308 	orr.w	r3, r3, #8
 810306a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810306c:	68fb      	ldr	r3, [r7, #12]
 810306e:	681b      	ldr	r3, [r3, #0]
 8103070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8103074:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103076:	2301      	movs	r3, #1
 8103078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810307c:	69bb      	ldr	r3, [r7, #24]
 810307e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103082:	2b00      	cmp	r3, #0
 8103084:	d00b      	beq.n	810309e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8103086:	6a3b      	ldr	r3, [r7, #32]
 8103088:	f043 0302 	orr.w	r3, r3, #2
 810308c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810308e:	68fb      	ldr	r3, [r7, #12]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103096:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103098:	2301      	movs	r3, #1
 810309a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 810309e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81030a2:	2b00      	cmp	r3, #0
 81030a4:	d01c      	beq.n	81030e0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 81030a6:	68f8      	ldr	r0, [r7, #12]
 81030a8:	f7ff fe56 	bl	8102d58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81030ac:	68fb      	ldr	r3, [r7, #12]
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	6859      	ldr	r1, [r3, #4]
 81030b2:	68fb      	ldr	r3, [r7, #12]
 81030b4:	681a      	ldr	r2, [r3, #0]
 81030b6:	4b0d      	ldr	r3, [pc, #52]	; (81030ec <I2C_IsErrorOccurred+0x1d4>)
 81030b8:	400b      	ands	r3, r1
 81030ba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 81030bc:	68fb      	ldr	r3, [r7, #12]
 81030be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81030c0:	6a3b      	ldr	r3, [r7, #32]
 81030c2:	431a      	orrs	r2, r3
 81030c4:	68fb      	ldr	r3, [r7, #12]
 81030c6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81030c8:	68fb      	ldr	r3, [r7, #12]
 81030ca:	2220      	movs	r2, #32
 81030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81030d0:	68fb      	ldr	r3, [r7, #12]
 81030d2:	2200      	movs	r2, #0
 81030d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81030d8:	68fb      	ldr	r3, [r7, #12]
 81030da:	2200      	movs	r2, #0
 81030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 81030e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81030e4:	4618      	mov	r0, r3
 81030e6:	3728      	adds	r7, #40	; 0x28
 81030e8:	46bd      	mov	sp, r7
 81030ea:	bd80      	pop	{r7, pc}
 81030ec:	fe00e800 	.word	0xfe00e800

081030f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81030f0:	b480      	push	{r7}
 81030f2:	b087      	sub	sp, #28
 81030f4:	af00      	add	r7, sp, #0
 81030f6:	60f8      	str	r0, [r7, #12]
 81030f8:	607b      	str	r3, [r7, #4]
 81030fa:	460b      	mov	r3, r1
 81030fc:	817b      	strh	r3, [r7, #10]
 81030fe:	4613      	mov	r3, r2
 8103100:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103102:	897b      	ldrh	r3, [r7, #10]
 8103104:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103108:	7a7b      	ldrb	r3, [r7, #9]
 810310a:	041b      	lsls	r3, r3, #16
 810310c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103110:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103116:	6a3b      	ldr	r3, [r7, #32]
 8103118:	4313      	orrs	r3, r2
 810311a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810311e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8103120:	68fb      	ldr	r3, [r7, #12]
 8103122:	681b      	ldr	r3, [r3, #0]
 8103124:	685a      	ldr	r2, [r3, #4]
 8103126:	6a3b      	ldr	r3, [r7, #32]
 8103128:	0d5b      	lsrs	r3, r3, #21
 810312a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 810312e:	4b08      	ldr	r3, [pc, #32]	; (8103150 <I2C_TransferConfig+0x60>)
 8103130:	430b      	orrs	r3, r1
 8103132:	43db      	mvns	r3, r3
 8103134:	ea02 0103 	and.w	r1, r2, r3
 8103138:	68fb      	ldr	r3, [r7, #12]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	697a      	ldr	r2, [r7, #20]
 810313e:	430a      	orrs	r2, r1
 8103140:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8103142:	bf00      	nop
 8103144:	371c      	adds	r7, #28
 8103146:	46bd      	mov	sp, r7
 8103148:	f85d 7b04 	ldr.w	r7, [sp], #4
 810314c:	4770      	bx	lr
 810314e:	bf00      	nop
 8103150:	03ff63ff 	.word	0x03ff63ff

08103154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8103154:	b480      	push	{r7}
 8103156:	b083      	sub	sp, #12
 8103158:	af00      	add	r7, sp, #0
 810315a:	6078      	str	r0, [r7, #4]
 810315c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810315e:	687b      	ldr	r3, [r7, #4]
 8103160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103164:	b2db      	uxtb	r3, r3
 8103166:	2b20      	cmp	r3, #32
 8103168:	d138      	bne.n	81031dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103170:	2b01      	cmp	r3, #1
 8103172:	d101      	bne.n	8103178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8103174:	2302      	movs	r3, #2
 8103176:	e032      	b.n	81031de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8103178:	687b      	ldr	r3, [r7, #4]
 810317a:	2201      	movs	r2, #1
 810317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	2224      	movs	r2, #36	; 0x24
 8103184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	681b      	ldr	r3, [r3, #0]
 810318c:	681a      	ldr	r2, [r3, #0]
 810318e:	687b      	ldr	r3, [r7, #4]
 8103190:	681b      	ldr	r3, [r3, #0]
 8103192:	f022 0201 	bic.w	r2, r2, #1
 8103196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8103198:	687b      	ldr	r3, [r7, #4]
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	681a      	ldr	r2, [r3, #0]
 810319e:	687b      	ldr	r3, [r7, #4]
 81031a0:	681b      	ldr	r3, [r3, #0]
 81031a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81031a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	681b      	ldr	r3, [r3, #0]
 81031ac:	6819      	ldr	r1, [r3, #0]
 81031ae:	687b      	ldr	r3, [r7, #4]
 81031b0:	681b      	ldr	r3, [r3, #0]
 81031b2:	683a      	ldr	r2, [r7, #0]
 81031b4:	430a      	orrs	r2, r1
 81031b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81031b8:	687b      	ldr	r3, [r7, #4]
 81031ba:	681b      	ldr	r3, [r3, #0]
 81031bc:	681a      	ldr	r2, [r3, #0]
 81031be:	687b      	ldr	r3, [r7, #4]
 81031c0:	681b      	ldr	r3, [r3, #0]
 81031c2:	f042 0201 	orr.w	r2, r2, #1
 81031c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81031c8:	687b      	ldr	r3, [r7, #4]
 81031ca:	2220      	movs	r2, #32
 81031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81031d0:	687b      	ldr	r3, [r7, #4]
 81031d2:	2200      	movs	r2, #0
 81031d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81031d8:	2300      	movs	r3, #0
 81031da:	e000      	b.n	81031de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81031dc:	2302      	movs	r3, #2
  }
}
 81031de:	4618      	mov	r0, r3
 81031e0:	370c      	adds	r7, #12
 81031e2:	46bd      	mov	sp, r7
 81031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031e8:	4770      	bx	lr

081031ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81031ea:	b480      	push	{r7}
 81031ec:	b085      	sub	sp, #20
 81031ee:	af00      	add	r7, sp, #0
 81031f0:	6078      	str	r0, [r7, #4]
 81031f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81031fa:	b2db      	uxtb	r3, r3
 81031fc:	2b20      	cmp	r3, #32
 81031fe:	d139      	bne.n	8103274 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103206:	2b01      	cmp	r3, #1
 8103208:	d101      	bne.n	810320e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810320a:	2302      	movs	r3, #2
 810320c:	e033      	b.n	8103276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810320e:	687b      	ldr	r3, [r7, #4]
 8103210:	2201      	movs	r2, #1
 8103212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103216:	687b      	ldr	r3, [r7, #4]
 8103218:	2224      	movs	r2, #36	; 0x24
 810321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	681b      	ldr	r3, [r3, #0]
 8103222:	681a      	ldr	r2, [r3, #0]
 8103224:	687b      	ldr	r3, [r7, #4]
 8103226:	681b      	ldr	r3, [r3, #0]
 8103228:	f022 0201 	bic.w	r2, r2, #1
 810322c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	681b      	ldr	r3, [r3, #0]
 8103232:	681b      	ldr	r3, [r3, #0]
 8103234:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8103236:	68fb      	ldr	r3, [r7, #12]
 8103238:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810323c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810323e:	683b      	ldr	r3, [r7, #0]
 8103240:	021b      	lsls	r3, r3, #8
 8103242:	68fa      	ldr	r2, [r7, #12]
 8103244:	4313      	orrs	r3, r2
 8103246:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8103248:	687b      	ldr	r3, [r7, #4]
 810324a:	681b      	ldr	r3, [r3, #0]
 810324c:	68fa      	ldr	r2, [r7, #12]
 810324e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	681a      	ldr	r2, [r3, #0]
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	681b      	ldr	r3, [r3, #0]
 810325a:	f042 0201 	orr.w	r2, r2, #1
 810325e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	2220      	movs	r2, #32
 8103264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	2200      	movs	r2, #0
 810326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103270:	2300      	movs	r3, #0
 8103272:	e000      	b.n	8103276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8103274:	2302      	movs	r3, #2
  }
}
 8103276:	4618      	mov	r0, r3
 8103278:	3714      	adds	r7, #20
 810327a:	46bd      	mov	sp, r7
 810327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103280:	4770      	bx	lr
	...

08103284 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103284:	b580      	push	{r7, lr}
 8103286:	b084      	sub	sp, #16
 8103288:	af00      	add	r7, sp, #0
 810328a:	60f8      	str	r0, [r7, #12]
 810328c:	460b      	mov	r3, r1
 810328e:	607a      	str	r2, [r7, #4]
 8103290:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103292:	4b37      	ldr	r3, [pc, #220]	; (8103370 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103294:	681b      	ldr	r3, [r3, #0]
 8103296:	f023 0201 	bic.w	r2, r3, #1
 810329a:	4935      	ldr	r1, [pc, #212]	; (8103370 <HAL_PWREx_EnterSTOPMode+0xec>)
 810329c:	68fb      	ldr	r3, [r7, #12]
 810329e:	4313      	orrs	r3, r2
 81032a0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	2b00      	cmp	r3, #0
 81032a6:	d123      	bne.n	81032f0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81032a8:	f7fe fef8 	bl	810209c <HAL_GetCurrentCPUID>
 81032ac:	4603      	mov	r3, r0
 81032ae:	2b03      	cmp	r3, #3
 81032b0:	d158      	bne.n	8103364 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81032b2:	4b2f      	ldr	r3, [pc, #188]	; (8103370 <HAL_PWREx_EnterSTOPMode+0xec>)
 81032b4:	691b      	ldr	r3, [r3, #16]
 81032b6:	4a2e      	ldr	r2, [pc, #184]	; (8103370 <HAL_PWREx_EnterSTOPMode+0xec>)
 81032b8:	f023 0301 	bic.w	r3, r3, #1
 81032bc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81032be:	4b2d      	ldr	r3, [pc, #180]	; (8103374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032c0:	691b      	ldr	r3, [r3, #16]
 81032c2:	4a2c      	ldr	r2, [pc, #176]	; (8103374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032c4:	f043 0304 	orr.w	r3, r3, #4
 81032c8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81032ca:	f3bf 8f4f 	dsb	sy
}
 81032ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81032d0:	f3bf 8f6f 	isb	sy
}
 81032d4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81032d6:	7afb      	ldrb	r3, [r7, #11]
 81032d8:	2b01      	cmp	r3, #1
 81032da:	d101      	bne.n	81032e0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81032dc:	bf30      	wfi
 81032de:	e000      	b.n	81032e2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81032e0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81032e2:	4b24      	ldr	r3, [pc, #144]	; (8103374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032e4:	691b      	ldr	r3, [r3, #16]
 81032e6:	4a23      	ldr	r2, [pc, #140]	; (8103374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032e8:	f023 0304 	bic.w	r3, r3, #4
 81032ec:	6113      	str	r3, [r2, #16]
 81032ee:	e03c      	b.n	810336a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	2b01      	cmp	r3, #1
 81032f4:	d123      	bne.n	810333e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81032f6:	f7fe fed1 	bl	810209c <HAL_GetCurrentCPUID>
 81032fa:	4603      	mov	r3, r0
 81032fc:	2b01      	cmp	r3, #1
 81032fe:	d133      	bne.n	8103368 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103300:	4b1b      	ldr	r3, [pc, #108]	; (8103370 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103302:	695b      	ldr	r3, [r3, #20]
 8103304:	4a1a      	ldr	r2, [pc, #104]	; (8103370 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103306:	f023 0302 	bic.w	r3, r3, #2
 810330a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810330c:	4b19      	ldr	r3, [pc, #100]	; (8103374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810330e:	691b      	ldr	r3, [r3, #16]
 8103310:	4a18      	ldr	r2, [pc, #96]	; (8103374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103312:	f043 0304 	orr.w	r3, r3, #4
 8103316:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103318:	f3bf 8f4f 	dsb	sy
}
 810331c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810331e:	f3bf 8f6f 	isb	sy
}
 8103322:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103324:	7afb      	ldrb	r3, [r7, #11]
 8103326:	2b01      	cmp	r3, #1
 8103328:	d101      	bne.n	810332e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810332a:	bf30      	wfi
 810332c:	e000      	b.n	8103330 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810332e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103330:	4b10      	ldr	r3, [pc, #64]	; (8103374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103332:	691b      	ldr	r3, [r3, #16]
 8103334:	4a0f      	ldr	r2, [pc, #60]	; (8103374 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103336:	f023 0304 	bic.w	r3, r3, #4
 810333a:	6113      	str	r3, [r2, #16]
 810333c:	e015      	b.n	810336a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810333e:	f7fe fead 	bl	810209c <HAL_GetCurrentCPUID>
 8103342:	4603      	mov	r3, r0
 8103344:	2b03      	cmp	r3, #3
 8103346:	d106      	bne.n	8103356 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103348:	4b09      	ldr	r3, [pc, #36]	; (8103370 <HAL_PWREx_EnterSTOPMode+0xec>)
 810334a:	691b      	ldr	r3, [r3, #16]
 810334c:	4a08      	ldr	r2, [pc, #32]	; (8103370 <HAL_PWREx_EnterSTOPMode+0xec>)
 810334e:	f023 0304 	bic.w	r3, r3, #4
 8103352:	6113      	str	r3, [r2, #16]
 8103354:	e009      	b.n	810336a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103356:	4b06      	ldr	r3, [pc, #24]	; (8103370 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103358:	695b      	ldr	r3, [r3, #20]
 810335a:	4a05      	ldr	r2, [pc, #20]	; (8103370 <HAL_PWREx_EnterSTOPMode+0xec>)
 810335c:	f023 0304 	bic.w	r3, r3, #4
 8103360:	6153      	str	r3, [r2, #20]
 8103362:	e002      	b.n	810336a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103364:	bf00      	nop
 8103366:	e000      	b.n	810336a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103368:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810336a:	3710      	adds	r7, #16
 810336c:	46bd      	mov	sp, r7
 810336e:	bd80      	pop	{r7, pc}
 8103370:	58024800 	.word	0x58024800
 8103374:	e000ed00 	.word	0xe000ed00

08103378 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103378:	b580      	push	{r7, lr}
 810337a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810337c:	f7fe fe8e 	bl	810209c <HAL_GetCurrentCPUID>
 8103380:	4603      	mov	r3, r0
 8103382:	2b03      	cmp	r3, #3
 8103384:	d101      	bne.n	810338a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103386:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103388:	e001      	b.n	810338e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810338a:	bf40      	sev
    __WFE ();
 810338c:	bf20      	wfe
}
 810338e:	bf00      	nop
 8103390:	bd80      	pop	{r7, pc}
	...

08103394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103394:	b480      	push	{r7}
 8103396:	b089      	sub	sp, #36	; 0x24
 8103398:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810339a:	4bb3      	ldr	r3, [pc, #716]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810339c:	691b      	ldr	r3, [r3, #16]
 810339e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81033a2:	2b18      	cmp	r3, #24
 81033a4:	f200 8155 	bhi.w	8103652 <HAL_RCC_GetSysClockFreq+0x2be>
 81033a8:	a201      	add	r2, pc, #4	; (adr r2, 81033b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81033aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033ae:	bf00      	nop
 81033b0:	08103415 	.word	0x08103415
 81033b4:	08103653 	.word	0x08103653
 81033b8:	08103653 	.word	0x08103653
 81033bc:	08103653 	.word	0x08103653
 81033c0:	08103653 	.word	0x08103653
 81033c4:	08103653 	.word	0x08103653
 81033c8:	08103653 	.word	0x08103653
 81033cc:	08103653 	.word	0x08103653
 81033d0:	0810343b 	.word	0x0810343b
 81033d4:	08103653 	.word	0x08103653
 81033d8:	08103653 	.word	0x08103653
 81033dc:	08103653 	.word	0x08103653
 81033e0:	08103653 	.word	0x08103653
 81033e4:	08103653 	.word	0x08103653
 81033e8:	08103653 	.word	0x08103653
 81033ec:	08103653 	.word	0x08103653
 81033f0:	08103441 	.word	0x08103441
 81033f4:	08103653 	.word	0x08103653
 81033f8:	08103653 	.word	0x08103653
 81033fc:	08103653 	.word	0x08103653
 8103400:	08103653 	.word	0x08103653
 8103404:	08103653 	.word	0x08103653
 8103408:	08103653 	.word	0x08103653
 810340c:	08103653 	.word	0x08103653
 8103410:	08103447 	.word	0x08103447
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103414:	4b94      	ldr	r3, [pc, #592]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	f003 0320 	and.w	r3, r3, #32
 810341c:	2b00      	cmp	r3, #0
 810341e:	d009      	beq.n	8103434 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103420:	4b91      	ldr	r3, [pc, #580]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103422:	681b      	ldr	r3, [r3, #0]
 8103424:	08db      	lsrs	r3, r3, #3
 8103426:	f003 0303 	and.w	r3, r3, #3
 810342a:	4a90      	ldr	r2, [pc, #576]	; (810366c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810342c:	fa22 f303 	lsr.w	r3, r2, r3
 8103430:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103432:	e111      	b.n	8103658 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103434:	4b8d      	ldr	r3, [pc, #564]	; (810366c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103436:	61bb      	str	r3, [r7, #24]
    break;
 8103438:	e10e      	b.n	8103658 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810343a:	4b8d      	ldr	r3, [pc, #564]	; (8103670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810343c:	61bb      	str	r3, [r7, #24]
    break;
 810343e:	e10b      	b.n	8103658 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103440:	4b8c      	ldr	r3, [pc, #560]	; (8103674 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103442:	61bb      	str	r3, [r7, #24]
    break;
 8103444:	e108      	b.n	8103658 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103446:	4b88      	ldr	r3, [pc, #544]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810344a:	f003 0303 	and.w	r3, r3, #3
 810344e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103450:	4b85      	ldr	r3, [pc, #532]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103454:	091b      	lsrs	r3, r3, #4
 8103456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810345a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810345c:	4b82      	ldr	r3, [pc, #520]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103460:	f003 0301 	and.w	r3, r3, #1
 8103464:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103466:	4b80      	ldr	r3, [pc, #512]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810346a:	08db      	lsrs	r3, r3, #3
 810346c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103470:	68fa      	ldr	r2, [r7, #12]
 8103472:	fb02 f303 	mul.w	r3, r2, r3
 8103476:	ee07 3a90 	vmov	s15, r3
 810347a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810347e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103482:	693b      	ldr	r3, [r7, #16]
 8103484:	2b00      	cmp	r3, #0
 8103486:	f000 80e1 	beq.w	810364c <HAL_RCC_GetSysClockFreq+0x2b8>
 810348a:	697b      	ldr	r3, [r7, #20]
 810348c:	2b02      	cmp	r3, #2
 810348e:	f000 8083 	beq.w	8103598 <HAL_RCC_GetSysClockFreq+0x204>
 8103492:	697b      	ldr	r3, [r7, #20]
 8103494:	2b02      	cmp	r3, #2
 8103496:	f200 80a1 	bhi.w	81035dc <HAL_RCC_GetSysClockFreq+0x248>
 810349a:	697b      	ldr	r3, [r7, #20]
 810349c:	2b00      	cmp	r3, #0
 810349e:	d003      	beq.n	81034a8 <HAL_RCC_GetSysClockFreq+0x114>
 81034a0:	697b      	ldr	r3, [r7, #20]
 81034a2:	2b01      	cmp	r3, #1
 81034a4:	d056      	beq.n	8103554 <HAL_RCC_GetSysClockFreq+0x1c0>
 81034a6:	e099      	b.n	81035dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81034a8:	4b6f      	ldr	r3, [pc, #444]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034aa:	681b      	ldr	r3, [r3, #0]
 81034ac:	f003 0320 	and.w	r3, r3, #32
 81034b0:	2b00      	cmp	r3, #0
 81034b2:	d02d      	beq.n	8103510 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81034b4:	4b6c      	ldr	r3, [pc, #432]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034b6:	681b      	ldr	r3, [r3, #0]
 81034b8:	08db      	lsrs	r3, r3, #3
 81034ba:	f003 0303 	and.w	r3, r3, #3
 81034be:	4a6b      	ldr	r2, [pc, #428]	; (810366c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81034c0:	fa22 f303 	lsr.w	r3, r2, r3
 81034c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81034c6:	687b      	ldr	r3, [r7, #4]
 81034c8:	ee07 3a90 	vmov	s15, r3
 81034cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034d0:	693b      	ldr	r3, [r7, #16]
 81034d2:	ee07 3a90 	vmov	s15, r3
 81034d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034de:	4b62      	ldr	r3, [pc, #392]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81034e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034e6:	ee07 3a90 	vmov	s15, r3
 81034ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81034f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103678 <HAL_RCC_GetSysClockFreq+0x2e4>
 81034f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81034fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81034fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103506:	ee67 7a27 	vmul.f32	s15, s14, s15
 810350a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810350e:	e087      	b.n	8103620 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103510:	693b      	ldr	r3, [r7, #16]
 8103512:	ee07 3a90 	vmov	s15, r3
 8103516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810351a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810367c <HAL_RCC_GetSysClockFreq+0x2e8>
 810351e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103522:	4b51      	ldr	r3, [pc, #324]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810352a:	ee07 3a90 	vmov	s15, r3
 810352e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103532:	ed97 6a02 	vldr	s12, [r7, #8]
 8103536:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103678 <HAL_RCC_GetSysClockFreq+0x2e4>
 810353a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810353e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810354a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810354e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103552:	e065      	b.n	8103620 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103554:	693b      	ldr	r3, [r7, #16]
 8103556:	ee07 3a90 	vmov	s15, r3
 810355a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810355e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103680 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103566:	4b40      	ldr	r3, [pc, #256]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810356a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810356e:	ee07 3a90 	vmov	s15, r3
 8103572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103576:	ed97 6a02 	vldr	s12, [r7, #8]
 810357a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103678 <HAL_RCC_GetSysClockFreq+0x2e4>
 810357e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810358a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810358e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103596:	e043      	b.n	8103620 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103598:	693b      	ldr	r3, [r7, #16]
 810359a:	ee07 3a90 	vmov	s15, r3
 810359e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103684 <HAL_RCC_GetSysClockFreq+0x2f0>
 81035a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035aa:	4b2f      	ldr	r3, [pc, #188]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81035ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035b2:	ee07 3a90 	vmov	s15, r3
 81035b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81035be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103678 <HAL_RCC_GetSysClockFreq+0x2e4>
 81035c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81035ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81035da:	e021      	b.n	8103620 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81035dc:	693b      	ldr	r3, [r7, #16]
 81035de:	ee07 3a90 	vmov	s15, r3
 81035e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103680 <HAL_RCC_GetSysClockFreq+0x2ec>
 81035ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035ee:	4b1e      	ldr	r3, [pc, #120]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81035f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035f6:	ee07 3a90 	vmov	s15, r3
 81035fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8103602:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103678 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810360a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810360e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103616:	ee67 7a27 	vmul.f32	s15, s14, s15
 810361a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810361e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103620:	4b11      	ldr	r3, [pc, #68]	; (8103668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103624:	0a5b      	lsrs	r3, r3, #9
 8103626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810362a:	3301      	adds	r3, #1
 810362c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810362e:	683b      	ldr	r3, [r7, #0]
 8103630:	ee07 3a90 	vmov	s15, r3
 8103634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103638:	edd7 6a07 	vldr	s13, [r7, #28]
 810363c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103644:	ee17 3a90 	vmov	r3, s15
 8103648:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810364a:	e005      	b.n	8103658 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810364c:	2300      	movs	r3, #0
 810364e:	61bb      	str	r3, [r7, #24]
    break;
 8103650:	e002      	b.n	8103658 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103652:	4b07      	ldr	r3, [pc, #28]	; (8103670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103654:	61bb      	str	r3, [r7, #24]
    break;
 8103656:	bf00      	nop
  }

  return sysclockfreq;
 8103658:	69bb      	ldr	r3, [r7, #24]
}
 810365a:	4618      	mov	r0, r3
 810365c:	3724      	adds	r7, #36	; 0x24
 810365e:	46bd      	mov	sp, r7
 8103660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103664:	4770      	bx	lr
 8103666:	bf00      	nop
 8103668:	58024400 	.word	0x58024400
 810366c:	03d09000 	.word	0x03d09000
 8103670:	003d0900 	.word	0x003d0900
 8103674:	007a1200 	.word	0x007a1200
 8103678:	46000000 	.word	0x46000000
 810367c:	4c742400 	.word	0x4c742400
 8103680:	4a742400 	.word	0x4a742400
 8103684:	4af42400 	.word	0x4af42400

08103688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103688:	b580      	push	{r7, lr}
 810368a:	b082      	sub	sp, #8
 810368c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810368e:	f7ff fe81 	bl	8103394 <HAL_RCC_GetSysClockFreq>
 8103692:	4602      	mov	r2, r0
 8103694:	4b11      	ldr	r3, [pc, #68]	; (81036dc <HAL_RCC_GetHCLKFreq+0x54>)
 8103696:	699b      	ldr	r3, [r3, #24]
 8103698:	0a1b      	lsrs	r3, r3, #8
 810369a:	f003 030f 	and.w	r3, r3, #15
 810369e:	4910      	ldr	r1, [pc, #64]	; (81036e0 <HAL_RCC_GetHCLKFreq+0x58>)
 81036a0:	5ccb      	ldrb	r3, [r1, r3]
 81036a2:	f003 031f 	and.w	r3, r3, #31
 81036a6:	fa22 f303 	lsr.w	r3, r2, r3
 81036aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81036ac:	4b0b      	ldr	r3, [pc, #44]	; (81036dc <HAL_RCC_GetHCLKFreq+0x54>)
 81036ae:	699b      	ldr	r3, [r3, #24]
 81036b0:	f003 030f 	and.w	r3, r3, #15
 81036b4:	4a0a      	ldr	r2, [pc, #40]	; (81036e0 <HAL_RCC_GetHCLKFreq+0x58>)
 81036b6:	5cd3      	ldrb	r3, [r2, r3]
 81036b8:	f003 031f 	and.w	r3, r3, #31
 81036bc:	687a      	ldr	r2, [r7, #4]
 81036be:	fa22 f303 	lsr.w	r3, r2, r3
 81036c2:	4a08      	ldr	r2, [pc, #32]	; (81036e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81036c4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81036c6:	4b07      	ldr	r3, [pc, #28]	; (81036e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81036c8:	681b      	ldr	r3, [r3, #0]
 81036ca:	4a07      	ldr	r2, [pc, #28]	; (81036e8 <HAL_RCC_GetHCLKFreq+0x60>)
 81036cc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81036ce:	4b05      	ldr	r3, [pc, #20]	; (81036e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81036d0:	681b      	ldr	r3, [r3, #0]
}
 81036d2:	4618      	mov	r0, r3
 81036d4:	3708      	adds	r7, #8
 81036d6:	46bd      	mov	sp, r7
 81036d8:	bd80      	pop	{r7, pc}
 81036da:	bf00      	nop
 81036dc:	58024400 	.word	0x58024400
 81036e0:	0810ab48 	.word	0x0810ab48
 81036e4:	10000004 	.word	0x10000004
 81036e8:	10000000 	.word	0x10000000

081036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81036ec:	b580      	push	{r7, lr}
 81036ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81036f0:	f7ff ffca 	bl	8103688 <HAL_RCC_GetHCLKFreq>
 81036f4:	4602      	mov	r2, r0
 81036f6:	4b06      	ldr	r3, [pc, #24]	; (8103710 <HAL_RCC_GetPCLK1Freq+0x24>)
 81036f8:	69db      	ldr	r3, [r3, #28]
 81036fa:	091b      	lsrs	r3, r3, #4
 81036fc:	f003 0307 	and.w	r3, r3, #7
 8103700:	4904      	ldr	r1, [pc, #16]	; (8103714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103702:	5ccb      	ldrb	r3, [r1, r3]
 8103704:	f003 031f 	and.w	r3, r3, #31
 8103708:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810370c:	4618      	mov	r0, r3
 810370e:	bd80      	pop	{r7, pc}
 8103710:	58024400 	.word	0x58024400
 8103714:	0810ab48 	.word	0x0810ab48

08103718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103718:	b580      	push	{r7, lr}
 810371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810371c:	f7ff ffb4 	bl	8103688 <HAL_RCC_GetHCLKFreq>
 8103720:	4602      	mov	r2, r0
 8103722:	4b06      	ldr	r3, [pc, #24]	; (810373c <HAL_RCC_GetPCLK2Freq+0x24>)
 8103724:	69db      	ldr	r3, [r3, #28]
 8103726:	0a1b      	lsrs	r3, r3, #8
 8103728:	f003 0307 	and.w	r3, r3, #7
 810372c:	4904      	ldr	r1, [pc, #16]	; (8103740 <HAL_RCC_GetPCLK2Freq+0x28>)
 810372e:	5ccb      	ldrb	r3, [r1, r3]
 8103730:	f003 031f 	and.w	r3, r3, #31
 8103734:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8103738:	4618      	mov	r0, r3
 810373a:	bd80      	pop	{r7, pc}
 810373c:	58024400 	.word	0x58024400
 8103740:	0810ab48 	.word	0x0810ab48

08103744 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103744:	b580      	push	{r7, lr}
 8103746:	b086      	sub	sp, #24
 8103748:	af00      	add	r7, sp, #0
 810374a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810374c:	2300      	movs	r3, #0
 810374e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103750:	2300      	movs	r3, #0
 8103752:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103754:	687b      	ldr	r3, [r7, #4]
 8103756:	681b      	ldr	r3, [r3, #0]
 8103758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810375c:	2b00      	cmp	r3, #0
 810375e:	d03f      	beq.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8103760:	687b      	ldr	r3, [r7, #4]
 8103762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103764:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103768:	d02a      	beq.n	81037c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810376a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810376e:	d824      	bhi.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103774:	d018      	beq.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103776:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810377a:	d81e      	bhi.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 810377c:	2b00      	cmp	r3, #0
 810377e:	d003      	beq.n	8103788 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103780:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103784:	d007      	beq.n	8103796 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103786:	e018      	b.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103788:	4ba3      	ldr	r3, [pc, #652]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810378c:	4aa2      	ldr	r2, [pc, #648]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810378e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103794:	e015      	b.n	81037c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103796:	687b      	ldr	r3, [r7, #4]
 8103798:	3304      	adds	r3, #4
 810379a:	2102      	movs	r1, #2
 810379c:	4618      	mov	r0, r3
 810379e:	f001 f9d5 	bl	8104b4c <RCCEx_PLL2_Config>
 81037a2:	4603      	mov	r3, r0
 81037a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81037a6:	e00c      	b.n	81037c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81037a8:	687b      	ldr	r3, [r7, #4]
 81037aa:	3324      	adds	r3, #36	; 0x24
 81037ac:	2102      	movs	r1, #2
 81037ae:	4618      	mov	r0, r3
 81037b0:	f001 fa7e 	bl	8104cb0 <RCCEx_PLL3_Config>
 81037b4:	4603      	mov	r3, r0
 81037b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81037b8:	e003      	b.n	81037c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81037ba:	2301      	movs	r3, #1
 81037bc:	75fb      	strb	r3, [r7, #23]
      break;
 81037be:	e000      	b.n	81037c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81037c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81037c2:	7dfb      	ldrb	r3, [r7, #23]
 81037c4:	2b00      	cmp	r3, #0
 81037c6:	d109      	bne.n	81037dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81037c8:	4b93      	ldr	r3, [pc, #588]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81037ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81037cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81037d4:	4990      	ldr	r1, [pc, #576]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81037d6:	4313      	orrs	r3, r2
 81037d8:	650b      	str	r3, [r1, #80]	; 0x50
 81037da:	e001      	b.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037dc:	7dfb      	ldrb	r3, [r7, #23]
 81037de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81037e8:	2b00      	cmp	r3, #0
 81037ea:	d03d      	beq.n	8103868 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81037f0:	2b04      	cmp	r3, #4
 81037f2:	d826      	bhi.n	8103842 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81037f4:	a201      	add	r2, pc, #4	; (adr r2, 81037fc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81037fa:	bf00      	nop
 81037fc:	08103811 	.word	0x08103811
 8103800:	0810381f 	.word	0x0810381f
 8103804:	08103831 	.word	0x08103831
 8103808:	08103849 	.word	0x08103849
 810380c:	08103849 	.word	0x08103849
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103810:	4b81      	ldr	r3, [pc, #516]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103814:	4a80      	ldr	r2, [pc, #512]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810381a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810381c:	e015      	b.n	810384a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	3304      	adds	r3, #4
 8103822:	2100      	movs	r1, #0
 8103824:	4618      	mov	r0, r3
 8103826:	f001 f991 	bl	8104b4c <RCCEx_PLL2_Config>
 810382a:	4603      	mov	r3, r0
 810382c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810382e:	e00c      	b.n	810384a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	3324      	adds	r3, #36	; 0x24
 8103834:	2100      	movs	r1, #0
 8103836:	4618      	mov	r0, r3
 8103838:	f001 fa3a 	bl	8104cb0 <RCCEx_PLL3_Config>
 810383c:	4603      	mov	r3, r0
 810383e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103840:	e003      	b.n	810384a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103842:	2301      	movs	r3, #1
 8103844:	75fb      	strb	r3, [r7, #23]
      break;
 8103846:	e000      	b.n	810384a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103848:	bf00      	nop
    }

    if(ret == HAL_OK)
 810384a:	7dfb      	ldrb	r3, [r7, #23]
 810384c:	2b00      	cmp	r3, #0
 810384e:	d109      	bne.n	8103864 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103850:	4b71      	ldr	r3, [pc, #452]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103854:	f023 0207 	bic.w	r2, r3, #7
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810385c:	496e      	ldr	r1, [pc, #440]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810385e:	4313      	orrs	r3, r2
 8103860:	650b      	str	r3, [r1, #80]	; 0x50
 8103862:	e001      	b.n	8103868 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103864:	7dfb      	ldrb	r3, [r7, #23]
 8103866:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	681b      	ldr	r3, [r3, #0]
 810386c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103870:	2b00      	cmp	r3, #0
 8103872:	d042      	beq.n	81038fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810387c:	d02b      	beq.n	81038d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103882:	d825      	bhi.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103884:	2bc0      	cmp	r3, #192	; 0xc0
 8103886:	d028      	beq.n	81038da <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103888:	2bc0      	cmp	r3, #192	; 0xc0
 810388a:	d821      	bhi.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810388c:	2b80      	cmp	r3, #128	; 0x80
 810388e:	d016      	beq.n	81038be <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103890:	2b80      	cmp	r3, #128	; 0x80
 8103892:	d81d      	bhi.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103894:	2b00      	cmp	r3, #0
 8103896:	d002      	beq.n	810389e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103898:	2b40      	cmp	r3, #64	; 0x40
 810389a:	d007      	beq.n	81038ac <HAL_RCCEx_PeriphCLKConfig+0x168>
 810389c:	e018      	b.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810389e:	4b5e      	ldr	r3, [pc, #376]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038a2:	4a5d      	ldr	r2, [pc, #372]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81038a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81038a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81038aa:	e017      	b.n	81038dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	3304      	adds	r3, #4
 81038b0:	2100      	movs	r1, #0
 81038b2:	4618      	mov	r0, r3
 81038b4:	f001 f94a 	bl	8104b4c <RCCEx_PLL2_Config>
 81038b8:	4603      	mov	r3, r0
 81038ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81038bc:	e00e      	b.n	81038dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81038be:	687b      	ldr	r3, [r7, #4]
 81038c0:	3324      	adds	r3, #36	; 0x24
 81038c2:	2100      	movs	r1, #0
 81038c4:	4618      	mov	r0, r3
 81038c6:	f001 f9f3 	bl	8104cb0 <RCCEx_PLL3_Config>
 81038ca:	4603      	mov	r3, r0
 81038cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81038ce:	e005      	b.n	81038dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81038d0:	2301      	movs	r3, #1
 81038d2:	75fb      	strb	r3, [r7, #23]
      break;
 81038d4:	e002      	b.n	81038dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81038d6:	bf00      	nop
 81038d8:	e000      	b.n	81038dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81038da:	bf00      	nop
    }

    if(ret == HAL_OK)
 81038dc:	7dfb      	ldrb	r3, [r7, #23]
 81038de:	2b00      	cmp	r3, #0
 81038e0:	d109      	bne.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81038e2:	4b4d      	ldr	r3, [pc, #308]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81038e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81038e6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81038ee:	494a      	ldr	r1, [pc, #296]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81038f0:	4313      	orrs	r3, r2
 81038f2:	650b      	str	r3, [r1, #80]	; 0x50
 81038f4:	e001      	b.n	81038fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038f6:	7dfb      	ldrb	r3, [r7, #23]
 81038f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	681b      	ldr	r3, [r3, #0]
 81038fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103902:	2b00      	cmp	r3, #0
 8103904:	d049      	beq.n	810399a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810390c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103910:	d030      	beq.n	8103974 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103912:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103916:	d82a      	bhi.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103918:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810391c:	d02c      	beq.n	8103978 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810391e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103922:	d824      	bhi.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103928:	d018      	beq.n	810395c <HAL_RCCEx_PeriphCLKConfig+0x218>
 810392a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810392e:	d81e      	bhi.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103930:	2b00      	cmp	r3, #0
 8103932:	d003      	beq.n	810393c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103938:	d007      	beq.n	810394a <HAL_RCCEx_PeriphCLKConfig+0x206>
 810393a:	e018      	b.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810393c:	4b36      	ldr	r3, [pc, #216]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103940:	4a35      	ldr	r2, [pc, #212]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103946:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103948:	e017      	b.n	810397a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	3304      	adds	r3, #4
 810394e:	2100      	movs	r1, #0
 8103950:	4618      	mov	r0, r3
 8103952:	f001 f8fb 	bl	8104b4c <RCCEx_PLL2_Config>
 8103956:	4603      	mov	r3, r0
 8103958:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810395a:	e00e      	b.n	810397a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	3324      	adds	r3, #36	; 0x24
 8103960:	2100      	movs	r1, #0
 8103962:	4618      	mov	r0, r3
 8103964:	f001 f9a4 	bl	8104cb0 <RCCEx_PLL3_Config>
 8103968:	4603      	mov	r3, r0
 810396a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810396c:	e005      	b.n	810397a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810396e:	2301      	movs	r3, #1
 8103970:	75fb      	strb	r3, [r7, #23]
      break;
 8103972:	e002      	b.n	810397a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103974:	bf00      	nop
 8103976:	e000      	b.n	810397a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103978:	bf00      	nop
    }

    if(ret == HAL_OK)
 810397a:	7dfb      	ldrb	r3, [r7, #23]
 810397c:	2b00      	cmp	r3, #0
 810397e:	d10a      	bne.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103980:	4b25      	ldr	r3, [pc, #148]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103984:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810398e:	4922      	ldr	r1, [pc, #136]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8103990:	4313      	orrs	r3, r2
 8103992:	658b      	str	r3, [r1, #88]	; 0x58
 8103994:	e001      	b.n	810399a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103996:	7dfb      	ldrb	r3, [r7, #23]
 8103998:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810399a:	687b      	ldr	r3, [r7, #4]
 810399c:	681b      	ldr	r3, [r3, #0]
 810399e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81039a2:	2b00      	cmp	r3, #0
 81039a4:	d04b      	beq.n	8103a3e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81039a6:	687b      	ldr	r3, [r7, #4]
 81039a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81039ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81039b0:	d030      	beq.n	8103a14 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81039b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81039b6:	d82a      	bhi.n	8103a0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81039b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81039bc:	d02e      	beq.n	8103a1c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 81039be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81039c2:	d824      	bhi.n	8103a0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81039c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81039c8:	d018      	beq.n	81039fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81039ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81039ce:	d81e      	bhi.n	8103a0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81039d0:	2b00      	cmp	r3, #0
 81039d2:	d003      	beq.n	81039dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 81039d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81039d8:	d007      	beq.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81039da:	e018      	b.n	8103a0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039dc:	4b0e      	ldr	r3, [pc, #56]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039e0:	4a0d      	ldr	r2, [pc, #52]	; (8103a18 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81039e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81039e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81039e8:	e019      	b.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	3304      	adds	r3, #4
 81039ee:	2100      	movs	r1, #0
 81039f0:	4618      	mov	r0, r3
 81039f2:	f001 f8ab 	bl	8104b4c <RCCEx_PLL2_Config>
 81039f6:	4603      	mov	r3, r0
 81039f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81039fa:	e010      	b.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	3324      	adds	r3, #36	; 0x24
 8103a00:	2100      	movs	r1, #0
 8103a02:	4618      	mov	r0, r3
 8103a04:	f001 f954 	bl	8104cb0 <RCCEx_PLL3_Config>
 8103a08:	4603      	mov	r3, r0
 8103a0a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103a0c:	e007      	b.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103a0e:	2301      	movs	r3, #1
 8103a10:	75fb      	strb	r3, [r7, #23]
      break;
 8103a12:	e004      	b.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8103a14:	bf00      	nop
 8103a16:	e002      	b.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8103a18:	58024400 	.word	0x58024400
      break;
 8103a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a1e:	7dfb      	ldrb	r3, [r7, #23]
 8103a20:	2b00      	cmp	r3, #0
 8103a22:	d10a      	bne.n	8103a3a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103a24:	4b99      	ldr	r3, [pc, #612]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a28:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103a32:	4996      	ldr	r1, [pc, #600]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103a34:	4313      	orrs	r3, r2
 8103a36:	658b      	str	r3, [r1, #88]	; 0x58
 8103a38:	e001      	b.n	8103a3e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a3a:	7dfb      	ldrb	r3, [r7, #23]
 8103a3c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	681b      	ldr	r3, [r3, #0]
 8103a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103a46:	2b00      	cmp	r3, #0
 8103a48:	d032      	beq.n	8103ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a4e:	2b30      	cmp	r3, #48	; 0x30
 8103a50:	d01c      	beq.n	8103a8c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8103a52:	2b30      	cmp	r3, #48	; 0x30
 8103a54:	d817      	bhi.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103a56:	2b20      	cmp	r3, #32
 8103a58:	d00c      	beq.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8103a5a:	2b20      	cmp	r3, #32
 8103a5c:	d813      	bhi.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8103a5e:	2b00      	cmp	r3, #0
 8103a60:	d016      	beq.n	8103a90 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8103a62:	2b10      	cmp	r3, #16
 8103a64:	d10f      	bne.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a66:	4b89      	ldr	r3, [pc, #548]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a6a:	4a88      	ldr	r2, [pc, #544]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103a72:	e00e      	b.n	8103a92 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	3304      	adds	r3, #4
 8103a78:	2102      	movs	r1, #2
 8103a7a:	4618      	mov	r0, r3
 8103a7c:	f001 f866 	bl	8104b4c <RCCEx_PLL2_Config>
 8103a80:	4603      	mov	r3, r0
 8103a82:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103a84:	e005      	b.n	8103a92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103a86:	2301      	movs	r3, #1
 8103a88:	75fb      	strb	r3, [r7, #23]
      break;
 8103a8a:	e002      	b.n	8103a92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103a8c:	bf00      	nop
 8103a8e:	e000      	b.n	8103a92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8103a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a92:	7dfb      	ldrb	r3, [r7, #23]
 8103a94:	2b00      	cmp	r3, #0
 8103a96:	d109      	bne.n	8103aac <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103a98:	4b7c      	ldr	r3, [pc, #496]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103a9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103aa4:	4979      	ldr	r1, [pc, #484]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103aa6:	4313      	orrs	r3, r2
 8103aa8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103aaa:	e001      	b.n	8103ab0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103aac:	7dfb      	ldrb	r3, [r7, #23]
 8103aae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103ab0:	687b      	ldr	r3, [r7, #4]
 8103ab2:	681b      	ldr	r3, [r3, #0]
 8103ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103ab8:	2b00      	cmp	r3, #0
 8103aba:	d047      	beq.n	8103b4c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103ac4:	d030      	beq.n	8103b28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8103ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103aca:	d82a      	bhi.n	8103b22 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103acc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103ad0:	d02c      	beq.n	8103b2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8103ad2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103ad6:	d824      	bhi.n	8103b22 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103adc:	d018      	beq.n	8103b10 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8103ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103ae2:	d81e      	bhi.n	8103b22 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8103ae4:	2b00      	cmp	r3, #0
 8103ae6:	d003      	beq.n	8103af0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8103ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103aec:	d007      	beq.n	8103afe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8103aee:	e018      	b.n	8103b22 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103af0:	4b66      	ldr	r3, [pc, #408]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103af4:	4a65      	ldr	r2, [pc, #404]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103afc:	e017      	b.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	3304      	adds	r3, #4
 8103b02:	2100      	movs	r1, #0
 8103b04:	4618      	mov	r0, r3
 8103b06:	f001 f821 	bl	8104b4c <RCCEx_PLL2_Config>
 8103b0a:	4603      	mov	r3, r0
 8103b0c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103b0e:	e00e      	b.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	3324      	adds	r3, #36	; 0x24
 8103b14:	2100      	movs	r1, #0
 8103b16:	4618      	mov	r0, r3
 8103b18:	f001 f8ca 	bl	8104cb0 <RCCEx_PLL3_Config>
 8103b1c:	4603      	mov	r3, r0
 8103b1e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103b20:	e005      	b.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b22:	2301      	movs	r3, #1
 8103b24:	75fb      	strb	r3, [r7, #23]
      break;
 8103b26:	e002      	b.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103b28:	bf00      	nop
 8103b2a:	e000      	b.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8103b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b2e:	7dfb      	ldrb	r3, [r7, #23]
 8103b30:	2b00      	cmp	r3, #0
 8103b32:	d109      	bne.n	8103b48 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103b34:	4b55      	ldr	r3, [pc, #340]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b38:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b40:	4952      	ldr	r1, [pc, #328]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103b42:	4313      	orrs	r3, r2
 8103b44:	650b      	str	r3, [r1, #80]	; 0x50
 8103b46:	e001      	b.n	8103b4c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b48:	7dfb      	ldrb	r3, [r7, #23]
 8103b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103b54:	2b00      	cmp	r3, #0
 8103b56:	d049      	beq.n	8103bec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103b60:	d02e      	beq.n	8103bc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8103b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103b66:	d828      	bhi.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103b68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103b6c:	d02a      	beq.n	8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8103b6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103b72:	d822      	bhi.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103b74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103b78:	d026      	beq.n	8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8103b7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103b7e:	d81c      	bhi.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103b84:	d010      	beq.n	8103ba8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8103b86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103b8a:	d816      	bhi.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8103b8c:	2b00      	cmp	r3, #0
 8103b8e:	d01d      	beq.n	8103bcc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8103b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103b94:	d111      	bne.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	3304      	adds	r3, #4
 8103b9a:	2101      	movs	r1, #1
 8103b9c:	4618      	mov	r0, r3
 8103b9e:	f000 ffd5 	bl	8104b4c <RCCEx_PLL2_Config>
 8103ba2:	4603      	mov	r3, r0
 8103ba4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103ba6:	e012      	b.n	8103bce <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	3324      	adds	r3, #36	; 0x24
 8103bac:	2101      	movs	r1, #1
 8103bae:	4618      	mov	r0, r3
 8103bb0:	f001 f87e 	bl	8104cb0 <RCCEx_PLL3_Config>
 8103bb4:	4603      	mov	r3, r0
 8103bb6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103bb8:	e009      	b.n	8103bce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103bba:	2301      	movs	r3, #1
 8103bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8103bbe:	e006      	b.n	8103bce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103bc0:	bf00      	nop
 8103bc2:	e004      	b.n	8103bce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103bc4:	bf00      	nop
 8103bc6:	e002      	b.n	8103bce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103bc8:	bf00      	nop
 8103bca:	e000      	b.n	8103bce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8103bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bce:	7dfb      	ldrb	r3, [r7, #23]
 8103bd0:	2b00      	cmp	r3, #0
 8103bd2:	d109      	bne.n	8103be8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103bd4:	4b2d      	ldr	r3, [pc, #180]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103bd8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103be0:	492a      	ldr	r1, [pc, #168]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103be2:	4313      	orrs	r3, r2
 8103be4:	650b      	str	r3, [r1, #80]	; 0x50
 8103be6:	e001      	b.n	8103bec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103be8:	7dfb      	ldrb	r3, [r7, #23]
 8103bea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103bf4:	2b00      	cmp	r3, #0
 8103bf6:	d04d      	beq.n	8103c94 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103bf8:	687b      	ldr	r3, [r7, #4]
 8103bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103c02:	d02e      	beq.n	8103c62 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8103c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103c08:	d828      	bhi.n	8103c5c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103c0e:	d02a      	beq.n	8103c66 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8103c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103c14:	d822      	bhi.n	8103c5c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103c16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103c1a:	d026      	beq.n	8103c6a <HAL_RCCEx_PeriphCLKConfig+0x526>
 8103c1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103c20:	d81c      	bhi.n	8103c5c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103c26:	d010      	beq.n	8103c4a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8103c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103c2c:	d816      	bhi.n	8103c5c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8103c2e:	2b00      	cmp	r3, #0
 8103c30:	d01d      	beq.n	8103c6e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8103c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103c36:	d111      	bne.n	8103c5c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	3304      	adds	r3, #4
 8103c3c:	2101      	movs	r1, #1
 8103c3e:	4618      	mov	r0, r3
 8103c40:	f000 ff84 	bl	8104b4c <RCCEx_PLL2_Config>
 8103c44:	4603      	mov	r3, r0
 8103c46:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103c48:	e012      	b.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	3324      	adds	r3, #36	; 0x24
 8103c4e:	2101      	movs	r1, #1
 8103c50:	4618      	mov	r0, r3
 8103c52:	f001 f82d 	bl	8104cb0 <RCCEx_PLL3_Config>
 8103c56:	4603      	mov	r3, r0
 8103c58:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103c5a:	e009      	b.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103c5c:	2301      	movs	r3, #1
 8103c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8103c60:	e006      	b.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103c62:	bf00      	nop
 8103c64:	e004      	b.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103c66:	bf00      	nop
 8103c68:	e002      	b.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103c6a:	bf00      	nop
 8103c6c:	e000      	b.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8103c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c70:	7dfb      	ldrb	r3, [r7, #23]
 8103c72:	2b00      	cmp	r3, #0
 8103c74:	d10c      	bne.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103c76:	4b05      	ldr	r3, [pc, #20]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c7a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103c84:	4901      	ldr	r1, [pc, #4]	; (8103c8c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8103c86:	4313      	orrs	r3, r2
 8103c88:	658b      	str	r3, [r1, #88]	; 0x58
 8103c8a:	e003      	b.n	8103c94 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8103c8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c90:	7dfb      	ldrb	r3, [r7, #23]
 8103c92:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103c94:	687b      	ldr	r3, [r7, #4]
 8103c96:	681b      	ldr	r3, [r3, #0]
 8103c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103c9c:	2b00      	cmp	r3, #0
 8103c9e:	d02f      	beq.n	8103d00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103ca8:	d00e      	beq.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8103caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103cae:	d814      	bhi.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x596>
 8103cb0:	2b00      	cmp	r3, #0
 8103cb2:	d015      	beq.n	8103ce0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8103cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103cb8:	d10f      	bne.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103cba:	4bb0      	ldr	r3, [pc, #704]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cbe:	4aaf      	ldr	r2, [pc, #700]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103cc6:	e00c      	b.n	8103ce2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	3304      	adds	r3, #4
 8103ccc:	2101      	movs	r1, #1
 8103cce:	4618      	mov	r0, r3
 8103cd0:	f000 ff3c 	bl	8104b4c <RCCEx_PLL2_Config>
 8103cd4:	4603      	mov	r3, r0
 8103cd6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103cd8:	e003      	b.n	8103ce2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103cda:	2301      	movs	r3, #1
 8103cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8103cde:	e000      	b.n	8103ce2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8103ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ce2:	7dfb      	ldrb	r3, [r7, #23]
 8103ce4:	2b00      	cmp	r3, #0
 8103ce6:	d109      	bne.n	8103cfc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103ce8:	4ba4      	ldr	r3, [pc, #656]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103cf4:	49a1      	ldr	r1, [pc, #644]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103cf6:	4313      	orrs	r3, r2
 8103cf8:	650b      	str	r3, [r1, #80]	; 0x50
 8103cfa:	e001      	b.n	8103d00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cfc:	7dfb      	ldrb	r3, [r7, #23]
 8103cfe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103d00:	687b      	ldr	r3, [r7, #4]
 8103d02:	681b      	ldr	r3, [r3, #0]
 8103d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103d08:	2b00      	cmp	r3, #0
 8103d0a:	d032      	beq.n	8103d72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103d0c:	687b      	ldr	r3, [r7, #4]
 8103d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103d10:	2b03      	cmp	r3, #3
 8103d12:	d81b      	bhi.n	8103d4c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103d14:	a201      	add	r2, pc, #4	; (adr r2, 8103d1c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8103d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d1a:	bf00      	nop
 8103d1c:	08103d53 	.word	0x08103d53
 8103d20:	08103d2d 	.word	0x08103d2d
 8103d24:	08103d3b 	.word	0x08103d3b
 8103d28:	08103d53 	.word	0x08103d53
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d2c:	4b93      	ldr	r3, [pc, #588]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d30:	4a92      	ldr	r2, [pc, #584]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103d38:	e00c      	b.n	8103d54 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	3304      	adds	r3, #4
 8103d3e:	2102      	movs	r1, #2
 8103d40:	4618      	mov	r0, r3
 8103d42:	f000 ff03 	bl	8104b4c <RCCEx_PLL2_Config>
 8103d46:	4603      	mov	r3, r0
 8103d48:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103d4a:	e003      	b.n	8103d54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103d4c:	2301      	movs	r3, #1
 8103d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8103d50:	e000      	b.n	8103d54 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d54:	7dfb      	ldrb	r3, [r7, #23]
 8103d56:	2b00      	cmp	r3, #0
 8103d58:	d109      	bne.n	8103d6e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103d5a:	4b88      	ldr	r3, [pc, #544]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d5e:	f023 0203 	bic.w	r2, r3, #3
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103d66:	4985      	ldr	r1, [pc, #532]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103d68:	4313      	orrs	r3, r2
 8103d6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103d6c:	e001      	b.n	8103d72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d6e:	7dfb      	ldrb	r3, [r7, #23]
 8103d70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103d72:	687b      	ldr	r3, [r7, #4]
 8103d74:	681b      	ldr	r3, [r3, #0]
 8103d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103d7a:	2b00      	cmp	r3, #0
 8103d7c:	f000 8088 	beq.w	8103e90 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103d80:	4b7f      	ldr	r3, [pc, #508]	; (8103f80 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	4a7e      	ldr	r2, [pc, #504]	; (8103f80 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103d8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103d8c:	f7fe f846 	bl	8101e1c <HAL_GetTick>
 8103d90:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103d92:	e009      	b.n	8103da8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103d94:	f7fe f842 	bl	8101e1c <HAL_GetTick>
 8103d98:	4602      	mov	r2, r0
 8103d9a:	693b      	ldr	r3, [r7, #16]
 8103d9c:	1ad3      	subs	r3, r2, r3
 8103d9e:	2b64      	cmp	r3, #100	; 0x64
 8103da0:	d902      	bls.n	8103da8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103da2:	2303      	movs	r3, #3
 8103da4:	75fb      	strb	r3, [r7, #23]
        break;
 8103da6:	e005      	b.n	8103db4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103da8:	4b75      	ldr	r3, [pc, #468]	; (8103f80 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8103daa:	681b      	ldr	r3, [r3, #0]
 8103dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103db0:	2b00      	cmp	r3, #0
 8103db2:	d0ef      	beq.n	8103d94 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103db4:	7dfb      	ldrb	r3, [r7, #23]
 8103db6:	2b00      	cmp	r3, #0
 8103db8:	d168      	bne.n	8103e8c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103dba:	4b70      	ldr	r3, [pc, #448]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103dbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103dc4:	4053      	eors	r3, r2
 8103dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103dca:	2b00      	cmp	r3, #0
 8103dcc:	d013      	beq.n	8103df6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103dce:	4b6b      	ldr	r3, [pc, #428]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103dd6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103dd8:	4b68      	ldr	r3, [pc, #416]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103ddc:	4a67      	ldr	r2, [pc, #412]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103de2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103de4:	4b65      	ldr	r3, [pc, #404]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103de8:	4a64      	ldr	r2, [pc, #400]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103dee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103df0:	4a62      	ldr	r2, [pc, #392]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103df2:	68fb      	ldr	r3, [r7, #12]
 8103df4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103df6:	687b      	ldr	r3, [r7, #4]
 8103df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103e00:	d115      	bne.n	8103e2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103e02:	f7fe f80b 	bl	8101e1c <HAL_GetTick>
 8103e06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103e08:	e00b      	b.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103e0a:	f7fe f807 	bl	8101e1c <HAL_GetTick>
 8103e0e:	4602      	mov	r2, r0
 8103e10:	693b      	ldr	r3, [r7, #16]
 8103e12:	1ad3      	subs	r3, r2, r3
 8103e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8103e18:	4293      	cmp	r3, r2
 8103e1a:	d902      	bls.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103e1c:	2303      	movs	r3, #3
 8103e1e:	75fb      	strb	r3, [r7, #23]
            break;
 8103e20:	e005      	b.n	8103e2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103e22:	4b56      	ldr	r3, [pc, #344]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103e26:	f003 0302 	and.w	r3, r3, #2
 8103e2a:	2b00      	cmp	r3, #0
 8103e2c:	d0ed      	beq.n	8103e0a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8103e2e:	7dfb      	ldrb	r3, [r7, #23]
 8103e30:	2b00      	cmp	r3, #0
 8103e32:	d128      	bne.n	8103e86 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103e42:	d10f      	bne.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103e44:	4b4d      	ldr	r3, [pc, #308]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103e46:	691b      	ldr	r3, [r3, #16]
 8103e48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103e52:	091b      	lsrs	r3, r3, #4
 8103e54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103e58:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103e5c:	4947      	ldr	r1, [pc, #284]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103e5e:	4313      	orrs	r3, r2
 8103e60:	610b      	str	r3, [r1, #16]
 8103e62:	e005      	b.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103e64:	4b45      	ldr	r3, [pc, #276]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103e66:	691b      	ldr	r3, [r3, #16]
 8103e68:	4a44      	ldr	r2, [pc, #272]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103e6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103e6e:	6113      	str	r3, [r2, #16]
 8103e70:	4b42      	ldr	r3, [pc, #264]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103e72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103e7e:	493f      	ldr	r1, [pc, #252]	; (8103f7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8103e80:	4313      	orrs	r3, r2
 8103e82:	670b      	str	r3, [r1, #112]	; 0x70
 8103e84:	e004      	b.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103e86:	7dfb      	ldrb	r3, [r7, #23]
 8103e88:	75bb      	strb	r3, [r7, #22]
 8103e8a:	e001      	b.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e8c:	7dfb      	ldrb	r3, [r7, #23]
 8103e8e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	681b      	ldr	r3, [r3, #0]
 8103e94:	f003 0301 	and.w	r3, r3, #1
 8103e98:	2b00      	cmp	r3, #0
 8103e9a:	f000 8083 	beq.w	8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103e9e:	687b      	ldr	r3, [r7, #4]
 8103ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103ea2:	2b28      	cmp	r3, #40	; 0x28
 8103ea4:	d866      	bhi.n	8103f74 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103ea6:	a201      	add	r2, pc, #4	; (adr r2, 8103eac <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103eac:	08103f85 	.word	0x08103f85
 8103eb0:	08103f75 	.word	0x08103f75
 8103eb4:	08103f75 	.word	0x08103f75
 8103eb8:	08103f75 	.word	0x08103f75
 8103ebc:	08103f75 	.word	0x08103f75
 8103ec0:	08103f75 	.word	0x08103f75
 8103ec4:	08103f75 	.word	0x08103f75
 8103ec8:	08103f75 	.word	0x08103f75
 8103ecc:	08103f51 	.word	0x08103f51
 8103ed0:	08103f75 	.word	0x08103f75
 8103ed4:	08103f75 	.word	0x08103f75
 8103ed8:	08103f75 	.word	0x08103f75
 8103edc:	08103f75 	.word	0x08103f75
 8103ee0:	08103f75 	.word	0x08103f75
 8103ee4:	08103f75 	.word	0x08103f75
 8103ee8:	08103f75 	.word	0x08103f75
 8103eec:	08103f63 	.word	0x08103f63
 8103ef0:	08103f75 	.word	0x08103f75
 8103ef4:	08103f75 	.word	0x08103f75
 8103ef8:	08103f75 	.word	0x08103f75
 8103efc:	08103f75 	.word	0x08103f75
 8103f00:	08103f75 	.word	0x08103f75
 8103f04:	08103f75 	.word	0x08103f75
 8103f08:	08103f75 	.word	0x08103f75
 8103f0c:	08103f85 	.word	0x08103f85
 8103f10:	08103f75 	.word	0x08103f75
 8103f14:	08103f75 	.word	0x08103f75
 8103f18:	08103f75 	.word	0x08103f75
 8103f1c:	08103f75 	.word	0x08103f75
 8103f20:	08103f75 	.word	0x08103f75
 8103f24:	08103f75 	.word	0x08103f75
 8103f28:	08103f75 	.word	0x08103f75
 8103f2c:	08103f85 	.word	0x08103f85
 8103f30:	08103f75 	.word	0x08103f75
 8103f34:	08103f75 	.word	0x08103f75
 8103f38:	08103f75 	.word	0x08103f75
 8103f3c:	08103f75 	.word	0x08103f75
 8103f40:	08103f75 	.word	0x08103f75
 8103f44:	08103f75 	.word	0x08103f75
 8103f48:	08103f75 	.word	0x08103f75
 8103f4c:	08103f85 	.word	0x08103f85
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	3304      	adds	r3, #4
 8103f54:	2101      	movs	r1, #1
 8103f56:	4618      	mov	r0, r3
 8103f58:	f000 fdf8 	bl	8104b4c <RCCEx_PLL2_Config>
 8103f5c:	4603      	mov	r3, r0
 8103f5e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103f60:	e011      	b.n	8103f86 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	3324      	adds	r3, #36	; 0x24
 8103f66:	2101      	movs	r1, #1
 8103f68:	4618      	mov	r0, r3
 8103f6a:	f000 fea1 	bl	8104cb0 <RCCEx_PLL3_Config>
 8103f6e:	4603      	mov	r3, r0
 8103f70:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103f72:	e008      	b.n	8103f86 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f74:	2301      	movs	r3, #1
 8103f76:	75fb      	strb	r3, [r7, #23]
      break;
 8103f78:	e005      	b.n	8103f86 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8103f7a:	bf00      	nop
 8103f7c:	58024400 	.word	0x58024400
 8103f80:	58024800 	.word	0x58024800
      break;
 8103f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f86:	7dfb      	ldrb	r3, [r7, #23]
 8103f88:	2b00      	cmp	r3, #0
 8103f8a:	d109      	bne.n	8103fa0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103f8c:	4b96      	ldr	r3, [pc, #600]	; (81041e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f90:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103f98:	4993      	ldr	r1, [pc, #588]	; (81041e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8103f9a:	4313      	orrs	r3, r2
 8103f9c:	654b      	str	r3, [r1, #84]	; 0x54
 8103f9e:	e001      	b.n	8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fa0:	7dfb      	ldrb	r3, [r7, #23]
 8103fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	f003 0302 	and.w	r3, r3, #2
 8103fac:	2b00      	cmp	r3, #0
 8103fae:	d038      	beq.n	8104022 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103fb0:	687b      	ldr	r3, [r7, #4]
 8103fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103fb4:	2b05      	cmp	r3, #5
 8103fb6:	d821      	bhi.n	8103ffc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8103fb8:	a201      	add	r2, pc, #4	; (adr r2, 8103fc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8103fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103fbe:	bf00      	nop
 8103fc0:	08104003 	.word	0x08104003
 8103fc4:	08103fd9 	.word	0x08103fd9
 8103fc8:	08103feb 	.word	0x08103feb
 8103fcc:	08104003 	.word	0x08104003
 8103fd0:	08104003 	.word	0x08104003
 8103fd4:	08104003 	.word	0x08104003
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	3304      	adds	r3, #4
 8103fdc:	2101      	movs	r1, #1
 8103fde:	4618      	mov	r0, r3
 8103fe0:	f000 fdb4 	bl	8104b4c <RCCEx_PLL2_Config>
 8103fe4:	4603      	mov	r3, r0
 8103fe6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103fe8:	e00c      	b.n	8104004 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	3324      	adds	r3, #36	; 0x24
 8103fee:	2101      	movs	r1, #1
 8103ff0:	4618      	mov	r0, r3
 8103ff2:	f000 fe5d 	bl	8104cb0 <RCCEx_PLL3_Config>
 8103ff6:	4603      	mov	r3, r0
 8103ff8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103ffa:	e003      	b.n	8104004 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ffc:	2301      	movs	r3, #1
 8103ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8104000:	e000      	b.n	8104004 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8104002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104004:	7dfb      	ldrb	r3, [r7, #23]
 8104006:	2b00      	cmp	r3, #0
 8104008:	d109      	bne.n	810401e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810400a:	4b77      	ldr	r3, [pc, #476]	; (81041e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810400e:	f023 0207 	bic.w	r2, r3, #7
 8104012:	687b      	ldr	r3, [r7, #4]
 8104014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104016:	4974      	ldr	r1, [pc, #464]	; (81041e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104018:	4313      	orrs	r3, r2
 810401a:	654b      	str	r3, [r1, #84]	; 0x54
 810401c:	e001      	b.n	8104022 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810401e:	7dfb      	ldrb	r3, [r7, #23]
 8104020:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	681b      	ldr	r3, [r3, #0]
 8104026:	f003 0304 	and.w	r3, r3, #4
 810402a:	2b00      	cmp	r3, #0
 810402c:	d03a      	beq.n	81040a4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104034:	2b05      	cmp	r3, #5
 8104036:	d821      	bhi.n	810407c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8104038:	a201      	add	r2, pc, #4	; (adr r2, 8104040 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 810403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810403e:	bf00      	nop
 8104040:	08104083 	.word	0x08104083
 8104044:	08104059 	.word	0x08104059
 8104048:	0810406b 	.word	0x0810406b
 810404c:	08104083 	.word	0x08104083
 8104050:	08104083 	.word	0x08104083
 8104054:	08104083 	.word	0x08104083
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	3304      	adds	r3, #4
 810405c:	2101      	movs	r1, #1
 810405e:	4618      	mov	r0, r3
 8104060:	f000 fd74 	bl	8104b4c <RCCEx_PLL2_Config>
 8104064:	4603      	mov	r3, r0
 8104066:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104068:	e00c      	b.n	8104084 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	3324      	adds	r3, #36	; 0x24
 810406e:	2101      	movs	r1, #1
 8104070:	4618      	mov	r0, r3
 8104072:	f000 fe1d 	bl	8104cb0 <RCCEx_PLL3_Config>
 8104076:	4603      	mov	r3, r0
 8104078:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810407a:	e003      	b.n	8104084 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810407c:	2301      	movs	r3, #1
 810407e:	75fb      	strb	r3, [r7, #23]
      break;
 8104080:	e000      	b.n	8104084 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8104082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104084:	7dfb      	ldrb	r3, [r7, #23]
 8104086:	2b00      	cmp	r3, #0
 8104088:	d10a      	bne.n	81040a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810408a:	4b57      	ldr	r3, [pc, #348]	; (81041e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810408e:	f023 0207 	bic.w	r2, r3, #7
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104098:	4953      	ldr	r1, [pc, #332]	; (81041e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810409a:	4313      	orrs	r3, r2
 810409c:	658b      	str	r3, [r1, #88]	; 0x58
 810409e:	e001      	b.n	81040a4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040a0:	7dfb      	ldrb	r3, [r7, #23]
 81040a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	681b      	ldr	r3, [r3, #0]
 81040a8:	f003 0320 	and.w	r3, r3, #32
 81040ac:	2b00      	cmp	r3, #0
 81040ae:	d04b      	beq.n	8104148 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81040b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81040ba:	d02e      	beq.n	810411a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 81040bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81040c0:	d828      	bhi.n	8104114 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81040c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81040c6:	d02a      	beq.n	810411e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 81040c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81040cc:	d822      	bhi.n	8104114 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81040ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81040d2:	d026      	beq.n	8104122 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 81040d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81040d8:	d81c      	bhi.n	8104114 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81040da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81040de:	d010      	beq.n	8104102 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 81040e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81040e4:	d816      	bhi.n	8104114 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 81040e6:	2b00      	cmp	r3, #0
 81040e8:	d01d      	beq.n	8104126 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 81040ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81040ee:	d111      	bne.n	8104114 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	3304      	adds	r3, #4
 81040f4:	2100      	movs	r1, #0
 81040f6:	4618      	mov	r0, r3
 81040f8:	f000 fd28 	bl	8104b4c <RCCEx_PLL2_Config>
 81040fc:	4603      	mov	r3, r0
 81040fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104100:	e012      	b.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104102:	687b      	ldr	r3, [r7, #4]
 8104104:	3324      	adds	r3, #36	; 0x24
 8104106:	2102      	movs	r1, #2
 8104108:	4618      	mov	r0, r3
 810410a:	f000 fdd1 	bl	8104cb0 <RCCEx_PLL3_Config>
 810410e:	4603      	mov	r3, r0
 8104110:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104112:	e009      	b.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104114:	2301      	movs	r3, #1
 8104116:	75fb      	strb	r3, [r7, #23]
      break;
 8104118:	e006      	b.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810411a:	bf00      	nop
 810411c:	e004      	b.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 810411e:	bf00      	nop
 8104120:	e002      	b.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104122:	bf00      	nop
 8104124:	e000      	b.n	8104128 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8104126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104128:	7dfb      	ldrb	r3, [r7, #23]
 810412a:	2b00      	cmp	r3, #0
 810412c:	d10a      	bne.n	8104144 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810412e:	4b2e      	ldr	r3, [pc, #184]	; (81041e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8104130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104132:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104136:	687b      	ldr	r3, [r7, #4]
 8104138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810413c:	492a      	ldr	r1, [pc, #168]	; (81041e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 810413e:	4313      	orrs	r3, r2
 8104140:	654b      	str	r3, [r1, #84]	; 0x54
 8104142:	e001      	b.n	8104148 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104144:	7dfb      	ldrb	r3, [r7, #23]
 8104146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	681b      	ldr	r3, [r3, #0]
 810414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104150:	2b00      	cmp	r3, #0
 8104152:	d04d      	beq.n	81041f0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810415a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810415e:	d02e      	beq.n	81041be <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8104160:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104164:	d828      	bhi.n	81041b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810416a:	d02a      	beq.n	81041c2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810416c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104170:	d822      	bhi.n	81041b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8104172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104176:	d026      	beq.n	81041c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810417c:	d81c      	bhi.n	81041b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810417e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104182:	d010      	beq.n	81041a6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8104184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104188:	d816      	bhi.n	81041b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 810418a:	2b00      	cmp	r3, #0
 810418c:	d01d      	beq.n	81041ca <HAL_RCCEx_PeriphCLKConfig+0xa86>
 810418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104192:	d111      	bne.n	81041b8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	3304      	adds	r3, #4
 8104198:	2100      	movs	r1, #0
 810419a:	4618      	mov	r0, r3
 810419c:	f000 fcd6 	bl	8104b4c <RCCEx_PLL2_Config>
 81041a0:	4603      	mov	r3, r0
 81041a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81041a4:	e012      	b.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	3324      	adds	r3, #36	; 0x24
 81041aa:	2102      	movs	r1, #2
 81041ac:	4618      	mov	r0, r3
 81041ae:	f000 fd7f 	bl	8104cb0 <RCCEx_PLL3_Config>
 81041b2:	4603      	mov	r3, r0
 81041b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81041b6:	e009      	b.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81041b8:	2301      	movs	r3, #1
 81041ba:	75fb      	strb	r3, [r7, #23]
      break;
 81041bc:	e006      	b.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81041be:	bf00      	nop
 81041c0:	e004      	b.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81041c2:	bf00      	nop
 81041c4:	e002      	b.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81041c6:	bf00      	nop
 81041c8:	e000      	b.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 81041ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81041cc:	7dfb      	ldrb	r3, [r7, #23]
 81041ce:	2b00      	cmp	r3, #0
 81041d0:	d10c      	bne.n	81041ec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81041d2:	4b05      	ldr	r3, [pc, #20]	; (81041e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81041d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81041e0:	4901      	ldr	r1, [pc, #4]	; (81041e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 81041e2:	4313      	orrs	r3, r2
 81041e4:	658b      	str	r3, [r1, #88]	; 0x58
 81041e6:	e003      	b.n	81041f0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 81041e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041ec:	7dfb      	ldrb	r3, [r7, #23]
 81041ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	681b      	ldr	r3, [r3, #0]
 81041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81041f8:	2b00      	cmp	r3, #0
 81041fa:	d04b      	beq.n	8104294 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81041fc:	687b      	ldr	r3, [r7, #4]
 81041fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104202:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104206:	d02e      	beq.n	8104266 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8104208:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810420c:	d828      	bhi.n	8104260 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810420e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104212:	d02a      	beq.n	810426a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8104214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104218:	d822      	bhi.n	8104260 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 810421a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810421e:	d026      	beq.n	810426e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8104220:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104224:	d81c      	bhi.n	8104260 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810422a:	d010      	beq.n	810424e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 810422c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104230:	d816      	bhi.n	8104260 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8104232:	2b00      	cmp	r3, #0
 8104234:	d01d      	beq.n	8104272 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8104236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810423a:	d111      	bne.n	8104260 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	3304      	adds	r3, #4
 8104240:	2100      	movs	r1, #0
 8104242:	4618      	mov	r0, r3
 8104244:	f000 fc82 	bl	8104b4c <RCCEx_PLL2_Config>
 8104248:	4603      	mov	r3, r0
 810424a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810424c:	e012      	b.n	8104274 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	3324      	adds	r3, #36	; 0x24
 8104252:	2102      	movs	r1, #2
 8104254:	4618      	mov	r0, r3
 8104256:	f000 fd2b 	bl	8104cb0 <RCCEx_PLL3_Config>
 810425a:	4603      	mov	r3, r0
 810425c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810425e:	e009      	b.n	8104274 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104260:	2301      	movs	r3, #1
 8104262:	75fb      	strb	r3, [r7, #23]
      break;
 8104264:	e006      	b.n	8104274 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104266:	bf00      	nop
 8104268:	e004      	b.n	8104274 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810426a:	bf00      	nop
 810426c:	e002      	b.n	8104274 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 810426e:	bf00      	nop
 8104270:	e000      	b.n	8104274 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8104272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104274:	7dfb      	ldrb	r3, [r7, #23]
 8104276:	2b00      	cmp	r3, #0
 8104278:	d10a      	bne.n	8104290 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810427a:	4b9d      	ldr	r3, [pc, #628]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810427e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8104282:	687b      	ldr	r3, [r7, #4]
 8104284:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104288:	4999      	ldr	r1, [pc, #612]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810428a:	4313      	orrs	r3, r2
 810428c:	658b      	str	r3, [r1, #88]	; 0x58
 810428e:	e001      	b.n	8104294 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104290:	7dfb      	ldrb	r3, [r7, #23]
 8104292:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104294:	687b      	ldr	r3, [r7, #4]
 8104296:	681b      	ldr	r3, [r3, #0]
 8104298:	f003 0308 	and.w	r3, r3, #8
 810429c:	2b00      	cmp	r3, #0
 810429e:	d01a      	beq.n	81042d6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81042a0:	687b      	ldr	r3, [r7, #4]
 81042a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81042a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81042aa:	d10a      	bne.n	81042c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	3324      	adds	r3, #36	; 0x24
 81042b0:	2102      	movs	r1, #2
 81042b2:	4618      	mov	r0, r3
 81042b4:	f000 fcfc 	bl	8104cb0 <RCCEx_PLL3_Config>
 81042b8:	4603      	mov	r3, r0
 81042ba:	2b00      	cmp	r3, #0
 81042bc:	d001      	beq.n	81042c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 81042be:	2301      	movs	r3, #1
 81042c0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81042c2:	4b8b      	ldr	r3, [pc, #556]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81042c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81042ca:	687b      	ldr	r3, [r7, #4]
 81042cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81042d0:	4987      	ldr	r1, [pc, #540]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81042d2:	4313      	orrs	r3, r2
 81042d4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	681b      	ldr	r3, [r3, #0]
 81042da:	f003 0310 	and.w	r3, r3, #16
 81042de:	2b00      	cmp	r3, #0
 81042e0:	d01a      	beq.n	8104318 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81042e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81042ec:	d10a      	bne.n	8104304 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	3324      	adds	r3, #36	; 0x24
 81042f2:	2102      	movs	r1, #2
 81042f4:	4618      	mov	r0, r3
 81042f6:	f000 fcdb 	bl	8104cb0 <RCCEx_PLL3_Config>
 81042fa:	4603      	mov	r3, r0
 81042fc:	2b00      	cmp	r3, #0
 81042fe:	d001      	beq.n	8104304 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8104300:	2301      	movs	r3, #1
 8104302:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104304:	4b7a      	ldr	r3, [pc, #488]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104312:	4977      	ldr	r1, [pc, #476]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104314:	4313      	orrs	r3, r2
 8104316:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104320:	2b00      	cmp	r3, #0
 8104322:	d034      	beq.n	810438e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810432a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810432e:	d01d      	beq.n	810436c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8104330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104334:	d817      	bhi.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8104336:	2b00      	cmp	r3, #0
 8104338:	d003      	beq.n	8104342 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 810433a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810433e:	d009      	beq.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8104340:	e011      	b.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	3304      	adds	r3, #4
 8104346:	2100      	movs	r1, #0
 8104348:	4618      	mov	r0, r3
 810434a:	f000 fbff 	bl	8104b4c <RCCEx_PLL2_Config>
 810434e:	4603      	mov	r3, r0
 8104350:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104352:	e00c      	b.n	810436e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	3324      	adds	r3, #36	; 0x24
 8104358:	2102      	movs	r1, #2
 810435a:	4618      	mov	r0, r3
 810435c:	f000 fca8 	bl	8104cb0 <RCCEx_PLL3_Config>
 8104360:	4603      	mov	r3, r0
 8104362:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8104364:	e003      	b.n	810436e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104366:	2301      	movs	r3, #1
 8104368:	75fb      	strb	r3, [r7, #23]
      break;
 810436a:	e000      	b.n	810436e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 810436c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810436e:	7dfb      	ldrb	r3, [r7, #23]
 8104370:	2b00      	cmp	r3, #0
 8104372:	d10a      	bne.n	810438a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104374:	4b5e      	ldr	r3, [pc, #376]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 810437c:	687b      	ldr	r3, [r7, #4]
 810437e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104382:	495b      	ldr	r1, [pc, #364]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104384:	4313      	orrs	r3, r2
 8104386:	658b      	str	r3, [r1, #88]	; 0x58
 8104388:	e001      	b.n	810438e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810438a:	7dfb      	ldrb	r3, [r7, #23]
 810438c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	681b      	ldr	r3, [r3, #0]
 8104392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104396:	2b00      	cmp	r3, #0
 8104398:	d033      	beq.n	8104402 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810439a:	687b      	ldr	r3, [r7, #4]
 810439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81043a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81043a4:	d01c      	beq.n	81043e0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 81043a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81043aa:	d816      	bhi.n	81043da <HAL_RCCEx_PeriphCLKConfig+0xc96>
 81043ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81043b0:	d003      	beq.n	81043ba <HAL_RCCEx_PeriphCLKConfig+0xc76>
 81043b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81043b6:	d007      	beq.n	81043c8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 81043b8:	e00f      	b.n	81043da <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81043ba:	4b4d      	ldr	r3, [pc, #308]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81043bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81043be:	4a4c      	ldr	r2, [pc, #304]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81043c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81043c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81043c6:	e00c      	b.n	81043e2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	3324      	adds	r3, #36	; 0x24
 81043cc:	2101      	movs	r1, #1
 81043ce:	4618      	mov	r0, r3
 81043d0:	f000 fc6e 	bl	8104cb0 <RCCEx_PLL3_Config>
 81043d4:	4603      	mov	r3, r0
 81043d6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81043d8:	e003      	b.n	81043e2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81043da:	2301      	movs	r3, #1
 81043dc:	75fb      	strb	r3, [r7, #23]
      break;
 81043de:	e000      	b.n	81043e2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 81043e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81043e2:	7dfb      	ldrb	r3, [r7, #23]
 81043e4:	2b00      	cmp	r3, #0
 81043e6:	d10a      	bne.n	81043fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81043e8:	4b41      	ldr	r3, [pc, #260]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81043ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81043f6:	493e      	ldr	r1, [pc, #248]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81043f8:	4313      	orrs	r3, r2
 81043fa:	654b      	str	r3, [r1, #84]	; 0x54
 81043fc:	e001      	b.n	8104402 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043fe:	7dfb      	ldrb	r3, [r7, #23]
 8104400:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810440a:	2b00      	cmp	r3, #0
 810440c:	d029      	beq.n	8104462 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104412:	2b00      	cmp	r3, #0
 8104414:	d003      	beq.n	810441e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8104416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810441a:	d007      	beq.n	810442c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 810441c:	e00f      	b.n	810443e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810441e:	4b34      	ldr	r3, [pc, #208]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104422:	4a33      	ldr	r2, [pc, #204]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104428:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810442a:	e00b      	b.n	8104444 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810442c:	687b      	ldr	r3, [r7, #4]
 810442e:	3304      	adds	r3, #4
 8104430:	2102      	movs	r1, #2
 8104432:	4618      	mov	r0, r3
 8104434:	f000 fb8a 	bl	8104b4c <RCCEx_PLL2_Config>
 8104438:	4603      	mov	r3, r0
 810443a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810443c:	e002      	b.n	8104444 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 810443e:	2301      	movs	r3, #1
 8104440:	75fb      	strb	r3, [r7, #23]
      break;
 8104442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104444:	7dfb      	ldrb	r3, [r7, #23]
 8104446:	2b00      	cmp	r3, #0
 8104448:	d109      	bne.n	810445e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810444a:	4b29      	ldr	r3, [pc, #164]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810444c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810444e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104456:	4926      	ldr	r1, [pc, #152]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8104458:	4313      	orrs	r3, r2
 810445a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810445c:	e001      	b.n	8104462 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810445e:	7dfb      	ldrb	r3, [r7, #23]
 8104460:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	681b      	ldr	r3, [r3, #0]
 8104466:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810446a:	2b00      	cmp	r3, #0
 810446c:	d00a      	beq.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	3324      	adds	r3, #36	; 0x24
 8104472:	2102      	movs	r1, #2
 8104474:	4618      	mov	r0, r3
 8104476:	f000 fc1b 	bl	8104cb0 <RCCEx_PLL3_Config>
 810447a:	4603      	mov	r3, r0
 810447c:	2b00      	cmp	r3, #0
 810447e:	d001      	beq.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8104480:	2301      	movs	r3, #1
 8104482:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810448c:	2b00      	cmp	r3, #0
 810448e:	d033      	beq.n	81044f8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104494:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104498:	d017      	beq.n	81044ca <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810449a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810449e:	d811      	bhi.n	81044c4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81044a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81044a4:	d013      	beq.n	81044ce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81044a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81044aa:	d80b      	bhi.n	81044c4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 81044ac:	2b00      	cmp	r3, #0
 81044ae:	d010      	beq.n	81044d2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 81044b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81044b4:	d106      	bne.n	81044c4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81044b6:	4b0e      	ldr	r3, [pc, #56]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044ba:	4a0d      	ldr	r2, [pc, #52]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81044bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81044c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81044c2:	e007      	b.n	81044d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81044c4:	2301      	movs	r3, #1
 81044c6:	75fb      	strb	r3, [r7, #23]
      break;
 81044c8:	e004      	b.n	81044d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81044ca:	bf00      	nop
 81044cc:	e002      	b.n	81044d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81044ce:	bf00      	nop
 81044d0:	e000      	b.n	81044d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81044d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81044d4:	7dfb      	ldrb	r3, [r7, #23]
 81044d6:	2b00      	cmp	r3, #0
 81044d8:	d10c      	bne.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81044da:	4b05      	ldr	r3, [pc, #20]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81044de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81044e6:	4902      	ldr	r1, [pc, #8]	; (81044f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81044e8:	4313      	orrs	r3, r2
 81044ea:	654b      	str	r3, [r1, #84]	; 0x54
 81044ec:	e004      	b.n	81044f8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81044ee:	bf00      	nop
 81044f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044f4:	7dfb      	ldrb	r3, [r7, #23]
 81044f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81044f8:	687b      	ldr	r3, [r7, #4]
 81044fa:	681b      	ldr	r3, [r3, #0]
 81044fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104500:	2b00      	cmp	r3, #0
 8104502:	d008      	beq.n	8104516 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104504:	4b31      	ldr	r3, [pc, #196]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104508:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104510:	492e      	ldr	r1, [pc, #184]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104512:	4313      	orrs	r3, r2
 8104514:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810451e:	2b00      	cmp	r3, #0
 8104520:	d009      	beq.n	8104536 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104522:	4b2a      	ldr	r3, [pc, #168]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104524:	691b      	ldr	r3, [r3, #16]
 8104526:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104530:	4926      	ldr	r1, [pc, #152]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104532:	4313      	orrs	r3, r2
 8104534:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	681b      	ldr	r3, [r3, #0]
 810453a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810453e:	2b00      	cmp	r3, #0
 8104540:	d008      	beq.n	8104554 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104542:	4b22      	ldr	r3, [pc, #136]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104546:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810454e:	491f      	ldr	r1, [pc, #124]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104550:	4313      	orrs	r3, r2
 8104552:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810455c:	2b00      	cmp	r3, #0
 810455e:	d00d      	beq.n	810457c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104560:	4b1a      	ldr	r3, [pc, #104]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104562:	691b      	ldr	r3, [r3, #16]
 8104564:	4a19      	ldr	r2, [pc, #100]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104566:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810456a:	6113      	str	r3, [r2, #16]
 810456c:	4b17      	ldr	r3, [pc, #92]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810456e:	691a      	ldr	r2, [r3, #16]
 8104570:	687b      	ldr	r3, [r7, #4]
 8104572:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104576:	4915      	ldr	r1, [pc, #84]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104578:	4313      	orrs	r3, r2
 810457a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810457c:	687b      	ldr	r3, [r7, #4]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	2b00      	cmp	r3, #0
 8104582:	da08      	bge.n	8104596 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104584:	4b11      	ldr	r3, [pc, #68]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104588:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104590:	490e      	ldr	r1, [pc, #56]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8104592:	4313      	orrs	r3, r2
 8104594:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	681b      	ldr	r3, [r3, #0]
 810459a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810459e:	2b00      	cmp	r3, #0
 81045a0:	d009      	beq.n	81045b6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81045a2:	4b0a      	ldr	r3, [pc, #40]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81045a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81045b0:	4906      	ldr	r1, [pc, #24]	; (81045cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81045b2:	4313      	orrs	r3, r2
 81045b4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81045b6:	7dbb      	ldrb	r3, [r7, #22]
 81045b8:	2b00      	cmp	r3, #0
 81045ba:	d101      	bne.n	81045c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81045bc:	2300      	movs	r3, #0
 81045be:	e000      	b.n	81045c2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81045c0:	2301      	movs	r3, #1
}
 81045c2:	4618      	mov	r0, r3
 81045c4:	3718      	adds	r7, #24
 81045c6:	46bd      	mov	sp, r7
 81045c8:	bd80      	pop	{r7, pc}
 81045ca:	bf00      	nop
 81045cc:	58024400 	.word	0x58024400

081045d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81045d0:	b580      	push	{r7, lr}
 81045d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81045d4:	f7ff f858 	bl	8103688 <HAL_RCC_GetHCLKFreq>
 81045d8:	4602      	mov	r2, r0
 81045da:	4b06      	ldr	r3, [pc, #24]	; (81045f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81045dc:	6a1b      	ldr	r3, [r3, #32]
 81045de:	091b      	lsrs	r3, r3, #4
 81045e0:	f003 0307 	and.w	r3, r3, #7
 81045e4:	4904      	ldr	r1, [pc, #16]	; (81045f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81045e6:	5ccb      	ldrb	r3, [r1, r3]
 81045e8:	f003 031f 	and.w	r3, r3, #31
 81045ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81045f0:	4618      	mov	r0, r3
 81045f2:	bd80      	pop	{r7, pc}
 81045f4:	58024400 	.word	0x58024400
 81045f8:	0810ab48 	.word	0x0810ab48

081045fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81045fc:	b480      	push	{r7}
 81045fe:	b089      	sub	sp, #36	; 0x24
 8104600:	af00      	add	r7, sp, #0
 8104602:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104604:	4ba1      	ldr	r3, [pc, #644]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104608:	f003 0303 	and.w	r3, r3, #3
 810460c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810460e:	4b9f      	ldr	r3, [pc, #636]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104612:	0b1b      	lsrs	r3, r3, #12
 8104614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104618:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810461a:	4b9c      	ldr	r3, [pc, #624]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810461e:	091b      	lsrs	r3, r3, #4
 8104620:	f003 0301 	and.w	r3, r3, #1
 8104624:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8104626:	4b99      	ldr	r3, [pc, #612]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810462a:	08db      	lsrs	r3, r3, #3
 810462c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104630:	693a      	ldr	r2, [r7, #16]
 8104632:	fb02 f303 	mul.w	r3, r2, r3
 8104636:	ee07 3a90 	vmov	s15, r3
 810463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810463e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104642:	697b      	ldr	r3, [r7, #20]
 8104644:	2b00      	cmp	r3, #0
 8104646:	f000 8111 	beq.w	810486c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810464a:	69bb      	ldr	r3, [r7, #24]
 810464c:	2b02      	cmp	r3, #2
 810464e:	f000 8083 	beq.w	8104758 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104652:	69bb      	ldr	r3, [r7, #24]
 8104654:	2b02      	cmp	r3, #2
 8104656:	f200 80a1 	bhi.w	810479c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810465a:	69bb      	ldr	r3, [r7, #24]
 810465c:	2b00      	cmp	r3, #0
 810465e:	d003      	beq.n	8104668 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104660:	69bb      	ldr	r3, [r7, #24]
 8104662:	2b01      	cmp	r3, #1
 8104664:	d056      	beq.n	8104714 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104666:	e099      	b.n	810479c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104668:	4b88      	ldr	r3, [pc, #544]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810466a:	681b      	ldr	r3, [r3, #0]
 810466c:	f003 0320 	and.w	r3, r3, #32
 8104670:	2b00      	cmp	r3, #0
 8104672:	d02d      	beq.n	81046d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104674:	4b85      	ldr	r3, [pc, #532]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	08db      	lsrs	r3, r3, #3
 810467a:	f003 0303 	and.w	r3, r3, #3
 810467e:	4a84      	ldr	r2, [pc, #528]	; (8104890 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104680:	fa22 f303 	lsr.w	r3, r2, r3
 8104684:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104686:	68bb      	ldr	r3, [r7, #8]
 8104688:	ee07 3a90 	vmov	s15, r3
 810468c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104690:	697b      	ldr	r3, [r7, #20]
 8104692:	ee07 3a90 	vmov	s15, r3
 8104696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810469a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810469e:	4b7b      	ldr	r3, [pc, #492]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81046a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046a6:	ee07 3a90 	vmov	s15, r3
 81046aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81046b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104894 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81046b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81046c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81046ce:	e087      	b.n	81047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81046d0:	697b      	ldr	r3, [r7, #20]
 81046d2:	ee07 3a90 	vmov	s15, r3
 81046d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104898 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81046de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046e2:	4b6a      	ldr	r3, [pc, #424]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81046e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81046e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046ea:	ee07 3a90 	vmov	s15, r3
 81046ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046f2:	ed97 6a03 	vldr	s12, [r7, #12]
 81046f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104894 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81046fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810470a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810470e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104712:	e065      	b.n	81047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104714:	697b      	ldr	r3, [r7, #20]
 8104716:	ee07 3a90 	vmov	s15, r3
 810471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810471e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810489c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104726:	4b59      	ldr	r3, [pc, #356]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810472a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810472e:	ee07 3a90 	vmov	s15, r3
 8104732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104736:	ed97 6a03 	vldr	s12, [r7, #12]
 810473a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104894 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810473e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810474a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810474e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104756:	e043      	b.n	81047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104758:	697b      	ldr	r3, [r7, #20]
 810475a:	ee07 3a90 	vmov	s15, r3
 810475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104762:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810476a:	4b48      	ldr	r3, [pc, #288]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104772:	ee07 3a90 	vmov	s15, r3
 8104776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810477a:	ed97 6a03 	vldr	s12, [r7, #12]
 810477e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104894 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810478a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810478e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810479a:	e021      	b.n	81047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810479c:	697b      	ldr	r3, [r7, #20]
 810479e:	ee07 3a90 	vmov	s15, r3
 81047a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81047a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810489c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81047aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81047ae:	4b37      	ldr	r3, [pc, #220]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81047b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81047b6:	ee07 3a90 	vmov	s15, r3
 81047ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81047be:	ed97 6a03 	vldr	s12, [r7, #12]
 81047c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104894 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81047c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81047ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81047ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81047d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81047d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81047da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81047de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81047e0:	4b2a      	ldr	r3, [pc, #168]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81047e4:	0a5b      	lsrs	r3, r3, #9
 81047e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81047ea:	ee07 3a90 	vmov	s15, r3
 81047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81047f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81047f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81047fa:	edd7 6a07 	vldr	s13, [r7, #28]
 81047fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104806:	ee17 2a90 	vmov	r2, s15
 810480a:	687b      	ldr	r3, [r7, #4]
 810480c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810480e:	4b1f      	ldr	r3, [pc, #124]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104812:	0c1b      	lsrs	r3, r3, #16
 8104814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104818:	ee07 3a90 	vmov	s15, r3
 810481c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104824:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104828:	edd7 6a07 	vldr	s13, [r7, #28]
 810482c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104834:	ee17 2a90 	vmov	r2, s15
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810483c:	4b13      	ldr	r3, [pc, #76]	; (810488c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104840:	0e1b      	lsrs	r3, r3, #24
 8104842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104846:	ee07 3a90 	vmov	s15, r3
 810484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810484e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104852:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104856:	edd7 6a07 	vldr	s13, [r7, #28]
 810485a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810485e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104862:	ee17 2a90 	vmov	r2, s15
 8104866:	687b      	ldr	r3, [r7, #4]
 8104868:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810486a:	e008      	b.n	810487e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810486c:	687b      	ldr	r3, [r7, #4]
 810486e:	2200      	movs	r2, #0
 8104870:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	2200      	movs	r2, #0
 8104876:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	2200      	movs	r2, #0
 810487c:	609a      	str	r2, [r3, #8]
}
 810487e:	bf00      	nop
 8104880:	3724      	adds	r7, #36	; 0x24
 8104882:	46bd      	mov	sp, r7
 8104884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104888:	4770      	bx	lr
 810488a:	bf00      	nop
 810488c:	58024400 	.word	0x58024400
 8104890:	03d09000 	.word	0x03d09000
 8104894:	46000000 	.word	0x46000000
 8104898:	4c742400 	.word	0x4c742400
 810489c:	4a742400 	.word	0x4a742400
 81048a0:	4af42400 	.word	0x4af42400

081048a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81048a4:	b480      	push	{r7}
 81048a6:	b089      	sub	sp, #36	; 0x24
 81048a8:	af00      	add	r7, sp, #0
 81048aa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81048ac:	4ba1      	ldr	r3, [pc, #644]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81048b0:	f003 0303 	and.w	r3, r3, #3
 81048b4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81048b6:	4b9f      	ldr	r3, [pc, #636]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81048ba:	0d1b      	lsrs	r3, r3, #20
 81048bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81048c0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81048c2:	4b9c      	ldr	r3, [pc, #624]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048c6:	0a1b      	lsrs	r3, r3, #8
 81048c8:	f003 0301 	and.w	r3, r3, #1
 81048cc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81048ce:	4b99      	ldr	r3, [pc, #612]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81048d2:	08db      	lsrs	r3, r3, #3
 81048d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81048d8:	693a      	ldr	r2, [r7, #16]
 81048da:	fb02 f303 	mul.w	r3, r2, r3
 81048de:	ee07 3a90 	vmov	s15, r3
 81048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81048ea:	697b      	ldr	r3, [r7, #20]
 81048ec:	2b00      	cmp	r3, #0
 81048ee:	f000 8111 	beq.w	8104b14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81048f2:	69bb      	ldr	r3, [r7, #24]
 81048f4:	2b02      	cmp	r3, #2
 81048f6:	f000 8083 	beq.w	8104a00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81048fa:	69bb      	ldr	r3, [r7, #24]
 81048fc:	2b02      	cmp	r3, #2
 81048fe:	f200 80a1 	bhi.w	8104a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104902:	69bb      	ldr	r3, [r7, #24]
 8104904:	2b00      	cmp	r3, #0
 8104906:	d003      	beq.n	8104910 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104908:	69bb      	ldr	r3, [r7, #24]
 810490a:	2b01      	cmp	r3, #1
 810490c:	d056      	beq.n	81049bc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810490e:	e099      	b.n	8104a44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104910:	4b88      	ldr	r3, [pc, #544]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104912:	681b      	ldr	r3, [r3, #0]
 8104914:	f003 0320 	and.w	r3, r3, #32
 8104918:	2b00      	cmp	r3, #0
 810491a:	d02d      	beq.n	8104978 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810491c:	4b85      	ldr	r3, [pc, #532]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810491e:	681b      	ldr	r3, [r3, #0]
 8104920:	08db      	lsrs	r3, r3, #3
 8104922:	f003 0303 	and.w	r3, r3, #3
 8104926:	4a84      	ldr	r2, [pc, #528]	; (8104b38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104928:	fa22 f303 	lsr.w	r3, r2, r3
 810492c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810492e:	68bb      	ldr	r3, [r7, #8]
 8104930:	ee07 3a90 	vmov	s15, r3
 8104934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104938:	697b      	ldr	r3, [r7, #20]
 810493a:	ee07 3a90 	vmov	s15, r3
 810493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104946:	4b7b      	ldr	r3, [pc, #492]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810494a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810494e:	ee07 3a90 	vmov	s15, r3
 8104952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104956:	ed97 6a03 	vldr	s12, [r7, #12]
 810495a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104b3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810495e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810496a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810496e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104972:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104976:	e087      	b.n	8104a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104978:	697b      	ldr	r3, [r7, #20]
 810497a:	ee07 3a90 	vmov	s15, r3
 810497e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104982:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104b40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810498a:	4b6a      	ldr	r3, [pc, #424]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810498e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104992:	ee07 3a90 	vmov	s15, r3
 8104996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810499a:	ed97 6a03 	vldr	s12, [r7, #12]
 810499e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104b3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81049a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81049ba:	e065      	b.n	8104a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81049bc:	697b      	ldr	r3, [r7, #20]
 81049be:	ee07 3a90 	vmov	s15, r3
 81049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104b44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81049ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049ce:	4b59      	ldr	r3, [pc, #356]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81049d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049d6:	ee07 3a90 	vmov	s15, r3
 81049da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049de:	ed97 6a03 	vldr	s12, [r7, #12]
 81049e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104b3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81049e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81049fe:	e043      	b.n	8104a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104a00:	697b      	ldr	r3, [r7, #20]
 8104a02:	ee07 3a90 	vmov	s15, r3
 8104a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104b48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a12:	4b48      	ldr	r3, [pc, #288]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a1a:	ee07 3a90 	vmov	s15, r3
 8104a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104b3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a42:	e021      	b.n	8104a88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104a44:	697b      	ldr	r3, [r7, #20]
 8104a46:	ee07 3a90 	vmov	s15, r3
 8104a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104b44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a56:	4b37      	ldr	r3, [pc, #220]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a5e:	ee07 3a90 	vmov	s15, r3
 8104a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104b3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8104a88:	4b2a      	ldr	r3, [pc, #168]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104a8c:	0a5b      	lsrs	r3, r3, #9
 8104a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104a92:	ee07 3a90 	vmov	s15, r3
 8104a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8104aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104aae:	ee17 2a90 	vmov	r2, s15
 8104ab2:	687b      	ldr	r3, [r7, #4]
 8104ab4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8104ab6:	4b1f      	ldr	r3, [pc, #124]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104aba:	0c1b      	lsrs	r3, r3, #16
 8104abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ac0:	ee07 3a90 	vmov	s15, r3
 8104ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104acc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8104ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104adc:	ee17 2a90 	vmov	r2, s15
 8104ae0:	687b      	ldr	r3, [r7, #4]
 8104ae2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104ae4:	4b13      	ldr	r3, [pc, #76]	; (8104b34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104ae8:	0e1b      	lsrs	r3, r3, #24
 8104aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104aee:	ee07 3a90 	vmov	s15, r3
 8104af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8104b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b0a:	ee17 2a90 	vmov	r2, s15
 8104b0e:	687b      	ldr	r3, [r7, #4]
 8104b10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104b12:	e008      	b.n	8104b26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104b14:	687b      	ldr	r3, [r7, #4]
 8104b16:	2200      	movs	r2, #0
 8104b18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104b1a:	687b      	ldr	r3, [r7, #4]
 8104b1c:	2200      	movs	r2, #0
 8104b1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104b20:	687b      	ldr	r3, [r7, #4]
 8104b22:	2200      	movs	r2, #0
 8104b24:	609a      	str	r2, [r3, #8]
}
 8104b26:	bf00      	nop
 8104b28:	3724      	adds	r7, #36	; 0x24
 8104b2a:	46bd      	mov	sp, r7
 8104b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b30:	4770      	bx	lr
 8104b32:	bf00      	nop
 8104b34:	58024400 	.word	0x58024400
 8104b38:	03d09000 	.word	0x03d09000
 8104b3c:	46000000 	.word	0x46000000
 8104b40:	4c742400 	.word	0x4c742400
 8104b44:	4a742400 	.word	0x4a742400
 8104b48:	4af42400 	.word	0x4af42400

08104b4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104b4c:	b580      	push	{r7, lr}
 8104b4e:	b084      	sub	sp, #16
 8104b50:	af00      	add	r7, sp, #0
 8104b52:	6078      	str	r0, [r7, #4]
 8104b54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104b56:	2300      	movs	r3, #0
 8104b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104b5a:	4b54      	ldr	r3, [pc, #336]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b5e:	f003 0303 	and.w	r3, r3, #3
 8104b62:	2b03      	cmp	r3, #3
 8104b64:	d101      	bne.n	8104b6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104b66:	2301      	movs	r3, #1
 8104b68:	e09b      	b.n	8104ca2 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104b6a:	4b50      	ldr	r3, [pc, #320]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	4a4f      	ldr	r2, [pc, #316]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104b70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104b76:	f7fd f951 	bl	8101e1c <HAL_GetTick>
 8104b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104b7c:	e008      	b.n	8104b90 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104b7e:	f7fd f94d 	bl	8101e1c <HAL_GetTick>
 8104b82:	4602      	mov	r2, r0
 8104b84:	68bb      	ldr	r3, [r7, #8]
 8104b86:	1ad3      	subs	r3, r2, r3
 8104b88:	2b02      	cmp	r3, #2
 8104b8a:	d901      	bls.n	8104b90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104b8c:	2303      	movs	r3, #3
 8104b8e:	e088      	b.n	8104ca2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104b90:	4b46      	ldr	r3, [pc, #280]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104b98:	2b00      	cmp	r3, #0
 8104b9a:	d1f0      	bne.n	8104b7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104b9c:	4b43      	ldr	r3, [pc, #268]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104ba0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104ba4:	687b      	ldr	r3, [r7, #4]
 8104ba6:	681b      	ldr	r3, [r3, #0]
 8104ba8:	031b      	lsls	r3, r3, #12
 8104baa:	4940      	ldr	r1, [pc, #256]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104bac:	4313      	orrs	r3, r2
 8104bae:	628b      	str	r3, [r1, #40]	; 0x28
 8104bb0:	687b      	ldr	r3, [r7, #4]
 8104bb2:	685b      	ldr	r3, [r3, #4]
 8104bb4:	3b01      	subs	r3, #1
 8104bb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104bba:	687b      	ldr	r3, [r7, #4]
 8104bbc:	689b      	ldr	r3, [r3, #8]
 8104bbe:	3b01      	subs	r3, #1
 8104bc0:	025b      	lsls	r3, r3, #9
 8104bc2:	b29b      	uxth	r3, r3
 8104bc4:	431a      	orrs	r2, r3
 8104bc6:	687b      	ldr	r3, [r7, #4]
 8104bc8:	68db      	ldr	r3, [r3, #12]
 8104bca:	3b01      	subs	r3, #1
 8104bcc:	041b      	lsls	r3, r3, #16
 8104bce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104bd2:	431a      	orrs	r2, r3
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	691b      	ldr	r3, [r3, #16]
 8104bd8:	3b01      	subs	r3, #1
 8104bda:	061b      	lsls	r3, r3, #24
 8104bdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104be0:	4932      	ldr	r1, [pc, #200]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104be2:	4313      	orrs	r3, r2
 8104be4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104be6:	4b31      	ldr	r3, [pc, #196]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8104bee:	687b      	ldr	r3, [r7, #4]
 8104bf0:	695b      	ldr	r3, [r3, #20]
 8104bf2:	492e      	ldr	r1, [pc, #184]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104bf4:	4313      	orrs	r3, r2
 8104bf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104bf8:	4b2c      	ldr	r3, [pc, #176]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bfc:	f023 0220 	bic.w	r2, r3, #32
 8104c00:	687b      	ldr	r3, [r7, #4]
 8104c02:	699b      	ldr	r3, [r3, #24]
 8104c04:	4929      	ldr	r1, [pc, #164]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c06:	4313      	orrs	r3, r2
 8104c08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104c0a:	4b28      	ldr	r3, [pc, #160]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c0e:	4a27      	ldr	r2, [pc, #156]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c10:	f023 0310 	bic.w	r3, r3, #16
 8104c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104c16:	4b25      	ldr	r3, [pc, #148]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104c1e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104c22:	687a      	ldr	r2, [r7, #4]
 8104c24:	69d2      	ldr	r2, [r2, #28]
 8104c26:	00d2      	lsls	r2, r2, #3
 8104c28:	4920      	ldr	r1, [pc, #128]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c2a:	4313      	orrs	r3, r2
 8104c2c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104c2e:	4b1f      	ldr	r3, [pc, #124]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c32:	4a1e      	ldr	r2, [pc, #120]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c34:	f043 0310 	orr.w	r3, r3, #16
 8104c38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104c3a:	683b      	ldr	r3, [r7, #0]
 8104c3c:	2b00      	cmp	r3, #0
 8104c3e:	d106      	bne.n	8104c4e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104c40:	4b1a      	ldr	r3, [pc, #104]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c44:	4a19      	ldr	r2, [pc, #100]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104c4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104c4c:	e00f      	b.n	8104c6e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104c4e:	683b      	ldr	r3, [r7, #0]
 8104c50:	2b01      	cmp	r3, #1
 8104c52:	d106      	bne.n	8104c62 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104c54:	4b15      	ldr	r3, [pc, #84]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c58:	4a14      	ldr	r2, [pc, #80]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104c5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104c60:	e005      	b.n	8104c6e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104c62:	4b12      	ldr	r3, [pc, #72]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c66:	4a11      	ldr	r2, [pc, #68]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8104c6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104c6e:	4b0f      	ldr	r3, [pc, #60]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c70:	681b      	ldr	r3, [r3, #0]
 8104c72:	4a0e      	ldr	r2, [pc, #56]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104c7a:	f7fd f8cf 	bl	8101e1c <HAL_GetTick>
 8104c7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104c80:	e008      	b.n	8104c94 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104c82:	f7fd f8cb 	bl	8101e1c <HAL_GetTick>
 8104c86:	4602      	mov	r2, r0
 8104c88:	68bb      	ldr	r3, [r7, #8]
 8104c8a:	1ad3      	subs	r3, r2, r3
 8104c8c:	2b02      	cmp	r3, #2
 8104c8e:	d901      	bls.n	8104c94 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104c90:	2303      	movs	r3, #3
 8104c92:	e006      	b.n	8104ca2 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104c94:	4b05      	ldr	r3, [pc, #20]	; (8104cac <RCCEx_PLL2_Config+0x160>)
 8104c96:	681b      	ldr	r3, [r3, #0]
 8104c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104c9c:	2b00      	cmp	r3, #0
 8104c9e:	d0f0      	beq.n	8104c82 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8104ca2:	4618      	mov	r0, r3
 8104ca4:	3710      	adds	r7, #16
 8104ca6:	46bd      	mov	sp, r7
 8104ca8:	bd80      	pop	{r7, pc}
 8104caa:	bf00      	nop
 8104cac:	58024400 	.word	0x58024400

08104cb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104cb0:	b580      	push	{r7, lr}
 8104cb2:	b084      	sub	sp, #16
 8104cb4:	af00      	add	r7, sp, #0
 8104cb6:	6078      	str	r0, [r7, #4]
 8104cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104cba:	2300      	movs	r3, #0
 8104cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104cbe:	4b54      	ldr	r3, [pc, #336]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104cc2:	f003 0303 	and.w	r3, r3, #3
 8104cc6:	2b03      	cmp	r3, #3
 8104cc8:	d101      	bne.n	8104cce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104cca:	2301      	movs	r3, #1
 8104ccc:	e09b      	b.n	8104e06 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104cce:	4b50      	ldr	r3, [pc, #320]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104cd0:	681b      	ldr	r3, [r3, #0]
 8104cd2:	4a4f      	ldr	r2, [pc, #316]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104cda:	f7fd f89f 	bl	8101e1c <HAL_GetTick>
 8104cde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104ce0:	e008      	b.n	8104cf4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104ce2:	f7fd f89b 	bl	8101e1c <HAL_GetTick>
 8104ce6:	4602      	mov	r2, r0
 8104ce8:	68bb      	ldr	r3, [r7, #8]
 8104cea:	1ad3      	subs	r3, r2, r3
 8104cec:	2b02      	cmp	r3, #2
 8104cee:	d901      	bls.n	8104cf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104cf0:	2303      	movs	r3, #3
 8104cf2:	e088      	b.n	8104e06 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104cf4:	4b46      	ldr	r3, [pc, #280]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104cf6:	681b      	ldr	r3, [r3, #0]
 8104cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104cfc:	2b00      	cmp	r3, #0
 8104cfe:	d1f0      	bne.n	8104ce2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104d00:	4b43      	ldr	r3, [pc, #268]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	681b      	ldr	r3, [r3, #0]
 8104d0c:	051b      	lsls	r3, r3, #20
 8104d0e:	4940      	ldr	r1, [pc, #256]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d10:	4313      	orrs	r3, r2
 8104d12:	628b      	str	r3, [r1, #40]	; 0x28
 8104d14:	687b      	ldr	r3, [r7, #4]
 8104d16:	685b      	ldr	r3, [r3, #4]
 8104d18:	3b01      	subs	r3, #1
 8104d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	689b      	ldr	r3, [r3, #8]
 8104d22:	3b01      	subs	r3, #1
 8104d24:	025b      	lsls	r3, r3, #9
 8104d26:	b29b      	uxth	r3, r3
 8104d28:	431a      	orrs	r2, r3
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	68db      	ldr	r3, [r3, #12]
 8104d2e:	3b01      	subs	r3, #1
 8104d30:	041b      	lsls	r3, r3, #16
 8104d32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104d36:	431a      	orrs	r2, r3
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	691b      	ldr	r3, [r3, #16]
 8104d3c:	3b01      	subs	r3, #1
 8104d3e:	061b      	lsls	r3, r3, #24
 8104d40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104d44:	4932      	ldr	r1, [pc, #200]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d46:	4313      	orrs	r3, r2
 8104d48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104d4a:	4b31      	ldr	r3, [pc, #196]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	695b      	ldr	r3, [r3, #20]
 8104d56:	492e      	ldr	r1, [pc, #184]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d58:	4313      	orrs	r3, r2
 8104d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104d5c:	4b2c      	ldr	r3, [pc, #176]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	699b      	ldr	r3, [r3, #24]
 8104d68:	4929      	ldr	r1, [pc, #164]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d6a:	4313      	orrs	r3, r2
 8104d6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104d6e:	4b28      	ldr	r3, [pc, #160]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d72:	4a27      	ldr	r2, [pc, #156]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104d78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104d7a:	4b25      	ldr	r3, [pc, #148]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104d82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104d86:	687a      	ldr	r2, [r7, #4]
 8104d88:	69d2      	ldr	r2, [r2, #28]
 8104d8a:	00d2      	lsls	r2, r2, #3
 8104d8c:	4920      	ldr	r1, [pc, #128]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d8e:	4313      	orrs	r3, r2
 8104d90:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104d92:	4b1f      	ldr	r3, [pc, #124]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d96:	4a1e      	ldr	r2, [pc, #120]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104d9e:	683b      	ldr	r3, [r7, #0]
 8104da0:	2b00      	cmp	r3, #0
 8104da2:	d106      	bne.n	8104db2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104da4:	4b1a      	ldr	r3, [pc, #104]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104da8:	4a19      	ldr	r2, [pc, #100]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104daa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8104dae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104db0:	e00f      	b.n	8104dd2 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104db2:	683b      	ldr	r3, [r7, #0]
 8104db4:	2b01      	cmp	r3, #1
 8104db6:	d106      	bne.n	8104dc6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104db8:	4b15      	ldr	r3, [pc, #84]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104dbc:	4a14      	ldr	r2, [pc, #80]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104dbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8104dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104dc4:	e005      	b.n	8104dd2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104dc6:	4b12      	ldr	r3, [pc, #72]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104dca:	4a11      	ldr	r2, [pc, #68]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104dcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104dd2:	4b0f      	ldr	r3, [pc, #60]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104dd4:	681b      	ldr	r3, [r3, #0]
 8104dd6:	4a0e      	ldr	r2, [pc, #56]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104dde:	f7fd f81d 	bl	8101e1c <HAL_GetTick>
 8104de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104de4:	e008      	b.n	8104df8 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104de6:	f7fd f819 	bl	8101e1c <HAL_GetTick>
 8104dea:	4602      	mov	r2, r0
 8104dec:	68bb      	ldr	r3, [r7, #8]
 8104dee:	1ad3      	subs	r3, r2, r3
 8104df0:	2b02      	cmp	r3, #2
 8104df2:	d901      	bls.n	8104df8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104df4:	2303      	movs	r3, #3
 8104df6:	e006      	b.n	8104e06 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104df8:	4b05      	ldr	r3, [pc, #20]	; (8104e10 <RCCEx_PLL3_Config+0x160>)
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104e00:	2b00      	cmp	r3, #0
 8104e02:	d0f0      	beq.n	8104de6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8104e06:	4618      	mov	r0, r3
 8104e08:	3710      	adds	r7, #16
 8104e0a:	46bd      	mov	sp, r7
 8104e0c:	bd80      	pop	{r7, pc}
 8104e0e:	bf00      	nop
 8104e10:	58024400 	.word	0x58024400

08104e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8104e14:	b580      	push	{r7, lr}
 8104e16:	b082      	sub	sp, #8
 8104e18:	af00      	add	r7, sp, #0
 8104e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8104e1c:	687b      	ldr	r3, [r7, #4]
 8104e1e:	2b00      	cmp	r3, #0
 8104e20:	d101      	bne.n	8104e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8104e22:	2301      	movs	r3, #1
 8104e24:	e042      	b.n	8104eac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104e26:	687b      	ldr	r3, [r7, #4]
 8104e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104e2c:	2b00      	cmp	r3, #0
 8104e2e:	d106      	bne.n	8104e3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	2200      	movs	r2, #0
 8104e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104e38:	6878      	ldr	r0, [r7, #4]
 8104e3a:	f7fc fdc1 	bl	81019c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8104e3e:	687b      	ldr	r3, [r7, #4]
 8104e40:	2224      	movs	r2, #36	; 0x24
 8104e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	681b      	ldr	r3, [r3, #0]
 8104e4a:	681a      	ldr	r2, [r3, #0]
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	f022 0201 	bic.w	r2, r2, #1
 8104e54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8104e56:	6878      	ldr	r0, [r7, #4]
 8104e58:	f000 f8c2 	bl	8104fe0 <UART_SetConfig>
 8104e5c:	4603      	mov	r3, r0
 8104e5e:	2b01      	cmp	r3, #1
 8104e60:	d101      	bne.n	8104e66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8104e62:	2301      	movs	r3, #1
 8104e64:	e022      	b.n	8104eac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e6a:	2b00      	cmp	r3, #0
 8104e6c:	d002      	beq.n	8104e74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8104e6e:	6878      	ldr	r0, [r7, #4]
 8104e70:	f000 fe1e 	bl	8105ab0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8104e74:	687b      	ldr	r3, [r7, #4]
 8104e76:	681b      	ldr	r3, [r3, #0]
 8104e78:	685a      	ldr	r2, [r3, #4]
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	681b      	ldr	r3, [r3, #0]
 8104e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8104e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	681b      	ldr	r3, [r3, #0]
 8104e88:	689a      	ldr	r2, [r3, #8]
 8104e8a:	687b      	ldr	r3, [r7, #4]
 8104e8c:	681b      	ldr	r3, [r3, #0]
 8104e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8104e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	681b      	ldr	r3, [r3, #0]
 8104e98:	681a      	ldr	r2, [r3, #0]
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	f042 0201 	orr.w	r2, r2, #1
 8104ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104ea4:	6878      	ldr	r0, [r7, #4]
 8104ea6:	f000 fea5 	bl	8105bf4 <UART_CheckIdleState>
 8104eaa:	4603      	mov	r3, r0
}
 8104eac:	4618      	mov	r0, r3
 8104eae:	3708      	adds	r7, #8
 8104eb0:	46bd      	mov	sp, r7
 8104eb2:	bd80      	pop	{r7, pc}

08104eb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104eb4:	b580      	push	{r7, lr}
 8104eb6:	b08a      	sub	sp, #40	; 0x28
 8104eb8:	af02      	add	r7, sp, #8
 8104eba:	60f8      	str	r0, [r7, #12]
 8104ebc:	60b9      	str	r1, [r7, #8]
 8104ebe:	603b      	str	r3, [r7, #0]
 8104ec0:	4613      	mov	r3, r2
 8104ec2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8104ec4:	68fb      	ldr	r3, [r7, #12]
 8104ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104eca:	2b20      	cmp	r3, #32
 8104ecc:	f040 8083 	bne.w	8104fd6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8104ed0:	68bb      	ldr	r3, [r7, #8]
 8104ed2:	2b00      	cmp	r3, #0
 8104ed4:	d002      	beq.n	8104edc <HAL_UART_Transmit+0x28>
 8104ed6:	88fb      	ldrh	r3, [r7, #6]
 8104ed8:	2b00      	cmp	r3, #0
 8104eda:	d101      	bne.n	8104ee0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8104edc:	2301      	movs	r3, #1
 8104ede:	e07b      	b.n	8104fd8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8104ee0:	68fb      	ldr	r3, [r7, #12]
 8104ee2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104ee6:	2b01      	cmp	r3, #1
 8104ee8:	d101      	bne.n	8104eee <HAL_UART_Transmit+0x3a>
 8104eea:	2302      	movs	r3, #2
 8104eec:	e074      	b.n	8104fd8 <HAL_UART_Transmit+0x124>
 8104eee:	68fb      	ldr	r3, [r7, #12]
 8104ef0:	2201      	movs	r2, #1
 8104ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104ef6:	68fb      	ldr	r3, [r7, #12]
 8104ef8:	2200      	movs	r2, #0
 8104efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8104efe:	68fb      	ldr	r3, [r7, #12]
 8104f00:	2221      	movs	r2, #33	; 0x21
 8104f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8104f06:	f7fc ff89 	bl	8101e1c <HAL_GetTick>
 8104f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8104f0c:	68fb      	ldr	r3, [r7, #12]
 8104f0e:	88fa      	ldrh	r2, [r7, #6]
 8104f10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8104f14:	68fb      	ldr	r3, [r7, #12]
 8104f16:	88fa      	ldrh	r2, [r7, #6]
 8104f18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8104f1c:	68fb      	ldr	r3, [r7, #12]
 8104f1e:	689b      	ldr	r3, [r3, #8]
 8104f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104f24:	d108      	bne.n	8104f38 <HAL_UART_Transmit+0x84>
 8104f26:	68fb      	ldr	r3, [r7, #12]
 8104f28:	691b      	ldr	r3, [r3, #16]
 8104f2a:	2b00      	cmp	r3, #0
 8104f2c:	d104      	bne.n	8104f38 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8104f2e:	2300      	movs	r3, #0
 8104f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8104f32:	68bb      	ldr	r3, [r7, #8]
 8104f34:	61bb      	str	r3, [r7, #24]
 8104f36:	e003      	b.n	8104f40 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8104f38:	68bb      	ldr	r3, [r7, #8]
 8104f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8104f3c:	2300      	movs	r3, #0
 8104f3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8104f40:	68fb      	ldr	r3, [r7, #12]
 8104f42:	2200      	movs	r2, #0
 8104f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8104f48:	e02c      	b.n	8104fa4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8104f4a:	683b      	ldr	r3, [r7, #0]
 8104f4c:	9300      	str	r3, [sp, #0]
 8104f4e:	697b      	ldr	r3, [r7, #20]
 8104f50:	2200      	movs	r2, #0
 8104f52:	2180      	movs	r1, #128	; 0x80
 8104f54:	68f8      	ldr	r0, [r7, #12]
 8104f56:	f000 fe98 	bl	8105c8a <UART_WaitOnFlagUntilTimeout>
 8104f5a:	4603      	mov	r3, r0
 8104f5c:	2b00      	cmp	r3, #0
 8104f5e:	d001      	beq.n	8104f64 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8104f60:	2303      	movs	r3, #3
 8104f62:	e039      	b.n	8104fd8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8104f64:	69fb      	ldr	r3, [r7, #28]
 8104f66:	2b00      	cmp	r3, #0
 8104f68:	d10b      	bne.n	8104f82 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8104f6a:	69bb      	ldr	r3, [r7, #24]
 8104f6c:	881b      	ldrh	r3, [r3, #0]
 8104f6e:	461a      	mov	r2, r3
 8104f70:	68fb      	ldr	r3, [r7, #12]
 8104f72:	681b      	ldr	r3, [r3, #0]
 8104f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104f78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8104f7a:	69bb      	ldr	r3, [r7, #24]
 8104f7c:	3302      	adds	r3, #2
 8104f7e:	61bb      	str	r3, [r7, #24]
 8104f80:	e007      	b.n	8104f92 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8104f82:	69fb      	ldr	r3, [r7, #28]
 8104f84:	781a      	ldrb	r2, [r3, #0]
 8104f86:	68fb      	ldr	r3, [r7, #12]
 8104f88:	681b      	ldr	r3, [r3, #0]
 8104f8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8104f8c:	69fb      	ldr	r3, [r7, #28]
 8104f8e:	3301      	adds	r3, #1
 8104f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8104f92:	68fb      	ldr	r3, [r7, #12]
 8104f94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104f98:	b29b      	uxth	r3, r3
 8104f9a:	3b01      	subs	r3, #1
 8104f9c:	b29a      	uxth	r2, r3
 8104f9e:	68fb      	ldr	r3, [r7, #12]
 8104fa0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8104fa4:	68fb      	ldr	r3, [r7, #12]
 8104fa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104faa:	b29b      	uxth	r3, r3
 8104fac:	2b00      	cmp	r3, #0
 8104fae:	d1cc      	bne.n	8104f4a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8104fb0:	683b      	ldr	r3, [r7, #0]
 8104fb2:	9300      	str	r3, [sp, #0]
 8104fb4:	697b      	ldr	r3, [r7, #20]
 8104fb6:	2200      	movs	r2, #0
 8104fb8:	2140      	movs	r1, #64	; 0x40
 8104fba:	68f8      	ldr	r0, [r7, #12]
 8104fbc:	f000 fe65 	bl	8105c8a <UART_WaitOnFlagUntilTimeout>
 8104fc0:	4603      	mov	r3, r0
 8104fc2:	2b00      	cmp	r3, #0
 8104fc4:	d001      	beq.n	8104fca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8104fc6:	2303      	movs	r3, #3
 8104fc8:	e006      	b.n	8104fd8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8104fca:	68fb      	ldr	r3, [r7, #12]
 8104fcc:	2220      	movs	r2, #32
 8104fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8104fd2:	2300      	movs	r3, #0
 8104fd4:	e000      	b.n	8104fd8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8104fd6:	2302      	movs	r3, #2
  }
}
 8104fd8:	4618      	mov	r0, r3
 8104fda:	3720      	adds	r7, #32
 8104fdc:	46bd      	mov	sp, r7
 8104fde:	bd80      	pop	{r7, pc}

08104fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8104fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104fe4:	b092      	sub	sp, #72	; 0x48
 8104fe6:	af00      	add	r7, sp, #0
 8104fe8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104fea:	2300      	movs	r3, #0
 8104fec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8104ff0:	697b      	ldr	r3, [r7, #20]
 8104ff2:	689a      	ldr	r2, [r3, #8]
 8104ff4:	697b      	ldr	r3, [r7, #20]
 8104ff6:	691b      	ldr	r3, [r3, #16]
 8104ff8:	431a      	orrs	r2, r3
 8104ffa:	697b      	ldr	r3, [r7, #20]
 8104ffc:	695b      	ldr	r3, [r3, #20]
 8104ffe:	431a      	orrs	r2, r3
 8105000:	697b      	ldr	r3, [r7, #20]
 8105002:	69db      	ldr	r3, [r3, #28]
 8105004:	4313      	orrs	r3, r2
 8105006:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8105008:	697b      	ldr	r3, [r7, #20]
 810500a:	681b      	ldr	r3, [r3, #0]
 810500c:	681a      	ldr	r2, [r3, #0]
 810500e:	4bbd      	ldr	r3, [pc, #756]	; (8105304 <UART_SetConfig+0x324>)
 8105010:	4013      	ands	r3, r2
 8105012:	697a      	ldr	r2, [r7, #20]
 8105014:	6812      	ldr	r2, [r2, #0]
 8105016:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105018:	430b      	orrs	r3, r1
 810501a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810501c:	697b      	ldr	r3, [r7, #20]
 810501e:	681b      	ldr	r3, [r3, #0]
 8105020:	685b      	ldr	r3, [r3, #4]
 8105022:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8105026:	697b      	ldr	r3, [r7, #20]
 8105028:	68da      	ldr	r2, [r3, #12]
 810502a:	697b      	ldr	r3, [r7, #20]
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	430a      	orrs	r2, r1
 8105030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8105032:	697b      	ldr	r3, [r7, #20]
 8105034:	699b      	ldr	r3, [r3, #24]
 8105036:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8105038:	697b      	ldr	r3, [r7, #20]
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	4ab2      	ldr	r2, [pc, #712]	; (8105308 <UART_SetConfig+0x328>)
 810503e:	4293      	cmp	r3, r2
 8105040:	d004      	beq.n	810504c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105042:	697b      	ldr	r3, [r7, #20]
 8105044:	6a1b      	ldr	r3, [r3, #32]
 8105046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8105048:	4313      	orrs	r3, r2
 810504a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810504c:	697b      	ldr	r3, [r7, #20]
 810504e:	681b      	ldr	r3, [r3, #0]
 8105050:	689b      	ldr	r3, [r3, #8]
 8105052:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8105056:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810505a:	697a      	ldr	r2, [r7, #20]
 810505c:	6812      	ldr	r2, [r2, #0]
 810505e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105060:	430b      	orrs	r3, r1
 8105062:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8105064:	697b      	ldr	r3, [r7, #20]
 8105066:	681b      	ldr	r3, [r3, #0]
 8105068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810506a:	f023 010f 	bic.w	r1, r3, #15
 810506e:	697b      	ldr	r3, [r7, #20]
 8105070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105072:	697b      	ldr	r3, [r7, #20]
 8105074:	681b      	ldr	r3, [r3, #0]
 8105076:	430a      	orrs	r2, r1
 8105078:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810507a:	697b      	ldr	r3, [r7, #20]
 810507c:	681b      	ldr	r3, [r3, #0]
 810507e:	4aa3      	ldr	r2, [pc, #652]	; (810530c <UART_SetConfig+0x32c>)
 8105080:	4293      	cmp	r3, r2
 8105082:	d177      	bne.n	8105174 <UART_SetConfig+0x194>
 8105084:	4ba2      	ldr	r3, [pc, #648]	; (8105310 <UART_SetConfig+0x330>)
 8105086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810508c:	2b28      	cmp	r3, #40	; 0x28
 810508e:	d86d      	bhi.n	810516c <UART_SetConfig+0x18c>
 8105090:	a201      	add	r2, pc, #4	; (adr r2, 8105098 <UART_SetConfig+0xb8>)
 8105092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105096:	bf00      	nop
 8105098:	0810513d 	.word	0x0810513d
 810509c:	0810516d 	.word	0x0810516d
 81050a0:	0810516d 	.word	0x0810516d
 81050a4:	0810516d 	.word	0x0810516d
 81050a8:	0810516d 	.word	0x0810516d
 81050ac:	0810516d 	.word	0x0810516d
 81050b0:	0810516d 	.word	0x0810516d
 81050b4:	0810516d 	.word	0x0810516d
 81050b8:	08105145 	.word	0x08105145
 81050bc:	0810516d 	.word	0x0810516d
 81050c0:	0810516d 	.word	0x0810516d
 81050c4:	0810516d 	.word	0x0810516d
 81050c8:	0810516d 	.word	0x0810516d
 81050cc:	0810516d 	.word	0x0810516d
 81050d0:	0810516d 	.word	0x0810516d
 81050d4:	0810516d 	.word	0x0810516d
 81050d8:	0810514d 	.word	0x0810514d
 81050dc:	0810516d 	.word	0x0810516d
 81050e0:	0810516d 	.word	0x0810516d
 81050e4:	0810516d 	.word	0x0810516d
 81050e8:	0810516d 	.word	0x0810516d
 81050ec:	0810516d 	.word	0x0810516d
 81050f0:	0810516d 	.word	0x0810516d
 81050f4:	0810516d 	.word	0x0810516d
 81050f8:	08105155 	.word	0x08105155
 81050fc:	0810516d 	.word	0x0810516d
 8105100:	0810516d 	.word	0x0810516d
 8105104:	0810516d 	.word	0x0810516d
 8105108:	0810516d 	.word	0x0810516d
 810510c:	0810516d 	.word	0x0810516d
 8105110:	0810516d 	.word	0x0810516d
 8105114:	0810516d 	.word	0x0810516d
 8105118:	0810515d 	.word	0x0810515d
 810511c:	0810516d 	.word	0x0810516d
 8105120:	0810516d 	.word	0x0810516d
 8105124:	0810516d 	.word	0x0810516d
 8105128:	0810516d 	.word	0x0810516d
 810512c:	0810516d 	.word	0x0810516d
 8105130:	0810516d 	.word	0x0810516d
 8105134:	0810516d 	.word	0x0810516d
 8105138:	08105165 	.word	0x08105165
 810513c:	2301      	movs	r3, #1
 810513e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105142:	e220      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105144:	2304      	movs	r3, #4
 8105146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810514a:	e21c      	b.n	8105586 <UART_SetConfig+0x5a6>
 810514c:	2308      	movs	r3, #8
 810514e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105152:	e218      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105154:	2310      	movs	r3, #16
 8105156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810515a:	e214      	b.n	8105586 <UART_SetConfig+0x5a6>
 810515c:	2320      	movs	r3, #32
 810515e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105162:	e210      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105164:	2340      	movs	r3, #64	; 0x40
 8105166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810516a:	e20c      	b.n	8105586 <UART_SetConfig+0x5a6>
 810516c:	2380      	movs	r3, #128	; 0x80
 810516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105172:	e208      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105174:	697b      	ldr	r3, [r7, #20]
 8105176:	681b      	ldr	r3, [r3, #0]
 8105178:	4a66      	ldr	r2, [pc, #408]	; (8105314 <UART_SetConfig+0x334>)
 810517a:	4293      	cmp	r3, r2
 810517c:	d130      	bne.n	81051e0 <UART_SetConfig+0x200>
 810517e:	4b64      	ldr	r3, [pc, #400]	; (8105310 <UART_SetConfig+0x330>)
 8105180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105182:	f003 0307 	and.w	r3, r3, #7
 8105186:	2b05      	cmp	r3, #5
 8105188:	d826      	bhi.n	81051d8 <UART_SetConfig+0x1f8>
 810518a:	a201      	add	r2, pc, #4	; (adr r2, 8105190 <UART_SetConfig+0x1b0>)
 810518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105190:	081051a9 	.word	0x081051a9
 8105194:	081051b1 	.word	0x081051b1
 8105198:	081051b9 	.word	0x081051b9
 810519c:	081051c1 	.word	0x081051c1
 81051a0:	081051c9 	.word	0x081051c9
 81051a4:	081051d1 	.word	0x081051d1
 81051a8:	2300      	movs	r3, #0
 81051aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81051ae:	e1ea      	b.n	8105586 <UART_SetConfig+0x5a6>
 81051b0:	2304      	movs	r3, #4
 81051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81051b6:	e1e6      	b.n	8105586 <UART_SetConfig+0x5a6>
 81051b8:	2308      	movs	r3, #8
 81051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81051be:	e1e2      	b.n	8105586 <UART_SetConfig+0x5a6>
 81051c0:	2310      	movs	r3, #16
 81051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81051c6:	e1de      	b.n	8105586 <UART_SetConfig+0x5a6>
 81051c8:	2320      	movs	r3, #32
 81051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81051ce:	e1da      	b.n	8105586 <UART_SetConfig+0x5a6>
 81051d0:	2340      	movs	r3, #64	; 0x40
 81051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81051d6:	e1d6      	b.n	8105586 <UART_SetConfig+0x5a6>
 81051d8:	2380      	movs	r3, #128	; 0x80
 81051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81051de:	e1d2      	b.n	8105586 <UART_SetConfig+0x5a6>
 81051e0:	697b      	ldr	r3, [r7, #20]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	4a4c      	ldr	r2, [pc, #304]	; (8105318 <UART_SetConfig+0x338>)
 81051e6:	4293      	cmp	r3, r2
 81051e8:	d130      	bne.n	810524c <UART_SetConfig+0x26c>
 81051ea:	4b49      	ldr	r3, [pc, #292]	; (8105310 <UART_SetConfig+0x330>)
 81051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81051ee:	f003 0307 	and.w	r3, r3, #7
 81051f2:	2b05      	cmp	r3, #5
 81051f4:	d826      	bhi.n	8105244 <UART_SetConfig+0x264>
 81051f6:	a201      	add	r2, pc, #4	; (adr r2, 81051fc <UART_SetConfig+0x21c>)
 81051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81051fc:	08105215 	.word	0x08105215
 8105200:	0810521d 	.word	0x0810521d
 8105204:	08105225 	.word	0x08105225
 8105208:	0810522d 	.word	0x0810522d
 810520c:	08105235 	.word	0x08105235
 8105210:	0810523d 	.word	0x0810523d
 8105214:	2300      	movs	r3, #0
 8105216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810521a:	e1b4      	b.n	8105586 <UART_SetConfig+0x5a6>
 810521c:	2304      	movs	r3, #4
 810521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105222:	e1b0      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105224:	2308      	movs	r3, #8
 8105226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810522a:	e1ac      	b.n	8105586 <UART_SetConfig+0x5a6>
 810522c:	2310      	movs	r3, #16
 810522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105232:	e1a8      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105234:	2320      	movs	r3, #32
 8105236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810523a:	e1a4      	b.n	8105586 <UART_SetConfig+0x5a6>
 810523c:	2340      	movs	r3, #64	; 0x40
 810523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105242:	e1a0      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105244:	2380      	movs	r3, #128	; 0x80
 8105246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810524a:	e19c      	b.n	8105586 <UART_SetConfig+0x5a6>
 810524c:	697b      	ldr	r3, [r7, #20]
 810524e:	681b      	ldr	r3, [r3, #0]
 8105250:	4a32      	ldr	r2, [pc, #200]	; (810531c <UART_SetConfig+0x33c>)
 8105252:	4293      	cmp	r3, r2
 8105254:	d130      	bne.n	81052b8 <UART_SetConfig+0x2d8>
 8105256:	4b2e      	ldr	r3, [pc, #184]	; (8105310 <UART_SetConfig+0x330>)
 8105258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810525a:	f003 0307 	and.w	r3, r3, #7
 810525e:	2b05      	cmp	r3, #5
 8105260:	d826      	bhi.n	81052b0 <UART_SetConfig+0x2d0>
 8105262:	a201      	add	r2, pc, #4	; (adr r2, 8105268 <UART_SetConfig+0x288>)
 8105264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105268:	08105281 	.word	0x08105281
 810526c:	08105289 	.word	0x08105289
 8105270:	08105291 	.word	0x08105291
 8105274:	08105299 	.word	0x08105299
 8105278:	081052a1 	.word	0x081052a1
 810527c:	081052a9 	.word	0x081052a9
 8105280:	2300      	movs	r3, #0
 8105282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105286:	e17e      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105288:	2304      	movs	r3, #4
 810528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810528e:	e17a      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105290:	2308      	movs	r3, #8
 8105292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105296:	e176      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105298:	2310      	movs	r3, #16
 810529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810529e:	e172      	b.n	8105586 <UART_SetConfig+0x5a6>
 81052a0:	2320      	movs	r3, #32
 81052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81052a6:	e16e      	b.n	8105586 <UART_SetConfig+0x5a6>
 81052a8:	2340      	movs	r3, #64	; 0x40
 81052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81052ae:	e16a      	b.n	8105586 <UART_SetConfig+0x5a6>
 81052b0:	2380      	movs	r3, #128	; 0x80
 81052b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81052b6:	e166      	b.n	8105586 <UART_SetConfig+0x5a6>
 81052b8:	697b      	ldr	r3, [r7, #20]
 81052ba:	681b      	ldr	r3, [r3, #0]
 81052bc:	4a18      	ldr	r2, [pc, #96]	; (8105320 <UART_SetConfig+0x340>)
 81052be:	4293      	cmp	r3, r2
 81052c0:	d140      	bne.n	8105344 <UART_SetConfig+0x364>
 81052c2:	4b13      	ldr	r3, [pc, #76]	; (8105310 <UART_SetConfig+0x330>)
 81052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81052c6:	f003 0307 	and.w	r3, r3, #7
 81052ca:	2b05      	cmp	r3, #5
 81052cc:	d836      	bhi.n	810533c <UART_SetConfig+0x35c>
 81052ce:	a201      	add	r2, pc, #4	; (adr r2, 81052d4 <UART_SetConfig+0x2f4>)
 81052d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81052d4:	081052ed 	.word	0x081052ed
 81052d8:	081052f5 	.word	0x081052f5
 81052dc:	081052fd 	.word	0x081052fd
 81052e0:	08105325 	.word	0x08105325
 81052e4:	0810532d 	.word	0x0810532d
 81052e8:	08105335 	.word	0x08105335
 81052ec:	2300      	movs	r3, #0
 81052ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81052f2:	e148      	b.n	8105586 <UART_SetConfig+0x5a6>
 81052f4:	2304      	movs	r3, #4
 81052f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81052fa:	e144      	b.n	8105586 <UART_SetConfig+0x5a6>
 81052fc:	2308      	movs	r3, #8
 81052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105302:	e140      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105304:	cfff69f3 	.word	0xcfff69f3
 8105308:	58000c00 	.word	0x58000c00
 810530c:	40011000 	.word	0x40011000
 8105310:	58024400 	.word	0x58024400
 8105314:	40004400 	.word	0x40004400
 8105318:	40004800 	.word	0x40004800
 810531c:	40004c00 	.word	0x40004c00
 8105320:	40005000 	.word	0x40005000
 8105324:	2310      	movs	r3, #16
 8105326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810532a:	e12c      	b.n	8105586 <UART_SetConfig+0x5a6>
 810532c:	2320      	movs	r3, #32
 810532e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105332:	e128      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105334:	2340      	movs	r3, #64	; 0x40
 8105336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810533a:	e124      	b.n	8105586 <UART_SetConfig+0x5a6>
 810533c:	2380      	movs	r3, #128	; 0x80
 810533e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105342:	e120      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105344:	697b      	ldr	r3, [r7, #20]
 8105346:	681b      	ldr	r3, [r3, #0]
 8105348:	4acb      	ldr	r2, [pc, #812]	; (8105678 <UART_SetConfig+0x698>)
 810534a:	4293      	cmp	r3, r2
 810534c:	d176      	bne.n	810543c <UART_SetConfig+0x45c>
 810534e:	4bcb      	ldr	r3, [pc, #812]	; (810567c <UART_SetConfig+0x69c>)
 8105350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105356:	2b28      	cmp	r3, #40	; 0x28
 8105358:	d86c      	bhi.n	8105434 <UART_SetConfig+0x454>
 810535a:	a201      	add	r2, pc, #4	; (adr r2, 8105360 <UART_SetConfig+0x380>)
 810535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105360:	08105405 	.word	0x08105405
 8105364:	08105435 	.word	0x08105435
 8105368:	08105435 	.word	0x08105435
 810536c:	08105435 	.word	0x08105435
 8105370:	08105435 	.word	0x08105435
 8105374:	08105435 	.word	0x08105435
 8105378:	08105435 	.word	0x08105435
 810537c:	08105435 	.word	0x08105435
 8105380:	0810540d 	.word	0x0810540d
 8105384:	08105435 	.word	0x08105435
 8105388:	08105435 	.word	0x08105435
 810538c:	08105435 	.word	0x08105435
 8105390:	08105435 	.word	0x08105435
 8105394:	08105435 	.word	0x08105435
 8105398:	08105435 	.word	0x08105435
 810539c:	08105435 	.word	0x08105435
 81053a0:	08105415 	.word	0x08105415
 81053a4:	08105435 	.word	0x08105435
 81053a8:	08105435 	.word	0x08105435
 81053ac:	08105435 	.word	0x08105435
 81053b0:	08105435 	.word	0x08105435
 81053b4:	08105435 	.word	0x08105435
 81053b8:	08105435 	.word	0x08105435
 81053bc:	08105435 	.word	0x08105435
 81053c0:	0810541d 	.word	0x0810541d
 81053c4:	08105435 	.word	0x08105435
 81053c8:	08105435 	.word	0x08105435
 81053cc:	08105435 	.word	0x08105435
 81053d0:	08105435 	.word	0x08105435
 81053d4:	08105435 	.word	0x08105435
 81053d8:	08105435 	.word	0x08105435
 81053dc:	08105435 	.word	0x08105435
 81053e0:	08105425 	.word	0x08105425
 81053e4:	08105435 	.word	0x08105435
 81053e8:	08105435 	.word	0x08105435
 81053ec:	08105435 	.word	0x08105435
 81053f0:	08105435 	.word	0x08105435
 81053f4:	08105435 	.word	0x08105435
 81053f8:	08105435 	.word	0x08105435
 81053fc:	08105435 	.word	0x08105435
 8105400:	0810542d 	.word	0x0810542d
 8105404:	2301      	movs	r3, #1
 8105406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810540a:	e0bc      	b.n	8105586 <UART_SetConfig+0x5a6>
 810540c:	2304      	movs	r3, #4
 810540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105412:	e0b8      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105414:	2308      	movs	r3, #8
 8105416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810541a:	e0b4      	b.n	8105586 <UART_SetConfig+0x5a6>
 810541c:	2310      	movs	r3, #16
 810541e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105422:	e0b0      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105424:	2320      	movs	r3, #32
 8105426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810542a:	e0ac      	b.n	8105586 <UART_SetConfig+0x5a6>
 810542c:	2340      	movs	r3, #64	; 0x40
 810542e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105432:	e0a8      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105434:	2380      	movs	r3, #128	; 0x80
 8105436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810543a:	e0a4      	b.n	8105586 <UART_SetConfig+0x5a6>
 810543c:	697b      	ldr	r3, [r7, #20]
 810543e:	681b      	ldr	r3, [r3, #0]
 8105440:	4a8f      	ldr	r2, [pc, #572]	; (8105680 <UART_SetConfig+0x6a0>)
 8105442:	4293      	cmp	r3, r2
 8105444:	d130      	bne.n	81054a8 <UART_SetConfig+0x4c8>
 8105446:	4b8d      	ldr	r3, [pc, #564]	; (810567c <UART_SetConfig+0x69c>)
 8105448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810544a:	f003 0307 	and.w	r3, r3, #7
 810544e:	2b05      	cmp	r3, #5
 8105450:	d826      	bhi.n	81054a0 <UART_SetConfig+0x4c0>
 8105452:	a201      	add	r2, pc, #4	; (adr r2, 8105458 <UART_SetConfig+0x478>)
 8105454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105458:	08105471 	.word	0x08105471
 810545c:	08105479 	.word	0x08105479
 8105460:	08105481 	.word	0x08105481
 8105464:	08105489 	.word	0x08105489
 8105468:	08105491 	.word	0x08105491
 810546c:	08105499 	.word	0x08105499
 8105470:	2300      	movs	r3, #0
 8105472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105476:	e086      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105478:	2304      	movs	r3, #4
 810547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810547e:	e082      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105480:	2308      	movs	r3, #8
 8105482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105486:	e07e      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105488:	2310      	movs	r3, #16
 810548a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810548e:	e07a      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105490:	2320      	movs	r3, #32
 8105492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105496:	e076      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105498:	2340      	movs	r3, #64	; 0x40
 810549a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810549e:	e072      	b.n	8105586 <UART_SetConfig+0x5a6>
 81054a0:	2380      	movs	r3, #128	; 0x80
 81054a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81054a6:	e06e      	b.n	8105586 <UART_SetConfig+0x5a6>
 81054a8:	697b      	ldr	r3, [r7, #20]
 81054aa:	681b      	ldr	r3, [r3, #0]
 81054ac:	4a75      	ldr	r2, [pc, #468]	; (8105684 <UART_SetConfig+0x6a4>)
 81054ae:	4293      	cmp	r3, r2
 81054b0:	d130      	bne.n	8105514 <UART_SetConfig+0x534>
 81054b2:	4b72      	ldr	r3, [pc, #456]	; (810567c <UART_SetConfig+0x69c>)
 81054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81054b6:	f003 0307 	and.w	r3, r3, #7
 81054ba:	2b05      	cmp	r3, #5
 81054bc:	d826      	bhi.n	810550c <UART_SetConfig+0x52c>
 81054be:	a201      	add	r2, pc, #4	; (adr r2, 81054c4 <UART_SetConfig+0x4e4>)
 81054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054c4:	081054dd 	.word	0x081054dd
 81054c8:	081054e5 	.word	0x081054e5
 81054cc:	081054ed 	.word	0x081054ed
 81054d0:	081054f5 	.word	0x081054f5
 81054d4:	081054fd 	.word	0x081054fd
 81054d8:	08105505 	.word	0x08105505
 81054dc:	2300      	movs	r3, #0
 81054de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81054e2:	e050      	b.n	8105586 <UART_SetConfig+0x5a6>
 81054e4:	2304      	movs	r3, #4
 81054e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81054ea:	e04c      	b.n	8105586 <UART_SetConfig+0x5a6>
 81054ec:	2308      	movs	r3, #8
 81054ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81054f2:	e048      	b.n	8105586 <UART_SetConfig+0x5a6>
 81054f4:	2310      	movs	r3, #16
 81054f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81054fa:	e044      	b.n	8105586 <UART_SetConfig+0x5a6>
 81054fc:	2320      	movs	r3, #32
 81054fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105502:	e040      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105504:	2340      	movs	r3, #64	; 0x40
 8105506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810550a:	e03c      	b.n	8105586 <UART_SetConfig+0x5a6>
 810550c:	2380      	movs	r3, #128	; 0x80
 810550e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105512:	e038      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105514:	697b      	ldr	r3, [r7, #20]
 8105516:	681b      	ldr	r3, [r3, #0]
 8105518:	4a5b      	ldr	r2, [pc, #364]	; (8105688 <UART_SetConfig+0x6a8>)
 810551a:	4293      	cmp	r3, r2
 810551c:	d130      	bne.n	8105580 <UART_SetConfig+0x5a0>
 810551e:	4b57      	ldr	r3, [pc, #348]	; (810567c <UART_SetConfig+0x69c>)
 8105520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105522:	f003 0307 	and.w	r3, r3, #7
 8105526:	2b05      	cmp	r3, #5
 8105528:	d826      	bhi.n	8105578 <UART_SetConfig+0x598>
 810552a:	a201      	add	r2, pc, #4	; (adr r2, 8105530 <UART_SetConfig+0x550>)
 810552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105530:	08105549 	.word	0x08105549
 8105534:	08105551 	.word	0x08105551
 8105538:	08105559 	.word	0x08105559
 810553c:	08105561 	.word	0x08105561
 8105540:	08105569 	.word	0x08105569
 8105544:	08105571 	.word	0x08105571
 8105548:	2302      	movs	r3, #2
 810554a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810554e:	e01a      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105550:	2304      	movs	r3, #4
 8105552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105556:	e016      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105558:	2308      	movs	r3, #8
 810555a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810555e:	e012      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105560:	2310      	movs	r3, #16
 8105562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105566:	e00e      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105568:	2320      	movs	r3, #32
 810556a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810556e:	e00a      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105570:	2340      	movs	r3, #64	; 0x40
 8105572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105576:	e006      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105578:	2380      	movs	r3, #128	; 0x80
 810557a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810557e:	e002      	b.n	8105586 <UART_SetConfig+0x5a6>
 8105580:	2380      	movs	r3, #128	; 0x80
 8105582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8105586:	697b      	ldr	r3, [r7, #20]
 8105588:	681b      	ldr	r3, [r3, #0]
 810558a:	4a3f      	ldr	r2, [pc, #252]	; (8105688 <UART_SetConfig+0x6a8>)
 810558c:	4293      	cmp	r3, r2
 810558e:	f040 80f8 	bne.w	8105782 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105592:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105596:	2b20      	cmp	r3, #32
 8105598:	dc46      	bgt.n	8105628 <UART_SetConfig+0x648>
 810559a:	2b02      	cmp	r3, #2
 810559c:	f2c0 8082 	blt.w	81056a4 <UART_SetConfig+0x6c4>
 81055a0:	3b02      	subs	r3, #2
 81055a2:	2b1e      	cmp	r3, #30
 81055a4:	d87e      	bhi.n	81056a4 <UART_SetConfig+0x6c4>
 81055a6:	a201      	add	r2, pc, #4	; (adr r2, 81055ac <UART_SetConfig+0x5cc>)
 81055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81055ac:	0810562f 	.word	0x0810562f
 81055b0:	081056a5 	.word	0x081056a5
 81055b4:	08105637 	.word	0x08105637
 81055b8:	081056a5 	.word	0x081056a5
 81055bc:	081056a5 	.word	0x081056a5
 81055c0:	081056a5 	.word	0x081056a5
 81055c4:	08105647 	.word	0x08105647
 81055c8:	081056a5 	.word	0x081056a5
 81055cc:	081056a5 	.word	0x081056a5
 81055d0:	081056a5 	.word	0x081056a5
 81055d4:	081056a5 	.word	0x081056a5
 81055d8:	081056a5 	.word	0x081056a5
 81055dc:	081056a5 	.word	0x081056a5
 81055e0:	081056a5 	.word	0x081056a5
 81055e4:	08105657 	.word	0x08105657
 81055e8:	081056a5 	.word	0x081056a5
 81055ec:	081056a5 	.word	0x081056a5
 81055f0:	081056a5 	.word	0x081056a5
 81055f4:	081056a5 	.word	0x081056a5
 81055f8:	081056a5 	.word	0x081056a5
 81055fc:	081056a5 	.word	0x081056a5
 8105600:	081056a5 	.word	0x081056a5
 8105604:	081056a5 	.word	0x081056a5
 8105608:	081056a5 	.word	0x081056a5
 810560c:	081056a5 	.word	0x081056a5
 8105610:	081056a5 	.word	0x081056a5
 8105614:	081056a5 	.word	0x081056a5
 8105618:	081056a5 	.word	0x081056a5
 810561c:	081056a5 	.word	0x081056a5
 8105620:	081056a5 	.word	0x081056a5
 8105624:	08105697 	.word	0x08105697
 8105628:	2b40      	cmp	r3, #64	; 0x40
 810562a:	d037      	beq.n	810569c <UART_SetConfig+0x6bc>
 810562c:	e03a      	b.n	81056a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810562e:	f7fe ffcf 	bl	81045d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8105632:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105634:	e03c      	b.n	81056b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810563a:	4618      	mov	r0, r3
 810563c:	f7fe ffde 	bl	81045fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105644:	e034      	b.n	81056b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105646:	f107 0318 	add.w	r3, r7, #24
 810564a:	4618      	mov	r0, r3
 810564c:	f7ff f92a 	bl	81048a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105650:	69fb      	ldr	r3, [r7, #28]
 8105652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105654:	e02c      	b.n	81056b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105656:	4b09      	ldr	r3, [pc, #36]	; (810567c <UART_SetConfig+0x69c>)
 8105658:	681b      	ldr	r3, [r3, #0]
 810565a:	f003 0320 	and.w	r3, r3, #32
 810565e:	2b00      	cmp	r3, #0
 8105660:	d016      	beq.n	8105690 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105662:	4b06      	ldr	r3, [pc, #24]	; (810567c <UART_SetConfig+0x69c>)
 8105664:	681b      	ldr	r3, [r3, #0]
 8105666:	08db      	lsrs	r3, r3, #3
 8105668:	f003 0303 	and.w	r3, r3, #3
 810566c:	4a07      	ldr	r2, [pc, #28]	; (810568c <UART_SetConfig+0x6ac>)
 810566e:	fa22 f303 	lsr.w	r3, r2, r3
 8105672:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105674:	e01c      	b.n	81056b0 <UART_SetConfig+0x6d0>
 8105676:	bf00      	nop
 8105678:	40011400 	.word	0x40011400
 810567c:	58024400 	.word	0x58024400
 8105680:	40007800 	.word	0x40007800
 8105684:	40007c00 	.word	0x40007c00
 8105688:	58000c00 	.word	0x58000c00
 810568c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8105690:	4b9d      	ldr	r3, [pc, #628]	; (8105908 <UART_SetConfig+0x928>)
 8105692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105694:	e00c      	b.n	81056b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105696:	4b9d      	ldr	r3, [pc, #628]	; (810590c <UART_SetConfig+0x92c>)
 8105698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810569a:	e009      	b.n	81056b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810569c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81056a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81056a2:	e005      	b.n	81056b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81056a4:	2300      	movs	r3, #0
 81056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81056a8:	2301      	movs	r3, #1
 81056aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81056ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81056b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81056b2:	2b00      	cmp	r3, #0
 81056b4:	f000 81de 	beq.w	8105a74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81056b8:	697b      	ldr	r3, [r7, #20]
 81056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81056bc:	4a94      	ldr	r2, [pc, #592]	; (8105910 <UART_SetConfig+0x930>)
 81056be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81056c2:	461a      	mov	r2, r3
 81056c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81056c6:	fbb3 f3f2 	udiv	r3, r3, r2
 81056ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81056cc:	697b      	ldr	r3, [r7, #20]
 81056ce:	685a      	ldr	r2, [r3, #4]
 81056d0:	4613      	mov	r3, r2
 81056d2:	005b      	lsls	r3, r3, #1
 81056d4:	4413      	add	r3, r2
 81056d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81056d8:	429a      	cmp	r2, r3
 81056da:	d305      	bcc.n	81056e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81056dc:	697b      	ldr	r3, [r7, #20]
 81056de:	685b      	ldr	r3, [r3, #4]
 81056e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81056e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81056e4:	429a      	cmp	r2, r3
 81056e6:	d903      	bls.n	81056f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81056e8:	2301      	movs	r3, #1
 81056ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81056ee:	e1c1      	b.n	8105a74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81056f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81056f2:	2200      	movs	r2, #0
 81056f4:	60bb      	str	r3, [r7, #8]
 81056f6:	60fa      	str	r2, [r7, #12]
 81056f8:	697b      	ldr	r3, [r7, #20]
 81056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81056fc:	4a84      	ldr	r2, [pc, #528]	; (8105910 <UART_SetConfig+0x930>)
 81056fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105702:	b29b      	uxth	r3, r3
 8105704:	2200      	movs	r2, #0
 8105706:	603b      	str	r3, [r7, #0]
 8105708:	607a      	str	r2, [r7, #4]
 810570a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810570e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8105712:	f7fb fb41 	bl	8100d98 <__aeabi_uldivmod>
 8105716:	4602      	mov	r2, r0
 8105718:	460b      	mov	r3, r1
 810571a:	4610      	mov	r0, r2
 810571c:	4619      	mov	r1, r3
 810571e:	f04f 0200 	mov.w	r2, #0
 8105722:	f04f 0300 	mov.w	r3, #0
 8105726:	020b      	lsls	r3, r1, #8
 8105728:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810572c:	0202      	lsls	r2, r0, #8
 810572e:	6979      	ldr	r1, [r7, #20]
 8105730:	6849      	ldr	r1, [r1, #4]
 8105732:	0849      	lsrs	r1, r1, #1
 8105734:	2000      	movs	r0, #0
 8105736:	460c      	mov	r4, r1
 8105738:	4605      	mov	r5, r0
 810573a:	eb12 0804 	adds.w	r8, r2, r4
 810573e:	eb43 0905 	adc.w	r9, r3, r5
 8105742:	697b      	ldr	r3, [r7, #20]
 8105744:	685b      	ldr	r3, [r3, #4]
 8105746:	2200      	movs	r2, #0
 8105748:	469a      	mov	sl, r3
 810574a:	4693      	mov	fp, r2
 810574c:	4652      	mov	r2, sl
 810574e:	465b      	mov	r3, fp
 8105750:	4640      	mov	r0, r8
 8105752:	4649      	mov	r1, r9
 8105754:	f7fb fb20 	bl	8100d98 <__aeabi_uldivmod>
 8105758:	4602      	mov	r2, r0
 810575a:	460b      	mov	r3, r1
 810575c:	4613      	mov	r3, r2
 810575e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8105760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105766:	d308      	bcc.n	810577a <UART_SetConfig+0x79a>
 8105768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810576a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810576e:	d204      	bcs.n	810577a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8105770:	697b      	ldr	r3, [r7, #20]
 8105772:	681b      	ldr	r3, [r3, #0]
 8105774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105776:	60da      	str	r2, [r3, #12]
 8105778:	e17c      	b.n	8105a74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810577a:	2301      	movs	r3, #1
 810577c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105780:	e178      	b.n	8105a74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8105782:	697b      	ldr	r3, [r7, #20]
 8105784:	69db      	ldr	r3, [r3, #28]
 8105786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810578a:	f040 80c5 	bne.w	8105918 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810578e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105792:	2b20      	cmp	r3, #32
 8105794:	dc48      	bgt.n	8105828 <UART_SetConfig+0x848>
 8105796:	2b00      	cmp	r3, #0
 8105798:	db7b      	blt.n	8105892 <UART_SetConfig+0x8b2>
 810579a:	2b20      	cmp	r3, #32
 810579c:	d879      	bhi.n	8105892 <UART_SetConfig+0x8b2>
 810579e:	a201      	add	r2, pc, #4	; (adr r2, 81057a4 <UART_SetConfig+0x7c4>)
 81057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81057a4:	0810582f 	.word	0x0810582f
 81057a8:	08105837 	.word	0x08105837
 81057ac:	08105893 	.word	0x08105893
 81057b0:	08105893 	.word	0x08105893
 81057b4:	0810583f 	.word	0x0810583f
 81057b8:	08105893 	.word	0x08105893
 81057bc:	08105893 	.word	0x08105893
 81057c0:	08105893 	.word	0x08105893
 81057c4:	0810584f 	.word	0x0810584f
 81057c8:	08105893 	.word	0x08105893
 81057cc:	08105893 	.word	0x08105893
 81057d0:	08105893 	.word	0x08105893
 81057d4:	08105893 	.word	0x08105893
 81057d8:	08105893 	.word	0x08105893
 81057dc:	08105893 	.word	0x08105893
 81057e0:	08105893 	.word	0x08105893
 81057e4:	0810585f 	.word	0x0810585f
 81057e8:	08105893 	.word	0x08105893
 81057ec:	08105893 	.word	0x08105893
 81057f0:	08105893 	.word	0x08105893
 81057f4:	08105893 	.word	0x08105893
 81057f8:	08105893 	.word	0x08105893
 81057fc:	08105893 	.word	0x08105893
 8105800:	08105893 	.word	0x08105893
 8105804:	08105893 	.word	0x08105893
 8105808:	08105893 	.word	0x08105893
 810580c:	08105893 	.word	0x08105893
 8105810:	08105893 	.word	0x08105893
 8105814:	08105893 	.word	0x08105893
 8105818:	08105893 	.word	0x08105893
 810581c:	08105893 	.word	0x08105893
 8105820:	08105893 	.word	0x08105893
 8105824:	08105885 	.word	0x08105885
 8105828:	2b40      	cmp	r3, #64	; 0x40
 810582a:	d02e      	beq.n	810588a <UART_SetConfig+0x8aa>
 810582c:	e031      	b.n	8105892 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810582e:	f7fd ff5d 	bl	81036ec <HAL_RCC_GetPCLK1Freq>
 8105832:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105834:	e033      	b.n	810589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105836:	f7fd ff6f 	bl	8103718 <HAL_RCC_GetPCLK2Freq>
 810583a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810583c:	e02f      	b.n	810589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810583e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105842:	4618      	mov	r0, r3
 8105844:	f7fe feda 	bl	81045fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810584a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810584c:	e027      	b.n	810589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810584e:	f107 0318 	add.w	r3, r7, #24
 8105852:	4618      	mov	r0, r3
 8105854:	f7ff f826 	bl	81048a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105858:	69fb      	ldr	r3, [r7, #28]
 810585a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810585c:	e01f      	b.n	810589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810585e:	4b2d      	ldr	r3, [pc, #180]	; (8105914 <UART_SetConfig+0x934>)
 8105860:	681b      	ldr	r3, [r3, #0]
 8105862:	f003 0320 	and.w	r3, r3, #32
 8105866:	2b00      	cmp	r3, #0
 8105868:	d009      	beq.n	810587e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810586a:	4b2a      	ldr	r3, [pc, #168]	; (8105914 <UART_SetConfig+0x934>)
 810586c:	681b      	ldr	r3, [r3, #0]
 810586e:	08db      	lsrs	r3, r3, #3
 8105870:	f003 0303 	and.w	r3, r3, #3
 8105874:	4a24      	ldr	r2, [pc, #144]	; (8105908 <UART_SetConfig+0x928>)
 8105876:	fa22 f303 	lsr.w	r3, r2, r3
 810587a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810587c:	e00f      	b.n	810589e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810587e:	4b22      	ldr	r3, [pc, #136]	; (8105908 <UART_SetConfig+0x928>)
 8105880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105882:	e00c      	b.n	810589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105884:	4b21      	ldr	r3, [pc, #132]	; (810590c <UART_SetConfig+0x92c>)
 8105886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105888:	e009      	b.n	810589e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810588a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810588e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105890:	e005      	b.n	810589e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8105892:	2300      	movs	r3, #0
 8105894:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105896:	2301      	movs	r3, #1
 8105898:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810589c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810589e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81058a0:	2b00      	cmp	r3, #0
 81058a2:	f000 80e7 	beq.w	8105a74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81058a6:	697b      	ldr	r3, [r7, #20]
 81058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81058aa:	4a19      	ldr	r2, [pc, #100]	; (8105910 <UART_SetConfig+0x930>)
 81058ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81058b0:	461a      	mov	r2, r3
 81058b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81058b4:	fbb3 f3f2 	udiv	r3, r3, r2
 81058b8:	005a      	lsls	r2, r3, #1
 81058ba:	697b      	ldr	r3, [r7, #20]
 81058bc:	685b      	ldr	r3, [r3, #4]
 81058be:	085b      	lsrs	r3, r3, #1
 81058c0:	441a      	add	r2, r3
 81058c2:	697b      	ldr	r3, [r7, #20]
 81058c4:	685b      	ldr	r3, [r3, #4]
 81058c6:	fbb2 f3f3 	udiv	r3, r2, r3
 81058ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058ce:	2b0f      	cmp	r3, #15
 81058d0:	d916      	bls.n	8105900 <UART_SetConfig+0x920>
 81058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81058d8:	d212      	bcs.n	8105900 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058dc:	b29b      	uxth	r3, r3
 81058de:	f023 030f 	bic.w	r3, r3, #15
 81058e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81058e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058e6:	085b      	lsrs	r3, r3, #1
 81058e8:	b29b      	uxth	r3, r3
 81058ea:	f003 0307 	and.w	r3, r3, #7
 81058ee:	b29a      	uxth	r2, r3
 81058f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81058f2:	4313      	orrs	r3, r2
 81058f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81058f6:	697b      	ldr	r3, [r7, #20]
 81058f8:	681b      	ldr	r3, [r3, #0]
 81058fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81058fc:	60da      	str	r2, [r3, #12]
 81058fe:	e0b9      	b.n	8105a74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8105900:	2301      	movs	r3, #1
 8105902:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105906:	e0b5      	b.n	8105a74 <UART_SetConfig+0xa94>
 8105908:	03d09000 	.word	0x03d09000
 810590c:	003d0900 	.word	0x003d0900
 8105910:	0810ab58 	.word	0x0810ab58
 8105914:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8105918:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810591c:	2b20      	cmp	r3, #32
 810591e:	dc49      	bgt.n	81059b4 <UART_SetConfig+0x9d4>
 8105920:	2b00      	cmp	r3, #0
 8105922:	db7c      	blt.n	8105a1e <UART_SetConfig+0xa3e>
 8105924:	2b20      	cmp	r3, #32
 8105926:	d87a      	bhi.n	8105a1e <UART_SetConfig+0xa3e>
 8105928:	a201      	add	r2, pc, #4	; (adr r2, 8105930 <UART_SetConfig+0x950>)
 810592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810592e:	bf00      	nop
 8105930:	081059bb 	.word	0x081059bb
 8105934:	081059c3 	.word	0x081059c3
 8105938:	08105a1f 	.word	0x08105a1f
 810593c:	08105a1f 	.word	0x08105a1f
 8105940:	081059cb 	.word	0x081059cb
 8105944:	08105a1f 	.word	0x08105a1f
 8105948:	08105a1f 	.word	0x08105a1f
 810594c:	08105a1f 	.word	0x08105a1f
 8105950:	081059db 	.word	0x081059db
 8105954:	08105a1f 	.word	0x08105a1f
 8105958:	08105a1f 	.word	0x08105a1f
 810595c:	08105a1f 	.word	0x08105a1f
 8105960:	08105a1f 	.word	0x08105a1f
 8105964:	08105a1f 	.word	0x08105a1f
 8105968:	08105a1f 	.word	0x08105a1f
 810596c:	08105a1f 	.word	0x08105a1f
 8105970:	081059eb 	.word	0x081059eb
 8105974:	08105a1f 	.word	0x08105a1f
 8105978:	08105a1f 	.word	0x08105a1f
 810597c:	08105a1f 	.word	0x08105a1f
 8105980:	08105a1f 	.word	0x08105a1f
 8105984:	08105a1f 	.word	0x08105a1f
 8105988:	08105a1f 	.word	0x08105a1f
 810598c:	08105a1f 	.word	0x08105a1f
 8105990:	08105a1f 	.word	0x08105a1f
 8105994:	08105a1f 	.word	0x08105a1f
 8105998:	08105a1f 	.word	0x08105a1f
 810599c:	08105a1f 	.word	0x08105a1f
 81059a0:	08105a1f 	.word	0x08105a1f
 81059a4:	08105a1f 	.word	0x08105a1f
 81059a8:	08105a1f 	.word	0x08105a1f
 81059ac:	08105a1f 	.word	0x08105a1f
 81059b0:	08105a11 	.word	0x08105a11
 81059b4:	2b40      	cmp	r3, #64	; 0x40
 81059b6:	d02e      	beq.n	8105a16 <UART_SetConfig+0xa36>
 81059b8:	e031      	b.n	8105a1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81059ba:	f7fd fe97 	bl	81036ec <HAL_RCC_GetPCLK1Freq>
 81059be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81059c0:	e033      	b.n	8105a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81059c2:	f7fd fea9 	bl	8103718 <HAL_RCC_GetPCLK2Freq>
 81059c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81059c8:	e02f      	b.n	8105a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81059ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81059ce:	4618      	mov	r0, r3
 81059d0:	f7fe fe14 	bl	81045fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81059d8:	e027      	b.n	8105a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81059da:	f107 0318 	add.w	r3, r7, #24
 81059de:	4618      	mov	r0, r3
 81059e0:	f7fe ff60 	bl	81048a4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81059e4:	69fb      	ldr	r3, [r7, #28]
 81059e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81059e8:	e01f      	b.n	8105a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81059ea:	4b2d      	ldr	r3, [pc, #180]	; (8105aa0 <UART_SetConfig+0xac0>)
 81059ec:	681b      	ldr	r3, [r3, #0]
 81059ee:	f003 0320 	and.w	r3, r3, #32
 81059f2:	2b00      	cmp	r3, #0
 81059f4:	d009      	beq.n	8105a0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81059f6:	4b2a      	ldr	r3, [pc, #168]	; (8105aa0 <UART_SetConfig+0xac0>)
 81059f8:	681b      	ldr	r3, [r3, #0]
 81059fa:	08db      	lsrs	r3, r3, #3
 81059fc:	f003 0303 	and.w	r3, r3, #3
 8105a00:	4a28      	ldr	r2, [pc, #160]	; (8105aa4 <UART_SetConfig+0xac4>)
 8105a02:	fa22 f303 	lsr.w	r3, r2, r3
 8105a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105a08:	e00f      	b.n	8105a2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8105a0a:	4b26      	ldr	r3, [pc, #152]	; (8105aa4 <UART_SetConfig+0xac4>)
 8105a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105a0e:	e00c      	b.n	8105a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105a10:	4b25      	ldr	r3, [pc, #148]	; (8105aa8 <UART_SetConfig+0xac8>)
 8105a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105a14:	e009      	b.n	8105a2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105a1c:	e005      	b.n	8105a2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8105a1e:	2300      	movs	r3, #0
 8105a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105a22:	2301      	movs	r3, #1
 8105a24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8105a28:	bf00      	nop
    }

    if (pclk != 0U)
 8105a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105a2c:	2b00      	cmp	r3, #0
 8105a2e:	d021      	beq.n	8105a74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105a30:	697b      	ldr	r3, [r7, #20]
 8105a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105a34:	4a1d      	ldr	r2, [pc, #116]	; (8105aac <UART_SetConfig+0xacc>)
 8105a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105a3a:	461a      	mov	r2, r3
 8105a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105a3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8105a42:	697b      	ldr	r3, [r7, #20]
 8105a44:	685b      	ldr	r3, [r3, #4]
 8105a46:	085b      	lsrs	r3, r3, #1
 8105a48:	441a      	add	r2, r3
 8105a4a:	697b      	ldr	r3, [r7, #20]
 8105a4c:	685b      	ldr	r3, [r3, #4]
 8105a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8105a52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105a56:	2b0f      	cmp	r3, #15
 8105a58:	d909      	bls.n	8105a6e <UART_SetConfig+0xa8e>
 8105a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105a60:	d205      	bcs.n	8105a6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8105a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105a64:	b29a      	uxth	r2, r3
 8105a66:	697b      	ldr	r3, [r7, #20]
 8105a68:	681b      	ldr	r3, [r3, #0]
 8105a6a:	60da      	str	r2, [r3, #12]
 8105a6c:	e002      	b.n	8105a74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8105a6e:	2301      	movs	r3, #1
 8105a70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8105a74:	697b      	ldr	r3, [r7, #20]
 8105a76:	2201      	movs	r2, #1
 8105a78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8105a7c:	697b      	ldr	r3, [r7, #20]
 8105a7e:	2201      	movs	r2, #1
 8105a80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8105a84:	697b      	ldr	r3, [r7, #20]
 8105a86:	2200      	movs	r2, #0
 8105a88:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8105a8a:	697b      	ldr	r3, [r7, #20]
 8105a8c:	2200      	movs	r2, #0
 8105a8e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8105a90:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8105a94:	4618      	mov	r0, r3
 8105a96:	3748      	adds	r7, #72	; 0x48
 8105a98:	46bd      	mov	sp, r7
 8105a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105a9e:	bf00      	nop
 8105aa0:	58024400 	.word	0x58024400
 8105aa4:	03d09000 	.word	0x03d09000
 8105aa8:	003d0900 	.word	0x003d0900
 8105aac:	0810ab58 	.word	0x0810ab58

08105ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105ab0:	b480      	push	{r7}
 8105ab2:	b083      	sub	sp, #12
 8105ab4:	af00      	add	r7, sp, #0
 8105ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105abc:	f003 0301 	and.w	r3, r3, #1
 8105ac0:	2b00      	cmp	r3, #0
 8105ac2:	d00a      	beq.n	8105ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	681b      	ldr	r3, [r3, #0]
 8105ac8:	685b      	ldr	r3, [r3, #4]
 8105aca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8105ace:	687b      	ldr	r3, [r7, #4]
 8105ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	681b      	ldr	r3, [r3, #0]
 8105ad6:	430a      	orrs	r2, r1
 8105ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8105ada:	687b      	ldr	r3, [r7, #4]
 8105adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105ade:	f003 0302 	and.w	r3, r3, #2
 8105ae2:	2b00      	cmp	r3, #0
 8105ae4:	d00a      	beq.n	8105afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	681b      	ldr	r3, [r3, #0]
 8105aea:	685b      	ldr	r3, [r3, #4]
 8105aec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105af0:	687b      	ldr	r3, [r7, #4]
 8105af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105af4:	687b      	ldr	r3, [r7, #4]
 8105af6:	681b      	ldr	r3, [r3, #0]
 8105af8:	430a      	orrs	r2, r1
 8105afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b00:	f003 0304 	and.w	r3, r3, #4
 8105b04:	2b00      	cmp	r3, #0
 8105b06:	d00a      	beq.n	8105b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	681b      	ldr	r3, [r3, #0]
 8105b0c:	685b      	ldr	r3, [r3, #4]
 8105b0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8105b12:	687b      	ldr	r3, [r7, #4]
 8105b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105b16:	687b      	ldr	r3, [r7, #4]
 8105b18:	681b      	ldr	r3, [r3, #0]
 8105b1a:	430a      	orrs	r2, r1
 8105b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8105b1e:	687b      	ldr	r3, [r7, #4]
 8105b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b22:	f003 0308 	and.w	r3, r3, #8
 8105b26:	2b00      	cmp	r3, #0
 8105b28:	d00a      	beq.n	8105b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8105b2a:	687b      	ldr	r3, [r7, #4]
 8105b2c:	681b      	ldr	r3, [r3, #0]
 8105b2e:	685b      	ldr	r3, [r3, #4]
 8105b30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8105b34:	687b      	ldr	r3, [r7, #4]
 8105b36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	430a      	orrs	r2, r1
 8105b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8105b40:	687b      	ldr	r3, [r7, #4]
 8105b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b44:	f003 0310 	and.w	r3, r3, #16
 8105b48:	2b00      	cmp	r3, #0
 8105b4a:	d00a      	beq.n	8105b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	689b      	ldr	r3, [r3, #8]
 8105b52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8105b5a:	687b      	ldr	r3, [r7, #4]
 8105b5c:	681b      	ldr	r3, [r3, #0]
 8105b5e:	430a      	orrs	r2, r1
 8105b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8105b62:	687b      	ldr	r3, [r7, #4]
 8105b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b66:	f003 0320 	and.w	r3, r3, #32
 8105b6a:	2b00      	cmp	r3, #0
 8105b6c:	d00a      	beq.n	8105b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	681b      	ldr	r3, [r3, #0]
 8105b72:	689b      	ldr	r3, [r3, #8]
 8105b74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	681b      	ldr	r3, [r3, #0]
 8105b80:	430a      	orrs	r2, r1
 8105b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105b8c:	2b00      	cmp	r3, #0
 8105b8e:	d01a      	beq.n	8105bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	681b      	ldr	r3, [r3, #0]
 8105b94:	685b      	ldr	r3, [r3, #4]
 8105b96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8105b9a:	687b      	ldr	r3, [r7, #4]
 8105b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	681b      	ldr	r3, [r3, #0]
 8105ba2:	430a      	orrs	r2, r1
 8105ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105bae:	d10a      	bne.n	8105bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105bb0:	687b      	ldr	r3, [r7, #4]
 8105bb2:	681b      	ldr	r3, [r3, #0]
 8105bb4:	685b      	ldr	r3, [r3, #4]
 8105bb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8105bbe:	687b      	ldr	r3, [r7, #4]
 8105bc0:	681b      	ldr	r3, [r3, #0]
 8105bc2:	430a      	orrs	r2, r1
 8105bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105bc6:	687b      	ldr	r3, [r7, #4]
 8105bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105bce:	2b00      	cmp	r3, #0
 8105bd0:	d00a      	beq.n	8105be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105bd2:	687b      	ldr	r3, [r7, #4]
 8105bd4:	681b      	ldr	r3, [r3, #0]
 8105bd6:	685b      	ldr	r3, [r3, #4]
 8105bd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8105bdc:	687b      	ldr	r3, [r7, #4]
 8105bde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	681b      	ldr	r3, [r3, #0]
 8105be4:	430a      	orrs	r2, r1
 8105be6:	605a      	str	r2, [r3, #4]
  }
}
 8105be8:	bf00      	nop
 8105bea:	370c      	adds	r7, #12
 8105bec:	46bd      	mov	sp, r7
 8105bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bf2:	4770      	bx	lr

08105bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8105bf4:	b580      	push	{r7, lr}
 8105bf6:	b086      	sub	sp, #24
 8105bf8:	af02      	add	r7, sp, #8
 8105bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	2200      	movs	r2, #0
 8105c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8105c04:	f7fc f90a 	bl	8101e1c <HAL_GetTick>
 8105c08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8105c0a:	687b      	ldr	r3, [r7, #4]
 8105c0c:	681b      	ldr	r3, [r3, #0]
 8105c0e:	681b      	ldr	r3, [r3, #0]
 8105c10:	f003 0308 	and.w	r3, r3, #8
 8105c14:	2b08      	cmp	r3, #8
 8105c16:	d10e      	bne.n	8105c36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105c1c:	9300      	str	r3, [sp, #0]
 8105c1e:	68fb      	ldr	r3, [r7, #12]
 8105c20:	2200      	movs	r2, #0
 8105c22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8105c26:	6878      	ldr	r0, [r7, #4]
 8105c28:	f000 f82f 	bl	8105c8a <UART_WaitOnFlagUntilTimeout>
 8105c2c:	4603      	mov	r3, r0
 8105c2e:	2b00      	cmp	r3, #0
 8105c30:	d001      	beq.n	8105c36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105c32:	2303      	movs	r3, #3
 8105c34:	e025      	b.n	8105c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105c36:	687b      	ldr	r3, [r7, #4]
 8105c38:	681b      	ldr	r3, [r3, #0]
 8105c3a:	681b      	ldr	r3, [r3, #0]
 8105c3c:	f003 0304 	and.w	r3, r3, #4
 8105c40:	2b04      	cmp	r3, #4
 8105c42:	d10e      	bne.n	8105c62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105c48:	9300      	str	r3, [sp, #0]
 8105c4a:	68fb      	ldr	r3, [r7, #12]
 8105c4c:	2200      	movs	r2, #0
 8105c4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8105c52:	6878      	ldr	r0, [r7, #4]
 8105c54:	f000 f819 	bl	8105c8a <UART_WaitOnFlagUntilTimeout>
 8105c58:	4603      	mov	r3, r0
 8105c5a:	2b00      	cmp	r3, #0
 8105c5c:	d001      	beq.n	8105c62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105c5e:	2303      	movs	r3, #3
 8105c60:	e00f      	b.n	8105c82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	2220      	movs	r2, #32
 8105c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	2220      	movs	r2, #32
 8105c6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105c72:	687b      	ldr	r3, [r7, #4]
 8105c74:	2200      	movs	r2, #0
 8105c76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8105c78:	687b      	ldr	r3, [r7, #4]
 8105c7a:	2200      	movs	r2, #0
 8105c7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105c80:	2300      	movs	r3, #0
}
 8105c82:	4618      	mov	r0, r3
 8105c84:	3710      	adds	r7, #16
 8105c86:	46bd      	mov	sp, r7
 8105c88:	bd80      	pop	{r7, pc}

08105c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105c8a:	b580      	push	{r7, lr}
 8105c8c:	b09c      	sub	sp, #112	; 0x70
 8105c8e:	af00      	add	r7, sp, #0
 8105c90:	60f8      	str	r0, [r7, #12]
 8105c92:	60b9      	str	r1, [r7, #8]
 8105c94:	603b      	str	r3, [r7, #0]
 8105c96:	4613      	mov	r3, r2
 8105c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105c9a:	e0a9      	b.n	8105df0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105ca2:	f000 80a5 	beq.w	8105df0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105ca6:	f7fc f8b9 	bl	8101e1c <HAL_GetTick>
 8105caa:	4602      	mov	r2, r0
 8105cac:	683b      	ldr	r3, [r7, #0]
 8105cae:	1ad3      	subs	r3, r2, r3
 8105cb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8105cb2:	429a      	cmp	r2, r3
 8105cb4:	d302      	bcc.n	8105cbc <UART_WaitOnFlagUntilTimeout+0x32>
 8105cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105cb8:	2b00      	cmp	r3, #0
 8105cba:	d140      	bne.n	8105d3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8105cbc:	68fb      	ldr	r3, [r7, #12]
 8105cbe:	681b      	ldr	r3, [r3, #0]
 8105cc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8105cc4:	e853 3f00 	ldrex	r3, [r3]
 8105cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8105cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8105ccc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8105cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8105cd2:	68fb      	ldr	r3, [r7, #12]
 8105cd4:	681b      	ldr	r3, [r3, #0]
 8105cd6:	461a      	mov	r2, r3
 8105cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8105cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8105cdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105cde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8105ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8105ce2:	e841 2300 	strex	r3, r2, [r1]
 8105ce6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8105ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8105cea:	2b00      	cmp	r3, #0
 8105cec:	d1e6      	bne.n	8105cbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105cee:	68fb      	ldr	r3, [r7, #12]
 8105cf0:	681b      	ldr	r3, [r3, #0]
 8105cf2:	3308      	adds	r3, #8
 8105cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105cf8:	e853 3f00 	ldrex	r3, [r3]
 8105cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8105cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105d00:	f023 0301 	bic.w	r3, r3, #1
 8105d04:	663b      	str	r3, [r7, #96]	; 0x60
 8105d06:	68fb      	ldr	r3, [r7, #12]
 8105d08:	681b      	ldr	r3, [r3, #0]
 8105d0a:	3308      	adds	r3, #8
 8105d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8105d0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8105d10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105d16:	e841 2300 	strex	r3, r2, [r1]
 8105d1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8105d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8105d1e:	2b00      	cmp	r3, #0
 8105d20:	d1e5      	bne.n	8105cee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8105d22:	68fb      	ldr	r3, [r7, #12]
 8105d24:	2220      	movs	r2, #32
 8105d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8105d2a:	68fb      	ldr	r3, [r7, #12]
 8105d2c:	2220      	movs	r2, #32
 8105d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8105d32:	68fb      	ldr	r3, [r7, #12]
 8105d34:	2200      	movs	r2, #0
 8105d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8105d3a:	2303      	movs	r3, #3
 8105d3c:	e069      	b.n	8105e12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8105d3e:	68fb      	ldr	r3, [r7, #12]
 8105d40:	681b      	ldr	r3, [r3, #0]
 8105d42:	681b      	ldr	r3, [r3, #0]
 8105d44:	f003 0304 	and.w	r3, r3, #4
 8105d48:	2b00      	cmp	r3, #0
 8105d4a:	d051      	beq.n	8105df0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105d4c:	68fb      	ldr	r3, [r7, #12]
 8105d4e:	681b      	ldr	r3, [r3, #0]
 8105d50:	69db      	ldr	r3, [r3, #28]
 8105d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105d5a:	d149      	bne.n	8105df0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105d5c:	68fb      	ldr	r3, [r7, #12]
 8105d5e:	681b      	ldr	r3, [r3, #0]
 8105d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105d64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8105d66:	68fb      	ldr	r3, [r7, #12]
 8105d68:	681b      	ldr	r3, [r3, #0]
 8105d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105d6e:	e853 3f00 	ldrex	r3, [r3]
 8105d72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8105d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105d76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8105d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8105d7c:	68fb      	ldr	r3, [r7, #12]
 8105d7e:	681b      	ldr	r3, [r3, #0]
 8105d80:	461a      	mov	r2, r3
 8105d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105d84:	637b      	str	r3, [r7, #52]	; 0x34
 8105d86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8105d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105d8c:	e841 2300 	strex	r3, r2, [r1]
 8105d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8105d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105d94:	2b00      	cmp	r3, #0
 8105d96:	d1e6      	bne.n	8105d66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105d98:	68fb      	ldr	r3, [r7, #12]
 8105d9a:	681b      	ldr	r3, [r3, #0]
 8105d9c:	3308      	adds	r3, #8
 8105d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105da0:	697b      	ldr	r3, [r7, #20]
 8105da2:	e853 3f00 	ldrex	r3, [r3]
 8105da6:	613b      	str	r3, [r7, #16]
   return(result);
 8105da8:	693b      	ldr	r3, [r7, #16]
 8105daa:	f023 0301 	bic.w	r3, r3, #1
 8105dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8105db0:	68fb      	ldr	r3, [r7, #12]
 8105db2:	681b      	ldr	r3, [r3, #0]
 8105db4:	3308      	adds	r3, #8
 8105db6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8105db8:	623a      	str	r2, [r7, #32]
 8105dba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105dbc:	69f9      	ldr	r1, [r7, #28]
 8105dbe:	6a3a      	ldr	r2, [r7, #32]
 8105dc0:	e841 2300 	strex	r3, r2, [r1]
 8105dc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8105dc6:	69bb      	ldr	r3, [r7, #24]
 8105dc8:	2b00      	cmp	r3, #0
 8105dca:	d1e5      	bne.n	8105d98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8105dcc:	68fb      	ldr	r3, [r7, #12]
 8105dce:	2220      	movs	r2, #32
 8105dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8105dd4:	68fb      	ldr	r3, [r7, #12]
 8105dd6:	2220      	movs	r2, #32
 8105dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8105ddc:	68fb      	ldr	r3, [r7, #12]
 8105dde:	2220      	movs	r2, #32
 8105de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105de4:	68fb      	ldr	r3, [r7, #12]
 8105de6:	2200      	movs	r2, #0
 8105de8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8105dec:	2303      	movs	r3, #3
 8105dee:	e010      	b.n	8105e12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105df0:	68fb      	ldr	r3, [r7, #12]
 8105df2:	681b      	ldr	r3, [r3, #0]
 8105df4:	69da      	ldr	r2, [r3, #28]
 8105df6:	68bb      	ldr	r3, [r7, #8]
 8105df8:	4013      	ands	r3, r2
 8105dfa:	68ba      	ldr	r2, [r7, #8]
 8105dfc:	429a      	cmp	r2, r3
 8105dfe:	bf0c      	ite	eq
 8105e00:	2301      	moveq	r3, #1
 8105e02:	2300      	movne	r3, #0
 8105e04:	b2db      	uxtb	r3, r3
 8105e06:	461a      	mov	r2, r3
 8105e08:	79fb      	ldrb	r3, [r7, #7]
 8105e0a:	429a      	cmp	r2, r3
 8105e0c:	f43f af46 	beq.w	8105c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105e10:	2300      	movs	r3, #0
}
 8105e12:	4618      	mov	r0, r3
 8105e14:	3770      	adds	r7, #112	; 0x70
 8105e16:	46bd      	mov	sp, r7
 8105e18:	bd80      	pop	{r7, pc}

08105e1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8105e1a:	b480      	push	{r7}
 8105e1c:	b085      	sub	sp, #20
 8105e1e:	af00      	add	r7, sp, #0
 8105e20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105e28:	2b01      	cmp	r3, #1
 8105e2a:	d101      	bne.n	8105e30 <HAL_UARTEx_DisableFifoMode+0x16>
 8105e2c:	2302      	movs	r3, #2
 8105e2e:	e027      	b.n	8105e80 <HAL_UARTEx_DisableFifoMode+0x66>
 8105e30:	687b      	ldr	r3, [r7, #4]
 8105e32:	2201      	movs	r2, #1
 8105e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105e38:	687b      	ldr	r3, [r7, #4]
 8105e3a:	2224      	movs	r2, #36	; 0x24
 8105e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	681b      	ldr	r3, [r3, #0]
 8105e44:	681b      	ldr	r3, [r3, #0]
 8105e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	681a      	ldr	r2, [r3, #0]
 8105e4e:	687b      	ldr	r3, [r7, #4]
 8105e50:	681b      	ldr	r3, [r3, #0]
 8105e52:	f022 0201 	bic.w	r2, r2, #1
 8105e56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8105e58:	68fb      	ldr	r3, [r7, #12]
 8105e5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8105e5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8105e60:	687b      	ldr	r3, [r7, #4]
 8105e62:	2200      	movs	r2, #0
 8105e64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	681b      	ldr	r3, [r3, #0]
 8105e6a:	68fa      	ldr	r2, [r7, #12]
 8105e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105e6e:	687b      	ldr	r3, [r7, #4]
 8105e70:	2220      	movs	r2, #32
 8105e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105e76:	687b      	ldr	r3, [r7, #4]
 8105e78:	2200      	movs	r2, #0
 8105e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105e7e:	2300      	movs	r3, #0
}
 8105e80:	4618      	mov	r0, r3
 8105e82:	3714      	adds	r7, #20
 8105e84:	46bd      	mov	sp, r7
 8105e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e8a:	4770      	bx	lr

08105e8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105e8c:	b580      	push	{r7, lr}
 8105e8e:	b084      	sub	sp, #16
 8105e90:	af00      	add	r7, sp, #0
 8105e92:	6078      	str	r0, [r7, #4]
 8105e94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105e96:	687b      	ldr	r3, [r7, #4]
 8105e98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105e9c:	2b01      	cmp	r3, #1
 8105e9e:	d101      	bne.n	8105ea4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8105ea0:	2302      	movs	r3, #2
 8105ea2:	e02d      	b.n	8105f00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8105ea4:	687b      	ldr	r3, [r7, #4]
 8105ea6:	2201      	movs	r2, #1
 8105ea8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105eac:	687b      	ldr	r3, [r7, #4]
 8105eae:	2224      	movs	r2, #36	; 0x24
 8105eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105eb4:	687b      	ldr	r3, [r7, #4]
 8105eb6:	681b      	ldr	r3, [r3, #0]
 8105eb8:	681b      	ldr	r3, [r3, #0]
 8105eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105ebc:	687b      	ldr	r3, [r7, #4]
 8105ebe:	681b      	ldr	r3, [r3, #0]
 8105ec0:	681a      	ldr	r2, [r3, #0]
 8105ec2:	687b      	ldr	r3, [r7, #4]
 8105ec4:	681b      	ldr	r3, [r3, #0]
 8105ec6:	f022 0201 	bic.w	r2, r2, #1
 8105eca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	681b      	ldr	r3, [r3, #0]
 8105ed0:	689b      	ldr	r3, [r3, #8]
 8105ed2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8105ed6:	687b      	ldr	r3, [r7, #4]
 8105ed8:	681b      	ldr	r3, [r3, #0]
 8105eda:	683a      	ldr	r2, [r7, #0]
 8105edc:	430a      	orrs	r2, r1
 8105ede:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105ee0:	6878      	ldr	r0, [r7, #4]
 8105ee2:	f000 f84f 	bl	8105f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105ee6:	687b      	ldr	r3, [r7, #4]
 8105ee8:	681b      	ldr	r3, [r3, #0]
 8105eea:	68fa      	ldr	r2, [r7, #12]
 8105eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105eee:	687b      	ldr	r3, [r7, #4]
 8105ef0:	2220      	movs	r2, #32
 8105ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105ef6:	687b      	ldr	r3, [r7, #4]
 8105ef8:	2200      	movs	r2, #0
 8105efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105efe:	2300      	movs	r3, #0
}
 8105f00:	4618      	mov	r0, r3
 8105f02:	3710      	adds	r7, #16
 8105f04:	46bd      	mov	sp, r7
 8105f06:	bd80      	pop	{r7, pc}

08105f08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105f08:	b580      	push	{r7, lr}
 8105f0a:	b084      	sub	sp, #16
 8105f0c:	af00      	add	r7, sp, #0
 8105f0e:	6078      	str	r0, [r7, #4]
 8105f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105f18:	2b01      	cmp	r3, #1
 8105f1a:	d101      	bne.n	8105f20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8105f1c:	2302      	movs	r3, #2
 8105f1e:	e02d      	b.n	8105f7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8105f20:	687b      	ldr	r3, [r7, #4]
 8105f22:	2201      	movs	r2, #1
 8105f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105f28:	687b      	ldr	r3, [r7, #4]
 8105f2a:	2224      	movs	r2, #36	; 0x24
 8105f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105f30:	687b      	ldr	r3, [r7, #4]
 8105f32:	681b      	ldr	r3, [r3, #0]
 8105f34:	681b      	ldr	r3, [r3, #0]
 8105f36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105f38:	687b      	ldr	r3, [r7, #4]
 8105f3a:	681b      	ldr	r3, [r3, #0]
 8105f3c:	681a      	ldr	r2, [r3, #0]
 8105f3e:	687b      	ldr	r3, [r7, #4]
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	f022 0201 	bic.w	r2, r2, #1
 8105f46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	681b      	ldr	r3, [r3, #0]
 8105f4c:	689b      	ldr	r3, [r3, #8]
 8105f4e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8105f52:	687b      	ldr	r3, [r7, #4]
 8105f54:	681b      	ldr	r3, [r3, #0]
 8105f56:	683a      	ldr	r2, [r7, #0]
 8105f58:	430a      	orrs	r2, r1
 8105f5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105f5c:	6878      	ldr	r0, [r7, #4]
 8105f5e:	f000 f811 	bl	8105f84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	681b      	ldr	r3, [r3, #0]
 8105f66:	68fa      	ldr	r2, [r7, #12]
 8105f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	2220      	movs	r2, #32
 8105f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	2200      	movs	r2, #0
 8105f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105f7a:	2300      	movs	r3, #0
}
 8105f7c:	4618      	mov	r0, r3
 8105f7e:	3710      	adds	r7, #16
 8105f80:	46bd      	mov	sp, r7
 8105f82:	bd80      	pop	{r7, pc}

08105f84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8105f84:	b480      	push	{r7}
 8105f86:	b085      	sub	sp, #20
 8105f88:	af00      	add	r7, sp, #0
 8105f8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105f90:	2b00      	cmp	r3, #0
 8105f92:	d108      	bne.n	8105fa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8105f94:	687b      	ldr	r3, [r7, #4]
 8105f96:	2201      	movs	r2, #1
 8105f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8105f9c:	687b      	ldr	r3, [r7, #4]
 8105f9e:	2201      	movs	r2, #1
 8105fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8105fa4:	e031      	b.n	810600a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8105fa6:	2310      	movs	r3, #16
 8105fa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8105faa:	2310      	movs	r3, #16
 8105fac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8105fae:	687b      	ldr	r3, [r7, #4]
 8105fb0:	681b      	ldr	r3, [r3, #0]
 8105fb2:	689b      	ldr	r3, [r3, #8]
 8105fb4:	0e5b      	lsrs	r3, r3, #25
 8105fb6:	b2db      	uxtb	r3, r3
 8105fb8:	f003 0307 	and.w	r3, r3, #7
 8105fbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8105fbe:	687b      	ldr	r3, [r7, #4]
 8105fc0:	681b      	ldr	r3, [r3, #0]
 8105fc2:	689b      	ldr	r3, [r3, #8]
 8105fc4:	0f5b      	lsrs	r3, r3, #29
 8105fc6:	b2db      	uxtb	r3, r3
 8105fc8:	f003 0307 	and.w	r3, r3, #7
 8105fcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105fce:	7bbb      	ldrb	r3, [r7, #14]
 8105fd0:	7b3a      	ldrb	r2, [r7, #12]
 8105fd2:	4911      	ldr	r1, [pc, #68]	; (8106018 <UARTEx_SetNbDataToProcess+0x94>)
 8105fd4:	5c8a      	ldrb	r2, [r1, r2]
 8105fd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8105fda:	7b3a      	ldrb	r2, [r7, #12]
 8105fdc:	490f      	ldr	r1, [pc, #60]	; (810601c <UARTEx_SetNbDataToProcess+0x98>)
 8105fde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105fe0:	fb93 f3f2 	sdiv	r3, r3, r2
 8105fe4:	b29a      	uxth	r2, r3
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105fec:	7bfb      	ldrb	r3, [r7, #15]
 8105fee:	7b7a      	ldrb	r2, [r7, #13]
 8105ff0:	4909      	ldr	r1, [pc, #36]	; (8106018 <UARTEx_SetNbDataToProcess+0x94>)
 8105ff2:	5c8a      	ldrb	r2, [r1, r2]
 8105ff4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8105ff8:	7b7a      	ldrb	r2, [r7, #13]
 8105ffa:	4908      	ldr	r1, [pc, #32]	; (810601c <UARTEx_SetNbDataToProcess+0x98>)
 8105ffc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105ffe:	fb93 f3f2 	sdiv	r3, r3, r2
 8106002:	b29a      	uxth	r2, r3
 8106004:	687b      	ldr	r3, [r7, #4]
 8106006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810600a:	bf00      	nop
 810600c:	3714      	adds	r7, #20
 810600e:	46bd      	mov	sp, r7
 8106010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106014:	4770      	bx	lr
 8106016:	bf00      	nop
 8106018:	0810ab70 	.word	0x0810ab70
 810601c:	0810ab78 	.word	0x0810ab78

08106020 <__errno>:
 8106020:	4b01      	ldr	r3, [pc, #4]	; (8106028 <__errno+0x8>)
 8106022:	6818      	ldr	r0, [r3, #0]
 8106024:	4770      	bx	lr
 8106026:	bf00      	nop
 8106028:	1000001c 	.word	0x1000001c

0810602c <__libc_init_array>:
 810602c:	b570      	push	{r4, r5, r6, lr}
 810602e:	4d0d      	ldr	r5, [pc, #52]	; (8106064 <__libc_init_array+0x38>)
 8106030:	4c0d      	ldr	r4, [pc, #52]	; (8106068 <__libc_init_array+0x3c>)
 8106032:	1b64      	subs	r4, r4, r5
 8106034:	10a4      	asrs	r4, r4, #2
 8106036:	2600      	movs	r6, #0
 8106038:	42a6      	cmp	r6, r4
 810603a:	d109      	bne.n	8106050 <__libc_init_array+0x24>
 810603c:	4d0b      	ldr	r5, [pc, #44]	; (810606c <__libc_init_array+0x40>)
 810603e:	4c0c      	ldr	r4, [pc, #48]	; (8106070 <__libc_init_array+0x44>)
 8106040:	f004 fd1c 	bl	810aa7c <_init>
 8106044:	1b64      	subs	r4, r4, r5
 8106046:	10a4      	asrs	r4, r4, #2
 8106048:	2600      	movs	r6, #0
 810604a:	42a6      	cmp	r6, r4
 810604c:	d105      	bne.n	810605a <__libc_init_array+0x2e>
 810604e:	bd70      	pop	{r4, r5, r6, pc}
 8106050:	f855 3b04 	ldr.w	r3, [r5], #4
 8106054:	4798      	blx	r3
 8106056:	3601      	adds	r6, #1
 8106058:	e7ee      	b.n	8106038 <__libc_init_array+0xc>
 810605a:	f855 3b04 	ldr.w	r3, [r5], #4
 810605e:	4798      	blx	r3
 8106060:	3601      	adds	r6, #1
 8106062:	e7f2      	b.n	810604a <__libc_init_array+0x1e>
 8106064:	0810b034 	.word	0x0810b034
 8106068:	0810b034 	.word	0x0810b034
 810606c:	0810b034 	.word	0x0810b034
 8106070:	0810b038 	.word	0x0810b038

08106074 <memset>:
 8106074:	4402      	add	r2, r0
 8106076:	4603      	mov	r3, r0
 8106078:	4293      	cmp	r3, r2
 810607a:	d100      	bne.n	810607e <memset+0xa>
 810607c:	4770      	bx	lr
 810607e:	f803 1b01 	strb.w	r1, [r3], #1
 8106082:	e7f9      	b.n	8106078 <memset+0x4>

08106084 <__cvt>:
 8106084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106088:	ec55 4b10 	vmov	r4, r5, d0
 810608c:	2d00      	cmp	r5, #0
 810608e:	460e      	mov	r6, r1
 8106090:	4619      	mov	r1, r3
 8106092:	462b      	mov	r3, r5
 8106094:	bfbb      	ittet	lt
 8106096:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810609a:	461d      	movlt	r5, r3
 810609c:	2300      	movge	r3, #0
 810609e:	232d      	movlt	r3, #45	; 0x2d
 81060a0:	700b      	strb	r3, [r1, #0]
 81060a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81060a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81060a8:	4691      	mov	r9, r2
 81060aa:	f023 0820 	bic.w	r8, r3, #32
 81060ae:	bfbc      	itt	lt
 81060b0:	4622      	movlt	r2, r4
 81060b2:	4614      	movlt	r4, r2
 81060b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81060b8:	d005      	beq.n	81060c6 <__cvt+0x42>
 81060ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 81060be:	d100      	bne.n	81060c2 <__cvt+0x3e>
 81060c0:	3601      	adds	r6, #1
 81060c2:	2102      	movs	r1, #2
 81060c4:	e000      	b.n	81060c8 <__cvt+0x44>
 81060c6:	2103      	movs	r1, #3
 81060c8:	ab03      	add	r3, sp, #12
 81060ca:	9301      	str	r3, [sp, #4]
 81060cc:	ab02      	add	r3, sp, #8
 81060ce:	9300      	str	r3, [sp, #0]
 81060d0:	ec45 4b10 	vmov	d0, r4, r5
 81060d4:	4653      	mov	r3, sl
 81060d6:	4632      	mov	r2, r6
 81060d8:	f001 fefa 	bl	8107ed0 <_dtoa_r>
 81060dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 81060e0:	4607      	mov	r7, r0
 81060e2:	d102      	bne.n	81060ea <__cvt+0x66>
 81060e4:	f019 0f01 	tst.w	r9, #1
 81060e8:	d022      	beq.n	8106130 <__cvt+0xac>
 81060ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81060ee:	eb07 0906 	add.w	r9, r7, r6
 81060f2:	d110      	bne.n	8106116 <__cvt+0x92>
 81060f4:	783b      	ldrb	r3, [r7, #0]
 81060f6:	2b30      	cmp	r3, #48	; 0x30
 81060f8:	d10a      	bne.n	8106110 <__cvt+0x8c>
 81060fa:	2200      	movs	r2, #0
 81060fc:	2300      	movs	r3, #0
 81060fe:	4620      	mov	r0, r4
 8106100:	4629      	mov	r1, r5
 8106102:	f7fa fd69 	bl	8100bd8 <__aeabi_dcmpeq>
 8106106:	b918      	cbnz	r0, 8106110 <__cvt+0x8c>
 8106108:	f1c6 0601 	rsb	r6, r6, #1
 810610c:	f8ca 6000 	str.w	r6, [sl]
 8106110:	f8da 3000 	ldr.w	r3, [sl]
 8106114:	4499      	add	r9, r3
 8106116:	2200      	movs	r2, #0
 8106118:	2300      	movs	r3, #0
 810611a:	4620      	mov	r0, r4
 810611c:	4629      	mov	r1, r5
 810611e:	f7fa fd5b 	bl	8100bd8 <__aeabi_dcmpeq>
 8106122:	b108      	cbz	r0, 8106128 <__cvt+0xa4>
 8106124:	f8cd 900c 	str.w	r9, [sp, #12]
 8106128:	2230      	movs	r2, #48	; 0x30
 810612a:	9b03      	ldr	r3, [sp, #12]
 810612c:	454b      	cmp	r3, r9
 810612e:	d307      	bcc.n	8106140 <__cvt+0xbc>
 8106130:	9b03      	ldr	r3, [sp, #12]
 8106132:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8106134:	1bdb      	subs	r3, r3, r7
 8106136:	4638      	mov	r0, r7
 8106138:	6013      	str	r3, [r2, #0]
 810613a:	b004      	add	sp, #16
 810613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106140:	1c59      	adds	r1, r3, #1
 8106142:	9103      	str	r1, [sp, #12]
 8106144:	701a      	strb	r2, [r3, #0]
 8106146:	e7f0      	b.n	810612a <__cvt+0xa6>

08106148 <__exponent>:
 8106148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810614a:	4603      	mov	r3, r0
 810614c:	2900      	cmp	r1, #0
 810614e:	bfb8      	it	lt
 8106150:	4249      	neglt	r1, r1
 8106152:	f803 2b02 	strb.w	r2, [r3], #2
 8106156:	bfb4      	ite	lt
 8106158:	222d      	movlt	r2, #45	; 0x2d
 810615a:	222b      	movge	r2, #43	; 0x2b
 810615c:	2909      	cmp	r1, #9
 810615e:	7042      	strb	r2, [r0, #1]
 8106160:	dd2a      	ble.n	81061b8 <__exponent+0x70>
 8106162:	f10d 0407 	add.w	r4, sp, #7
 8106166:	46a4      	mov	ip, r4
 8106168:	270a      	movs	r7, #10
 810616a:	46a6      	mov	lr, r4
 810616c:	460a      	mov	r2, r1
 810616e:	fb91 f6f7 	sdiv	r6, r1, r7
 8106172:	fb07 1516 	mls	r5, r7, r6, r1
 8106176:	3530      	adds	r5, #48	; 0x30
 8106178:	2a63      	cmp	r2, #99	; 0x63
 810617a:	f104 34ff 	add.w	r4, r4, #4294967295
 810617e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8106182:	4631      	mov	r1, r6
 8106184:	dcf1      	bgt.n	810616a <__exponent+0x22>
 8106186:	3130      	adds	r1, #48	; 0x30
 8106188:	f1ae 0502 	sub.w	r5, lr, #2
 810618c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8106190:	1c44      	adds	r4, r0, #1
 8106192:	4629      	mov	r1, r5
 8106194:	4561      	cmp	r1, ip
 8106196:	d30a      	bcc.n	81061ae <__exponent+0x66>
 8106198:	f10d 0209 	add.w	r2, sp, #9
 810619c:	eba2 020e 	sub.w	r2, r2, lr
 81061a0:	4565      	cmp	r5, ip
 81061a2:	bf88      	it	hi
 81061a4:	2200      	movhi	r2, #0
 81061a6:	4413      	add	r3, r2
 81061a8:	1a18      	subs	r0, r3, r0
 81061aa:	b003      	add	sp, #12
 81061ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81061ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 81061b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 81061b6:	e7ed      	b.n	8106194 <__exponent+0x4c>
 81061b8:	2330      	movs	r3, #48	; 0x30
 81061ba:	3130      	adds	r1, #48	; 0x30
 81061bc:	7083      	strb	r3, [r0, #2]
 81061be:	70c1      	strb	r1, [r0, #3]
 81061c0:	1d03      	adds	r3, r0, #4
 81061c2:	e7f1      	b.n	81061a8 <__exponent+0x60>

081061c4 <_printf_float>:
 81061c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81061c8:	ed2d 8b02 	vpush	{d8}
 81061cc:	b08d      	sub	sp, #52	; 0x34
 81061ce:	460c      	mov	r4, r1
 81061d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 81061d4:	4616      	mov	r6, r2
 81061d6:	461f      	mov	r7, r3
 81061d8:	4605      	mov	r5, r0
 81061da:	f003 f98d 	bl	81094f8 <_localeconv_r>
 81061de:	f8d0 a000 	ldr.w	sl, [r0]
 81061e2:	4650      	mov	r0, sl
 81061e4:	f7fa f87c 	bl	81002e0 <strlen>
 81061e8:	2300      	movs	r3, #0
 81061ea:	930a      	str	r3, [sp, #40]	; 0x28
 81061ec:	6823      	ldr	r3, [r4, #0]
 81061ee:	9305      	str	r3, [sp, #20]
 81061f0:	f8d8 3000 	ldr.w	r3, [r8]
 81061f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 81061f8:	3307      	adds	r3, #7
 81061fa:	f023 0307 	bic.w	r3, r3, #7
 81061fe:	f103 0208 	add.w	r2, r3, #8
 8106202:	f8c8 2000 	str.w	r2, [r8]
 8106206:	e9d3 2300 	ldrd	r2, r3, [r3]
 810620a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810620e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8106212:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8106216:	9307      	str	r3, [sp, #28]
 8106218:	f8cd 8018 	str.w	r8, [sp, #24]
 810621c:	ee08 0a10 	vmov	s16, r0
 8106220:	4b9f      	ldr	r3, [pc, #636]	; (81064a0 <_printf_float+0x2dc>)
 8106222:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8106226:	f04f 32ff 	mov.w	r2, #4294967295
 810622a:	f7fa fd07 	bl	8100c3c <__aeabi_dcmpun>
 810622e:	bb88      	cbnz	r0, 8106294 <_printf_float+0xd0>
 8106230:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8106234:	4b9a      	ldr	r3, [pc, #616]	; (81064a0 <_printf_float+0x2dc>)
 8106236:	f04f 32ff 	mov.w	r2, #4294967295
 810623a:	f7fa fce1 	bl	8100c00 <__aeabi_dcmple>
 810623e:	bb48      	cbnz	r0, 8106294 <_printf_float+0xd0>
 8106240:	2200      	movs	r2, #0
 8106242:	2300      	movs	r3, #0
 8106244:	4640      	mov	r0, r8
 8106246:	4649      	mov	r1, r9
 8106248:	f7fa fcd0 	bl	8100bec <__aeabi_dcmplt>
 810624c:	b110      	cbz	r0, 8106254 <_printf_float+0x90>
 810624e:	232d      	movs	r3, #45	; 0x2d
 8106250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106254:	4b93      	ldr	r3, [pc, #588]	; (81064a4 <_printf_float+0x2e0>)
 8106256:	4894      	ldr	r0, [pc, #592]	; (81064a8 <_printf_float+0x2e4>)
 8106258:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 810625c:	bf94      	ite	ls
 810625e:	4698      	movls	r8, r3
 8106260:	4680      	movhi	r8, r0
 8106262:	2303      	movs	r3, #3
 8106264:	6123      	str	r3, [r4, #16]
 8106266:	9b05      	ldr	r3, [sp, #20]
 8106268:	f023 0204 	bic.w	r2, r3, #4
 810626c:	6022      	str	r2, [r4, #0]
 810626e:	f04f 0900 	mov.w	r9, #0
 8106272:	9700      	str	r7, [sp, #0]
 8106274:	4633      	mov	r3, r6
 8106276:	aa0b      	add	r2, sp, #44	; 0x2c
 8106278:	4621      	mov	r1, r4
 810627a:	4628      	mov	r0, r5
 810627c:	f000 f9d8 	bl	8106630 <_printf_common>
 8106280:	3001      	adds	r0, #1
 8106282:	f040 8090 	bne.w	81063a6 <_printf_float+0x1e2>
 8106286:	f04f 30ff 	mov.w	r0, #4294967295
 810628a:	b00d      	add	sp, #52	; 0x34
 810628c:	ecbd 8b02 	vpop	{d8}
 8106290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106294:	4642      	mov	r2, r8
 8106296:	464b      	mov	r3, r9
 8106298:	4640      	mov	r0, r8
 810629a:	4649      	mov	r1, r9
 810629c:	f7fa fcce 	bl	8100c3c <__aeabi_dcmpun>
 81062a0:	b140      	cbz	r0, 81062b4 <_printf_float+0xf0>
 81062a2:	464b      	mov	r3, r9
 81062a4:	2b00      	cmp	r3, #0
 81062a6:	bfbc      	itt	lt
 81062a8:	232d      	movlt	r3, #45	; 0x2d
 81062aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81062ae:	487f      	ldr	r0, [pc, #508]	; (81064ac <_printf_float+0x2e8>)
 81062b0:	4b7f      	ldr	r3, [pc, #508]	; (81064b0 <_printf_float+0x2ec>)
 81062b2:	e7d1      	b.n	8106258 <_printf_float+0x94>
 81062b4:	6863      	ldr	r3, [r4, #4]
 81062b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 81062ba:	9206      	str	r2, [sp, #24]
 81062bc:	1c5a      	adds	r2, r3, #1
 81062be:	d13f      	bne.n	8106340 <_printf_float+0x17c>
 81062c0:	2306      	movs	r3, #6
 81062c2:	6063      	str	r3, [r4, #4]
 81062c4:	9b05      	ldr	r3, [sp, #20]
 81062c6:	6861      	ldr	r1, [r4, #4]
 81062c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81062cc:	2300      	movs	r3, #0
 81062ce:	9303      	str	r3, [sp, #12]
 81062d0:	ab0a      	add	r3, sp, #40	; 0x28
 81062d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 81062d6:	ab09      	add	r3, sp, #36	; 0x24
 81062d8:	ec49 8b10 	vmov	d0, r8, r9
 81062dc:	9300      	str	r3, [sp, #0]
 81062de:	6022      	str	r2, [r4, #0]
 81062e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 81062e4:	4628      	mov	r0, r5
 81062e6:	f7ff fecd 	bl	8106084 <__cvt>
 81062ea:	9b06      	ldr	r3, [sp, #24]
 81062ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 81062ee:	2b47      	cmp	r3, #71	; 0x47
 81062f0:	4680      	mov	r8, r0
 81062f2:	d108      	bne.n	8106306 <_printf_float+0x142>
 81062f4:	1cc8      	adds	r0, r1, #3
 81062f6:	db02      	blt.n	81062fe <_printf_float+0x13a>
 81062f8:	6863      	ldr	r3, [r4, #4]
 81062fa:	4299      	cmp	r1, r3
 81062fc:	dd41      	ble.n	8106382 <_printf_float+0x1be>
 81062fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8106302:	fa5f fb8b 	uxtb.w	fp, fp
 8106306:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810630a:	d820      	bhi.n	810634e <_printf_float+0x18a>
 810630c:	3901      	subs	r1, #1
 810630e:	465a      	mov	r2, fp
 8106310:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8106314:	9109      	str	r1, [sp, #36]	; 0x24
 8106316:	f7ff ff17 	bl	8106148 <__exponent>
 810631a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810631c:	1813      	adds	r3, r2, r0
 810631e:	2a01      	cmp	r2, #1
 8106320:	4681      	mov	r9, r0
 8106322:	6123      	str	r3, [r4, #16]
 8106324:	dc02      	bgt.n	810632c <_printf_float+0x168>
 8106326:	6822      	ldr	r2, [r4, #0]
 8106328:	07d2      	lsls	r2, r2, #31
 810632a:	d501      	bpl.n	8106330 <_printf_float+0x16c>
 810632c:	3301      	adds	r3, #1
 810632e:	6123      	str	r3, [r4, #16]
 8106330:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8106334:	2b00      	cmp	r3, #0
 8106336:	d09c      	beq.n	8106272 <_printf_float+0xae>
 8106338:	232d      	movs	r3, #45	; 0x2d
 810633a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810633e:	e798      	b.n	8106272 <_printf_float+0xae>
 8106340:	9a06      	ldr	r2, [sp, #24]
 8106342:	2a47      	cmp	r2, #71	; 0x47
 8106344:	d1be      	bne.n	81062c4 <_printf_float+0x100>
 8106346:	2b00      	cmp	r3, #0
 8106348:	d1bc      	bne.n	81062c4 <_printf_float+0x100>
 810634a:	2301      	movs	r3, #1
 810634c:	e7b9      	b.n	81062c2 <_printf_float+0xfe>
 810634e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8106352:	d118      	bne.n	8106386 <_printf_float+0x1c2>
 8106354:	2900      	cmp	r1, #0
 8106356:	6863      	ldr	r3, [r4, #4]
 8106358:	dd0b      	ble.n	8106372 <_printf_float+0x1ae>
 810635a:	6121      	str	r1, [r4, #16]
 810635c:	b913      	cbnz	r3, 8106364 <_printf_float+0x1a0>
 810635e:	6822      	ldr	r2, [r4, #0]
 8106360:	07d0      	lsls	r0, r2, #31
 8106362:	d502      	bpl.n	810636a <_printf_float+0x1a6>
 8106364:	3301      	adds	r3, #1
 8106366:	440b      	add	r3, r1
 8106368:	6123      	str	r3, [r4, #16]
 810636a:	65a1      	str	r1, [r4, #88]	; 0x58
 810636c:	f04f 0900 	mov.w	r9, #0
 8106370:	e7de      	b.n	8106330 <_printf_float+0x16c>
 8106372:	b913      	cbnz	r3, 810637a <_printf_float+0x1b6>
 8106374:	6822      	ldr	r2, [r4, #0]
 8106376:	07d2      	lsls	r2, r2, #31
 8106378:	d501      	bpl.n	810637e <_printf_float+0x1ba>
 810637a:	3302      	adds	r3, #2
 810637c:	e7f4      	b.n	8106368 <_printf_float+0x1a4>
 810637e:	2301      	movs	r3, #1
 8106380:	e7f2      	b.n	8106368 <_printf_float+0x1a4>
 8106382:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8106386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106388:	4299      	cmp	r1, r3
 810638a:	db05      	blt.n	8106398 <_printf_float+0x1d4>
 810638c:	6823      	ldr	r3, [r4, #0]
 810638e:	6121      	str	r1, [r4, #16]
 8106390:	07d8      	lsls	r0, r3, #31
 8106392:	d5ea      	bpl.n	810636a <_printf_float+0x1a6>
 8106394:	1c4b      	adds	r3, r1, #1
 8106396:	e7e7      	b.n	8106368 <_printf_float+0x1a4>
 8106398:	2900      	cmp	r1, #0
 810639a:	bfd4      	ite	le
 810639c:	f1c1 0202 	rsble	r2, r1, #2
 81063a0:	2201      	movgt	r2, #1
 81063a2:	4413      	add	r3, r2
 81063a4:	e7e0      	b.n	8106368 <_printf_float+0x1a4>
 81063a6:	6823      	ldr	r3, [r4, #0]
 81063a8:	055a      	lsls	r2, r3, #21
 81063aa:	d407      	bmi.n	81063bc <_printf_float+0x1f8>
 81063ac:	6923      	ldr	r3, [r4, #16]
 81063ae:	4642      	mov	r2, r8
 81063b0:	4631      	mov	r1, r6
 81063b2:	4628      	mov	r0, r5
 81063b4:	47b8      	blx	r7
 81063b6:	3001      	adds	r0, #1
 81063b8:	d12c      	bne.n	8106414 <_printf_float+0x250>
 81063ba:	e764      	b.n	8106286 <_printf_float+0xc2>
 81063bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81063c0:	f240 80e0 	bls.w	8106584 <_printf_float+0x3c0>
 81063c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81063c8:	2200      	movs	r2, #0
 81063ca:	2300      	movs	r3, #0
 81063cc:	f7fa fc04 	bl	8100bd8 <__aeabi_dcmpeq>
 81063d0:	2800      	cmp	r0, #0
 81063d2:	d034      	beq.n	810643e <_printf_float+0x27a>
 81063d4:	4a37      	ldr	r2, [pc, #220]	; (81064b4 <_printf_float+0x2f0>)
 81063d6:	2301      	movs	r3, #1
 81063d8:	4631      	mov	r1, r6
 81063da:	4628      	mov	r0, r5
 81063dc:	47b8      	blx	r7
 81063de:	3001      	adds	r0, #1
 81063e0:	f43f af51 	beq.w	8106286 <_printf_float+0xc2>
 81063e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81063e8:	429a      	cmp	r2, r3
 81063ea:	db02      	blt.n	81063f2 <_printf_float+0x22e>
 81063ec:	6823      	ldr	r3, [r4, #0]
 81063ee:	07d8      	lsls	r0, r3, #31
 81063f0:	d510      	bpl.n	8106414 <_printf_float+0x250>
 81063f2:	ee18 3a10 	vmov	r3, s16
 81063f6:	4652      	mov	r2, sl
 81063f8:	4631      	mov	r1, r6
 81063fa:	4628      	mov	r0, r5
 81063fc:	47b8      	blx	r7
 81063fe:	3001      	adds	r0, #1
 8106400:	f43f af41 	beq.w	8106286 <_printf_float+0xc2>
 8106404:	f04f 0800 	mov.w	r8, #0
 8106408:	f104 091a 	add.w	r9, r4, #26
 810640c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810640e:	3b01      	subs	r3, #1
 8106410:	4543      	cmp	r3, r8
 8106412:	dc09      	bgt.n	8106428 <_printf_float+0x264>
 8106414:	6823      	ldr	r3, [r4, #0]
 8106416:	079b      	lsls	r3, r3, #30
 8106418:	f100 8105 	bmi.w	8106626 <_printf_float+0x462>
 810641c:	68e0      	ldr	r0, [r4, #12]
 810641e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8106420:	4298      	cmp	r0, r3
 8106422:	bfb8      	it	lt
 8106424:	4618      	movlt	r0, r3
 8106426:	e730      	b.n	810628a <_printf_float+0xc6>
 8106428:	2301      	movs	r3, #1
 810642a:	464a      	mov	r2, r9
 810642c:	4631      	mov	r1, r6
 810642e:	4628      	mov	r0, r5
 8106430:	47b8      	blx	r7
 8106432:	3001      	adds	r0, #1
 8106434:	f43f af27 	beq.w	8106286 <_printf_float+0xc2>
 8106438:	f108 0801 	add.w	r8, r8, #1
 810643c:	e7e6      	b.n	810640c <_printf_float+0x248>
 810643e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106440:	2b00      	cmp	r3, #0
 8106442:	dc39      	bgt.n	81064b8 <_printf_float+0x2f4>
 8106444:	4a1b      	ldr	r2, [pc, #108]	; (81064b4 <_printf_float+0x2f0>)
 8106446:	2301      	movs	r3, #1
 8106448:	4631      	mov	r1, r6
 810644a:	4628      	mov	r0, r5
 810644c:	47b8      	blx	r7
 810644e:	3001      	adds	r0, #1
 8106450:	f43f af19 	beq.w	8106286 <_printf_float+0xc2>
 8106454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8106458:	4313      	orrs	r3, r2
 810645a:	d102      	bne.n	8106462 <_printf_float+0x29e>
 810645c:	6823      	ldr	r3, [r4, #0]
 810645e:	07d9      	lsls	r1, r3, #31
 8106460:	d5d8      	bpl.n	8106414 <_printf_float+0x250>
 8106462:	ee18 3a10 	vmov	r3, s16
 8106466:	4652      	mov	r2, sl
 8106468:	4631      	mov	r1, r6
 810646a:	4628      	mov	r0, r5
 810646c:	47b8      	blx	r7
 810646e:	3001      	adds	r0, #1
 8106470:	f43f af09 	beq.w	8106286 <_printf_float+0xc2>
 8106474:	f04f 0900 	mov.w	r9, #0
 8106478:	f104 0a1a 	add.w	sl, r4, #26
 810647c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810647e:	425b      	negs	r3, r3
 8106480:	454b      	cmp	r3, r9
 8106482:	dc01      	bgt.n	8106488 <_printf_float+0x2c4>
 8106484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106486:	e792      	b.n	81063ae <_printf_float+0x1ea>
 8106488:	2301      	movs	r3, #1
 810648a:	4652      	mov	r2, sl
 810648c:	4631      	mov	r1, r6
 810648e:	4628      	mov	r0, r5
 8106490:	47b8      	blx	r7
 8106492:	3001      	adds	r0, #1
 8106494:	f43f aef7 	beq.w	8106286 <_printf_float+0xc2>
 8106498:	f109 0901 	add.w	r9, r9, #1
 810649c:	e7ee      	b.n	810647c <_printf_float+0x2b8>
 810649e:	bf00      	nop
 81064a0:	7fefffff 	.word	0x7fefffff
 81064a4:	0810ab84 	.word	0x0810ab84
 81064a8:	0810ab88 	.word	0x0810ab88
 81064ac:	0810ab90 	.word	0x0810ab90
 81064b0:	0810ab8c 	.word	0x0810ab8c
 81064b4:	0810ab94 	.word	0x0810ab94
 81064b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81064ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81064bc:	429a      	cmp	r2, r3
 81064be:	bfa8      	it	ge
 81064c0:	461a      	movge	r2, r3
 81064c2:	2a00      	cmp	r2, #0
 81064c4:	4691      	mov	r9, r2
 81064c6:	dc37      	bgt.n	8106538 <_printf_float+0x374>
 81064c8:	f04f 0b00 	mov.w	fp, #0
 81064cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81064d0:	f104 021a 	add.w	r2, r4, #26
 81064d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81064d6:	9305      	str	r3, [sp, #20]
 81064d8:	eba3 0309 	sub.w	r3, r3, r9
 81064dc:	455b      	cmp	r3, fp
 81064de:	dc33      	bgt.n	8106548 <_printf_float+0x384>
 81064e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81064e4:	429a      	cmp	r2, r3
 81064e6:	db3b      	blt.n	8106560 <_printf_float+0x39c>
 81064e8:	6823      	ldr	r3, [r4, #0]
 81064ea:	07da      	lsls	r2, r3, #31
 81064ec:	d438      	bmi.n	8106560 <_printf_float+0x39c>
 81064ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81064f0:	9a05      	ldr	r2, [sp, #20]
 81064f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 81064f4:	1a9a      	subs	r2, r3, r2
 81064f6:	eba3 0901 	sub.w	r9, r3, r1
 81064fa:	4591      	cmp	r9, r2
 81064fc:	bfa8      	it	ge
 81064fe:	4691      	movge	r9, r2
 8106500:	f1b9 0f00 	cmp.w	r9, #0
 8106504:	dc35      	bgt.n	8106572 <_printf_float+0x3ae>
 8106506:	f04f 0800 	mov.w	r8, #0
 810650a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810650e:	f104 0a1a 	add.w	sl, r4, #26
 8106512:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8106516:	1a9b      	subs	r3, r3, r2
 8106518:	eba3 0309 	sub.w	r3, r3, r9
 810651c:	4543      	cmp	r3, r8
 810651e:	f77f af79 	ble.w	8106414 <_printf_float+0x250>
 8106522:	2301      	movs	r3, #1
 8106524:	4652      	mov	r2, sl
 8106526:	4631      	mov	r1, r6
 8106528:	4628      	mov	r0, r5
 810652a:	47b8      	blx	r7
 810652c:	3001      	adds	r0, #1
 810652e:	f43f aeaa 	beq.w	8106286 <_printf_float+0xc2>
 8106532:	f108 0801 	add.w	r8, r8, #1
 8106536:	e7ec      	b.n	8106512 <_printf_float+0x34e>
 8106538:	4613      	mov	r3, r2
 810653a:	4631      	mov	r1, r6
 810653c:	4642      	mov	r2, r8
 810653e:	4628      	mov	r0, r5
 8106540:	47b8      	blx	r7
 8106542:	3001      	adds	r0, #1
 8106544:	d1c0      	bne.n	81064c8 <_printf_float+0x304>
 8106546:	e69e      	b.n	8106286 <_printf_float+0xc2>
 8106548:	2301      	movs	r3, #1
 810654a:	4631      	mov	r1, r6
 810654c:	4628      	mov	r0, r5
 810654e:	9205      	str	r2, [sp, #20]
 8106550:	47b8      	blx	r7
 8106552:	3001      	adds	r0, #1
 8106554:	f43f ae97 	beq.w	8106286 <_printf_float+0xc2>
 8106558:	9a05      	ldr	r2, [sp, #20]
 810655a:	f10b 0b01 	add.w	fp, fp, #1
 810655e:	e7b9      	b.n	81064d4 <_printf_float+0x310>
 8106560:	ee18 3a10 	vmov	r3, s16
 8106564:	4652      	mov	r2, sl
 8106566:	4631      	mov	r1, r6
 8106568:	4628      	mov	r0, r5
 810656a:	47b8      	blx	r7
 810656c:	3001      	adds	r0, #1
 810656e:	d1be      	bne.n	81064ee <_printf_float+0x32a>
 8106570:	e689      	b.n	8106286 <_printf_float+0xc2>
 8106572:	9a05      	ldr	r2, [sp, #20]
 8106574:	464b      	mov	r3, r9
 8106576:	4442      	add	r2, r8
 8106578:	4631      	mov	r1, r6
 810657a:	4628      	mov	r0, r5
 810657c:	47b8      	blx	r7
 810657e:	3001      	adds	r0, #1
 8106580:	d1c1      	bne.n	8106506 <_printf_float+0x342>
 8106582:	e680      	b.n	8106286 <_printf_float+0xc2>
 8106584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8106586:	2a01      	cmp	r2, #1
 8106588:	dc01      	bgt.n	810658e <_printf_float+0x3ca>
 810658a:	07db      	lsls	r3, r3, #31
 810658c:	d538      	bpl.n	8106600 <_printf_float+0x43c>
 810658e:	2301      	movs	r3, #1
 8106590:	4642      	mov	r2, r8
 8106592:	4631      	mov	r1, r6
 8106594:	4628      	mov	r0, r5
 8106596:	47b8      	blx	r7
 8106598:	3001      	adds	r0, #1
 810659a:	f43f ae74 	beq.w	8106286 <_printf_float+0xc2>
 810659e:	ee18 3a10 	vmov	r3, s16
 81065a2:	4652      	mov	r2, sl
 81065a4:	4631      	mov	r1, r6
 81065a6:	4628      	mov	r0, r5
 81065a8:	47b8      	blx	r7
 81065aa:	3001      	adds	r0, #1
 81065ac:	f43f ae6b 	beq.w	8106286 <_printf_float+0xc2>
 81065b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81065b4:	2200      	movs	r2, #0
 81065b6:	2300      	movs	r3, #0
 81065b8:	f7fa fb0e 	bl	8100bd8 <__aeabi_dcmpeq>
 81065bc:	b9d8      	cbnz	r0, 81065f6 <_printf_float+0x432>
 81065be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81065c0:	f108 0201 	add.w	r2, r8, #1
 81065c4:	3b01      	subs	r3, #1
 81065c6:	4631      	mov	r1, r6
 81065c8:	4628      	mov	r0, r5
 81065ca:	47b8      	blx	r7
 81065cc:	3001      	adds	r0, #1
 81065ce:	d10e      	bne.n	81065ee <_printf_float+0x42a>
 81065d0:	e659      	b.n	8106286 <_printf_float+0xc2>
 81065d2:	2301      	movs	r3, #1
 81065d4:	4652      	mov	r2, sl
 81065d6:	4631      	mov	r1, r6
 81065d8:	4628      	mov	r0, r5
 81065da:	47b8      	blx	r7
 81065dc:	3001      	adds	r0, #1
 81065de:	f43f ae52 	beq.w	8106286 <_printf_float+0xc2>
 81065e2:	f108 0801 	add.w	r8, r8, #1
 81065e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81065e8:	3b01      	subs	r3, #1
 81065ea:	4543      	cmp	r3, r8
 81065ec:	dcf1      	bgt.n	81065d2 <_printf_float+0x40e>
 81065ee:	464b      	mov	r3, r9
 81065f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81065f4:	e6dc      	b.n	81063b0 <_printf_float+0x1ec>
 81065f6:	f04f 0800 	mov.w	r8, #0
 81065fa:	f104 0a1a 	add.w	sl, r4, #26
 81065fe:	e7f2      	b.n	81065e6 <_printf_float+0x422>
 8106600:	2301      	movs	r3, #1
 8106602:	4642      	mov	r2, r8
 8106604:	e7df      	b.n	81065c6 <_printf_float+0x402>
 8106606:	2301      	movs	r3, #1
 8106608:	464a      	mov	r2, r9
 810660a:	4631      	mov	r1, r6
 810660c:	4628      	mov	r0, r5
 810660e:	47b8      	blx	r7
 8106610:	3001      	adds	r0, #1
 8106612:	f43f ae38 	beq.w	8106286 <_printf_float+0xc2>
 8106616:	f108 0801 	add.w	r8, r8, #1
 810661a:	68e3      	ldr	r3, [r4, #12]
 810661c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810661e:	1a5b      	subs	r3, r3, r1
 8106620:	4543      	cmp	r3, r8
 8106622:	dcf0      	bgt.n	8106606 <_printf_float+0x442>
 8106624:	e6fa      	b.n	810641c <_printf_float+0x258>
 8106626:	f04f 0800 	mov.w	r8, #0
 810662a:	f104 0919 	add.w	r9, r4, #25
 810662e:	e7f4      	b.n	810661a <_printf_float+0x456>

08106630 <_printf_common>:
 8106630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106634:	4616      	mov	r6, r2
 8106636:	4699      	mov	r9, r3
 8106638:	688a      	ldr	r2, [r1, #8]
 810663a:	690b      	ldr	r3, [r1, #16]
 810663c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8106640:	4293      	cmp	r3, r2
 8106642:	bfb8      	it	lt
 8106644:	4613      	movlt	r3, r2
 8106646:	6033      	str	r3, [r6, #0]
 8106648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810664c:	4607      	mov	r7, r0
 810664e:	460c      	mov	r4, r1
 8106650:	b10a      	cbz	r2, 8106656 <_printf_common+0x26>
 8106652:	3301      	adds	r3, #1
 8106654:	6033      	str	r3, [r6, #0]
 8106656:	6823      	ldr	r3, [r4, #0]
 8106658:	0699      	lsls	r1, r3, #26
 810665a:	bf42      	ittt	mi
 810665c:	6833      	ldrmi	r3, [r6, #0]
 810665e:	3302      	addmi	r3, #2
 8106660:	6033      	strmi	r3, [r6, #0]
 8106662:	6825      	ldr	r5, [r4, #0]
 8106664:	f015 0506 	ands.w	r5, r5, #6
 8106668:	d106      	bne.n	8106678 <_printf_common+0x48>
 810666a:	f104 0a19 	add.w	sl, r4, #25
 810666e:	68e3      	ldr	r3, [r4, #12]
 8106670:	6832      	ldr	r2, [r6, #0]
 8106672:	1a9b      	subs	r3, r3, r2
 8106674:	42ab      	cmp	r3, r5
 8106676:	dc26      	bgt.n	81066c6 <_printf_common+0x96>
 8106678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810667c:	1e13      	subs	r3, r2, #0
 810667e:	6822      	ldr	r2, [r4, #0]
 8106680:	bf18      	it	ne
 8106682:	2301      	movne	r3, #1
 8106684:	0692      	lsls	r2, r2, #26
 8106686:	d42b      	bmi.n	81066e0 <_printf_common+0xb0>
 8106688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810668c:	4649      	mov	r1, r9
 810668e:	4638      	mov	r0, r7
 8106690:	47c0      	blx	r8
 8106692:	3001      	adds	r0, #1
 8106694:	d01e      	beq.n	81066d4 <_printf_common+0xa4>
 8106696:	6823      	ldr	r3, [r4, #0]
 8106698:	68e5      	ldr	r5, [r4, #12]
 810669a:	6832      	ldr	r2, [r6, #0]
 810669c:	f003 0306 	and.w	r3, r3, #6
 81066a0:	2b04      	cmp	r3, #4
 81066a2:	bf08      	it	eq
 81066a4:	1aad      	subeq	r5, r5, r2
 81066a6:	68a3      	ldr	r3, [r4, #8]
 81066a8:	6922      	ldr	r2, [r4, #16]
 81066aa:	bf0c      	ite	eq
 81066ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81066b0:	2500      	movne	r5, #0
 81066b2:	4293      	cmp	r3, r2
 81066b4:	bfc4      	itt	gt
 81066b6:	1a9b      	subgt	r3, r3, r2
 81066b8:	18ed      	addgt	r5, r5, r3
 81066ba:	2600      	movs	r6, #0
 81066bc:	341a      	adds	r4, #26
 81066be:	42b5      	cmp	r5, r6
 81066c0:	d11a      	bne.n	81066f8 <_printf_common+0xc8>
 81066c2:	2000      	movs	r0, #0
 81066c4:	e008      	b.n	81066d8 <_printf_common+0xa8>
 81066c6:	2301      	movs	r3, #1
 81066c8:	4652      	mov	r2, sl
 81066ca:	4649      	mov	r1, r9
 81066cc:	4638      	mov	r0, r7
 81066ce:	47c0      	blx	r8
 81066d0:	3001      	adds	r0, #1
 81066d2:	d103      	bne.n	81066dc <_printf_common+0xac>
 81066d4:	f04f 30ff 	mov.w	r0, #4294967295
 81066d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81066dc:	3501      	adds	r5, #1
 81066de:	e7c6      	b.n	810666e <_printf_common+0x3e>
 81066e0:	18e1      	adds	r1, r4, r3
 81066e2:	1c5a      	adds	r2, r3, #1
 81066e4:	2030      	movs	r0, #48	; 0x30
 81066e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81066ea:	4422      	add	r2, r4
 81066ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81066f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81066f4:	3302      	adds	r3, #2
 81066f6:	e7c7      	b.n	8106688 <_printf_common+0x58>
 81066f8:	2301      	movs	r3, #1
 81066fa:	4622      	mov	r2, r4
 81066fc:	4649      	mov	r1, r9
 81066fe:	4638      	mov	r0, r7
 8106700:	47c0      	blx	r8
 8106702:	3001      	adds	r0, #1
 8106704:	d0e6      	beq.n	81066d4 <_printf_common+0xa4>
 8106706:	3601      	adds	r6, #1
 8106708:	e7d9      	b.n	81066be <_printf_common+0x8e>
	...

0810670c <_printf_i>:
 810670c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106710:	7e0f      	ldrb	r7, [r1, #24]
 8106712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8106714:	2f78      	cmp	r7, #120	; 0x78
 8106716:	4691      	mov	r9, r2
 8106718:	4680      	mov	r8, r0
 810671a:	460c      	mov	r4, r1
 810671c:	469a      	mov	sl, r3
 810671e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8106722:	d807      	bhi.n	8106734 <_printf_i+0x28>
 8106724:	2f62      	cmp	r7, #98	; 0x62
 8106726:	d80a      	bhi.n	810673e <_printf_i+0x32>
 8106728:	2f00      	cmp	r7, #0
 810672a:	f000 80d8 	beq.w	81068de <_printf_i+0x1d2>
 810672e:	2f58      	cmp	r7, #88	; 0x58
 8106730:	f000 80a3 	beq.w	810687a <_printf_i+0x16e>
 8106734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810673c:	e03a      	b.n	81067b4 <_printf_i+0xa8>
 810673e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8106742:	2b15      	cmp	r3, #21
 8106744:	d8f6      	bhi.n	8106734 <_printf_i+0x28>
 8106746:	a101      	add	r1, pc, #4	; (adr r1, 810674c <_printf_i+0x40>)
 8106748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810674c:	081067a5 	.word	0x081067a5
 8106750:	081067b9 	.word	0x081067b9
 8106754:	08106735 	.word	0x08106735
 8106758:	08106735 	.word	0x08106735
 810675c:	08106735 	.word	0x08106735
 8106760:	08106735 	.word	0x08106735
 8106764:	081067b9 	.word	0x081067b9
 8106768:	08106735 	.word	0x08106735
 810676c:	08106735 	.word	0x08106735
 8106770:	08106735 	.word	0x08106735
 8106774:	08106735 	.word	0x08106735
 8106778:	081068c5 	.word	0x081068c5
 810677c:	081067e9 	.word	0x081067e9
 8106780:	081068a7 	.word	0x081068a7
 8106784:	08106735 	.word	0x08106735
 8106788:	08106735 	.word	0x08106735
 810678c:	081068e7 	.word	0x081068e7
 8106790:	08106735 	.word	0x08106735
 8106794:	081067e9 	.word	0x081067e9
 8106798:	08106735 	.word	0x08106735
 810679c:	08106735 	.word	0x08106735
 81067a0:	081068af 	.word	0x081068af
 81067a4:	682b      	ldr	r3, [r5, #0]
 81067a6:	1d1a      	adds	r2, r3, #4
 81067a8:	681b      	ldr	r3, [r3, #0]
 81067aa:	602a      	str	r2, [r5, #0]
 81067ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81067b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81067b4:	2301      	movs	r3, #1
 81067b6:	e0a3      	b.n	8106900 <_printf_i+0x1f4>
 81067b8:	6820      	ldr	r0, [r4, #0]
 81067ba:	6829      	ldr	r1, [r5, #0]
 81067bc:	0606      	lsls	r6, r0, #24
 81067be:	f101 0304 	add.w	r3, r1, #4
 81067c2:	d50a      	bpl.n	81067da <_printf_i+0xce>
 81067c4:	680e      	ldr	r6, [r1, #0]
 81067c6:	602b      	str	r3, [r5, #0]
 81067c8:	2e00      	cmp	r6, #0
 81067ca:	da03      	bge.n	81067d4 <_printf_i+0xc8>
 81067cc:	232d      	movs	r3, #45	; 0x2d
 81067ce:	4276      	negs	r6, r6
 81067d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81067d4:	485e      	ldr	r0, [pc, #376]	; (8106950 <_printf_i+0x244>)
 81067d6:	230a      	movs	r3, #10
 81067d8:	e019      	b.n	810680e <_printf_i+0x102>
 81067da:	680e      	ldr	r6, [r1, #0]
 81067dc:	602b      	str	r3, [r5, #0]
 81067de:	f010 0f40 	tst.w	r0, #64	; 0x40
 81067e2:	bf18      	it	ne
 81067e4:	b236      	sxthne	r6, r6
 81067e6:	e7ef      	b.n	81067c8 <_printf_i+0xbc>
 81067e8:	682b      	ldr	r3, [r5, #0]
 81067ea:	6820      	ldr	r0, [r4, #0]
 81067ec:	1d19      	adds	r1, r3, #4
 81067ee:	6029      	str	r1, [r5, #0]
 81067f0:	0601      	lsls	r1, r0, #24
 81067f2:	d501      	bpl.n	81067f8 <_printf_i+0xec>
 81067f4:	681e      	ldr	r6, [r3, #0]
 81067f6:	e002      	b.n	81067fe <_printf_i+0xf2>
 81067f8:	0646      	lsls	r6, r0, #25
 81067fa:	d5fb      	bpl.n	81067f4 <_printf_i+0xe8>
 81067fc:	881e      	ldrh	r6, [r3, #0]
 81067fe:	4854      	ldr	r0, [pc, #336]	; (8106950 <_printf_i+0x244>)
 8106800:	2f6f      	cmp	r7, #111	; 0x6f
 8106802:	bf0c      	ite	eq
 8106804:	2308      	moveq	r3, #8
 8106806:	230a      	movne	r3, #10
 8106808:	2100      	movs	r1, #0
 810680a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810680e:	6865      	ldr	r5, [r4, #4]
 8106810:	60a5      	str	r5, [r4, #8]
 8106812:	2d00      	cmp	r5, #0
 8106814:	bfa2      	ittt	ge
 8106816:	6821      	ldrge	r1, [r4, #0]
 8106818:	f021 0104 	bicge.w	r1, r1, #4
 810681c:	6021      	strge	r1, [r4, #0]
 810681e:	b90e      	cbnz	r6, 8106824 <_printf_i+0x118>
 8106820:	2d00      	cmp	r5, #0
 8106822:	d04d      	beq.n	81068c0 <_printf_i+0x1b4>
 8106824:	4615      	mov	r5, r2
 8106826:	fbb6 f1f3 	udiv	r1, r6, r3
 810682a:	fb03 6711 	mls	r7, r3, r1, r6
 810682e:	5dc7      	ldrb	r7, [r0, r7]
 8106830:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8106834:	4637      	mov	r7, r6
 8106836:	42bb      	cmp	r3, r7
 8106838:	460e      	mov	r6, r1
 810683a:	d9f4      	bls.n	8106826 <_printf_i+0x11a>
 810683c:	2b08      	cmp	r3, #8
 810683e:	d10b      	bne.n	8106858 <_printf_i+0x14c>
 8106840:	6823      	ldr	r3, [r4, #0]
 8106842:	07de      	lsls	r6, r3, #31
 8106844:	d508      	bpl.n	8106858 <_printf_i+0x14c>
 8106846:	6923      	ldr	r3, [r4, #16]
 8106848:	6861      	ldr	r1, [r4, #4]
 810684a:	4299      	cmp	r1, r3
 810684c:	bfde      	ittt	le
 810684e:	2330      	movle	r3, #48	; 0x30
 8106850:	f805 3c01 	strble.w	r3, [r5, #-1]
 8106854:	f105 35ff 	addle.w	r5, r5, #4294967295
 8106858:	1b52      	subs	r2, r2, r5
 810685a:	6122      	str	r2, [r4, #16]
 810685c:	f8cd a000 	str.w	sl, [sp]
 8106860:	464b      	mov	r3, r9
 8106862:	aa03      	add	r2, sp, #12
 8106864:	4621      	mov	r1, r4
 8106866:	4640      	mov	r0, r8
 8106868:	f7ff fee2 	bl	8106630 <_printf_common>
 810686c:	3001      	adds	r0, #1
 810686e:	d14c      	bne.n	810690a <_printf_i+0x1fe>
 8106870:	f04f 30ff 	mov.w	r0, #4294967295
 8106874:	b004      	add	sp, #16
 8106876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810687a:	4835      	ldr	r0, [pc, #212]	; (8106950 <_printf_i+0x244>)
 810687c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8106880:	6829      	ldr	r1, [r5, #0]
 8106882:	6823      	ldr	r3, [r4, #0]
 8106884:	f851 6b04 	ldr.w	r6, [r1], #4
 8106888:	6029      	str	r1, [r5, #0]
 810688a:	061d      	lsls	r5, r3, #24
 810688c:	d514      	bpl.n	81068b8 <_printf_i+0x1ac>
 810688e:	07df      	lsls	r7, r3, #31
 8106890:	bf44      	itt	mi
 8106892:	f043 0320 	orrmi.w	r3, r3, #32
 8106896:	6023      	strmi	r3, [r4, #0]
 8106898:	b91e      	cbnz	r6, 81068a2 <_printf_i+0x196>
 810689a:	6823      	ldr	r3, [r4, #0]
 810689c:	f023 0320 	bic.w	r3, r3, #32
 81068a0:	6023      	str	r3, [r4, #0]
 81068a2:	2310      	movs	r3, #16
 81068a4:	e7b0      	b.n	8106808 <_printf_i+0xfc>
 81068a6:	6823      	ldr	r3, [r4, #0]
 81068a8:	f043 0320 	orr.w	r3, r3, #32
 81068ac:	6023      	str	r3, [r4, #0]
 81068ae:	2378      	movs	r3, #120	; 0x78
 81068b0:	4828      	ldr	r0, [pc, #160]	; (8106954 <_printf_i+0x248>)
 81068b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81068b6:	e7e3      	b.n	8106880 <_printf_i+0x174>
 81068b8:	0659      	lsls	r1, r3, #25
 81068ba:	bf48      	it	mi
 81068bc:	b2b6      	uxthmi	r6, r6
 81068be:	e7e6      	b.n	810688e <_printf_i+0x182>
 81068c0:	4615      	mov	r5, r2
 81068c2:	e7bb      	b.n	810683c <_printf_i+0x130>
 81068c4:	682b      	ldr	r3, [r5, #0]
 81068c6:	6826      	ldr	r6, [r4, #0]
 81068c8:	6961      	ldr	r1, [r4, #20]
 81068ca:	1d18      	adds	r0, r3, #4
 81068cc:	6028      	str	r0, [r5, #0]
 81068ce:	0635      	lsls	r5, r6, #24
 81068d0:	681b      	ldr	r3, [r3, #0]
 81068d2:	d501      	bpl.n	81068d8 <_printf_i+0x1cc>
 81068d4:	6019      	str	r1, [r3, #0]
 81068d6:	e002      	b.n	81068de <_printf_i+0x1d2>
 81068d8:	0670      	lsls	r0, r6, #25
 81068da:	d5fb      	bpl.n	81068d4 <_printf_i+0x1c8>
 81068dc:	8019      	strh	r1, [r3, #0]
 81068de:	2300      	movs	r3, #0
 81068e0:	6123      	str	r3, [r4, #16]
 81068e2:	4615      	mov	r5, r2
 81068e4:	e7ba      	b.n	810685c <_printf_i+0x150>
 81068e6:	682b      	ldr	r3, [r5, #0]
 81068e8:	1d1a      	adds	r2, r3, #4
 81068ea:	602a      	str	r2, [r5, #0]
 81068ec:	681d      	ldr	r5, [r3, #0]
 81068ee:	6862      	ldr	r2, [r4, #4]
 81068f0:	2100      	movs	r1, #0
 81068f2:	4628      	mov	r0, r5
 81068f4:	f7f9 fcfc 	bl	81002f0 <memchr>
 81068f8:	b108      	cbz	r0, 81068fe <_printf_i+0x1f2>
 81068fa:	1b40      	subs	r0, r0, r5
 81068fc:	6060      	str	r0, [r4, #4]
 81068fe:	6863      	ldr	r3, [r4, #4]
 8106900:	6123      	str	r3, [r4, #16]
 8106902:	2300      	movs	r3, #0
 8106904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106908:	e7a8      	b.n	810685c <_printf_i+0x150>
 810690a:	6923      	ldr	r3, [r4, #16]
 810690c:	462a      	mov	r2, r5
 810690e:	4649      	mov	r1, r9
 8106910:	4640      	mov	r0, r8
 8106912:	47d0      	blx	sl
 8106914:	3001      	adds	r0, #1
 8106916:	d0ab      	beq.n	8106870 <_printf_i+0x164>
 8106918:	6823      	ldr	r3, [r4, #0]
 810691a:	079b      	lsls	r3, r3, #30
 810691c:	d413      	bmi.n	8106946 <_printf_i+0x23a>
 810691e:	68e0      	ldr	r0, [r4, #12]
 8106920:	9b03      	ldr	r3, [sp, #12]
 8106922:	4298      	cmp	r0, r3
 8106924:	bfb8      	it	lt
 8106926:	4618      	movlt	r0, r3
 8106928:	e7a4      	b.n	8106874 <_printf_i+0x168>
 810692a:	2301      	movs	r3, #1
 810692c:	4632      	mov	r2, r6
 810692e:	4649      	mov	r1, r9
 8106930:	4640      	mov	r0, r8
 8106932:	47d0      	blx	sl
 8106934:	3001      	adds	r0, #1
 8106936:	d09b      	beq.n	8106870 <_printf_i+0x164>
 8106938:	3501      	adds	r5, #1
 810693a:	68e3      	ldr	r3, [r4, #12]
 810693c:	9903      	ldr	r1, [sp, #12]
 810693e:	1a5b      	subs	r3, r3, r1
 8106940:	42ab      	cmp	r3, r5
 8106942:	dcf2      	bgt.n	810692a <_printf_i+0x21e>
 8106944:	e7eb      	b.n	810691e <_printf_i+0x212>
 8106946:	2500      	movs	r5, #0
 8106948:	f104 0619 	add.w	r6, r4, #25
 810694c:	e7f5      	b.n	810693a <_printf_i+0x22e>
 810694e:	bf00      	nop
 8106950:	0810ab96 	.word	0x0810ab96
 8106954:	0810aba7 	.word	0x0810aba7

08106958 <_scanf_float>:
 8106958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810695c:	b087      	sub	sp, #28
 810695e:	4617      	mov	r7, r2
 8106960:	9303      	str	r3, [sp, #12]
 8106962:	688b      	ldr	r3, [r1, #8]
 8106964:	1e5a      	subs	r2, r3, #1
 8106966:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810696a:	bf83      	ittte	hi
 810696c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8106970:	195b      	addhi	r3, r3, r5
 8106972:	9302      	strhi	r3, [sp, #8]
 8106974:	2300      	movls	r3, #0
 8106976:	bf86      	itte	hi
 8106978:	f240 135d 	movwhi	r3, #349	; 0x15d
 810697c:	608b      	strhi	r3, [r1, #8]
 810697e:	9302      	strls	r3, [sp, #8]
 8106980:	680b      	ldr	r3, [r1, #0]
 8106982:	468b      	mov	fp, r1
 8106984:	2500      	movs	r5, #0
 8106986:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810698a:	f84b 3b1c 	str.w	r3, [fp], #28
 810698e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8106992:	4680      	mov	r8, r0
 8106994:	460c      	mov	r4, r1
 8106996:	465e      	mov	r6, fp
 8106998:	46aa      	mov	sl, r5
 810699a:	46a9      	mov	r9, r5
 810699c:	9501      	str	r5, [sp, #4]
 810699e:	68a2      	ldr	r2, [r4, #8]
 81069a0:	b152      	cbz	r2, 81069b8 <_scanf_float+0x60>
 81069a2:	683b      	ldr	r3, [r7, #0]
 81069a4:	781b      	ldrb	r3, [r3, #0]
 81069a6:	2b4e      	cmp	r3, #78	; 0x4e
 81069a8:	d864      	bhi.n	8106a74 <_scanf_float+0x11c>
 81069aa:	2b40      	cmp	r3, #64	; 0x40
 81069ac:	d83c      	bhi.n	8106a28 <_scanf_float+0xd0>
 81069ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 81069b2:	b2c8      	uxtb	r0, r1
 81069b4:	280e      	cmp	r0, #14
 81069b6:	d93a      	bls.n	8106a2e <_scanf_float+0xd6>
 81069b8:	f1b9 0f00 	cmp.w	r9, #0
 81069bc:	d003      	beq.n	81069c6 <_scanf_float+0x6e>
 81069be:	6823      	ldr	r3, [r4, #0]
 81069c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81069c4:	6023      	str	r3, [r4, #0]
 81069c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 81069ca:	f1ba 0f01 	cmp.w	sl, #1
 81069ce:	f200 8113 	bhi.w	8106bf8 <_scanf_float+0x2a0>
 81069d2:	455e      	cmp	r6, fp
 81069d4:	f200 8105 	bhi.w	8106be2 <_scanf_float+0x28a>
 81069d8:	2501      	movs	r5, #1
 81069da:	4628      	mov	r0, r5
 81069dc:	b007      	add	sp, #28
 81069de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81069e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 81069e6:	2a0d      	cmp	r2, #13
 81069e8:	d8e6      	bhi.n	81069b8 <_scanf_float+0x60>
 81069ea:	a101      	add	r1, pc, #4	; (adr r1, 81069f0 <_scanf_float+0x98>)
 81069ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 81069f0:	08106b2f 	.word	0x08106b2f
 81069f4:	081069b9 	.word	0x081069b9
 81069f8:	081069b9 	.word	0x081069b9
 81069fc:	081069b9 	.word	0x081069b9
 8106a00:	08106b8f 	.word	0x08106b8f
 8106a04:	08106b67 	.word	0x08106b67
 8106a08:	081069b9 	.word	0x081069b9
 8106a0c:	081069b9 	.word	0x081069b9
 8106a10:	08106b3d 	.word	0x08106b3d
 8106a14:	081069b9 	.word	0x081069b9
 8106a18:	081069b9 	.word	0x081069b9
 8106a1c:	081069b9 	.word	0x081069b9
 8106a20:	081069b9 	.word	0x081069b9
 8106a24:	08106af5 	.word	0x08106af5
 8106a28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8106a2c:	e7db      	b.n	81069e6 <_scanf_float+0x8e>
 8106a2e:	290e      	cmp	r1, #14
 8106a30:	d8c2      	bhi.n	81069b8 <_scanf_float+0x60>
 8106a32:	a001      	add	r0, pc, #4	; (adr r0, 8106a38 <_scanf_float+0xe0>)
 8106a34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8106a38:	08106ae7 	.word	0x08106ae7
 8106a3c:	081069b9 	.word	0x081069b9
 8106a40:	08106ae7 	.word	0x08106ae7
 8106a44:	08106b7b 	.word	0x08106b7b
 8106a48:	081069b9 	.word	0x081069b9
 8106a4c:	08106a95 	.word	0x08106a95
 8106a50:	08106ad1 	.word	0x08106ad1
 8106a54:	08106ad1 	.word	0x08106ad1
 8106a58:	08106ad1 	.word	0x08106ad1
 8106a5c:	08106ad1 	.word	0x08106ad1
 8106a60:	08106ad1 	.word	0x08106ad1
 8106a64:	08106ad1 	.word	0x08106ad1
 8106a68:	08106ad1 	.word	0x08106ad1
 8106a6c:	08106ad1 	.word	0x08106ad1
 8106a70:	08106ad1 	.word	0x08106ad1
 8106a74:	2b6e      	cmp	r3, #110	; 0x6e
 8106a76:	d809      	bhi.n	8106a8c <_scanf_float+0x134>
 8106a78:	2b60      	cmp	r3, #96	; 0x60
 8106a7a:	d8b2      	bhi.n	81069e2 <_scanf_float+0x8a>
 8106a7c:	2b54      	cmp	r3, #84	; 0x54
 8106a7e:	d077      	beq.n	8106b70 <_scanf_float+0x218>
 8106a80:	2b59      	cmp	r3, #89	; 0x59
 8106a82:	d199      	bne.n	81069b8 <_scanf_float+0x60>
 8106a84:	2d07      	cmp	r5, #7
 8106a86:	d197      	bne.n	81069b8 <_scanf_float+0x60>
 8106a88:	2508      	movs	r5, #8
 8106a8a:	e029      	b.n	8106ae0 <_scanf_float+0x188>
 8106a8c:	2b74      	cmp	r3, #116	; 0x74
 8106a8e:	d06f      	beq.n	8106b70 <_scanf_float+0x218>
 8106a90:	2b79      	cmp	r3, #121	; 0x79
 8106a92:	e7f6      	b.n	8106a82 <_scanf_float+0x12a>
 8106a94:	6821      	ldr	r1, [r4, #0]
 8106a96:	05c8      	lsls	r0, r1, #23
 8106a98:	d51a      	bpl.n	8106ad0 <_scanf_float+0x178>
 8106a9a:	9b02      	ldr	r3, [sp, #8]
 8106a9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8106aa0:	6021      	str	r1, [r4, #0]
 8106aa2:	f109 0901 	add.w	r9, r9, #1
 8106aa6:	b11b      	cbz	r3, 8106ab0 <_scanf_float+0x158>
 8106aa8:	3b01      	subs	r3, #1
 8106aaa:	3201      	adds	r2, #1
 8106aac:	9302      	str	r3, [sp, #8]
 8106aae:	60a2      	str	r2, [r4, #8]
 8106ab0:	68a3      	ldr	r3, [r4, #8]
 8106ab2:	3b01      	subs	r3, #1
 8106ab4:	60a3      	str	r3, [r4, #8]
 8106ab6:	6923      	ldr	r3, [r4, #16]
 8106ab8:	3301      	adds	r3, #1
 8106aba:	6123      	str	r3, [r4, #16]
 8106abc:	687b      	ldr	r3, [r7, #4]
 8106abe:	3b01      	subs	r3, #1
 8106ac0:	2b00      	cmp	r3, #0
 8106ac2:	607b      	str	r3, [r7, #4]
 8106ac4:	f340 8084 	ble.w	8106bd0 <_scanf_float+0x278>
 8106ac8:	683b      	ldr	r3, [r7, #0]
 8106aca:	3301      	adds	r3, #1
 8106acc:	603b      	str	r3, [r7, #0]
 8106ace:	e766      	b.n	810699e <_scanf_float+0x46>
 8106ad0:	eb1a 0f05 	cmn.w	sl, r5
 8106ad4:	f47f af70 	bne.w	81069b8 <_scanf_float+0x60>
 8106ad8:	6822      	ldr	r2, [r4, #0]
 8106ada:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8106ade:	6022      	str	r2, [r4, #0]
 8106ae0:	f806 3b01 	strb.w	r3, [r6], #1
 8106ae4:	e7e4      	b.n	8106ab0 <_scanf_float+0x158>
 8106ae6:	6822      	ldr	r2, [r4, #0]
 8106ae8:	0610      	lsls	r0, r2, #24
 8106aea:	f57f af65 	bpl.w	81069b8 <_scanf_float+0x60>
 8106aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8106af2:	e7f4      	b.n	8106ade <_scanf_float+0x186>
 8106af4:	f1ba 0f00 	cmp.w	sl, #0
 8106af8:	d10e      	bne.n	8106b18 <_scanf_float+0x1c0>
 8106afa:	f1b9 0f00 	cmp.w	r9, #0
 8106afe:	d10e      	bne.n	8106b1e <_scanf_float+0x1c6>
 8106b00:	6822      	ldr	r2, [r4, #0]
 8106b02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8106b06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8106b0a:	d108      	bne.n	8106b1e <_scanf_float+0x1c6>
 8106b0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8106b10:	6022      	str	r2, [r4, #0]
 8106b12:	f04f 0a01 	mov.w	sl, #1
 8106b16:	e7e3      	b.n	8106ae0 <_scanf_float+0x188>
 8106b18:	f1ba 0f02 	cmp.w	sl, #2
 8106b1c:	d055      	beq.n	8106bca <_scanf_float+0x272>
 8106b1e:	2d01      	cmp	r5, #1
 8106b20:	d002      	beq.n	8106b28 <_scanf_float+0x1d0>
 8106b22:	2d04      	cmp	r5, #4
 8106b24:	f47f af48 	bne.w	81069b8 <_scanf_float+0x60>
 8106b28:	3501      	adds	r5, #1
 8106b2a:	b2ed      	uxtb	r5, r5
 8106b2c:	e7d8      	b.n	8106ae0 <_scanf_float+0x188>
 8106b2e:	f1ba 0f01 	cmp.w	sl, #1
 8106b32:	f47f af41 	bne.w	81069b8 <_scanf_float+0x60>
 8106b36:	f04f 0a02 	mov.w	sl, #2
 8106b3a:	e7d1      	b.n	8106ae0 <_scanf_float+0x188>
 8106b3c:	b97d      	cbnz	r5, 8106b5e <_scanf_float+0x206>
 8106b3e:	f1b9 0f00 	cmp.w	r9, #0
 8106b42:	f47f af3c 	bne.w	81069be <_scanf_float+0x66>
 8106b46:	6822      	ldr	r2, [r4, #0]
 8106b48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8106b4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8106b50:	f47f af39 	bne.w	81069c6 <_scanf_float+0x6e>
 8106b54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8106b58:	6022      	str	r2, [r4, #0]
 8106b5a:	2501      	movs	r5, #1
 8106b5c:	e7c0      	b.n	8106ae0 <_scanf_float+0x188>
 8106b5e:	2d03      	cmp	r5, #3
 8106b60:	d0e2      	beq.n	8106b28 <_scanf_float+0x1d0>
 8106b62:	2d05      	cmp	r5, #5
 8106b64:	e7de      	b.n	8106b24 <_scanf_float+0x1cc>
 8106b66:	2d02      	cmp	r5, #2
 8106b68:	f47f af26 	bne.w	81069b8 <_scanf_float+0x60>
 8106b6c:	2503      	movs	r5, #3
 8106b6e:	e7b7      	b.n	8106ae0 <_scanf_float+0x188>
 8106b70:	2d06      	cmp	r5, #6
 8106b72:	f47f af21 	bne.w	81069b8 <_scanf_float+0x60>
 8106b76:	2507      	movs	r5, #7
 8106b78:	e7b2      	b.n	8106ae0 <_scanf_float+0x188>
 8106b7a:	6822      	ldr	r2, [r4, #0]
 8106b7c:	0591      	lsls	r1, r2, #22
 8106b7e:	f57f af1b 	bpl.w	81069b8 <_scanf_float+0x60>
 8106b82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8106b86:	6022      	str	r2, [r4, #0]
 8106b88:	f8cd 9004 	str.w	r9, [sp, #4]
 8106b8c:	e7a8      	b.n	8106ae0 <_scanf_float+0x188>
 8106b8e:	6822      	ldr	r2, [r4, #0]
 8106b90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8106b94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8106b98:	d006      	beq.n	8106ba8 <_scanf_float+0x250>
 8106b9a:	0550      	lsls	r0, r2, #21
 8106b9c:	f57f af0c 	bpl.w	81069b8 <_scanf_float+0x60>
 8106ba0:	f1b9 0f00 	cmp.w	r9, #0
 8106ba4:	f43f af0f 	beq.w	81069c6 <_scanf_float+0x6e>
 8106ba8:	0591      	lsls	r1, r2, #22
 8106baa:	bf58      	it	pl
 8106bac:	9901      	ldrpl	r1, [sp, #4]
 8106bae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8106bb2:	bf58      	it	pl
 8106bb4:	eba9 0101 	subpl.w	r1, r9, r1
 8106bb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8106bbc:	bf58      	it	pl
 8106bbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8106bc2:	6022      	str	r2, [r4, #0]
 8106bc4:	f04f 0900 	mov.w	r9, #0
 8106bc8:	e78a      	b.n	8106ae0 <_scanf_float+0x188>
 8106bca:	f04f 0a03 	mov.w	sl, #3
 8106bce:	e787      	b.n	8106ae0 <_scanf_float+0x188>
 8106bd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8106bd4:	4639      	mov	r1, r7
 8106bd6:	4640      	mov	r0, r8
 8106bd8:	4798      	blx	r3
 8106bda:	2800      	cmp	r0, #0
 8106bdc:	f43f aedf 	beq.w	810699e <_scanf_float+0x46>
 8106be0:	e6ea      	b.n	81069b8 <_scanf_float+0x60>
 8106be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8106be6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8106bea:	463a      	mov	r2, r7
 8106bec:	4640      	mov	r0, r8
 8106bee:	4798      	blx	r3
 8106bf0:	6923      	ldr	r3, [r4, #16]
 8106bf2:	3b01      	subs	r3, #1
 8106bf4:	6123      	str	r3, [r4, #16]
 8106bf6:	e6ec      	b.n	81069d2 <_scanf_float+0x7a>
 8106bf8:	1e6b      	subs	r3, r5, #1
 8106bfa:	2b06      	cmp	r3, #6
 8106bfc:	d825      	bhi.n	8106c4a <_scanf_float+0x2f2>
 8106bfe:	2d02      	cmp	r5, #2
 8106c00:	d836      	bhi.n	8106c70 <_scanf_float+0x318>
 8106c02:	455e      	cmp	r6, fp
 8106c04:	f67f aee8 	bls.w	81069d8 <_scanf_float+0x80>
 8106c08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8106c0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8106c10:	463a      	mov	r2, r7
 8106c12:	4640      	mov	r0, r8
 8106c14:	4798      	blx	r3
 8106c16:	6923      	ldr	r3, [r4, #16]
 8106c18:	3b01      	subs	r3, #1
 8106c1a:	6123      	str	r3, [r4, #16]
 8106c1c:	e7f1      	b.n	8106c02 <_scanf_float+0x2aa>
 8106c1e:	9802      	ldr	r0, [sp, #8]
 8106c20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8106c24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8106c28:	9002      	str	r0, [sp, #8]
 8106c2a:	463a      	mov	r2, r7
 8106c2c:	4640      	mov	r0, r8
 8106c2e:	4798      	blx	r3
 8106c30:	6923      	ldr	r3, [r4, #16]
 8106c32:	3b01      	subs	r3, #1
 8106c34:	6123      	str	r3, [r4, #16]
 8106c36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8106c3a:	fa5f fa8a 	uxtb.w	sl, sl
 8106c3e:	f1ba 0f02 	cmp.w	sl, #2
 8106c42:	d1ec      	bne.n	8106c1e <_scanf_float+0x2c6>
 8106c44:	3d03      	subs	r5, #3
 8106c46:	b2ed      	uxtb	r5, r5
 8106c48:	1b76      	subs	r6, r6, r5
 8106c4a:	6823      	ldr	r3, [r4, #0]
 8106c4c:	05da      	lsls	r2, r3, #23
 8106c4e:	d52f      	bpl.n	8106cb0 <_scanf_float+0x358>
 8106c50:	055b      	lsls	r3, r3, #21
 8106c52:	d510      	bpl.n	8106c76 <_scanf_float+0x31e>
 8106c54:	455e      	cmp	r6, fp
 8106c56:	f67f aebf 	bls.w	81069d8 <_scanf_float+0x80>
 8106c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8106c5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8106c62:	463a      	mov	r2, r7
 8106c64:	4640      	mov	r0, r8
 8106c66:	4798      	blx	r3
 8106c68:	6923      	ldr	r3, [r4, #16]
 8106c6a:	3b01      	subs	r3, #1
 8106c6c:	6123      	str	r3, [r4, #16]
 8106c6e:	e7f1      	b.n	8106c54 <_scanf_float+0x2fc>
 8106c70:	46aa      	mov	sl, r5
 8106c72:	9602      	str	r6, [sp, #8]
 8106c74:	e7df      	b.n	8106c36 <_scanf_float+0x2de>
 8106c76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8106c7a:	6923      	ldr	r3, [r4, #16]
 8106c7c:	2965      	cmp	r1, #101	; 0x65
 8106c7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8106c82:	f106 35ff 	add.w	r5, r6, #4294967295
 8106c86:	6123      	str	r3, [r4, #16]
 8106c88:	d00c      	beq.n	8106ca4 <_scanf_float+0x34c>
 8106c8a:	2945      	cmp	r1, #69	; 0x45
 8106c8c:	d00a      	beq.n	8106ca4 <_scanf_float+0x34c>
 8106c8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8106c92:	463a      	mov	r2, r7
 8106c94:	4640      	mov	r0, r8
 8106c96:	4798      	blx	r3
 8106c98:	6923      	ldr	r3, [r4, #16]
 8106c9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8106c9e:	3b01      	subs	r3, #1
 8106ca0:	1eb5      	subs	r5, r6, #2
 8106ca2:	6123      	str	r3, [r4, #16]
 8106ca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8106ca8:	463a      	mov	r2, r7
 8106caa:	4640      	mov	r0, r8
 8106cac:	4798      	blx	r3
 8106cae:	462e      	mov	r6, r5
 8106cb0:	6825      	ldr	r5, [r4, #0]
 8106cb2:	f015 0510 	ands.w	r5, r5, #16
 8106cb6:	d159      	bne.n	8106d6c <_scanf_float+0x414>
 8106cb8:	7035      	strb	r5, [r6, #0]
 8106cba:	6823      	ldr	r3, [r4, #0]
 8106cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8106cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8106cc4:	d11b      	bne.n	8106cfe <_scanf_float+0x3a6>
 8106cc6:	9b01      	ldr	r3, [sp, #4]
 8106cc8:	454b      	cmp	r3, r9
 8106cca:	eba3 0209 	sub.w	r2, r3, r9
 8106cce:	d123      	bne.n	8106d18 <_scanf_float+0x3c0>
 8106cd0:	2200      	movs	r2, #0
 8106cd2:	4659      	mov	r1, fp
 8106cd4:	4640      	mov	r0, r8
 8106cd6:	f000 ff25 	bl	8107b24 <_strtod_r>
 8106cda:	6822      	ldr	r2, [r4, #0]
 8106cdc:	9b03      	ldr	r3, [sp, #12]
 8106cde:	f012 0f02 	tst.w	r2, #2
 8106ce2:	ec57 6b10 	vmov	r6, r7, d0
 8106ce6:	681b      	ldr	r3, [r3, #0]
 8106ce8:	d021      	beq.n	8106d2e <_scanf_float+0x3d6>
 8106cea:	9903      	ldr	r1, [sp, #12]
 8106cec:	1d1a      	adds	r2, r3, #4
 8106cee:	600a      	str	r2, [r1, #0]
 8106cf0:	681b      	ldr	r3, [r3, #0]
 8106cf2:	e9c3 6700 	strd	r6, r7, [r3]
 8106cf6:	68e3      	ldr	r3, [r4, #12]
 8106cf8:	3301      	adds	r3, #1
 8106cfa:	60e3      	str	r3, [r4, #12]
 8106cfc:	e66d      	b.n	81069da <_scanf_float+0x82>
 8106cfe:	9b04      	ldr	r3, [sp, #16]
 8106d00:	2b00      	cmp	r3, #0
 8106d02:	d0e5      	beq.n	8106cd0 <_scanf_float+0x378>
 8106d04:	9905      	ldr	r1, [sp, #20]
 8106d06:	230a      	movs	r3, #10
 8106d08:	462a      	mov	r2, r5
 8106d0a:	3101      	adds	r1, #1
 8106d0c:	4640      	mov	r0, r8
 8106d0e:	f000 ff91 	bl	8107c34 <_strtol_r>
 8106d12:	9b04      	ldr	r3, [sp, #16]
 8106d14:	9e05      	ldr	r6, [sp, #20]
 8106d16:	1ac2      	subs	r2, r0, r3
 8106d18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8106d1c:	429e      	cmp	r6, r3
 8106d1e:	bf28      	it	cs
 8106d20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8106d24:	4912      	ldr	r1, [pc, #72]	; (8106d70 <_scanf_float+0x418>)
 8106d26:	4630      	mov	r0, r6
 8106d28:	f000 f8ba 	bl	8106ea0 <siprintf>
 8106d2c:	e7d0      	b.n	8106cd0 <_scanf_float+0x378>
 8106d2e:	9903      	ldr	r1, [sp, #12]
 8106d30:	f012 0f04 	tst.w	r2, #4
 8106d34:	f103 0204 	add.w	r2, r3, #4
 8106d38:	600a      	str	r2, [r1, #0]
 8106d3a:	d1d9      	bne.n	8106cf0 <_scanf_float+0x398>
 8106d3c:	f8d3 8000 	ldr.w	r8, [r3]
 8106d40:	ee10 2a10 	vmov	r2, s0
 8106d44:	ee10 0a10 	vmov	r0, s0
 8106d48:	463b      	mov	r3, r7
 8106d4a:	4639      	mov	r1, r7
 8106d4c:	f7f9 ff76 	bl	8100c3c <__aeabi_dcmpun>
 8106d50:	b128      	cbz	r0, 8106d5e <_scanf_float+0x406>
 8106d52:	4808      	ldr	r0, [pc, #32]	; (8106d74 <_scanf_float+0x41c>)
 8106d54:	f000 f89e 	bl	8106e94 <nanf>
 8106d58:	ed88 0a00 	vstr	s0, [r8]
 8106d5c:	e7cb      	b.n	8106cf6 <_scanf_float+0x39e>
 8106d5e:	4630      	mov	r0, r6
 8106d60:	4639      	mov	r1, r7
 8106d62:	f7f9 ffc9 	bl	8100cf8 <__aeabi_d2f>
 8106d66:	f8c8 0000 	str.w	r0, [r8]
 8106d6a:	e7c4      	b.n	8106cf6 <_scanf_float+0x39e>
 8106d6c:	2500      	movs	r5, #0
 8106d6e:	e634      	b.n	81069da <_scanf_float+0x82>
 8106d70:	0810abb8 	.word	0x0810abb8
 8106d74:	0810b028 	.word	0x0810b028

08106d78 <iprintf>:
 8106d78:	b40f      	push	{r0, r1, r2, r3}
 8106d7a:	4b0a      	ldr	r3, [pc, #40]	; (8106da4 <iprintf+0x2c>)
 8106d7c:	b513      	push	{r0, r1, r4, lr}
 8106d7e:	681c      	ldr	r4, [r3, #0]
 8106d80:	b124      	cbz	r4, 8106d8c <iprintf+0x14>
 8106d82:	69a3      	ldr	r3, [r4, #24]
 8106d84:	b913      	cbnz	r3, 8106d8c <iprintf+0x14>
 8106d86:	4620      	mov	r0, r4
 8106d88:	f001 ffaa 	bl	8108ce0 <__sinit>
 8106d8c:	ab05      	add	r3, sp, #20
 8106d8e:	9a04      	ldr	r2, [sp, #16]
 8106d90:	68a1      	ldr	r1, [r4, #8]
 8106d92:	9301      	str	r3, [sp, #4]
 8106d94:	4620      	mov	r0, r4
 8106d96:	f003 fb81 	bl	810a49c <_vfiprintf_r>
 8106d9a:	b002      	add	sp, #8
 8106d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106da0:	b004      	add	sp, #16
 8106da2:	4770      	bx	lr
 8106da4:	1000001c 	.word	0x1000001c

08106da8 <_puts_r>:
 8106da8:	b570      	push	{r4, r5, r6, lr}
 8106daa:	460e      	mov	r6, r1
 8106dac:	4605      	mov	r5, r0
 8106dae:	b118      	cbz	r0, 8106db8 <_puts_r+0x10>
 8106db0:	6983      	ldr	r3, [r0, #24]
 8106db2:	b90b      	cbnz	r3, 8106db8 <_puts_r+0x10>
 8106db4:	f001 ff94 	bl	8108ce0 <__sinit>
 8106db8:	69ab      	ldr	r3, [r5, #24]
 8106dba:	68ac      	ldr	r4, [r5, #8]
 8106dbc:	b913      	cbnz	r3, 8106dc4 <_puts_r+0x1c>
 8106dbe:	4628      	mov	r0, r5
 8106dc0:	f001 ff8e 	bl	8108ce0 <__sinit>
 8106dc4:	4b2c      	ldr	r3, [pc, #176]	; (8106e78 <_puts_r+0xd0>)
 8106dc6:	429c      	cmp	r4, r3
 8106dc8:	d120      	bne.n	8106e0c <_puts_r+0x64>
 8106dca:	686c      	ldr	r4, [r5, #4]
 8106dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8106dce:	07db      	lsls	r3, r3, #31
 8106dd0:	d405      	bmi.n	8106dde <_puts_r+0x36>
 8106dd2:	89a3      	ldrh	r3, [r4, #12]
 8106dd4:	0598      	lsls	r0, r3, #22
 8106dd6:	d402      	bmi.n	8106dde <_puts_r+0x36>
 8106dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8106dda:	f002 fb92 	bl	8109502 <__retarget_lock_acquire_recursive>
 8106dde:	89a3      	ldrh	r3, [r4, #12]
 8106de0:	0719      	lsls	r1, r3, #28
 8106de2:	d51d      	bpl.n	8106e20 <_puts_r+0x78>
 8106de4:	6923      	ldr	r3, [r4, #16]
 8106de6:	b1db      	cbz	r3, 8106e20 <_puts_r+0x78>
 8106de8:	3e01      	subs	r6, #1
 8106dea:	68a3      	ldr	r3, [r4, #8]
 8106dec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8106df0:	3b01      	subs	r3, #1
 8106df2:	60a3      	str	r3, [r4, #8]
 8106df4:	bb39      	cbnz	r1, 8106e46 <_puts_r+0x9e>
 8106df6:	2b00      	cmp	r3, #0
 8106df8:	da38      	bge.n	8106e6c <_puts_r+0xc4>
 8106dfa:	4622      	mov	r2, r4
 8106dfc:	210a      	movs	r1, #10
 8106dfe:	4628      	mov	r0, r5
 8106e00:	f000 ff1a 	bl	8107c38 <__swbuf_r>
 8106e04:	3001      	adds	r0, #1
 8106e06:	d011      	beq.n	8106e2c <_puts_r+0x84>
 8106e08:	250a      	movs	r5, #10
 8106e0a:	e011      	b.n	8106e30 <_puts_r+0x88>
 8106e0c:	4b1b      	ldr	r3, [pc, #108]	; (8106e7c <_puts_r+0xd4>)
 8106e0e:	429c      	cmp	r4, r3
 8106e10:	d101      	bne.n	8106e16 <_puts_r+0x6e>
 8106e12:	68ac      	ldr	r4, [r5, #8]
 8106e14:	e7da      	b.n	8106dcc <_puts_r+0x24>
 8106e16:	4b1a      	ldr	r3, [pc, #104]	; (8106e80 <_puts_r+0xd8>)
 8106e18:	429c      	cmp	r4, r3
 8106e1a:	bf08      	it	eq
 8106e1c:	68ec      	ldreq	r4, [r5, #12]
 8106e1e:	e7d5      	b.n	8106dcc <_puts_r+0x24>
 8106e20:	4621      	mov	r1, r4
 8106e22:	4628      	mov	r0, r5
 8106e24:	f000 ff5a 	bl	8107cdc <__swsetup_r>
 8106e28:	2800      	cmp	r0, #0
 8106e2a:	d0dd      	beq.n	8106de8 <_puts_r+0x40>
 8106e2c:	f04f 35ff 	mov.w	r5, #4294967295
 8106e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8106e32:	07da      	lsls	r2, r3, #31
 8106e34:	d405      	bmi.n	8106e42 <_puts_r+0x9a>
 8106e36:	89a3      	ldrh	r3, [r4, #12]
 8106e38:	059b      	lsls	r3, r3, #22
 8106e3a:	d402      	bmi.n	8106e42 <_puts_r+0x9a>
 8106e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8106e3e:	f002 fb61 	bl	8109504 <__retarget_lock_release_recursive>
 8106e42:	4628      	mov	r0, r5
 8106e44:	bd70      	pop	{r4, r5, r6, pc}
 8106e46:	2b00      	cmp	r3, #0
 8106e48:	da04      	bge.n	8106e54 <_puts_r+0xac>
 8106e4a:	69a2      	ldr	r2, [r4, #24]
 8106e4c:	429a      	cmp	r2, r3
 8106e4e:	dc06      	bgt.n	8106e5e <_puts_r+0xb6>
 8106e50:	290a      	cmp	r1, #10
 8106e52:	d004      	beq.n	8106e5e <_puts_r+0xb6>
 8106e54:	6823      	ldr	r3, [r4, #0]
 8106e56:	1c5a      	adds	r2, r3, #1
 8106e58:	6022      	str	r2, [r4, #0]
 8106e5a:	7019      	strb	r1, [r3, #0]
 8106e5c:	e7c5      	b.n	8106dea <_puts_r+0x42>
 8106e5e:	4622      	mov	r2, r4
 8106e60:	4628      	mov	r0, r5
 8106e62:	f000 fee9 	bl	8107c38 <__swbuf_r>
 8106e66:	3001      	adds	r0, #1
 8106e68:	d1bf      	bne.n	8106dea <_puts_r+0x42>
 8106e6a:	e7df      	b.n	8106e2c <_puts_r+0x84>
 8106e6c:	6823      	ldr	r3, [r4, #0]
 8106e6e:	250a      	movs	r5, #10
 8106e70:	1c5a      	adds	r2, r3, #1
 8106e72:	6022      	str	r2, [r4, #0]
 8106e74:	701d      	strb	r5, [r3, #0]
 8106e76:	e7db      	b.n	8106e30 <_puts_r+0x88>
 8106e78:	0810adc4 	.word	0x0810adc4
 8106e7c:	0810ade4 	.word	0x0810ade4
 8106e80:	0810ada4 	.word	0x0810ada4

08106e84 <puts>:
 8106e84:	4b02      	ldr	r3, [pc, #8]	; (8106e90 <puts+0xc>)
 8106e86:	4601      	mov	r1, r0
 8106e88:	6818      	ldr	r0, [r3, #0]
 8106e8a:	f7ff bf8d 	b.w	8106da8 <_puts_r>
 8106e8e:	bf00      	nop
 8106e90:	1000001c 	.word	0x1000001c

08106e94 <nanf>:
 8106e94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8106e9c <nanf+0x8>
 8106e98:	4770      	bx	lr
 8106e9a:	bf00      	nop
 8106e9c:	7fc00000 	.word	0x7fc00000

08106ea0 <siprintf>:
 8106ea0:	b40e      	push	{r1, r2, r3}
 8106ea2:	b500      	push	{lr}
 8106ea4:	b09c      	sub	sp, #112	; 0x70
 8106ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8106ea8:	9002      	str	r0, [sp, #8]
 8106eaa:	9006      	str	r0, [sp, #24]
 8106eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8106eb0:	4809      	ldr	r0, [pc, #36]	; (8106ed8 <siprintf+0x38>)
 8106eb2:	9107      	str	r1, [sp, #28]
 8106eb4:	9104      	str	r1, [sp, #16]
 8106eb6:	4909      	ldr	r1, [pc, #36]	; (8106edc <siprintf+0x3c>)
 8106eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8106ebc:	9105      	str	r1, [sp, #20]
 8106ebe:	6800      	ldr	r0, [r0, #0]
 8106ec0:	9301      	str	r3, [sp, #4]
 8106ec2:	a902      	add	r1, sp, #8
 8106ec4:	f003 f9c0 	bl	810a248 <_svfiprintf_r>
 8106ec8:	9b02      	ldr	r3, [sp, #8]
 8106eca:	2200      	movs	r2, #0
 8106ecc:	701a      	strb	r2, [r3, #0]
 8106ece:	b01c      	add	sp, #112	; 0x70
 8106ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8106ed4:	b003      	add	sp, #12
 8106ed6:	4770      	bx	lr
 8106ed8:	1000001c 	.word	0x1000001c
 8106edc:	ffff0208 	.word	0xffff0208

08106ee0 <sulp>:
 8106ee0:	b570      	push	{r4, r5, r6, lr}
 8106ee2:	4604      	mov	r4, r0
 8106ee4:	460d      	mov	r5, r1
 8106ee6:	ec45 4b10 	vmov	d0, r4, r5
 8106eea:	4616      	mov	r6, r2
 8106eec:	f002 ff0a 	bl	8109d04 <__ulp>
 8106ef0:	ec51 0b10 	vmov	r0, r1, d0
 8106ef4:	b17e      	cbz	r6, 8106f16 <sulp+0x36>
 8106ef6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8106efa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8106efe:	2b00      	cmp	r3, #0
 8106f00:	dd09      	ble.n	8106f16 <sulp+0x36>
 8106f02:	051b      	lsls	r3, r3, #20
 8106f04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8106f08:	2400      	movs	r4, #0
 8106f0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8106f0e:	4622      	mov	r2, r4
 8106f10:	462b      	mov	r3, r5
 8106f12:	f7f9 fbf9 	bl	8100708 <__aeabi_dmul>
 8106f16:	bd70      	pop	{r4, r5, r6, pc}

08106f18 <_strtod_l>:
 8106f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106f1c:	ed2d 8b02 	vpush	{d8}
 8106f20:	b09d      	sub	sp, #116	; 0x74
 8106f22:	461f      	mov	r7, r3
 8106f24:	2300      	movs	r3, #0
 8106f26:	9318      	str	r3, [sp, #96]	; 0x60
 8106f28:	4ba2      	ldr	r3, [pc, #648]	; (81071b4 <_strtod_l+0x29c>)
 8106f2a:	9213      	str	r2, [sp, #76]	; 0x4c
 8106f2c:	681b      	ldr	r3, [r3, #0]
 8106f2e:	9305      	str	r3, [sp, #20]
 8106f30:	4604      	mov	r4, r0
 8106f32:	4618      	mov	r0, r3
 8106f34:	4688      	mov	r8, r1
 8106f36:	f7f9 f9d3 	bl	81002e0 <strlen>
 8106f3a:	f04f 0a00 	mov.w	sl, #0
 8106f3e:	4605      	mov	r5, r0
 8106f40:	f04f 0b00 	mov.w	fp, #0
 8106f44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8106f48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8106f4a:	781a      	ldrb	r2, [r3, #0]
 8106f4c:	2a2b      	cmp	r2, #43	; 0x2b
 8106f4e:	d04e      	beq.n	8106fee <_strtod_l+0xd6>
 8106f50:	d83b      	bhi.n	8106fca <_strtod_l+0xb2>
 8106f52:	2a0d      	cmp	r2, #13
 8106f54:	d834      	bhi.n	8106fc0 <_strtod_l+0xa8>
 8106f56:	2a08      	cmp	r2, #8
 8106f58:	d834      	bhi.n	8106fc4 <_strtod_l+0xac>
 8106f5a:	2a00      	cmp	r2, #0
 8106f5c:	d03e      	beq.n	8106fdc <_strtod_l+0xc4>
 8106f5e:	2300      	movs	r3, #0
 8106f60:	930a      	str	r3, [sp, #40]	; 0x28
 8106f62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8106f64:	7833      	ldrb	r3, [r6, #0]
 8106f66:	2b30      	cmp	r3, #48	; 0x30
 8106f68:	f040 80b0 	bne.w	81070cc <_strtod_l+0x1b4>
 8106f6c:	7873      	ldrb	r3, [r6, #1]
 8106f6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8106f72:	2b58      	cmp	r3, #88	; 0x58
 8106f74:	d168      	bne.n	8107048 <_strtod_l+0x130>
 8106f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106f78:	9301      	str	r3, [sp, #4]
 8106f7a:	ab18      	add	r3, sp, #96	; 0x60
 8106f7c:	9702      	str	r7, [sp, #8]
 8106f7e:	9300      	str	r3, [sp, #0]
 8106f80:	4a8d      	ldr	r2, [pc, #564]	; (81071b8 <_strtod_l+0x2a0>)
 8106f82:	ab19      	add	r3, sp, #100	; 0x64
 8106f84:	a917      	add	r1, sp, #92	; 0x5c
 8106f86:	4620      	mov	r0, r4
 8106f88:	f001 ffae 	bl	8108ee8 <__gethex>
 8106f8c:	f010 0707 	ands.w	r7, r0, #7
 8106f90:	4605      	mov	r5, r0
 8106f92:	d005      	beq.n	8106fa0 <_strtod_l+0x88>
 8106f94:	2f06      	cmp	r7, #6
 8106f96:	d12c      	bne.n	8106ff2 <_strtod_l+0xda>
 8106f98:	3601      	adds	r6, #1
 8106f9a:	2300      	movs	r3, #0
 8106f9c:	9617      	str	r6, [sp, #92]	; 0x5c
 8106f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8106fa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8106fa2:	2b00      	cmp	r3, #0
 8106fa4:	f040 8590 	bne.w	8107ac8 <_strtod_l+0xbb0>
 8106fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106faa:	b1eb      	cbz	r3, 8106fe8 <_strtod_l+0xd0>
 8106fac:	4652      	mov	r2, sl
 8106fae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8106fb2:	ec43 2b10 	vmov	d0, r2, r3
 8106fb6:	b01d      	add	sp, #116	; 0x74
 8106fb8:	ecbd 8b02 	vpop	{d8}
 8106fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106fc0:	2a20      	cmp	r2, #32
 8106fc2:	d1cc      	bne.n	8106f5e <_strtod_l+0x46>
 8106fc4:	3301      	adds	r3, #1
 8106fc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8106fc8:	e7be      	b.n	8106f48 <_strtod_l+0x30>
 8106fca:	2a2d      	cmp	r2, #45	; 0x2d
 8106fcc:	d1c7      	bne.n	8106f5e <_strtod_l+0x46>
 8106fce:	2201      	movs	r2, #1
 8106fd0:	920a      	str	r2, [sp, #40]	; 0x28
 8106fd2:	1c5a      	adds	r2, r3, #1
 8106fd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8106fd6:	785b      	ldrb	r3, [r3, #1]
 8106fd8:	2b00      	cmp	r3, #0
 8106fda:	d1c2      	bne.n	8106f62 <_strtod_l+0x4a>
 8106fdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8106fde:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8106fe2:	2b00      	cmp	r3, #0
 8106fe4:	f040 856e 	bne.w	8107ac4 <_strtod_l+0xbac>
 8106fe8:	4652      	mov	r2, sl
 8106fea:	465b      	mov	r3, fp
 8106fec:	e7e1      	b.n	8106fb2 <_strtod_l+0x9a>
 8106fee:	2200      	movs	r2, #0
 8106ff0:	e7ee      	b.n	8106fd0 <_strtod_l+0xb8>
 8106ff2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8106ff4:	b13a      	cbz	r2, 8107006 <_strtod_l+0xee>
 8106ff6:	2135      	movs	r1, #53	; 0x35
 8106ff8:	a81a      	add	r0, sp, #104	; 0x68
 8106ffa:	f002 ff8e 	bl	8109f1a <__copybits>
 8106ffe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8107000:	4620      	mov	r0, r4
 8107002:	f002 fb4d 	bl	81096a0 <_Bfree>
 8107006:	3f01      	subs	r7, #1
 8107008:	2f04      	cmp	r7, #4
 810700a:	d806      	bhi.n	810701a <_strtod_l+0x102>
 810700c:	e8df f007 	tbb	[pc, r7]
 8107010:	1714030a 	.word	0x1714030a
 8107014:	0a          	.byte	0x0a
 8107015:	00          	.byte	0x00
 8107016:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 810701a:	0728      	lsls	r0, r5, #28
 810701c:	d5c0      	bpl.n	8106fa0 <_strtod_l+0x88>
 810701e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8107022:	e7bd      	b.n	8106fa0 <_strtod_l+0x88>
 8107024:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8107028:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810702a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810702e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8107032:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8107036:	e7f0      	b.n	810701a <_strtod_l+0x102>
 8107038:	f8df b180 	ldr.w	fp, [pc, #384]	; 81071bc <_strtod_l+0x2a4>
 810703c:	e7ed      	b.n	810701a <_strtod_l+0x102>
 810703e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8107042:	f04f 3aff 	mov.w	sl, #4294967295
 8107046:	e7e8      	b.n	810701a <_strtod_l+0x102>
 8107048:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810704a:	1c5a      	adds	r2, r3, #1
 810704c:	9217      	str	r2, [sp, #92]	; 0x5c
 810704e:	785b      	ldrb	r3, [r3, #1]
 8107050:	2b30      	cmp	r3, #48	; 0x30
 8107052:	d0f9      	beq.n	8107048 <_strtod_l+0x130>
 8107054:	2b00      	cmp	r3, #0
 8107056:	d0a3      	beq.n	8106fa0 <_strtod_l+0x88>
 8107058:	2301      	movs	r3, #1
 810705a:	f04f 0900 	mov.w	r9, #0
 810705e:	9304      	str	r3, [sp, #16]
 8107060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107062:	9308      	str	r3, [sp, #32]
 8107064:	f8cd 901c 	str.w	r9, [sp, #28]
 8107068:	464f      	mov	r7, r9
 810706a:	220a      	movs	r2, #10
 810706c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 810706e:	7806      	ldrb	r6, [r0, #0]
 8107070:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8107074:	b2d9      	uxtb	r1, r3
 8107076:	2909      	cmp	r1, #9
 8107078:	d92a      	bls.n	81070d0 <_strtod_l+0x1b8>
 810707a:	9905      	ldr	r1, [sp, #20]
 810707c:	462a      	mov	r2, r5
 810707e:	f003 fb9a 	bl	810a7b6 <strncmp>
 8107082:	b398      	cbz	r0, 81070ec <_strtod_l+0x1d4>
 8107084:	2000      	movs	r0, #0
 8107086:	4632      	mov	r2, r6
 8107088:	463d      	mov	r5, r7
 810708a:	9005      	str	r0, [sp, #20]
 810708c:	4603      	mov	r3, r0
 810708e:	2a65      	cmp	r2, #101	; 0x65
 8107090:	d001      	beq.n	8107096 <_strtod_l+0x17e>
 8107092:	2a45      	cmp	r2, #69	; 0x45
 8107094:	d118      	bne.n	81070c8 <_strtod_l+0x1b0>
 8107096:	b91d      	cbnz	r5, 81070a0 <_strtod_l+0x188>
 8107098:	9a04      	ldr	r2, [sp, #16]
 810709a:	4302      	orrs	r2, r0
 810709c:	d09e      	beq.n	8106fdc <_strtod_l+0xc4>
 810709e:	2500      	movs	r5, #0
 81070a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 81070a4:	f108 0201 	add.w	r2, r8, #1
 81070a8:	9217      	str	r2, [sp, #92]	; 0x5c
 81070aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 81070ae:	2a2b      	cmp	r2, #43	; 0x2b
 81070b0:	d075      	beq.n	810719e <_strtod_l+0x286>
 81070b2:	2a2d      	cmp	r2, #45	; 0x2d
 81070b4:	d07b      	beq.n	81071ae <_strtod_l+0x296>
 81070b6:	f04f 0c00 	mov.w	ip, #0
 81070ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 81070be:	2909      	cmp	r1, #9
 81070c0:	f240 8082 	bls.w	81071c8 <_strtod_l+0x2b0>
 81070c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 81070c8:	2600      	movs	r6, #0
 81070ca:	e09d      	b.n	8107208 <_strtod_l+0x2f0>
 81070cc:	2300      	movs	r3, #0
 81070ce:	e7c4      	b.n	810705a <_strtod_l+0x142>
 81070d0:	2f08      	cmp	r7, #8
 81070d2:	bfd8      	it	le
 81070d4:	9907      	ldrle	r1, [sp, #28]
 81070d6:	f100 0001 	add.w	r0, r0, #1
 81070da:	bfda      	itte	le
 81070dc:	fb02 3301 	mlale	r3, r2, r1, r3
 81070e0:	9307      	strle	r3, [sp, #28]
 81070e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 81070e6:	3701      	adds	r7, #1
 81070e8:	9017      	str	r0, [sp, #92]	; 0x5c
 81070ea:	e7bf      	b.n	810706c <_strtod_l+0x154>
 81070ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 81070ee:	195a      	adds	r2, r3, r5
 81070f0:	9217      	str	r2, [sp, #92]	; 0x5c
 81070f2:	5d5a      	ldrb	r2, [r3, r5]
 81070f4:	2f00      	cmp	r7, #0
 81070f6:	d037      	beq.n	8107168 <_strtod_l+0x250>
 81070f8:	9005      	str	r0, [sp, #20]
 81070fa:	463d      	mov	r5, r7
 81070fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8107100:	2b09      	cmp	r3, #9
 8107102:	d912      	bls.n	810712a <_strtod_l+0x212>
 8107104:	2301      	movs	r3, #1
 8107106:	e7c2      	b.n	810708e <_strtod_l+0x176>
 8107108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810710a:	1c5a      	adds	r2, r3, #1
 810710c:	9217      	str	r2, [sp, #92]	; 0x5c
 810710e:	785a      	ldrb	r2, [r3, #1]
 8107110:	3001      	adds	r0, #1
 8107112:	2a30      	cmp	r2, #48	; 0x30
 8107114:	d0f8      	beq.n	8107108 <_strtod_l+0x1f0>
 8107116:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810711a:	2b08      	cmp	r3, #8
 810711c:	f200 84d9 	bhi.w	8107ad2 <_strtod_l+0xbba>
 8107120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107122:	9005      	str	r0, [sp, #20]
 8107124:	2000      	movs	r0, #0
 8107126:	9308      	str	r3, [sp, #32]
 8107128:	4605      	mov	r5, r0
 810712a:	3a30      	subs	r2, #48	; 0x30
 810712c:	f100 0301 	add.w	r3, r0, #1
 8107130:	d014      	beq.n	810715c <_strtod_l+0x244>
 8107132:	9905      	ldr	r1, [sp, #20]
 8107134:	4419      	add	r1, r3
 8107136:	9105      	str	r1, [sp, #20]
 8107138:	462b      	mov	r3, r5
 810713a:	eb00 0e05 	add.w	lr, r0, r5
 810713e:	210a      	movs	r1, #10
 8107140:	4573      	cmp	r3, lr
 8107142:	d113      	bne.n	810716c <_strtod_l+0x254>
 8107144:	182b      	adds	r3, r5, r0
 8107146:	2b08      	cmp	r3, #8
 8107148:	f105 0501 	add.w	r5, r5, #1
 810714c:	4405      	add	r5, r0
 810714e:	dc1c      	bgt.n	810718a <_strtod_l+0x272>
 8107150:	9907      	ldr	r1, [sp, #28]
 8107152:	230a      	movs	r3, #10
 8107154:	fb03 2301 	mla	r3, r3, r1, r2
 8107158:	9307      	str	r3, [sp, #28]
 810715a:	2300      	movs	r3, #0
 810715c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810715e:	1c51      	adds	r1, r2, #1
 8107160:	9117      	str	r1, [sp, #92]	; 0x5c
 8107162:	7852      	ldrb	r2, [r2, #1]
 8107164:	4618      	mov	r0, r3
 8107166:	e7c9      	b.n	81070fc <_strtod_l+0x1e4>
 8107168:	4638      	mov	r0, r7
 810716a:	e7d2      	b.n	8107112 <_strtod_l+0x1fa>
 810716c:	2b08      	cmp	r3, #8
 810716e:	dc04      	bgt.n	810717a <_strtod_l+0x262>
 8107170:	9e07      	ldr	r6, [sp, #28]
 8107172:	434e      	muls	r6, r1
 8107174:	9607      	str	r6, [sp, #28]
 8107176:	3301      	adds	r3, #1
 8107178:	e7e2      	b.n	8107140 <_strtod_l+0x228>
 810717a:	f103 0c01 	add.w	ip, r3, #1
 810717e:	f1bc 0f10 	cmp.w	ip, #16
 8107182:	bfd8      	it	le
 8107184:	fb01 f909 	mulle.w	r9, r1, r9
 8107188:	e7f5      	b.n	8107176 <_strtod_l+0x25e>
 810718a:	2d10      	cmp	r5, #16
 810718c:	bfdc      	itt	le
 810718e:	230a      	movle	r3, #10
 8107190:	fb03 2909 	mlale	r9, r3, r9, r2
 8107194:	e7e1      	b.n	810715a <_strtod_l+0x242>
 8107196:	2300      	movs	r3, #0
 8107198:	9305      	str	r3, [sp, #20]
 810719a:	2301      	movs	r3, #1
 810719c:	e77c      	b.n	8107098 <_strtod_l+0x180>
 810719e:	f04f 0c00 	mov.w	ip, #0
 81071a2:	f108 0202 	add.w	r2, r8, #2
 81071a6:	9217      	str	r2, [sp, #92]	; 0x5c
 81071a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 81071ac:	e785      	b.n	81070ba <_strtod_l+0x1a2>
 81071ae:	f04f 0c01 	mov.w	ip, #1
 81071b2:	e7f6      	b.n	81071a2 <_strtod_l+0x28a>
 81071b4:	0810ae6c 	.word	0x0810ae6c
 81071b8:	0810abc0 	.word	0x0810abc0
 81071bc:	7ff00000 	.word	0x7ff00000
 81071c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 81071c2:	1c51      	adds	r1, r2, #1
 81071c4:	9117      	str	r1, [sp, #92]	; 0x5c
 81071c6:	7852      	ldrb	r2, [r2, #1]
 81071c8:	2a30      	cmp	r2, #48	; 0x30
 81071ca:	d0f9      	beq.n	81071c0 <_strtod_l+0x2a8>
 81071cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 81071d0:	2908      	cmp	r1, #8
 81071d2:	f63f af79 	bhi.w	81070c8 <_strtod_l+0x1b0>
 81071d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 81071da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 81071dc:	9206      	str	r2, [sp, #24]
 81071de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 81071e0:	1c51      	adds	r1, r2, #1
 81071e2:	9117      	str	r1, [sp, #92]	; 0x5c
 81071e4:	7852      	ldrb	r2, [r2, #1]
 81071e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 81071ea:	2e09      	cmp	r6, #9
 81071ec:	d937      	bls.n	810725e <_strtod_l+0x346>
 81071ee:	9e06      	ldr	r6, [sp, #24]
 81071f0:	1b89      	subs	r1, r1, r6
 81071f2:	2908      	cmp	r1, #8
 81071f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 81071f8:	dc02      	bgt.n	8107200 <_strtod_l+0x2e8>
 81071fa:	4576      	cmp	r6, lr
 81071fc:	bfa8      	it	ge
 81071fe:	4676      	movge	r6, lr
 8107200:	f1bc 0f00 	cmp.w	ip, #0
 8107204:	d000      	beq.n	8107208 <_strtod_l+0x2f0>
 8107206:	4276      	negs	r6, r6
 8107208:	2d00      	cmp	r5, #0
 810720a:	d14d      	bne.n	81072a8 <_strtod_l+0x390>
 810720c:	9904      	ldr	r1, [sp, #16]
 810720e:	4301      	orrs	r1, r0
 8107210:	f47f aec6 	bne.w	8106fa0 <_strtod_l+0x88>
 8107214:	2b00      	cmp	r3, #0
 8107216:	f47f aee1 	bne.w	8106fdc <_strtod_l+0xc4>
 810721a:	2a69      	cmp	r2, #105	; 0x69
 810721c:	d027      	beq.n	810726e <_strtod_l+0x356>
 810721e:	dc24      	bgt.n	810726a <_strtod_l+0x352>
 8107220:	2a49      	cmp	r2, #73	; 0x49
 8107222:	d024      	beq.n	810726e <_strtod_l+0x356>
 8107224:	2a4e      	cmp	r2, #78	; 0x4e
 8107226:	f47f aed9 	bne.w	8106fdc <_strtod_l+0xc4>
 810722a:	499f      	ldr	r1, [pc, #636]	; (81074a8 <_strtod_l+0x590>)
 810722c:	a817      	add	r0, sp, #92	; 0x5c
 810722e:	f002 f8b3 	bl	8109398 <__match>
 8107232:	2800      	cmp	r0, #0
 8107234:	f43f aed2 	beq.w	8106fdc <_strtod_l+0xc4>
 8107238:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810723a:	781b      	ldrb	r3, [r3, #0]
 810723c:	2b28      	cmp	r3, #40	; 0x28
 810723e:	d12d      	bne.n	810729c <_strtod_l+0x384>
 8107240:	499a      	ldr	r1, [pc, #616]	; (81074ac <_strtod_l+0x594>)
 8107242:	aa1a      	add	r2, sp, #104	; 0x68
 8107244:	a817      	add	r0, sp, #92	; 0x5c
 8107246:	f002 f8bb 	bl	81093c0 <__hexnan>
 810724a:	2805      	cmp	r0, #5
 810724c:	d126      	bne.n	810729c <_strtod_l+0x384>
 810724e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8107250:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8107254:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8107258:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 810725c:	e6a0      	b.n	8106fa0 <_strtod_l+0x88>
 810725e:	210a      	movs	r1, #10
 8107260:	fb01 2e0e 	mla	lr, r1, lr, r2
 8107264:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8107268:	e7b9      	b.n	81071de <_strtod_l+0x2c6>
 810726a:	2a6e      	cmp	r2, #110	; 0x6e
 810726c:	e7db      	b.n	8107226 <_strtod_l+0x30e>
 810726e:	4990      	ldr	r1, [pc, #576]	; (81074b0 <_strtod_l+0x598>)
 8107270:	a817      	add	r0, sp, #92	; 0x5c
 8107272:	f002 f891 	bl	8109398 <__match>
 8107276:	2800      	cmp	r0, #0
 8107278:	f43f aeb0 	beq.w	8106fdc <_strtod_l+0xc4>
 810727c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810727e:	498d      	ldr	r1, [pc, #564]	; (81074b4 <_strtod_l+0x59c>)
 8107280:	3b01      	subs	r3, #1
 8107282:	a817      	add	r0, sp, #92	; 0x5c
 8107284:	9317      	str	r3, [sp, #92]	; 0x5c
 8107286:	f002 f887 	bl	8109398 <__match>
 810728a:	b910      	cbnz	r0, 8107292 <_strtod_l+0x37a>
 810728c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 810728e:	3301      	adds	r3, #1
 8107290:	9317      	str	r3, [sp, #92]	; 0x5c
 8107292:	f8df b230 	ldr.w	fp, [pc, #560]	; 81074c4 <_strtod_l+0x5ac>
 8107296:	f04f 0a00 	mov.w	sl, #0
 810729a:	e681      	b.n	8106fa0 <_strtod_l+0x88>
 810729c:	4886      	ldr	r0, [pc, #536]	; (81074b8 <_strtod_l+0x5a0>)
 810729e:	f003 fa2f 	bl	810a700 <nan>
 81072a2:	ec5b ab10 	vmov	sl, fp, d0
 81072a6:	e67b      	b.n	8106fa0 <_strtod_l+0x88>
 81072a8:	9b05      	ldr	r3, [sp, #20]
 81072aa:	9807      	ldr	r0, [sp, #28]
 81072ac:	1af3      	subs	r3, r6, r3
 81072ae:	2f00      	cmp	r7, #0
 81072b0:	bf08      	it	eq
 81072b2:	462f      	moveq	r7, r5
 81072b4:	2d10      	cmp	r5, #16
 81072b6:	9306      	str	r3, [sp, #24]
 81072b8:	46a8      	mov	r8, r5
 81072ba:	bfa8      	it	ge
 81072bc:	f04f 0810 	movge.w	r8, #16
 81072c0:	f7f9 f9a8 	bl	8100614 <__aeabi_ui2d>
 81072c4:	2d09      	cmp	r5, #9
 81072c6:	4682      	mov	sl, r0
 81072c8:	468b      	mov	fp, r1
 81072ca:	dd13      	ble.n	81072f4 <_strtod_l+0x3dc>
 81072cc:	4b7b      	ldr	r3, [pc, #492]	; (81074bc <_strtod_l+0x5a4>)
 81072ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 81072d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 81072d6:	f7f9 fa17 	bl	8100708 <__aeabi_dmul>
 81072da:	4682      	mov	sl, r0
 81072dc:	4648      	mov	r0, r9
 81072de:	468b      	mov	fp, r1
 81072e0:	f7f9 f998 	bl	8100614 <__aeabi_ui2d>
 81072e4:	4602      	mov	r2, r0
 81072e6:	460b      	mov	r3, r1
 81072e8:	4650      	mov	r0, sl
 81072ea:	4659      	mov	r1, fp
 81072ec:	f7f9 f856 	bl	810039c <__adddf3>
 81072f0:	4682      	mov	sl, r0
 81072f2:	468b      	mov	fp, r1
 81072f4:	2d0f      	cmp	r5, #15
 81072f6:	dc38      	bgt.n	810736a <_strtod_l+0x452>
 81072f8:	9b06      	ldr	r3, [sp, #24]
 81072fa:	2b00      	cmp	r3, #0
 81072fc:	f43f ae50 	beq.w	8106fa0 <_strtod_l+0x88>
 8107300:	dd24      	ble.n	810734c <_strtod_l+0x434>
 8107302:	2b16      	cmp	r3, #22
 8107304:	dc0b      	bgt.n	810731e <_strtod_l+0x406>
 8107306:	496d      	ldr	r1, [pc, #436]	; (81074bc <_strtod_l+0x5a4>)
 8107308:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810730c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8107310:	4652      	mov	r2, sl
 8107312:	465b      	mov	r3, fp
 8107314:	f7f9 f9f8 	bl	8100708 <__aeabi_dmul>
 8107318:	4682      	mov	sl, r0
 810731a:	468b      	mov	fp, r1
 810731c:	e640      	b.n	8106fa0 <_strtod_l+0x88>
 810731e:	9a06      	ldr	r2, [sp, #24]
 8107320:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8107324:	4293      	cmp	r3, r2
 8107326:	db20      	blt.n	810736a <_strtod_l+0x452>
 8107328:	4c64      	ldr	r4, [pc, #400]	; (81074bc <_strtod_l+0x5a4>)
 810732a:	f1c5 050f 	rsb	r5, r5, #15
 810732e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8107332:	4652      	mov	r2, sl
 8107334:	465b      	mov	r3, fp
 8107336:	e9d1 0100 	ldrd	r0, r1, [r1]
 810733a:	f7f9 f9e5 	bl	8100708 <__aeabi_dmul>
 810733e:	9b06      	ldr	r3, [sp, #24]
 8107340:	1b5d      	subs	r5, r3, r5
 8107342:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8107346:	e9d4 2300 	ldrd	r2, r3, [r4]
 810734a:	e7e3      	b.n	8107314 <_strtod_l+0x3fc>
 810734c:	9b06      	ldr	r3, [sp, #24]
 810734e:	3316      	adds	r3, #22
 8107350:	db0b      	blt.n	810736a <_strtod_l+0x452>
 8107352:	9b05      	ldr	r3, [sp, #20]
 8107354:	1b9e      	subs	r6, r3, r6
 8107356:	4b59      	ldr	r3, [pc, #356]	; (81074bc <_strtod_l+0x5a4>)
 8107358:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 810735c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8107360:	4650      	mov	r0, sl
 8107362:	4659      	mov	r1, fp
 8107364:	f7f9 fafa 	bl	810095c <__aeabi_ddiv>
 8107368:	e7d6      	b.n	8107318 <_strtod_l+0x400>
 810736a:	9b06      	ldr	r3, [sp, #24]
 810736c:	eba5 0808 	sub.w	r8, r5, r8
 8107370:	4498      	add	r8, r3
 8107372:	f1b8 0f00 	cmp.w	r8, #0
 8107376:	dd74      	ble.n	8107462 <_strtod_l+0x54a>
 8107378:	f018 030f 	ands.w	r3, r8, #15
 810737c:	d00a      	beq.n	8107394 <_strtod_l+0x47c>
 810737e:	494f      	ldr	r1, [pc, #316]	; (81074bc <_strtod_l+0x5a4>)
 8107380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8107384:	4652      	mov	r2, sl
 8107386:	465b      	mov	r3, fp
 8107388:	e9d1 0100 	ldrd	r0, r1, [r1]
 810738c:	f7f9 f9bc 	bl	8100708 <__aeabi_dmul>
 8107390:	4682      	mov	sl, r0
 8107392:	468b      	mov	fp, r1
 8107394:	f038 080f 	bics.w	r8, r8, #15
 8107398:	d04f      	beq.n	810743a <_strtod_l+0x522>
 810739a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810739e:	dd22      	ble.n	81073e6 <_strtod_l+0x4ce>
 81073a0:	2500      	movs	r5, #0
 81073a2:	462e      	mov	r6, r5
 81073a4:	9507      	str	r5, [sp, #28]
 81073a6:	9505      	str	r5, [sp, #20]
 81073a8:	2322      	movs	r3, #34	; 0x22
 81073aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 81074c4 <_strtod_l+0x5ac>
 81073ae:	6023      	str	r3, [r4, #0]
 81073b0:	f04f 0a00 	mov.w	sl, #0
 81073b4:	9b07      	ldr	r3, [sp, #28]
 81073b6:	2b00      	cmp	r3, #0
 81073b8:	f43f adf2 	beq.w	8106fa0 <_strtod_l+0x88>
 81073bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 81073be:	4620      	mov	r0, r4
 81073c0:	f002 f96e 	bl	81096a0 <_Bfree>
 81073c4:	9905      	ldr	r1, [sp, #20]
 81073c6:	4620      	mov	r0, r4
 81073c8:	f002 f96a 	bl	81096a0 <_Bfree>
 81073cc:	4631      	mov	r1, r6
 81073ce:	4620      	mov	r0, r4
 81073d0:	f002 f966 	bl	81096a0 <_Bfree>
 81073d4:	9907      	ldr	r1, [sp, #28]
 81073d6:	4620      	mov	r0, r4
 81073d8:	f002 f962 	bl	81096a0 <_Bfree>
 81073dc:	4629      	mov	r1, r5
 81073de:	4620      	mov	r0, r4
 81073e0:	f002 f95e 	bl	81096a0 <_Bfree>
 81073e4:	e5dc      	b.n	8106fa0 <_strtod_l+0x88>
 81073e6:	4b36      	ldr	r3, [pc, #216]	; (81074c0 <_strtod_l+0x5a8>)
 81073e8:	9304      	str	r3, [sp, #16]
 81073ea:	2300      	movs	r3, #0
 81073ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 81073f0:	4650      	mov	r0, sl
 81073f2:	4659      	mov	r1, fp
 81073f4:	4699      	mov	r9, r3
 81073f6:	f1b8 0f01 	cmp.w	r8, #1
 81073fa:	dc21      	bgt.n	8107440 <_strtod_l+0x528>
 81073fc:	b10b      	cbz	r3, 8107402 <_strtod_l+0x4ea>
 81073fe:	4682      	mov	sl, r0
 8107400:	468b      	mov	fp, r1
 8107402:	4b2f      	ldr	r3, [pc, #188]	; (81074c0 <_strtod_l+0x5a8>)
 8107404:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8107408:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 810740c:	4652      	mov	r2, sl
 810740e:	465b      	mov	r3, fp
 8107410:	e9d9 0100 	ldrd	r0, r1, [r9]
 8107414:	f7f9 f978 	bl	8100708 <__aeabi_dmul>
 8107418:	4b2a      	ldr	r3, [pc, #168]	; (81074c4 <_strtod_l+0x5ac>)
 810741a:	460a      	mov	r2, r1
 810741c:	400b      	ands	r3, r1
 810741e:	492a      	ldr	r1, [pc, #168]	; (81074c8 <_strtod_l+0x5b0>)
 8107420:	428b      	cmp	r3, r1
 8107422:	4682      	mov	sl, r0
 8107424:	d8bc      	bhi.n	81073a0 <_strtod_l+0x488>
 8107426:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810742a:	428b      	cmp	r3, r1
 810742c:	bf86      	itte	hi
 810742e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 81074cc <_strtod_l+0x5b4>
 8107432:	f04f 3aff 	movhi.w	sl, #4294967295
 8107436:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 810743a:	2300      	movs	r3, #0
 810743c:	9304      	str	r3, [sp, #16]
 810743e:	e084      	b.n	810754a <_strtod_l+0x632>
 8107440:	f018 0f01 	tst.w	r8, #1
 8107444:	d005      	beq.n	8107452 <_strtod_l+0x53a>
 8107446:	9b04      	ldr	r3, [sp, #16]
 8107448:	e9d3 2300 	ldrd	r2, r3, [r3]
 810744c:	f7f9 f95c 	bl	8100708 <__aeabi_dmul>
 8107450:	2301      	movs	r3, #1
 8107452:	9a04      	ldr	r2, [sp, #16]
 8107454:	3208      	adds	r2, #8
 8107456:	f109 0901 	add.w	r9, r9, #1
 810745a:	ea4f 0868 	mov.w	r8, r8, asr #1
 810745e:	9204      	str	r2, [sp, #16]
 8107460:	e7c9      	b.n	81073f6 <_strtod_l+0x4de>
 8107462:	d0ea      	beq.n	810743a <_strtod_l+0x522>
 8107464:	f1c8 0800 	rsb	r8, r8, #0
 8107468:	f018 020f 	ands.w	r2, r8, #15
 810746c:	d00a      	beq.n	8107484 <_strtod_l+0x56c>
 810746e:	4b13      	ldr	r3, [pc, #76]	; (81074bc <_strtod_l+0x5a4>)
 8107470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8107474:	4650      	mov	r0, sl
 8107476:	4659      	mov	r1, fp
 8107478:	e9d3 2300 	ldrd	r2, r3, [r3]
 810747c:	f7f9 fa6e 	bl	810095c <__aeabi_ddiv>
 8107480:	4682      	mov	sl, r0
 8107482:	468b      	mov	fp, r1
 8107484:	ea5f 1828 	movs.w	r8, r8, asr #4
 8107488:	d0d7      	beq.n	810743a <_strtod_l+0x522>
 810748a:	f1b8 0f1f 	cmp.w	r8, #31
 810748e:	dd1f      	ble.n	81074d0 <_strtod_l+0x5b8>
 8107490:	2500      	movs	r5, #0
 8107492:	462e      	mov	r6, r5
 8107494:	9507      	str	r5, [sp, #28]
 8107496:	9505      	str	r5, [sp, #20]
 8107498:	2322      	movs	r3, #34	; 0x22
 810749a:	f04f 0a00 	mov.w	sl, #0
 810749e:	f04f 0b00 	mov.w	fp, #0
 81074a2:	6023      	str	r3, [r4, #0]
 81074a4:	e786      	b.n	81073b4 <_strtod_l+0x49c>
 81074a6:	bf00      	nop
 81074a8:	0810ab91 	.word	0x0810ab91
 81074ac:	0810abd4 	.word	0x0810abd4
 81074b0:	0810ab89 	.word	0x0810ab89
 81074b4:	0810ad14 	.word	0x0810ad14
 81074b8:	0810b028 	.word	0x0810b028
 81074bc:	0810af08 	.word	0x0810af08
 81074c0:	0810aee0 	.word	0x0810aee0
 81074c4:	7ff00000 	.word	0x7ff00000
 81074c8:	7ca00000 	.word	0x7ca00000
 81074cc:	7fefffff 	.word	0x7fefffff
 81074d0:	f018 0310 	ands.w	r3, r8, #16
 81074d4:	bf18      	it	ne
 81074d6:	236a      	movne	r3, #106	; 0x6a
 81074d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8107888 <_strtod_l+0x970>
 81074dc:	9304      	str	r3, [sp, #16]
 81074de:	4650      	mov	r0, sl
 81074e0:	4659      	mov	r1, fp
 81074e2:	2300      	movs	r3, #0
 81074e4:	f018 0f01 	tst.w	r8, #1
 81074e8:	d004      	beq.n	81074f4 <_strtod_l+0x5dc>
 81074ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 81074ee:	f7f9 f90b 	bl	8100708 <__aeabi_dmul>
 81074f2:	2301      	movs	r3, #1
 81074f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 81074f8:	f109 0908 	add.w	r9, r9, #8
 81074fc:	d1f2      	bne.n	81074e4 <_strtod_l+0x5cc>
 81074fe:	b10b      	cbz	r3, 8107504 <_strtod_l+0x5ec>
 8107500:	4682      	mov	sl, r0
 8107502:	468b      	mov	fp, r1
 8107504:	9b04      	ldr	r3, [sp, #16]
 8107506:	b1c3      	cbz	r3, 810753a <_strtod_l+0x622>
 8107508:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810750c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8107510:	2b00      	cmp	r3, #0
 8107512:	4659      	mov	r1, fp
 8107514:	dd11      	ble.n	810753a <_strtod_l+0x622>
 8107516:	2b1f      	cmp	r3, #31
 8107518:	f340 8124 	ble.w	8107764 <_strtod_l+0x84c>
 810751c:	2b34      	cmp	r3, #52	; 0x34
 810751e:	bfde      	ittt	le
 8107520:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8107524:	f04f 33ff 	movle.w	r3, #4294967295
 8107528:	fa03 f202 	lslle.w	r2, r3, r2
 810752c:	f04f 0a00 	mov.w	sl, #0
 8107530:	bfcc      	ite	gt
 8107532:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8107536:	ea02 0b01 	andle.w	fp, r2, r1
 810753a:	2200      	movs	r2, #0
 810753c:	2300      	movs	r3, #0
 810753e:	4650      	mov	r0, sl
 8107540:	4659      	mov	r1, fp
 8107542:	f7f9 fb49 	bl	8100bd8 <__aeabi_dcmpeq>
 8107546:	2800      	cmp	r0, #0
 8107548:	d1a2      	bne.n	8107490 <_strtod_l+0x578>
 810754a:	9b07      	ldr	r3, [sp, #28]
 810754c:	9300      	str	r3, [sp, #0]
 810754e:	9908      	ldr	r1, [sp, #32]
 8107550:	462b      	mov	r3, r5
 8107552:	463a      	mov	r2, r7
 8107554:	4620      	mov	r0, r4
 8107556:	f002 f90b 	bl	8109770 <__s2b>
 810755a:	9007      	str	r0, [sp, #28]
 810755c:	2800      	cmp	r0, #0
 810755e:	f43f af1f 	beq.w	81073a0 <_strtod_l+0x488>
 8107562:	9b05      	ldr	r3, [sp, #20]
 8107564:	1b9e      	subs	r6, r3, r6
 8107566:	9b06      	ldr	r3, [sp, #24]
 8107568:	2b00      	cmp	r3, #0
 810756a:	bfb4      	ite	lt
 810756c:	4633      	movlt	r3, r6
 810756e:	2300      	movge	r3, #0
 8107570:	930c      	str	r3, [sp, #48]	; 0x30
 8107572:	9b06      	ldr	r3, [sp, #24]
 8107574:	2500      	movs	r5, #0
 8107576:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 810757a:	9312      	str	r3, [sp, #72]	; 0x48
 810757c:	462e      	mov	r6, r5
 810757e:	9b07      	ldr	r3, [sp, #28]
 8107580:	4620      	mov	r0, r4
 8107582:	6859      	ldr	r1, [r3, #4]
 8107584:	f002 f84c 	bl	8109620 <_Balloc>
 8107588:	9005      	str	r0, [sp, #20]
 810758a:	2800      	cmp	r0, #0
 810758c:	f43f af0c 	beq.w	81073a8 <_strtod_l+0x490>
 8107590:	9b07      	ldr	r3, [sp, #28]
 8107592:	691a      	ldr	r2, [r3, #16]
 8107594:	3202      	adds	r2, #2
 8107596:	f103 010c 	add.w	r1, r3, #12
 810759a:	0092      	lsls	r2, r2, #2
 810759c:	300c      	adds	r0, #12
 810759e:	f002 f831 	bl	8109604 <memcpy>
 81075a2:	ec4b ab10 	vmov	d0, sl, fp
 81075a6:	aa1a      	add	r2, sp, #104	; 0x68
 81075a8:	a919      	add	r1, sp, #100	; 0x64
 81075aa:	4620      	mov	r0, r4
 81075ac:	f002 fc26 	bl	8109dfc <__d2b>
 81075b0:	ec4b ab18 	vmov	d8, sl, fp
 81075b4:	9018      	str	r0, [sp, #96]	; 0x60
 81075b6:	2800      	cmp	r0, #0
 81075b8:	f43f aef6 	beq.w	81073a8 <_strtod_l+0x490>
 81075bc:	2101      	movs	r1, #1
 81075be:	4620      	mov	r0, r4
 81075c0:	f002 f970 	bl	81098a4 <__i2b>
 81075c4:	4606      	mov	r6, r0
 81075c6:	2800      	cmp	r0, #0
 81075c8:	f43f aeee 	beq.w	81073a8 <_strtod_l+0x490>
 81075cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 81075ce:	9904      	ldr	r1, [sp, #16]
 81075d0:	2b00      	cmp	r3, #0
 81075d2:	bfab      	itete	ge
 81075d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 81075d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 81075d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 81075da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 81075de:	bfac      	ite	ge
 81075e0:	eb03 0902 	addge.w	r9, r3, r2
 81075e4:	1ad7      	sublt	r7, r2, r3
 81075e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 81075e8:	eba3 0801 	sub.w	r8, r3, r1
 81075ec:	4490      	add	r8, r2
 81075ee:	4ba1      	ldr	r3, [pc, #644]	; (8107874 <_strtod_l+0x95c>)
 81075f0:	f108 38ff 	add.w	r8, r8, #4294967295
 81075f4:	4598      	cmp	r8, r3
 81075f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 81075fa:	f280 80c7 	bge.w	810778c <_strtod_l+0x874>
 81075fe:	eba3 0308 	sub.w	r3, r3, r8
 8107602:	2b1f      	cmp	r3, #31
 8107604:	eba2 0203 	sub.w	r2, r2, r3
 8107608:	f04f 0101 	mov.w	r1, #1
 810760c:	f300 80b1 	bgt.w	8107772 <_strtod_l+0x85a>
 8107610:	fa01 f303 	lsl.w	r3, r1, r3
 8107614:	930d      	str	r3, [sp, #52]	; 0x34
 8107616:	2300      	movs	r3, #0
 8107618:	9308      	str	r3, [sp, #32]
 810761a:	eb09 0802 	add.w	r8, r9, r2
 810761e:	9b04      	ldr	r3, [sp, #16]
 8107620:	45c1      	cmp	r9, r8
 8107622:	4417      	add	r7, r2
 8107624:	441f      	add	r7, r3
 8107626:	464b      	mov	r3, r9
 8107628:	bfa8      	it	ge
 810762a:	4643      	movge	r3, r8
 810762c:	42bb      	cmp	r3, r7
 810762e:	bfa8      	it	ge
 8107630:	463b      	movge	r3, r7
 8107632:	2b00      	cmp	r3, #0
 8107634:	bfc2      	ittt	gt
 8107636:	eba8 0803 	subgt.w	r8, r8, r3
 810763a:	1aff      	subgt	r7, r7, r3
 810763c:	eba9 0903 	subgt.w	r9, r9, r3
 8107640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8107642:	2b00      	cmp	r3, #0
 8107644:	dd17      	ble.n	8107676 <_strtod_l+0x75e>
 8107646:	4631      	mov	r1, r6
 8107648:	461a      	mov	r2, r3
 810764a:	4620      	mov	r0, r4
 810764c:	f002 f9ea 	bl	8109a24 <__pow5mult>
 8107650:	4606      	mov	r6, r0
 8107652:	2800      	cmp	r0, #0
 8107654:	f43f aea8 	beq.w	81073a8 <_strtod_l+0x490>
 8107658:	4601      	mov	r1, r0
 810765a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810765c:	4620      	mov	r0, r4
 810765e:	f002 f937 	bl	81098d0 <__multiply>
 8107662:	900b      	str	r0, [sp, #44]	; 0x2c
 8107664:	2800      	cmp	r0, #0
 8107666:	f43f ae9f 	beq.w	81073a8 <_strtod_l+0x490>
 810766a:	9918      	ldr	r1, [sp, #96]	; 0x60
 810766c:	4620      	mov	r0, r4
 810766e:	f002 f817 	bl	81096a0 <_Bfree>
 8107672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107674:	9318      	str	r3, [sp, #96]	; 0x60
 8107676:	f1b8 0f00 	cmp.w	r8, #0
 810767a:	f300 808c 	bgt.w	8107796 <_strtod_l+0x87e>
 810767e:	9b06      	ldr	r3, [sp, #24]
 8107680:	2b00      	cmp	r3, #0
 8107682:	dd08      	ble.n	8107696 <_strtod_l+0x77e>
 8107684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8107686:	9905      	ldr	r1, [sp, #20]
 8107688:	4620      	mov	r0, r4
 810768a:	f002 f9cb 	bl	8109a24 <__pow5mult>
 810768e:	9005      	str	r0, [sp, #20]
 8107690:	2800      	cmp	r0, #0
 8107692:	f43f ae89 	beq.w	81073a8 <_strtod_l+0x490>
 8107696:	2f00      	cmp	r7, #0
 8107698:	dd08      	ble.n	81076ac <_strtod_l+0x794>
 810769a:	9905      	ldr	r1, [sp, #20]
 810769c:	463a      	mov	r2, r7
 810769e:	4620      	mov	r0, r4
 81076a0:	f002 fa1a 	bl	8109ad8 <__lshift>
 81076a4:	9005      	str	r0, [sp, #20]
 81076a6:	2800      	cmp	r0, #0
 81076a8:	f43f ae7e 	beq.w	81073a8 <_strtod_l+0x490>
 81076ac:	f1b9 0f00 	cmp.w	r9, #0
 81076b0:	dd08      	ble.n	81076c4 <_strtod_l+0x7ac>
 81076b2:	4631      	mov	r1, r6
 81076b4:	464a      	mov	r2, r9
 81076b6:	4620      	mov	r0, r4
 81076b8:	f002 fa0e 	bl	8109ad8 <__lshift>
 81076bc:	4606      	mov	r6, r0
 81076be:	2800      	cmp	r0, #0
 81076c0:	f43f ae72 	beq.w	81073a8 <_strtod_l+0x490>
 81076c4:	9a05      	ldr	r2, [sp, #20]
 81076c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 81076c8:	4620      	mov	r0, r4
 81076ca:	f002 fa91 	bl	8109bf0 <__mdiff>
 81076ce:	4605      	mov	r5, r0
 81076d0:	2800      	cmp	r0, #0
 81076d2:	f43f ae69 	beq.w	81073a8 <_strtod_l+0x490>
 81076d6:	68c3      	ldr	r3, [r0, #12]
 81076d8:	930b      	str	r3, [sp, #44]	; 0x2c
 81076da:	2300      	movs	r3, #0
 81076dc:	60c3      	str	r3, [r0, #12]
 81076de:	4631      	mov	r1, r6
 81076e0:	f002 fa6a 	bl	8109bb8 <__mcmp>
 81076e4:	2800      	cmp	r0, #0
 81076e6:	da60      	bge.n	81077aa <_strtod_l+0x892>
 81076e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81076ea:	ea53 030a 	orrs.w	r3, r3, sl
 81076ee:	f040 8082 	bne.w	81077f6 <_strtod_l+0x8de>
 81076f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81076f6:	2b00      	cmp	r3, #0
 81076f8:	d17d      	bne.n	81077f6 <_strtod_l+0x8de>
 81076fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 81076fe:	0d1b      	lsrs	r3, r3, #20
 8107700:	051b      	lsls	r3, r3, #20
 8107702:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8107706:	d976      	bls.n	81077f6 <_strtod_l+0x8de>
 8107708:	696b      	ldr	r3, [r5, #20]
 810770a:	b913      	cbnz	r3, 8107712 <_strtod_l+0x7fa>
 810770c:	692b      	ldr	r3, [r5, #16]
 810770e:	2b01      	cmp	r3, #1
 8107710:	dd71      	ble.n	81077f6 <_strtod_l+0x8de>
 8107712:	4629      	mov	r1, r5
 8107714:	2201      	movs	r2, #1
 8107716:	4620      	mov	r0, r4
 8107718:	f002 f9de 	bl	8109ad8 <__lshift>
 810771c:	4631      	mov	r1, r6
 810771e:	4605      	mov	r5, r0
 8107720:	f002 fa4a 	bl	8109bb8 <__mcmp>
 8107724:	2800      	cmp	r0, #0
 8107726:	dd66      	ble.n	81077f6 <_strtod_l+0x8de>
 8107728:	9904      	ldr	r1, [sp, #16]
 810772a:	4a53      	ldr	r2, [pc, #332]	; (8107878 <_strtod_l+0x960>)
 810772c:	465b      	mov	r3, fp
 810772e:	2900      	cmp	r1, #0
 8107730:	f000 8081 	beq.w	8107836 <_strtod_l+0x91e>
 8107734:	ea02 010b 	and.w	r1, r2, fp
 8107738:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810773c:	dc7b      	bgt.n	8107836 <_strtod_l+0x91e>
 810773e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8107742:	f77f aea9 	ble.w	8107498 <_strtod_l+0x580>
 8107746:	4b4d      	ldr	r3, [pc, #308]	; (810787c <_strtod_l+0x964>)
 8107748:	4650      	mov	r0, sl
 810774a:	4659      	mov	r1, fp
 810774c:	2200      	movs	r2, #0
 810774e:	f7f8 ffdb 	bl	8100708 <__aeabi_dmul>
 8107752:	460b      	mov	r3, r1
 8107754:	4303      	orrs	r3, r0
 8107756:	bf08      	it	eq
 8107758:	2322      	moveq	r3, #34	; 0x22
 810775a:	4682      	mov	sl, r0
 810775c:	468b      	mov	fp, r1
 810775e:	bf08      	it	eq
 8107760:	6023      	streq	r3, [r4, #0]
 8107762:	e62b      	b.n	81073bc <_strtod_l+0x4a4>
 8107764:	f04f 32ff 	mov.w	r2, #4294967295
 8107768:	fa02 f303 	lsl.w	r3, r2, r3
 810776c:	ea03 0a0a 	and.w	sl, r3, sl
 8107770:	e6e3      	b.n	810753a <_strtod_l+0x622>
 8107772:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8107776:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810777a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810777e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8107782:	fa01 f308 	lsl.w	r3, r1, r8
 8107786:	9308      	str	r3, [sp, #32]
 8107788:	910d      	str	r1, [sp, #52]	; 0x34
 810778a:	e746      	b.n	810761a <_strtod_l+0x702>
 810778c:	2300      	movs	r3, #0
 810778e:	9308      	str	r3, [sp, #32]
 8107790:	2301      	movs	r3, #1
 8107792:	930d      	str	r3, [sp, #52]	; 0x34
 8107794:	e741      	b.n	810761a <_strtod_l+0x702>
 8107796:	9918      	ldr	r1, [sp, #96]	; 0x60
 8107798:	4642      	mov	r2, r8
 810779a:	4620      	mov	r0, r4
 810779c:	f002 f99c 	bl	8109ad8 <__lshift>
 81077a0:	9018      	str	r0, [sp, #96]	; 0x60
 81077a2:	2800      	cmp	r0, #0
 81077a4:	f47f af6b 	bne.w	810767e <_strtod_l+0x766>
 81077a8:	e5fe      	b.n	81073a8 <_strtod_l+0x490>
 81077aa:	465f      	mov	r7, fp
 81077ac:	d16e      	bne.n	810788c <_strtod_l+0x974>
 81077ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 81077b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81077b4:	b342      	cbz	r2, 8107808 <_strtod_l+0x8f0>
 81077b6:	4a32      	ldr	r2, [pc, #200]	; (8107880 <_strtod_l+0x968>)
 81077b8:	4293      	cmp	r3, r2
 81077ba:	d128      	bne.n	810780e <_strtod_l+0x8f6>
 81077bc:	9b04      	ldr	r3, [sp, #16]
 81077be:	4651      	mov	r1, sl
 81077c0:	b1eb      	cbz	r3, 81077fe <_strtod_l+0x8e6>
 81077c2:	4b2d      	ldr	r3, [pc, #180]	; (8107878 <_strtod_l+0x960>)
 81077c4:	403b      	ands	r3, r7
 81077c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 81077ca:	f04f 32ff 	mov.w	r2, #4294967295
 81077ce:	d819      	bhi.n	8107804 <_strtod_l+0x8ec>
 81077d0:	0d1b      	lsrs	r3, r3, #20
 81077d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 81077d6:	fa02 f303 	lsl.w	r3, r2, r3
 81077da:	4299      	cmp	r1, r3
 81077dc:	d117      	bne.n	810780e <_strtod_l+0x8f6>
 81077de:	4b29      	ldr	r3, [pc, #164]	; (8107884 <_strtod_l+0x96c>)
 81077e0:	429f      	cmp	r7, r3
 81077e2:	d102      	bne.n	81077ea <_strtod_l+0x8d2>
 81077e4:	3101      	adds	r1, #1
 81077e6:	f43f addf 	beq.w	81073a8 <_strtod_l+0x490>
 81077ea:	4b23      	ldr	r3, [pc, #140]	; (8107878 <_strtod_l+0x960>)
 81077ec:	403b      	ands	r3, r7
 81077ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 81077f2:	f04f 0a00 	mov.w	sl, #0
 81077f6:	9b04      	ldr	r3, [sp, #16]
 81077f8:	2b00      	cmp	r3, #0
 81077fa:	d1a4      	bne.n	8107746 <_strtod_l+0x82e>
 81077fc:	e5de      	b.n	81073bc <_strtod_l+0x4a4>
 81077fe:	f04f 33ff 	mov.w	r3, #4294967295
 8107802:	e7ea      	b.n	81077da <_strtod_l+0x8c2>
 8107804:	4613      	mov	r3, r2
 8107806:	e7e8      	b.n	81077da <_strtod_l+0x8c2>
 8107808:	ea53 030a 	orrs.w	r3, r3, sl
 810780c:	d08c      	beq.n	8107728 <_strtod_l+0x810>
 810780e:	9b08      	ldr	r3, [sp, #32]
 8107810:	b1db      	cbz	r3, 810784a <_strtod_l+0x932>
 8107812:	423b      	tst	r3, r7
 8107814:	d0ef      	beq.n	81077f6 <_strtod_l+0x8de>
 8107816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107818:	9a04      	ldr	r2, [sp, #16]
 810781a:	4650      	mov	r0, sl
 810781c:	4659      	mov	r1, fp
 810781e:	b1c3      	cbz	r3, 8107852 <_strtod_l+0x93a>
 8107820:	f7ff fb5e 	bl	8106ee0 <sulp>
 8107824:	4602      	mov	r2, r0
 8107826:	460b      	mov	r3, r1
 8107828:	ec51 0b18 	vmov	r0, r1, d8
 810782c:	f7f8 fdb6 	bl	810039c <__adddf3>
 8107830:	4682      	mov	sl, r0
 8107832:	468b      	mov	fp, r1
 8107834:	e7df      	b.n	81077f6 <_strtod_l+0x8de>
 8107836:	4013      	ands	r3, r2
 8107838:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810783c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8107840:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8107844:	f04f 3aff 	mov.w	sl, #4294967295
 8107848:	e7d5      	b.n	81077f6 <_strtod_l+0x8de>
 810784a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810784c:	ea13 0f0a 	tst.w	r3, sl
 8107850:	e7e0      	b.n	8107814 <_strtod_l+0x8fc>
 8107852:	f7ff fb45 	bl	8106ee0 <sulp>
 8107856:	4602      	mov	r2, r0
 8107858:	460b      	mov	r3, r1
 810785a:	ec51 0b18 	vmov	r0, r1, d8
 810785e:	f7f8 fd9b 	bl	8100398 <__aeabi_dsub>
 8107862:	2200      	movs	r2, #0
 8107864:	2300      	movs	r3, #0
 8107866:	4682      	mov	sl, r0
 8107868:	468b      	mov	fp, r1
 810786a:	f7f9 f9b5 	bl	8100bd8 <__aeabi_dcmpeq>
 810786e:	2800      	cmp	r0, #0
 8107870:	d0c1      	beq.n	81077f6 <_strtod_l+0x8de>
 8107872:	e611      	b.n	8107498 <_strtod_l+0x580>
 8107874:	fffffc02 	.word	0xfffffc02
 8107878:	7ff00000 	.word	0x7ff00000
 810787c:	39500000 	.word	0x39500000
 8107880:	000fffff 	.word	0x000fffff
 8107884:	7fefffff 	.word	0x7fefffff
 8107888:	0810abe8 	.word	0x0810abe8
 810788c:	4631      	mov	r1, r6
 810788e:	4628      	mov	r0, r5
 8107890:	f002 fb10 	bl	8109eb4 <__ratio>
 8107894:	ec59 8b10 	vmov	r8, r9, d0
 8107898:	ee10 0a10 	vmov	r0, s0
 810789c:	2200      	movs	r2, #0
 810789e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81078a2:	4649      	mov	r1, r9
 81078a4:	f7f9 f9ac 	bl	8100c00 <__aeabi_dcmple>
 81078a8:	2800      	cmp	r0, #0
 81078aa:	d07a      	beq.n	81079a2 <_strtod_l+0xa8a>
 81078ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81078ae:	2b00      	cmp	r3, #0
 81078b0:	d04a      	beq.n	8107948 <_strtod_l+0xa30>
 81078b2:	4b95      	ldr	r3, [pc, #596]	; (8107b08 <_strtod_l+0xbf0>)
 81078b4:	2200      	movs	r2, #0
 81078b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 81078ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8107b08 <_strtod_l+0xbf0>
 81078be:	f04f 0800 	mov.w	r8, #0
 81078c2:	4b92      	ldr	r3, [pc, #584]	; (8107b0c <_strtod_l+0xbf4>)
 81078c4:	403b      	ands	r3, r7
 81078c6:	930d      	str	r3, [sp, #52]	; 0x34
 81078c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 81078ca:	4b91      	ldr	r3, [pc, #580]	; (8107b10 <_strtod_l+0xbf8>)
 81078cc:	429a      	cmp	r2, r3
 81078ce:	f040 80b0 	bne.w	8107a32 <_strtod_l+0xb1a>
 81078d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81078d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 81078da:	ec4b ab10 	vmov	d0, sl, fp
 81078de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 81078e2:	f002 fa0f 	bl	8109d04 <__ulp>
 81078e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81078ea:	ec53 2b10 	vmov	r2, r3, d0
 81078ee:	f7f8 ff0b 	bl	8100708 <__aeabi_dmul>
 81078f2:	4652      	mov	r2, sl
 81078f4:	465b      	mov	r3, fp
 81078f6:	f7f8 fd51 	bl	810039c <__adddf3>
 81078fa:	460b      	mov	r3, r1
 81078fc:	4983      	ldr	r1, [pc, #524]	; (8107b0c <_strtod_l+0xbf4>)
 81078fe:	4a85      	ldr	r2, [pc, #532]	; (8107b14 <_strtod_l+0xbfc>)
 8107900:	4019      	ands	r1, r3
 8107902:	4291      	cmp	r1, r2
 8107904:	4682      	mov	sl, r0
 8107906:	d960      	bls.n	81079ca <_strtod_l+0xab2>
 8107908:	ee18 3a90 	vmov	r3, s17
 810790c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8107910:	4293      	cmp	r3, r2
 8107912:	d104      	bne.n	810791e <_strtod_l+0xa06>
 8107914:	ee18 3a10 	vmov	r3, s16
 8107918:	3301      	adds	r3, #1
 810791a:	f43f ad45 	beq.w	81073a8 <_strtod_l+0x490>
 810791e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8107b20 <_strtod_l+0xc08>
 8107922:	f04f 3aff 	mov.w	sl, #4294967295
 8107926:	9918      	ldr	r1, [sp, #96]	; 0x60
 8107928:	4620      	mov	r0, r4
 810792a:	f001 feb9 	bl	81096a0 <_Bfree>
 810792e:	9905      	ldr	r1, [sp, #20]
 8107930:	4620      	mov	r0, r4
 8107932:	f001 feb5 	bl	81096a0 <_Bfree>
 8107936:	4631      	mov	r1, r6
 8107938:	4620      	mov	r0, r4
 810793a:	f001 feb1 	bl	81096a0 <_Bfree>
 810793e:	4629      	mov	r1, r5
 8107940:	4620      	mov	r0, r4
 8107942:	f001 fead 	bl	81096a0 <_Bfree>
 8107946:	e61a      	b.n	810757e <_strtod_l+0x666>
 8107948:	f1ba 0f00 	cmp.w	sl, #0
 810794c:	d11b      	bne.n	8107986 <_strtod_l+0xa6e>
 810794e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8107952:	b9f3      	cbnz	r3, 8107992 <_strtod_l+0xa7a>
 8107954:	4b6c      	ldr	r3, [pc, #432]	; (8107b08 <_strtod_l+0xbf0>)
 8107956:	2200      	movs	r2, #0
 8107958:	4640      	mov	r0, r8
 810795a:	4649      	mov	r1, r9
 810795c:	f7f9 f946 	bl	8100bec <__aeabi_dcmplt>
 8107960:	b9d0      	cbnz	r0, 8107998 <_strtod_l+0xa80>
 8107962:	4640      	mov	r0, r8
 8107964:	4649      	mov	r1, r9
 8107966:	4b6c      	ldr	r3, [pc, #432]	; (8107b18 <_strtod_l+0xc00>)
 8107968:	2200      	movs	r2, #0
 810796a:	f7f8 fecd 	bl	8100708 <__aeabi_dmul>
 810796e:	4680      	mov	r8, r0
 8107970:	4689      	mov	r9, r1
 8107972:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8107976:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 810797a:	9315      	str	r3, [sp, #84]	; 0x54
 810797c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8107980:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8107984:	e79d      	b.n	81078c2 <_strtod_l+0x9aa>
 8107986:	f1ba 0f01 	cmp.w	sl, #1
 810798a:	d102      	bne.n	8107992 <_strtod_l+0xa7a>
 810798c:	2f00      	cmp	r7, #0
 810798e:	f43f ad83 	beq.w	8107498 <_strtod_l+0x580>
 8107992:	4b62      	ldr	r3, [pc, #392]	; (8107b1c <_strtod_l+0xc04>)
 8107994:	2200      	movs	r2, #0
 8107996:	e78e      	b.n	81078b6 <_strtod_l+0x99e>
 8107998:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8107b18 <_strtod_l+0xc00>
 810799c:	f04f 0800 	mov.w	r8, #0
 81079a0:	e7e7      	b.n	8107972 <_strtod_l+0xa5a>
 81079a2:	4b5d      	ldr	r3, [pc, #372]	; (8107b18 <_strtod_l+0xc00>)
 81079a4:	4640      	mov	r0, r8
 81079a6:	4649      	mov	r1, r9
 81079a8:	2200      	movs	r2, #0
 81079aa:	f7f8 fead 	bl	8100708 <__aeabi_dmul>
 81079ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81079b0:	4680      	mov	r8, r0
 81079b2:	4689      	mov	r9, r1
 81079b4:	b933      	cbnz	r3, 81079c4 <_strtod_l+0xaac>
 81079b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81079ba:	900e      	str	r0, [sp, #56]	; 0x38
 81079bc:	930f      	str	r3, [sp, #60]	; 0x3c
 81079be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 81079c2:	e7dd      	b.n	8107980 <_strtod_l+0xa68>
 81079c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 81079c8:	e7f9      	b.n	81079be <_strtod_l+0xaa6>
 81079ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 81079ce:	9b04      	ldr	r3, [sp, #16]
 81079d0:	2b00      	cmp	r3, #0
 81079d2:	d1a8      	bne.n	8107926 <_strtod_l+0xa0e>
 81079d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 81079d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 81079da:	0d1b      	lsrs	r3, r3, #20
 81079dc:	051b      	lsls	r3, r3, #20
 81079de:	429a      	cmp	r2, r3
 81079e0:	d1a1      	bne.n	8107926 <_strtod_l+0xa0e>
 81079e2:	4640      	mov	r0, r8
 81079e4:	4649      	mov	r1, r9
 81079e6:	f7f9 f9ef 	bl	8100dc8 <__aeabi_d2lz>
 81079ea:	f7f8 fe5f 	bl	81006ac <__aeabi_l2d>
 81079ee:	4602      	mov	r2, r0
 81079f0:	460b      	mov	r3, r1
 81079f2:	4640      	mov	r0, r8
 81079f4:	4649      	mov	r1, r9
 81079f6:	f7f8 fccf 	bl	8100398 <__aeabi_dsub>
 81079fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 81079fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8107a00:	ea43 030a 	orr.w	r3, r3, sl
 8107a04:	4313      	orrs	r3, r2
 8107a06:	4680      	mov	r8, r0
 8107a08:	4689      	mov	r9, r1
 8107a0a:	d055      	beq.n	8107ab8 <_strtod_l+0xba0>
 8107a0c:	a336      	add	r3, pc, #216	; (adr r3, 8107ae8 <_strtod_l+0xbd0>)
 8107a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a12:	f7f9 f8eb 	bl	8100bec <__aeabi_dcmplt>
 8107a16:	2800      	cmp	r0, #0
 8107a18:	f47f acd0 	bne.w	81073bc <_strtod_l+0x4a4>
 8107a1c:	a334      	add	r3, pc, #208	; (adr r3, 8107af0 <_strtod_l+0xbd8>)
 8107a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a22:	4640      	mov	r0, r8
 8107a24:	4649      	mov	r1, r9
 8107a26:	f7f9 f8ff 	bl	8100c28 <__aeabi_dcmpgt>
 8107a2a:	2800      	cmp	r0, #0
 8107a2c:	f43f af7b 	beq.w	8107926 <_strtod_l+0xa0e>
 8107a30:	e4c4      	b.n	81073bc <_strtod_l+0x4a4>
 8107a32:	9b04      	ldr	r3, [sp, #16]
 8107a34:	b333      	cbz	r3, 8107a84 <_strtod_l+0xb6c>
 8107a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8107a38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8107a3c:	d822      	bhi.n	8107a84 <_strtod_l+0xb6c>
 8107a3e:	a32e      	add	r3, pc, #184	; (adr r3, 8107af8 <_strtod_l+0xbe0>)
 8107a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a44:	4640      	mov	r0, r8
 8107a46:	4649      	mov	r1, r9
 8107a48:	f7f9 f8da 	bl	8100c00 <__aeabi_dcmple>
 8107a4c:	b1a0      	cbz	r0, 8107a78 <_strtod_l+0xb60>
 8107a4e:	4649      	mov	r1, r9
 8107a50:	4640      	mov	r0, r8
 8107a52:	f7f9 f931 	bl	8100cb8 <__aeabi_d2uiz>
 8107a56:	2801      	cmp	r0, #1
 8107a58:	bf38      	it	cc
 8107a5a:	2001      	movcc	r0, #1
 8107a5c:	f7f8 fdda 	bl	8100614 <__aeabi_ui2d>
 8107a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107a62:	4680      	mov	r8, r0
 8107a64:	4689      	mov	r9, r1
 8107a66:	bb23      	cbnz	r3, 8107ab2 <_strtod_l+0xb9a>
 8107a68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8107a6c:	9010      	str	r0, [sp, #64]	; 0x40
 8107a6e:	9311      	str	r3, [sp, #68]	; 0x44
 8107a70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8107a74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8107a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107a7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8107a7c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8107a80:	1a9b      	subs	r3, r3, r2
 8107a82:	9309      	str	r3, [sp, #36]	; 0x24
 8107a84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8107a88:	eeb0 0a48 	vmov.f32	s0, s16
 8107a8c:	eef0 0a68 	vmov.f32	s1, s17
 8107a90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8107a94:	f002 f936 	bl	8109d04 <__ulp>
 8107a98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8107a9c:	ec53 2b10 	vmov	r2, r3, d0
 8107aa0:	f7f8 fe32 	bl	8100708 <__aeabi_dmul>
 8107aa4:	ec53 2b18 	vmov	r2, r3, d8
 8107aa8:	f7f8 fc78 	bl	810039c <__adddf3>
 8107aac:	4682      	mov	sl, r0
 8107aae:	468b      	mov	fp, r1
 8107ab0:	e78d      	b.n	81079ce <_strtod_l+0xab6>
 8107ab2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8107ab6:	e7db      	b.n	8107a70 <_strtod_l+0xb58>
 8107ab8:	a311      	add	r3, pc, #68	; (adr r3, 8107b00 <_strtod_l+0xbe8>)
 8107aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107abe:	f7f9 f895 	bl	8100bec <__aeabi_dcmplt>
 8107ac2:	e7b2      	b.n	8107a2a <_strtod_l+0xb12>
 8107ac4:	2300      	movs	r3, #0
 8107ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8107ac8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8107aca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8107acc:	6013      	str	r3, [r2, #0]
 8107ace:	f7ff ba6b 	b.w	8106fa8 <_strtod_l+0x90>
 8107ad2:	2a65      	cmp	r2, #101	; 0x65
 8107ad4:	f43f ab5f 	beq.w	8107196 <_strtod_l+0x27e>
 8107ad8:	2a45      	cmp	r2, #69	; 0x45
 8107ada:	f43f ab5c 	beq.w	8107196 <_strtod_l+0x27e>
 8107ade:	2301      	movs	r3, #1
 8107ae0:	f7ff bb94 	b.w	810720c <_strtod_l+0x2f4>
 8107ae4:	f3af 8000 	nop.w
 8107ae8:	94a03595 	.word	0x94a03595
 8107aec:	3fdfffff 	.word	0x3fdfffff
 8107af0:	35afe535 	.word	0x35afe535
 8107af4:	3fe00000 	.word	0x3fe00000
 8107af8:	ffc00000 	.word	0xffc00000
 8107afc:	41dfffff 	.word	0x41dfffff
 8107b00:	94a03595 	.word	0x94a03595
 8107b04:	3fcfffff 	.word	0x3fcfffff
 8107b08:	3ff00000 	.word	0x3ff00000
 8107b0c:	7ff00000 	.word	0x7ff00000
 8107b10:	7fe00000 	.word	0x7fe00000
 8107b14:	7c9fffff 	.word	0x7c9fffff
 8107b18:	3fe00000 	.word	0x3fe00000
 8107b1c:	bff00000 	.word	0xbff00000
 8107b20:	7fefffff 	.word	0x7fefffff

08107b24 <_strtod_r>:
 8107b24:	4b01      	ldr	r3, [pc, #4]	; (8107b2c <_strtod_r+0x8>)
 8107b26:	f7ff b9f7 	b.w	8106f18 <_strtod_l>
 8107b2a:	bf00      	nop
 8107b2c:	10000084 	.word	0x10000084

08107b30 <_strtol_l.constprop.0>:
 8107b30:	2b01      	cmp	r3, #1
 8107b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107b36:	d001      	beq.n	8107b3c <_strtol_l.constprop.0+0xc>
 8107b38:	2b24      	cmp	r3, #36	; 0x24
 8107b3a:	d906      	bls.n	8107b4a <_strtol_l.constprop.0+0x1a>
 8107b3c:	f7fe fa70 	bl	8106020 <__errno>
 8107b40:	2316      	movs	r3, #22
 8107b42:	6003      	str	r3, [r0, #0]
 8107b44:	2000      	movs	r0, #0
 8107b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107b4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8107c30 <_strtol_l.constprop.0+0x100>
 8107b4e:	460d      	mov	r5, r1
 8107b50:	462e      	mov	r6, r5
 8107b52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8107b56:	f814 700c 	ldrb.w	r7, [r4, ip]
 8107b5a:	f017 0708 	ands.w	r7, r7, #8
 8107b5e:	d1f7      	bne.n	8107b50 <_strtol_l.constprop.0+0x20>
 8107b60:	2c2d      	cmp	r4, #45	; 0x2d
 8107b62:	d132      	bne.n	8107bca <_strtol_l.constprop.0+0x9a>
 8107b64:	782c      	ldrb	r4, [r5, #0]
 8107b66:	2701      	movs	r7, #1
 8107b68:	1cb5      	adds	r5, r6, #2
 8107b6a:	2b00      	cmp	r3, #0
 8107b6c:	d05b      	beq.n	8107c26 <_strtol_l.constprop.0+0xf6>
 8107b6e:	2b10      	cmp	r3, #16
 8107b70:	d109      	bne.n	8107b86 <_strtol_l.constprop.0+0x56>
 8107b72:	2c30      	cmp	r4, #48	; 0x30
 8107b74:	d107      	bne.n	8107b86 <_strtol_l.constprop.0+0x56>
 8107b76:	782c      	ldrb	r4, [r5, #0]
 8107b78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8107b7c:	2c58      	cmp	r4, #88	; 0x58
 8107b7e:	d14d      	bne.n	8107c1c <_strtol_l.constprop.0+0xec>
 8107b80:	786c      	ldrb	r4, [r5, #1]
 8107b82:	2310      	movs	r3, #16
 8107b84:	3502      	adds	r5, #2
 8107b86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8107b8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8107b8e:	f04f 0c00 	mov.w	ip, #0
 8107b92:	fbb8 f9f3 	udiv	r9, r8, r3
 8107b96:	4666      	mov	r6, ip
 8107b98:	fb03 8a19 	mls	sl, r3, r9, r8
 8107b9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8107ba0:	f1be 0f09 	cmp.w	lr, #9
 8107ba4:	d816      	bhi.n	8107bd4 <_strtol_l.constprop.0+0xa4>
 8107ba6:	4674      	mov	r4, lr
 8107ba8:	42a3      	cmp	r3, r4
 8107baa:	dd24      	ble.n	8107bf6 <_strtol_l.constprop.0+0xc6>
 8107bac:	f1bc 0f00 	cmp.w	ip, #0
 8107bb0:	db1e      	blt.n	8107bf0 <_strtol_l.constprop.0+0xc0>
 8107bb2:	45b1      	cmp	r9, r6
 8107bb4:	d31c      	bcc.n	8107bf0 <_strtol_l.constprop.0+0xc0>
 8107bb6:	d101      	bne.n	8107bbc <_strtol_l.constprop.0+0x8c>
 8107bb8:	45a2      	cmp	sl, r4
 8107bba:	db19      	blt.n	8107bf0 <_strtol_l.constprop.0+0xc0>
 8107bbc:	fb06 4603 	mla	r6, r6, r3, r4
 8107bc0:	f04f 0c01 	mov.w	ip, #1
 8107bc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8107bc8:	e7e8      	b.n	8107b9c <_strtol_l.constprop.0+0x6c>
 8107bca:	2c2b      	cmp	r4, #43	; 0x2b
 8107bcc:	bf04      	itt	eq
 8107bce:	782c      	ldrbeq	r4, [r5, #0]
 8107bd0:	1cb5      	addeq	r5, r6, #2
 8107bd2:	e7ca      	b.n	8107b6a <_strtol_l.constprop.0+0x3a>
 8107bd4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8107bd8:	f1be 0f19 	cmp.w	lr, #25
 8107bdc:	d801      	bhi.n	8107be2 <_strtol_l.constprop.0+0xb2>
 8107bde:	3c37      	subs	r4, #55	; 0x37
 8107be0:	e7e2      	b.n	8107ba8 <_strtol_l.constprop.0+0x78>
 8107be2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8107be6:	f1be 0f19 	cmp.w	lr, #25
 8107bea:	d804      	bhi.n	8107bf6 <_strtol_l.constprop.0+0xc6>
 8107bec:	3c57      	subs	r4, #87	; 0x57
 8107bee:	e7db      	b.n	8107ba8 <_strtol_l.constprop.0+0x78>
 8107bf0:	f04f 3cff 	mov.w	ip, #4294967295
 8107bf4:	e7e6      	b.n	8107bc4 <_strtol_l.constprop.0+0x94>
 8107bf6:	f1bc 0f00 	cmp.w	ip, #0
 8107bfa:	da05      	bge.n	8107c08 <_strtol_l.constprop.0+0xd8>
 8107bfc:	2322      	movs	r3, #34	; 0x22
 8107bfe:	6003      	str	r3, [r0, #0]
 8107c00:	4646      	mov	r6, r8
 8107c02:	b942      	cbnz	r2, 8107c16 <_strtol_l.constprop.0+0xe6>
 8107c04:	4630      	mov	r0, r6
 8107c06:	e79e      	b.n	8107b46 <_strtol_l.constprop.0+0x16>
 8107c08:	b107      	cbz	r7, 8107c0c <_strtol_l.constprop.0+0xdc>
 8107c0a:	4276      	negs	r6, r6
 8107c0c:	2a00      	cmp	r2, #0
 8107c0e:	d0f9      	beq.n	8107c04 <_strtol_l.constprop.0+0xd4>
 8107c10:	f1bc 0f00 	cmp.w	ip, #0
 8107c14:	d000      	beq.n	8107c18 <_strtol_l.constprop.0+0xe8>
 8107c16:	1e69      	subs	r1, r5, #1
 8107c18:	6011      	str	r1, [r2, #0]
 8107c1a:	e7f3      	b.n	8107c04 <_strtol_l.constprop.0+0xd4>
 8107c1c:	2430      	movs	r4, #48	; 0x30
 8107c1e:	2b00      	cmp	r3, #0
 8107c20:	d1b1      	bne.n	8107b86 <_strtol_l.constprop.0+0x56>
 8107c22:	2308      	movs	r3, #8
 8107c24:	e7af      	b.n	8107b86 <_strtol_l.constprop.0+0x56>
 8107c26:	2c30      	cmp	r4, #48	; 0x30
 8107c28:	d0a5      	beq.n	8107b76 <_strtol_l.constprop.0+0x46>
 8107c2a:	230a      	movs	r3, #10
 8107c2c:	e7ab      	b.n	8107b86 <_strtol_l.constprop.0+0x56>
 8107c2e:	bf00      	nop
 8107c30:	0810ac11 	.word	0x0810ac11

08107c34 <_strtol_r>:
 8107c34:	f7ff bf7c 	b.w	8107b30 <_strtol_l.constprop.0>

08107c38 <__swbuf_r>:
 8107c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107c3a:	460e      	mov	r6, r1
 8107c3c:	4614      	mov	r4, r2
 8107c3e:	4605      	mov	r5, r0
 8107c40:	b118      	cbz	r0, 8107c4a <__swbuf_r+0x12>
 8107c42:	6983      	ldr	r3, [r0, #24]
 8107c44:	b90b      	cbnz	r3, 8107c4a <__swbuf_r+0x12>
 8107c46:	f001 f84b 	bl	8108ce0 <__sinit>
 8107c4a:	4b21      	ldr	r3, [pc, #132]	; (8107cd0 <__swbuf_r+0x98>)
 8107c4c:	429c      	cmp	r4, r3
 8107c4e:	d12b      	bne.n	8107ca8 <__swbuf_r+0x70>
 8107c50:	686c      	ldr	r4, [r5, #4]
 8107c52:	69a3      	ldr	r3, [r4, #24]
 8107c54:	60a3      	str	r3, [r4, #8]
 8107c56:	89a3      	ldrh	r3, [r4, #12]
 8107c58:	071a      	lsls	r2, r3, #28
 8107c5a:	d52f      	bpl.n	8107cbc <__swbuf_r+0x84>
 8107c5c:	6923      	ldr	r3, [r4, #16]
 8107c5e:	b36b      	cbz	r3, 8107cbc <__swbuf_r+0x84>
 8107c60:	6923      	ldr	r3, [r4, #16]
 8107c62:	6820      	ldr	r0, [r4, #0]
 8107c64:	1ac0      	subs	r0, r0, r3
 8107c66:	6963      	ldr	r3, [r4, #20]
 8107c68:	b2f6      	uxtb	r6, r6
 8107c6a:	4283      	cmp	r3, r0
 8107c6c:	4637      	mov	r7, r6
 8107c6e:	dc04      	bgt.n	8107c7a <__swbuf_r+0x42>
 8107c70:	4621      	mov	r1, r4
 8107c72:	4628      	mov	r0, r5
 8107c74:	f000 ffa0 	bl	8108bb8 <_fflush_r>
 8107c78:	bb30      	cbnz	r0, 8107cc8 <__swbuf_r+0x90>
 8107c7a:	68a3      	ldr	r3, [r4, #8]
 8107c7c:	3b01      	subs	r3, #1
 8107c7e:	60a3      	str	r3, [r4, #8]
 8107c80:	6823      	ldr	r3, [r4, #0]
 8107c82:	1c5a      	adds	r2, r3, #1
 8107c84:	6022      	str	r2, [r4, #0]
 8107c86:	701e      	strb	r6, [r3, #0]
 8107c88:	6963      	ldr	r3, [r4, #20]
 8107c8a:	3001      	adds	r0, #1
 8107c8c:	4283      	cmp	r3, r0
 8107c8e:	d004      	beq.n	8107c9a <__swbuf_r+0x62>
 8107c90:	89a3      	ldrh	r3, [r4, #12]
 8107c92:	07db      	lsls	r3, r3, #31
 8107c94:	d506      	bpl.n	8107ca4 <__swbuf_r+0x6c>
 8107c96:	2e0a      	cmp	r6, #10
 8107c98:	d104      	bne.n	8107ca4 <__swbuf_r+0x6c>
 8107c9a:	4621      	mov	r1, r4
 8107c9c:	4628      	mov	r0, r5
 8107c9e:	f000 ff8b 	bl	8108bb8 <_fflush_r>
 8107ca2:	b988      	cbnz	r0, 8107cc8 <__swbuf_r+0x90>
 8107ca4:	4638      	mov	r0, r7
 8107ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107ca8:	4b0a      	ldr	r3, [pc, #40]	; (8107cd4 <__swbuf_r+0x9c>)
 8107caa:	429c      	cmp	r4, r3
 8107cac:	d101      	bne.n	8107cb2 <__swbuf_r+0x7a>
 8107cae:	68ac      	ldr	r4, [r5, #8]
 8107cb0:	e7cf      	b.n	8107c52 <__swbuf_r+0x1a>
 8107cb2:	4b09      	ldr	r3, [pc, #36]	; (8107cd8 <__swbuf_r+0xa0>)
 8107cb4:	429c      	cmp	r4, r3
 8107cb6:	bf08      	it	eq
 8107cb8:	68ec      	ldreq	r4, [r5, #12]
 8107cba:	e7ca      	b.n	8107c52 <__swbuf_r+0x1a>
 8107cbc:	4621      	mov	r1, r4
 8107cbe:	4628      	mov	r0, r5
 8107cc0:	f000 f80c 	bl	8107cdc <__swsetup_r>
 8107cc4:	2800      	cmp	r0, #0
 8107cc6:	d0cb      	beq.n	8107c60 <__swbuf_r+0x28>
 8107cc8:	f04f 37ff 	mov.w	r7, #4294967295
 8107ccc:	e7ea      	b.n	8107ca4 <__swbuf_r+0x6c>
 8107cce:	bf00      	nop
 8107cd0:	0810adc4 	.word	0x0810adc4
 8107cd4:	0810ade4 	.word	0x0810ade4
 8107cd8:	0810ada4 	.word	0x0810ada4

08107cdc <__swsetup_r>:
 8107cdc:	4b32      	ldr	r3, [pc, #200]	; (8107da8 <__swsetup_r+0xcc>)
 8107cde:	b570      	push	{r4, r5, r6, lr}
 8107ce0:	681d      	ldr	r5, [r3, #0]
 8107ce2:	4606      	mov	r6, r0
 8107ce4:	460c      	mov	r4, r1
 8107ce6:	b125      	cbz	r5, 8107cf2 <__swsetup_r+0x16>
 8107ce8:	69ab      	ldr	r3, [r5, #24]
 8107cea:	b913      	cbnz	r3, 8107cf2 <__swsetup_r+0x16>
 8107cec:	4628      	mov	r0, r5
 8107cee:	f000 fff7 	bl	8108ce0 <__sinit>
 8107cf2:	4b2e      	ldr	r3, [pc, #184]	; (8107dac <__swsetup_r+0xd0>)
 8107cf4:	429c      	cmp	r4, r3
 8107cf6:	d10f      	bne.n	8107d18 <__swsetup_r+0x3c>
 8107cf8:	686c      	ldr	r4, [r5, #4]
 8107cfa:	89a3      	ldrh	r3, [r4, #12]
 8107cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8107d00:	0719      	lsls	r1, r3, #28
 8107d02:	d42c      	bmi.n	8107d5e <__swsetup_r+0x82>
 8107d04:	06dd      	lsls	r5, r3, #27
 8107d06:	d411      	bmi.n	8107d2c <__swsetup_r+0x50>
 8107d08:	2309      	movs	r3, #9
 8107d0a:	6033      	str	r3, [r6, #0]
 8107d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8107d10:	81a3      	strh	r3, [r4, #12]
 8107d12:	f04f 30ff 	mov.w	r0, #4294967295
 8107d16:	e03e      	b.n	8107d96 <__swsetup_r+0xba>
 8107d18:	4b25      	ldr	r3, [pc, #148]	; (8107db0 <__swsetup_r+0xd4>)
 8107d1a:	429c      	cmp	r4, r3
 8107d1c:	d101      	bne.n	8107d22 <__swsetup_r+0x46>
 8107d1e:	68ac      	ldr	r4, [r5, #8]
 8107d20:	e7eb      	b.n	8107cfa <__swsetup_r+0x1e>
 8107d22:	4b24      	ldr	r3, [pc, #144]	; (8107db4 <__swsetup_r+0xd8>)
 8107d24:	429c      	cmp	r4, r3
 8107d26:	bf08      	it	eq
 8107d28:	68ec      	ldreq	r4, [r5, #12]
 8107d2a:	e7e6      	b.n	8107cfa <__swsetup_r+0x1e>
 8107d2c:	0758      	lsls	r0, r3, #29
 8107d2e:	d512      	bpl.n	8107d56 <__swsetup_r+0x7a>
 8107d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8107d32:	b141      	cbz	r1, 8107d46 <__swsetup_r+0x6a>
 8107d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8107d38:	4299      	cmp	r1, r3
 8107d3a:	d002      	beq.n	8107d42 <__swsetup_r+0x66>
 8107d3c:	4630      	mov	r0, r6
 8107d3e:	f002 f947 	bl	8109fd0 <_free_r>
 8107d42:	2300      	movs	r3, #0
 8107d44:	6363      	str	r3, [r4, #52]	; 0x34
 8107d46:	89a3      	ldrh	r3, [r4, #12]
 8107d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8107d4c:	81a3      	strh	r3, [r4, #12]
 8107d4e:	2300      	movs	r3, #0
 8107d50:	6063      	str	r3, [r4, #4]
 8107d52:	6923      	ldr	r3, [r4, #16]
 8107d54:	6023      	str	r3, [r4, #0]
 8107d56:	89a3      	ldrh	r3, [r4, #12]
 8107d58:	f043 0308 	orr.w	r3, r3, #8
 8107d5c:	81a3      	strh	r3, [r4, #12]
 8107d5e:	6923      	ldr	r3, [r4, #16]
 8107d60:	b94b      	cbnz	r3, 8107d76 <__swsetup_r+0x9a>
 8107d62:	89a3      	ldrh	r3, [r4, #12]
 8107d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8107d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107d6c:	d003      	beq.n	8107d76 <__swsetup_r+0x9a>
 8107d6e:	4621      	mov	r1, r4
 8107d70:	4630      	mov	r0, r6
 8107d72:	f001 fbed 	bl	8109550 <__smakebuf_r>
 8107d76:	89a0      	ldrh	r0, [r4, #12]
 8107d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8107d7c:	f010 0301 	ands.w	r3, r0, #1
 8107d80:	d00a      	beq.n	8107d98 <__swsetup_r+0xbc>
 8107d82:	2300      	movs	r3, #0
 8107d84:	60a3      	str	r3, [r4, #8]
 8107d86:	6963      	ldr	r3, [r4, #20]
 8107d88:	425b      	negs	r3, r3
 8107d8a:	61a3      	str	r3, [r4, #24]
 8107d8c:	6923      	ldr	r3, [r4, #16]
 8107d8e:	b943      	cbnz	r3, 8107da2 <__swsetup_r+0xc6>
 8107d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8107d94:	d1ba      	bne.n	8107d0c <__swsetup_r+0x30>
 8107d96:	bd70      	pop	{r4, r5, r6, pc}
 8107d98:	0781      	lsls	r1, r0, #30
 8107d9a:	bf58      	it	pl
 8107d9c:	6963      	ldrpl	r3, [r4, #20]
 8107d9e:	60a3      	str	r3, [r4, #8]
 8107da0:	e7f4      	b.n	8107d8c <__swsetup_r+0xb0>
 8107da2:	2000      	movs	r0, #0
 8107da4:	e7f7      	b.n	8107d96 <__swsetup_r+0xba>
 8107da6:	bf00      	nop
 8107da8:	1000001c 	.word	0x1000001c
 8107dac:	0810adc4 	.word	0x0810adc4
 8107db0:	0810ade4 	.word	0x0810ade4
 8107db4:	0810ada4 	.word	0x0810ada4

08107db8 <quorem>:
 8107db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107dbc:	6903      	ldr	r3, [r0, #16]
 8107dbe:	690c      	ldr	r4, [r1, #16]
 8107dc0:	42a3      	cmp	r3, r4
 8107dc2:	4607      	mov	r7, r0
 8107dc4:	f2c0 8081 	blt.w	8107eca <quorem+0x112>
 8107dc8:	3c01      	subs	r4, #1
 8107dca:	f101 0814 	add.w	r8, r1, #20
 8107dce:	f100 0514 	add.w	r5, r0, #20
 8107dd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8107dd6:	9301      	str	r3, [sp, #4]
 8107dd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8107ddc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8107de0:	3301      	adds	r3, #1
 8107de2:	429a      	cmp	r2, r3
 8107de4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8107de8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8107dec:	fbb2 f6f3 	udiv	r6, r2, r3
 8107df0:	d331      	bcc.n	8107e56 <quorem+0x9e>
 8107df2:	f04f 0e00 	mov.w	lr, #0
 8107df6:	4640      	mov	r0, r8
 8107df8:	46ac      	mov	ip, r5
 8107dfa:	46f2      	mov	sl, lr
 8107dfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8107e00:	b293      	uxth	r3, r2
 8107e02:	fb06 e303 	mla	r3, r6, r3, lr
 8107e06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8107e0a:	b29b      	uxth	r3, r3
 8107e0c:	ebaa 0303 	sub.w	r3, sl, r3
 8107e10:	f8dc a000 	ldr.w	sl, [ip]
 8107e14:	0c12      	lsrs	r2, r2, #16
 8107e16:	fa13 f38a 	uxtah	r3, r3, sl
 8107e1a:	fb06 e202 	mla	r2, r6, r2, lr
 8107e1e:	9300      	str	r3, [sp, #0]
 8107e20:	9b00      	ldr	r3, [sp, #0]
 8107e22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8107e26:	b292      	uxth	r2, r2
 8107e28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8107e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8107e30:	f8bd 3000 	ldrh.w	r3, [sp]
 8107e34:	4581      	cmp	r9, r0
 8107e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8107e3a:	f84c 3b04 	str.w	r3, [ip], #4
 8107e3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8107e42:	d2db      	bcs.n	8107dfc <quorem+0x44>
 8107e44:	f855 300b 	ldr.w	r3, [r5, fp]
 8107e48:	b92b      	cbnz	r3, 8107e56 <quorem+0x9e>
 8107e4a:	9b01      	ldr	r3, [sp, #4]
 8107e4c:	3b04      	subs	r3, #4
 8107e4e:	429d      	cmp	r5, r3
 8107e50:	461a      	mov	r2, r3
 8107e52:	d32e      	bcc.n	8107eb2 <quorem+0xfa>
 8107e54:	613c      	str	r4, [r7, #16]
 8107e56:	4638      	mov	r0, r7
 8107e58:	f001 feae 	bl	8109bb8 <__mcmp>
 8107e5c:	2800      	cmp	r0, #0
 8107e5e:	db24      	blt.n	8107eaa <quorem+0xf2>
 8107e60:	3601      	adds	r6, #1
 8107e62:	4628      	mov	r0, r5
 8107e64:	f04f 0c00 	mov.w	ip, #0
 8107e68:	f858 2b04 	ldr.w	r2, [r8], #4
 8107e6c:	f8d0 e000 	ldr.w	lr, [r0]
 8107e70:	b293      	uxth	r3, r2
 8107e72:	ebac 0303 	sub.w	r3, ip, r3
 8107e76:	0c12      	lsrs	r2, r2, #16
 8107e78:	fa13 f38e 	uxtah	r3, r3, lr
 8107e7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8107e80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8107e84:	b29b      	uxth	r3, r3
 8107e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8107e8a:	45c1      	cmp	r9, r8
 8107e8c:	f840 3b04 	str.w	r3, [r0], #4
 8107e90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8107e94:	d2e8      	bcs.n	8107e68 <quorem+0xb0>
 8107e96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8107e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8107e9e:	b922      	cbnz	r2, 8107eaa <quorem+0xf2>
 8107ea0:	3b04      	subs	r3, #4
 8107ea2:	429d      	cmp	r5, r3
 8107ea4:	461a      	mov	r2, r3
 8107ea6:	d30a      	bcc.n	8107ebe <quorem+0x106>
 8107ea8:	613c      	str	r4, [r7, #16]
 8107eaa:	4630      	mov	r0, r6
 8107eac:	b003      	add	sp, #12
 8107eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107eb2:	6812      	ldr	r2, [r2, #0]
 8107eb4:	3b04      	subs	r3, #4
 8107eb6:	2a00      	cmp	r2, #0
 8107eb8:	d1cc      	bne.n	8107e54 <quorem+0x9c>
 8107eba:	3c01      	subs	r4, #1
 8107ebc:	e7c7      	b.n	8107e4e <quorem+0x96>
 8107ebe:	6812      	ldr	r2, [r2, #0]
 8107ec0:	3b04      	subs	r3, #4
 8107ec2:	2a00      	cmp	r2, #0
 8107ec4:	d1f0      	bne.n	8107ea8 <quorem+0xf0>
 8107ec6:	3c01      	subs	r4, #1
 8107ec8:	e7eb      	b.n	8107ea2 <quorem+0xea>
 8107eca:	2000      	movs	r0, #0
 8107ecc:	e7ee      	b.n	8107eac <quorem+0xf4>
	...

08107ed0 <_dtoa_r>:
 8107ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107ed4:	ed2d 8b04 	vpush	{d8-d9}
 8107ed8:	ec57 6b10 	vmov	r6, r7, d0
 8107edc:	b093      	sub	sp, #76	; 0x4c
 8107ede:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8107ee0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8107ee4:	9106      	str	r1, [sp, #24]
 8107ee6:	ee10 aa10 	vmov	sl, s0
 8107eea:	4604      	mov	r4, r0
 8107eec:	9209      	str	r2, [sp, #36]	; 0x24
 8107eee:	930c      	str	r3, [sp, #48]	; 0x30
 8107ef0:	46bb      	mov	fp, r7
 8107ef2:	b975      	cbnz	r5, 8107f12 <_dtoa_r+0x42>
 8107ef4:	2010      	movs	r0, #16
 8107ef6:	f001 fb6b 	bl	81095d0 <malloc>
 8107efa:	4602      	mov	r2, r0
 8107efc:	6260      	str	r0, [r4, #36]	; 0x24
 8107efe:	b920      	cbnz	r0, 8107f0a <_dtoa_r+0x3a>
 8107f00:	4ba7      	ldr	r3, [pc, #668]	; (81081a0 <_dtoa_r+0x2d0>)
 8107f02:	21ea      	movs	r1, #234	; 0xea
 8107f04:	48a7      	ldr	r0, [pc, #668]	; (81081a4 <_dtoa_r+0x2d4>)
 8107f06:	f002 fc89 	bl	810a81c <__assert_func>
 8107f0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8107f0e:	6005      	str	r5, [r0, #0]
 8107f10:	60c5      	str	r5, [r0, #12]
 8107f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8107f14:	6819      	ldr	r1, [r3, #0]
 8107f16:	b151      	cbz	r1, 8107f2e <_dtoa_r+0x5e>
 8107f18:	685a      	ldr	r2, [r3, #4]
 8107f1a:	604a      	str	r2, [r1, #4]
 8107f1c:	2301      	movs	r3, #1
 8107f1e:	4093      	lsls	r3, r2
 8107f20:	608b      	str	r3, [r1, #8]
 8107f22:	4620      	mov	r0, r4
 8107f24:	f001 fbbc 	bl	81096a0 <_Bfree>
 8107f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8107f2a:	2200      	movs	r2, #0
 8107f2c:	601a      	str	r2, [r3, #0]
 8107f2e:	1e3b      	subs	r3, r7, #0
 8107f30:	bfaa      	itet	ge
 8107f32:	2300      	movge	r3, #0
 8107f34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8107f38:	f8c8 3000 	strge.w	r3, [r8]
 8107f3c:	4b9a      	ldr	r3, [pc, #616]	; (81081a8 <_dtoa_r+0x2d8>)
 8107f3e:	bfbc      	itt	lt
 8107f40:	2201      	movlt	r2, #1
 8107f42:	f8c8 2000 	strlt.w	r2, [r8]
 8107f46:	ea33 030b 	bics.w	r3, r3, fp
 8107f4a:	d11b      	bne.n	8107f84 <_dtoa_r+0xb4>
 8107f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8107f4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8107f52:	6013      	str	r3, [r2, #0]
 8107f54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8107f58:	4333      	orrs	r3, r6
 8107f5a:	f000 8592 	beq.w	8108a82 <_dtoa_r+0xbb2>
 8107f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8107f60:	b963      	cbnz	r3, 8107f7c <_dtoa_r+0xac>
 8107f62:	4b92      	ldr	r3, [pc, #584]	; (81081ac <_dtoa_r+0x2dc>)
 8107f64:	e022      	b.n	8107fac <_dtoa_r+0xdc>
 8107f66:	4b92      	ldr	r3, [pc, #584]	; (81081b0 <_dtoa_r+0x2e0>)
 8107f68:	9301      	str	r3, [sp, #4]
 8107f6a:	3308      	adds	r3, #8
 8107f6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8107f6e:	6013      	str	r3, [r2, #0]
 8107f70:	9801      	ldr	r0, [sp, #4]
 8107f72:	b013      	add	sp, #76	; 0x4c
 8107f74:	ecbd 8b04 	vpop	{d8-d9}
 8107f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107f7c:	4b8b      	ldr	r3, [pc, #556]	; (81081ac <_dtoa_r+0x2dc>)
 8107f7e:	9301      	str	r3, [sp, #4]
 8107f80:	3303      	adds	r3, #3
 8107f82:	e7f3      	b.n	8107f6c <_dtoa_r+0x9c>
 8107f84:	2200      	movs	r2, #0
 8107f86:	2300      	movs	r3, #0
 8107f88:	4650      	mov	r0, sl
 8107f8a:	4659      	mov	r1, fp
 8107f8c:	f7f8 fe24 	bl	8100bd8 <__aeabi_dcmpeq>
 8107f90:	ec4b ab19 	vmov	d9, sl, fp
 8107f94:	4680      	mov	r8, r0
 8107f96:	b158      	cbz	r0, 8107fb0 <_dtoa_r+0xe0>
 8107f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8107f9a:	2301      	movs	r3, #1
 8107f9c:	6013      	str	r3, [r2, #0]
 8107f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8107fa0:	2b00      	cmp	r3, #0
 8107fa2:	f000 856b 	beq.w	8108a7c <_dtoa_r+0xbac>
 8107fa6:	4883      	ldr	r0, [pc, #524]	; (81081b4 <_dtoa_r+0x2e4>)
 8107fa8:	6018      	str	r0, [r3, #0]
 8107faa:	1e43      	subs	r3, r0, #1
 8107fac:	9301      	str	r3, [sp, #4]
 8107fae:	e7df      	b.n	8107f70 <_dtoa_r+0xa0>
 8107fb0:	ec4b ab10 	vmov	d0, sl, fp
 8107fb4:	aa10      	add	r2, sp, #64	; 0x40
 8107fb6:	a911      	add	r1, sp, #68	; 0x44
 8107fb8:	4620      	mov	r0, r4
 8107fba:	f001 ff1f 	bl	8109dfc <__d2b>
 8107fbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8107fc2:	ee08 0a10 	vmov	s16, r0
 8107fc6:	2d00      	cmp	r5, #0
 8107fc8:	f000 8084 	beq.w	81080d4 <_dtoa_r+0x204>
 8107fcc:	ee19 3a90 	vmov	r3, s19
 8107fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8107fd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8107fd8:	4656      	mov	r6, sl
 8107fda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8107fde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8107fe2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8107fe6:	4b74      	ldr	r3, [pc, #464]	; (81081b8 <_dtoa_r+0x2e8>)
 8107fe8:	2200      	movs	r2, #0
 8107fea:	4630      	mov	r0, r6
 8107fec:	4639      	mov	r1, r7
 8107fee:	f7f8 f9d3 	bl	8100398 <__aeabi_dsub>
 8107ff2:	a365      	add	r3, pc, #404	; (adr r3, 8108188 <_dtoa_r+0x2b8>)
 8107ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ff8:	f7f8 fb86 	bl	8100708 <__aeabi_dmul>
 8107ffc:	a364      	add	r3, pc, #400	; (adr r3, 8108190 <_dtoa_r+0x2c0>)
 8107ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108002:	f7f8 f9cb 	bl	810039c <__adddf3>
 8108006:	4606      	mov	r6, r0
 8108008:	4628      	mov	r0, r5
 810800a:	460f      	mov	r7, r1
 810800c:	f7f8 fb12 	bl	8100634 <__aeabi_i2d>
 8108010:	a361      	add	r3, pc, #388	; (adr r3, 8108198 <_dtoa_r+0x2c8>)
 8108012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108016:	f7f8 fb77 	bl	8100708 <__aeabi_dmul>
 810801a:	4602      	mov	r2, r0
 810801c:	460b      	mov	r3, r1
 810801e:	4630      	mov	r0, r6
 8108020:	4639      	mov	r1, r7
 8108022:	f7f8 f9bb 	bl	810039c <__adddf3>
 8108026:	4606      	mov	r6, r0
 8108028:	460f      	mov	r7, r1
 810802a:	f7f8 fe1d 	bl	8100c68 <__aeabi_d2iz>
 810802e:	2200      	movs	r2, #0
 8108030:	9000      	str	r0, [sp, #0]
 8108032:	2300      	movs	r3, #0
 8108034:	4630      	mov	r0, r6
 8108036:	4639      	mov	r1, r7
 8108038:	f7f8 fdd8 	bl	8100bec <__aeabi_dcmplt>
 810803c:	b150      	cbz	r0, 8108054 <_dtoa_r+0x184>
 810803e:	9800      	ldr	r0, [sp, #0]
 8108040:	f7f8 faf8 	bl	8100634 <__aeabi_i2d>
 8108044:	4632      	mov	r2, r6
 8108046:	463b      	mov	r3, r7
 8108048:	f7f8 fdc6 	bl	8100bd8 <__aeabi_dcmpeq>
 810804c:	b910      	cbnz	r0, 8108054 <_dtoa_r+0x184>
 810804e:	9b00      	ldr	r3, [sp, #0]
 8108050:	3b01      	subs	r3, #1
 8108052:	9300      	str	r3, [sp, #0]
 8108054:	9b00      	ldr	r3, [sp, #0]
 8108056:	2b16      	cmp	r3, #22
 8108058:	d85a      	bhi.n	8108110 <_dtoa_r+0x240>
 810805a:	9a00      	ldr	r2, [sp, #0]
 810805c:	4b57      	ldr	r3, [pc, #348]	; (81081bc <_dtoa_r+0x2ec>)
 810805e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108066:	ec51 0b19 	vmov	r0, r1, d9
 810806a:	f7f8 fdbf 	bl	8100bec <__aeabi_dcmplt>
 810806e:	2800      	cmp	r0, #0
 8108070:	d050      	beq.n	8108114 <_dtoa_r+0x244>
 8108072:	9b00      	ldr	r3, [sp, #0]
 8108074:	3b01      	subs	r3, #1
 8108076:	9300      	str	r3, [sp, #0]
 8108078:	2300      	movs	r3, #0
 810807a:	930b      	str	r3, [sp, #44]	; 0x2c
 810807c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810807e:	1b5d      	subs	r5, r3, r5
 8108080:	1e6b      	subs	r3, r5, #1
 8108082:	9305      	str	r3, [sp, #20]
 8108084:	bf45      	ittet	mi
 8108086:	f1c5 0301 	rsbmi	r3, r5, #1
 810808a:	9304      	strmi	r3, [sp, #16]
 810808c:	2300      	movpl	r3, #0
 810808e:	2300      	movmi	r3, #0
 8108090:	bf4c      	ite	mi
 8108092:	9305      	strmi	r3, [sp, #20]
 8108094:	9304      	strpl	r3, [sp, #16]
 8108096:	9b00      	ldr	r3, [sp, #0]
 8108098:	2b00      	cmp	r3, #0
 810809a:	db3d      	blt.n	8108118 <_dtoa_r+0x248>
 810809c:	9b05      	ldr	r3, [sp, #20]
 810809e:	9a00      	ldr	r2, [sp, #0]
 81080a0:	920a      	str	r2, [sp, #40]	; 0x28
 81080a2:	4413      	add	r3, r2
 81080a4:	9305      	str	r3, [sp, #20]
 81080a6:	2300      	movs	r3, #0
 81080a8:	9307      	str	r3, [sp, #28]
 81080aa:	9b06      	ldr	r3, [sp, #24]
 81080ac:	2b09      	cmp	r3, #9
 81080ae:	f200 8089 	bhi.w	81081c4 <_dtoa_r+0x2f4>
 81080b2:	2b05      	cmp	r3, #5
 81080b4:	bfc4      	itt	gt
 81080b6:	3b04      	subgt	r3, #4
 81080b8:	9306      	strgt	r3, [sp, #24]
 81080ba:	9b06      	ldr	r3, [sp, #24]
 81080bc:	f1a3 0302 	sub.w	r3, r3, #2
 81080c0:	bfcc      	ite	gt
 81080c2:	2500      	movgt	r5, #0
 81080c4:	2501      	movle	r5, #1
 81080c6:	2b03      	cmp	r3, #3
 81080c8:	f200 8087 	bhi.w	81081da <_dtoa_r+0x30a>
 81080cc:	e8df f003 	tbb	[pc, r3]
 81080d0:	59383a2d 	.word	0x59383a2d
 81080d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 81080d8:	441d      	add	r5, r3
 81080da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 81080de:	2b20      	cmp	r3, #32
 81080e0:	bfc1      	itttt	gt
 81080e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 81080e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 81080ea:	fa0b f303 	lslgt.w	r3, fp, r3
 81080ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 81080f2:	bfda      	itte	le
 81080f4:	f1c3 0320 	rsble	r3, r3, #32
 81080f8:	fa06 f003 	lslle.w	r0, r6, r3
 81080fc:	4318      	orrgt	r0, r3
 81080fe:	f7f8 fa89 	bl	8100614 <__aeabi_ui2d>
 8108102:	2301      	movs	r3, #1
 8108104:	4606      	mov	r6, r0
 8108106:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 810810a:	3d01      	subs	r5, #1
 810810c:	930e      	str	r3, [sp, #56]	; 0x38
 810810e:	e76a      	b.n	8107fe6 <_dtoa_r+0x116>
 8108110:	2301      	movs	r3, #1
 8108112:	e7b2      	b.n	810807a <_dtoa_r+0x1aa>
 8108114:	900b      	str	r0, [sp, #44]	; 0x2c
 8108116:	e7b1      	b.n	810807c <_dtoa_r+0x1ac>
 8108118:	9b04      	ldr	r3, [sp, #16]
 810811a:	9a00      	ldr	r2, [sp, #0]
 810811c:	1a9b      	subs	r3, r3, r2
 810811e:	9304      	str	r3, [sp, #16]
 8108120:	4253      	negs	r3, r2
 8108122:	9307      	str	r3, [sp, #28]
 8108124:	2300      	movs	r3, #0
 8108126:	930a      	str	r3, [sp, #40]	; 0x28
 8108128:	e7bf      	b.n	81080aa <_dtoa_r+0x1da>
 810812a:	2300      	movs	r3, #0
 810812c:	9308      	str	r3, [sp, #32]
 810812e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108130:	2b00      	cmp	r3, #0
 8108132:	dc55      	bgt.n	81081e0 <_dtoa_r+0x310>
 8108134:	2301      	movs	r3, #1
 8108136:	e9cd 3302 	strd	r3, r3, [sp, #8]
 810813a:	461a      	mov	r2, r3
 810813c:	9209      	str	r2, [sp, #36]	; 0x24
 810813e:	e00c      	b.n	810815a <_dtoa_r+0x28a>
 8108140:	2301      	movs	r3, #1
 8108142:	e7f3      	b.n	810812c <_dtoa_r+0x25c>
 8108144:	2300      	movs	r3, #0
 8108146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8108148:	9308      	str	r3, [sp, #32]
 810814a:	9b00      	ldr	r3, [sp, #0]
 810814c:	4413      	add	r3, r2
 810814e:	9302      	str	r3, [sp, #8]
 8108150:	3301      	adds	r3, #1
 8108152:	2b01      	cmp	r3, #1
 8108154:	9303      	str	r3, [sp, #12]
 8108156:	bfb8      	it	lt
 8108158:	2301      	movlt	r3, #1
 810815a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 810815c:	2200      	movs	r2, #0
 810815e:	6042      	str	r2, [r0, #4]
 8108160:	2204      	movs	r2, #4
 8108162:	f102 0614 	add.w	r6, r2, #20
 8108166:	429e      	cmp	r6, r3
 8108168:	6841      	ldr	r1, [r0, #4]
 810816a:	d93d      	bls.n	81081e8 <_dtoa_r+0x318>
 810816c:	4620      	mov	r0, r4
 810816e:	f001 fa57 	bl	8109620 <_Balloc>
 8108172:	9001      	str	r0, [sp, #4]
 8108174:	2800      	cmp	r0, #0
 8108176:	d13b      	bne.n	81081f0 <_dtoa_r+0x320>
 8108178:	4b11      	ldr	r3, [pc, #68]	; (81081c0 <_dtoa_r+0x2f0>)
 810817a:	4602      	mov	r2, r0
 810817c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8108180:	e6c0      	b.n	8107f04 <_dtoa_r+0x34>
 8108182:	2301      	movs	r3, #1
 8108184:	e7df      	b.n	8108146 <_dtoa_r+0x276>
 8108186:	bf00      	nop
 8108188:	636f4361 	.word	0x636f4361
 810818c:	3fd287a7 	.word	0x3fd287a7
 8108190:	8b60c8b3 	.word	0x8b60c8b3
 8108194:	3fc68a28 	.word	0x3fc68a28
 8108198:	509f79fb 	.word	0x509f79fb
 810819c:	3fd34413 	.word	0x3fd34413
 81081a0:	0810ad1e 	.word	0x0810ad1e
 81081a4:	0810ad35 	.word	0x0810ad35
 81081a8:	7ff00000 	.word	0x7ff00000
 81081ac:	0810ad1a 	.word	0x0810ad1a
 81081b0:	0810ad11 	.word	0x0810ad11
 81081b4:	0810ab95 	.word	0x0810ab95
 81081b8:	3ff80000 	.word	0x3ff80000
 81081bc:	0810af08 	.word	0x0810af08
 81081c0:	0810ad90 	.word	0x0810ad90
 81081c4:	2501      	movs	r5, #1
 81081c6:	2300      	movs	r3, #0
 81081c8:	9306      	str	r3, [sp, #24]
 81081ca:	9508      	str	r5, [sp, #32]
 81081cc:	f04f 33ff 	mov.w	r3, #4294967295
 81081d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 81081d4:	2200      	movs	r2, #0
 81081d6:	2312      	movs	r3, #18
 81081d8:	e7b0      	b.n	810813c <_dtoa_r+0x26c>
 81081da:	2301      	movs	r3, #1
 81081dc:	9308      	str	r3, [sp, #32]
 81081de:	e7f5      	b.n	81081cc <_dtoa_r+0x2fc>
 81081e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81081e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 81081e6:	e7b8      	b.n	810815a <_dtoa_r+0x28a>
 81081e8:	3101      	adds	r1, #1
 81081ea:	6041      	str	r1, [r0, #4]
 81081ec:	0052      	lsls	r2, r2, #1
 81081ee:	e7b8      	b.n	8108162 <_dtoa_r+0x292>
 81081f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81081f2:	9a01      	ldr	r2, [sp, #4]
 81081f4:	601a      	str	r2, [r3, #0]
 81081f6:	9b03      	ldr	r3, [sp, #12]
 81081f8:	2b0e      	cmp	r3, #14
 81081fa:	f200 809d 	bhi.w	8108338 <_dtoa_r+0x468>
 81081fe:	2d00      	cmp	r5, #0
 8108200:	f000 809a 	beq.w	8108338 <_dtoa_r+0x468>
 8108204:	9b00      	ldr	r3, [sp, #0]
 8108206:	2b00      	cmp	r3, #0
 8108208:	dd32      	ble.n	8108270 <_dtoa_r+0x3a0>
 810820a:	4ab7      	ldr	r2, [pc, #732]	; (81084e8 <_dtoa_r+0x618>)
 810820c:	f003 030f 	and.w	r3, r3, #15
 8108210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8108214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8108218:	9b00      	ldr	r3, [sp, #0]
 810821a:	05d8      	lsls	r0, r3, #23
 810821c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8108220:	d516      	bpl.n	8108250 <_dtoa_r+0x380>
 8108222:	4bb2      	ldr	r3, [pc, #712]	; (81084ec <_dtoa_r+0x61c>)
 8108224:	ec51 0b19 	vmov	r0, r1, d9
 8108228:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810822c:	f7f8 fb96 	bl	810095c <__aeabi_ddiv>
 8108230:	f007 070f 	and.w	r7, r7, #15
 8108234:	4682      	mov	sl, r0
 8108236:	468b      	mov	fp, r1
 8108238:	2503      	movs	r5, #3
 810823a:	4eac      	ldr	r6, [pc, #688]	; (81084ec <_dtoa_r+0x61c>)
 810823c:	b957      	cbnz	r7, 8108254 <_dtoa_r+0x384>
 810823e:	4642      	mov	r2, r8
 8108240:	464b      	mov	r3, r9
 8108242:	4650      	mov	r0, sl
 8108244:	4659      	mov	r1, fp
 8108246:	f7f8 fb89 	bl	810095c <__aeabi_ddiv>
 810824a:	4682      	mov	sl, r0
 810824c:	468b      	mov	fp, r1
 810824e:	e028      	b.n	81082a2 <_dtoa_r+0x3d2>
 8108250:	2502      	movs	r5, #2
 8108252:	e7f2      	b.n	810823a <_dtoa_r+0x36a>
 8108254:	07f9      	lsls	r1, r7, #31
 8108256:	d508      	bpl.n	810826a <_dtoa_r+0x39a>
 8108258:	4640      	mov	r0, r8
 810825a:	4649      	mov	r1, r9
 810825c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108260:	f7f8 fa52 	bl	8100708 <__aeabi_dmul>
 8108264:	3501      	adds	r5, #1
 8108266:	4680      	mov	r8, r0
 8108268:	4689      	mov	r9, r1
 810826a:	107f      	asrs	r7, r7, #1
 810826c:	3608      	adds	r6, #8
 810826e:	e7e5      	b.n	810823c <_dtoa_r+0x36c>
 8108270:	f000 809b 	beq.w	81083aa <_dtoa_r+0x4da>
 8108274:	9b00      	ldr	r3, [sp, #0]
 8108276:	4f9d      	ldr	r7, [pc, #628]	; (81084ec <_dtoa_r+0x61c>)
 8108278:	425e      	negs	r6, r3
 810827a:	4b9b      	ldr	r3, [pc, #620]	; (81084e8 <_dtoa_r+0x618>)
 810827c:	f006 020f 	and.w	r2, r6, #15
 8108280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108288:	ec51 0b19 	vmov	r0, r1, d9
 810828c:	f7f8 fa3c 	bl	8100708 <__aeabi_dmul>
 8108290:	1136      	asrs	r6, r6, #4
 8108292:	4682      	mov	sl, r0
 8108294:	468b      	mov	fp, r1
 8108296:	2300      	movs	r3, #0
 8108298:	2502      	movs	r5, #2
 810829a:	2e00      	cmp	r6, #0
 810829c:	d17a      	bne.n	8108394 <_dtoa_r+0x4c4>
 810829e:	2b00      	cmp	r3, #0
 81082a0:	d1d3      	bne.n	810824a <_dtoa_r+0x37a>
 81082a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81082a4:	2b00      	cmp	r3, #0
 81082a6:	f000 8082 	beq.w	81083ae <_dtoa_r+0x4de>
 81082aa:	4b91      	ldr	r3, [pc, #580]	; (81084f0 <_dtoa_r+0x620>)
 81082ac:	2200      	movs	r2, #0
 81082ae:	4650      	mov	r0, sl
 81082b0:	4659      	mov	r1, fp
 81082b2:	f7f8 fc9b 	bl	8100bec <__aeabi_dcmplt>
 81082b6:	2800      	cmp	r0, #0
 81082b8:	d079      	beq.n	81083ae <_dtoa_r+0x4de>
 81082ba:	9b03      	ldr	r3, [sp, #12]
 81082bc:	2b00      	cmp	r3, #0
 81082be:	d076      	beq.n	81083ae <_dtoa_r+0x4de>
 81082c0:	9b02      	ldr	r3, [sp, #8]
 81082c2:	2b00      	cmp	r3, #0
 81082c4:	dd36      	ble.n	8108334 <_dtoa_r+0x464>
 81082c6:	9b00      	ldr	r3, [sp, #0]
 81082c8:	4650      	mov	r0, sl
 81082ca:	4659      	mov	r1, fp
 81082cc:	1e5f      	subs	r7, r3, #1
 81082ce:	2200      	movs	r2, #0
 81082d0:	4b88      	ldr	r3, [pc, #544]	; (81084f4 <_dtoa_r+0x624>)
 81082d2:	f7f8 fa19 	bl	8100708 <__aeabi_dmul>
 81082d6:	9e02      	ldr	r6, [sp, #8]
 81082d8:	4682      	mov	sl, r0
 81082da:	468b      	mov	fp, r1
 81082dc:	3501      	adds	r5, #1
 81082de:	4628      	mov	r0, r5
 81082e0:	f7f8 f9a8 	bl	8100634 <__aeabi_i2d>
 81082e4:	4652      	mov	r2, sl
 81082e6:	465b      	mov	r3, fp
 81082e8:	f7f8 fa0e 	bl	8100708 <__aeabi_dmul>
 81082ec:	4b82      	ldr	r3, [pc, #520]	; (81084f8 <_dtoa_r+0x628>)
 81082ee:	2200      	movs	r2, #0
 81082f0:	f7f8 f854 	bl	810039c <__adddf3>
 81082f4:	46d0      	mov	r8, sl
 81082f6:	46d9      	mov	r9, fp
 81082f8:	4682      	mov	sl, r0
 81082fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 81082fe:	2e00      	cmp	r6, #0
 8108300:	d158      	bne.n	81083b4 <_dtoa_r+0x4e4>
 8108302:	4b7e      	ldr	r3, [pc, #504]	; (81084fc <_dtoa_r+0x62c>)
 8108304:	2200      	movs	r2, #0
 8108306:	4640      	mov	r0, r8
 8108308:	4649      	mov	r1, r9
 810830a:	f7f8 f845 	bl	8100398 <__aeabi_dsub>
 810830e:	4652      	mov	r2, sl
 8108310:	465b      	mov	r3, fp
 8108312:	4680      	mov	r8, r0
 8108314:	4689      	mov	r9, r1
 8108316:	f7f8 fc87 	bl	8100c28 <__aeabi_dcmpgt>
 810831a:	2800      	cmp	r0, #0
 810831c:	f040 8295 	bne.w	810884a <_dtoa_r+0x97a>
 8108320:	4652      	mov	r2, sl
 8108322:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8108326:	4640      	mov	r0, r8
 8108328:	4649      	mov	r1, r9
 810832a:	f7f8 fc5f 	bl	8100bec <__aeabi_dcmplt>
 810832e:	2800      	cmp	r0, #0
 8108330:	f040 8289 	bne.w	8108846 <_dtoa_r+0x976>
 8108334:	ec5b ab19 	vmov	sl, fp, d9
 8108338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810833a:	2b00      	cmp	r3, #0
 810833c:	f2c0 8148 	blt.w	81085d0 <_dtoa_r+0x700>
 8108340:	9a00      	ldr	r2, [sp, #0]
 8108342:	2a0e      	cmp	r2, #14
 8108344:	f300 8144 	bgt.w	81085d0 <_dtoa_r+0x700>
 8108348:	4b67      	ldr	r3, [pc, #412]	; (81084e8 <_dtoa_r+0x618>)
 810834a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810834e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8108352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108354:	2b00      	cmp	r3, #0
 8108356:	f280 80d5 	bge.w	8108504 <_dtoa_r+0x634>
 810835a:	9b03      	ldr	r3, [sp, #12]
 810835c:	2b00      	cmp	r3, #0
 810835e:	f300 80d1 	bgt.w	8108504 <_dtoa_r+0x634>
 8108362:	f040 826f 	bne.w	8108844 <_dtoa_r+0x974>
 8108366:	4b65      	ldr	r3, [pc, #404]	; (81084fc <_dtoa_r+0x62c>)
 8108368:	2200      	movs	r2, #0
 810836a:	4640      	mov	r0, r8
 810836c:	4649      	mov	r1, r9
 810836e:	f7f8 f9cb 	bl	8100708 <__aeabi_dmul>
 8108372:	4652      	mov	r2, sl
 8108374:	465b      	mov	r3, fp
 8108376:	f7f8 fc4d 	bl	8100c14 <__aeabi_dcmpge>
 810837a:	9e03      	ldr	r6, [sp, #12]
 810837c:	4637      	mov	r7, r6
 810837e:	2800      	cmp	r0, #0
 8108380:	f040 8245 	bne.w	810880e <_dtoa_r+0x93e>
 8108384:	9d01      	ldr	r5, [sp, #4]
 8108386:	2331      	movs	r3, #49	; 0x31
 8108388:	f805 3b01 	strb.w	r3, [r5], #1
 810838c:	9b00      	ldr	r3, [sp, #0]
 810838e:	3301      	adds	r3, #1
 8108390:	9300      	str	r3, [sp, #0]
 8108392:	e240      	b.n	8108816 <_dtoa_r+0x946>
 8108394:	07f2      	lsls	r2, r6, #31
 8108396:	d505      	bpl.n	81083a4 <_dtoa_r+0x4d4>
 8108398:	e9d7 2300 	ldrd	r2, r3, [r7]
 810839c:	f7f8 f9b4 	bl	8100708 <__aeabi_dmul>
 81083a0:	3501      	adds	r5, #1
 81083a2:	2301      	movs	r3, #1
 81083a4:	1076      	asrs	r6, r6, #1
 81083a6:	3708      	adds	r7, #8
 81083a8:	e777      	b.n	810829a <_dtoa_r+0x3ca>
 81083aa:	2502      	movs	r5, #2
 81083ac:	e779      	b.n	81082a2 <_dtoa_r+0x3d2>
 81083ae:	9f00      	ldr	r7, [sp, #0]
 81083b0:	9e03      	ldr	r6, [sp, #12]
 81083b2:	e794      	b.n	81082de <_dtoa_r+0x40e>
 81083b4:	9901      	ldr	r1, [sp, #4]
 81083b6:	4b4c      	ldr	r3, [pc, #304]	; (81084e8 <_dtoa_r+0x618>)
 81083b8:	4431      	add	r1, r6
 81083ba:	910d      	str	r1, [sp, #52]	; 0x34
 81083bc:	9908      	ldr	r1, [sp, #32]
 81083be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 81083c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81083c6:	2900      	cmp	r1, #0
 81083c8:	d043      	beq.n	8108452 <_dtoa_r+0x582>
 81083ca:	494d      	ldr	r1, [pc, #308]	; (8108500 <_dtoa_r+0x630>)
 81083cc:	2000      	movs	r0, #0
 81083ce:	f7f8 fac5 	bl	810095c <__aeabi_ddiv>
 81083d2:	4652      	mov	r2, sl
 81083d4:	465b      	mov	r3, fp
 81083d6:	f7f7 ffdf 	bl	8100398 <__aeabi_dsub>
 81083da:	9d01      	ldr	r5, [sp, #4]
 81083dc:	4682      	mov	sl, r0
 81083de:	468b      	mov	fp, r1
 81083e0:	4649      	mov	r1, r9
 81083e2:	4640      	mov	r0, r8
 81083e4:	f7f8 fc40 	bl	8100c68 <__aeabi_d2iz>
 81083e8:	4606      	mov	r6, r0
 81083ea:	f7f8 f923 	bl	8100634 <__aeabi_i2d>
 81083ee:	4602      	mov	r2, r0
 81083f0:	460b      	mov	r3, r1
 81083f2:	4640      	mov	r0, r8
 81083f4:	4649      	mov	r1, r9
 81083f6:	f7f7 ffcf 	bl	8100398 <__aeabi_dsub>
 81083fa:	3630      	adds	r6, #48	; 0x30
 81083fc:	f805 6b01 	strb.w	r6, [r5], #1
 8108400:	4652      	mov	r2, sl
 8108402:	465b      	mov	r3, fp
 8108404:	4680      	mov	r8, r0
 8108406:	4689      	mov	r9, r1
 8108408:	f7f8 fbf0 	bl	8100bec <__aeabi_dcmplt>
 810840c:	2800      	cmp	r0, #0
 810840e:	d163      	bne.n	81084d8 <_dtoa_r+0x608>
 8108410:	4642      	mov	r2, r8
 8108412:	464b      	mov	r3, r9
 8108414:	4936      	ldr	r1, [pc, #216]	; (81084f0 <_dtoa_r+0x620>)
 8108416:	2000      	movs	r0, #0
 8108418:	f7f7 ffbe 	bl	8100398 <__aeabi_dsub>
 810841c:	4652      	mov	r2, sl
 810841e:	465b      	mov	r3, fp
 8108420:	f7f8 fbe4 	bl	8100bec <__aeabi_dcmplt>
 8108424:	2800      	cmp	r0, #0
 8108426:	f040 80b5 	bne.w	8108594 <_dtoa_r+0x6c4>
 810842a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810842c:	429d      	cmp	r5, r3
 810842e:	d081      	beq.n	8108334 <_dtoa_r+0x464>
 8108430:	4b30      	ldr	r3, [pc, #192]	; (81084f4 <_dtoa_r+0x624>)
 8108432:	2200      	movs	r2, #0
 8108434:	4650      	mov	r0, sl
 8108436:	4659      	mov	r1, fp
 8108438:	f7f8 f966 	bl	8100708 <__aeabi_dmul>
 810843c:	4b2d      	ldr	r3, [pc, #180]	; (81084f4 <_dtoa_r+0x624>)
 810843e:	4682      	mov	sl, r0
 8108440:	468b      	mov	fp, r1
 8108442:	4640      	mov	r0, r8
 8108444:	4649      	mov	r1, r9
 8108446:	2200      	movs	r2, #0
 8108448:	f7f8 f95e 	bl	8100708 <__aeabi_dmul>
 810844c:	4680      	mov	r8, r0
 810844e:	4689      	mov	r9, r1
 8108450:	e7c6      	b.n	81083e0 <_dtoa_r+0x510>
 8108452:	4650      	mov	r0, sl
 8108454:	4659      	mov	r1, fp
 8108456:	f7f8 f957 	bl	8100708 <__aeabi_dmul>
 810845a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810845c:	9d01      	ldr	r5, [sp, #4]
 810845e:	930f      	str	r3, [sp, #60]	; 0x3c
 8108460:	4682      	mov	sl, r0
 8108462:	468b      	mov	fp, r1
 8108464:	4649      	mov	r1, r9
 8108466:	4640      	mov	r0, r8
 8108468:	f7f8 fbfe 	bl	8100c68 <__aeabi_d2iz>
 810846c:	4606      	mov	r6, r0
 810846e:	f7f8 f8e1 	bl	8100634 <__aeabi_i2d>
 8108472:	3630      	adds	r6, #48	; 0x30
 8108474:	4602      	mov	r2, r0
 8108476:	460b      	mov	r3, r1
 8108478:	4640      	mov	r0, r8
 810847a:	4649      	mov	r1, r9
 810847c:	f7f7 ff8c 	bl	8100398 <__aeabi_dsub>
 8108480:	f805 6b01 	strb.w	r6, [r5], #1
 8108484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108486:	429d      	cmp	r5, r3
 8108488:	4680      	mov	r8, r0
 810848a:	4689      	mov	r9, r1
 810848c:	f04f 0200 	mov.w	r2, #0
 8108490:	d124      	bne.n	81084dc <_dtoa_r+0x60c>
 8108492:	4b1b      	ldr	r3, [pc, #108]	; (8108500 <_dtoa_r+0x630>)
 8108494:	4650      	mov	r0, sl
 8108496:	4659      	mov	r1, fp
 8108498:	f7f7 ff80 	bl	810039c <__adddf3>
 810849c:	4602      	mov	r2, r0
 810849e:	460b      	mov	r3, r1
 81084a0:	4640      	mov	r0, r8
 81084a2:	4649      	mov	r1, r9
 81084a4:	f7f8 fbc0 	bl	8100c28 <__aeabi_dcmpgt>
 81084a8:	2800      	cmp	r0, #0
 81084aa:	d173      	bne.n	8108594 <_dtoa_r+0x6c4>
 81084ac:	4652      	mov	r2, sl
 81084ae:	465b      	mov	r3, fp
 81084b0:	4913      	ldr	r1, [pc, #76]	; (8108500 <_dtoa_r+0x630>)
 81084b2:	2000      	movs	r0, #0
 81084b4:	f7f7 ff70 	bl	8100398 <__aeabi_dsub>
 81084b8:	4602      	mov	r2, r0
 81084ba:	460b      	mov	r3, r1
 81084bc:	4640      	mov	r0, r8
 81084be:	4649      	mov	r1, r9
 81084c0:	f7f8 fb94 	bl	8100bec <__aeabi_dcmplt>
 81084c4:	2800      	cmp	r0, #0
 81084c6:	f43f af35 	beq.w	8108334 <_dtoa_r+0x464>
 81084ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 81084cc:	1e6b      	subs	r3, r5, #1
 81084ce:	930f      	str	r3, [sp, #60]	; 0x3c
 81084d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 81084d4:	2b30      	cmp	r3, #48	; 0x30
 81084d6:	d0f8      	beq.n	81084ca <_dtoa_r+0x5fa>
 81084d8:	9700      	str	r7, [sp, #0]
 81084da:	e049      	b.n	8108570 <_dtoa_r+0x6a0>
 81084dc:	4b05      	ldr	r3, [pc, #20]	; (81084f4 <_dtoa_r+0x624>)
 81084de:	f7f8 f913 	bl	8100708 <__aeabi_dmul>
 81084e2:	4680      	mov	r8, r0
 81084e4:	4689      	mov	r9, r1
 81084e6:	e7bd      	b.n	8108464 <_dtoa_r+0x594>
 81084e8:	0810af08 	.word	0x0810af08
 81084ec:	0810aee0 	.word	0x0810aee0
 81084f0:	3ff00000 	.word	0x3ff00000
 81084f4:	40240000 	.word	0x40240000
 81084f8:	401c0000 	.word	0x401c0000
 81084fc:	40140000 	.word	0x40140000
 8108500:	3fe00000 	.word	0x3fe00000
 8108504:	9d01      	ldr	r5, [sp, #4]
 8108506:	4656      	mov	r6, sl
 8108508:	465f      	mov	r7, fp
 810850a:	4642      	mov	r2, r8
 810850c:	464b      	mov	r3, r9
 810850e:	4630      	mov	r0, r6
 8108510:	4639      	mov	r1, r7
 8108512:	f7f8 fa23 	bl	810095c <__aeabi_ddiv>
 8108516:	f7f8 fba7 	bl	8100c68 <__aeabi_d2iz>
 810851a:	4682      	mov	sl, r0
 810851c:	f7f8 f88a 	bl	8100634 <__aeabi_i2d>
 8108520:	4642      	mov	r2, r8
 8108522:	464b      	mov	r3, r9
 8108524:	f7f8 f8f0 	bl	8100708 <__aeabi_dmul>
 8108528:	4602      	mov	r2, r0
 810852a:	460b      	mov	r3, r1
 810852c:	4630      	mov	r0, r6
 810852e:	4639      	mov	r1, r7
 8108530:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8108534:	f7f7 ff30 	bl	8100398 <__aeabi_dsub>
 8108538:	f805 6b01 	strb.w	r6, [r5], #1
 810853c:	9e01      	ldr	r6, [sp, #4]
 810853e:	9f03      	ldr	r7, [sp, #12]
 8108540:	1bae      	subs	r6, r5, r6
 8108542:	42b7      	cmp	r7, r6
 8108544:	4602      	mov	r2, r0
 8108546:	460b      	mov	r3, r1
 8108548:	d135      	bne.n	81085b6 <_dtoa_r+0x6e6>
 810854a:	f7f7 ff27 	bl	810039c <__adddf3>
 810854e:	4642      	mov	r2, r8
 8108550:	464b      	mov	r3, r9
 8108552:	4606      	mov	r6, r0
 8108554:	460f      	mov	r7, r1
 8108556:	f7f8 fb67 	bl	8100c28 <__aeabi_dcmpgt>
 810855a:	b9d0      	cbnz	r0, 8108592 <_dtoa_r+0x6c2>
 810855c:	4642      	mov	r2, r8
 810855e:	464b      	mov	r3, r9
 8108560:	4630      	mov	r0, r6
 8108562:	4639      	mov	r1, r7
 8108564:	f7f8 fb38 	bl	8100bd8 <__aeabi_dcmpeq>
 8108568:	b110      	cbz	r0, 8108570 <_dtoa_r+0x6a0>
 810856a:	f01a 0f01 	tst.w	sl, #1
 810856e:	d110      	bne.n	8108592 <_dtoa_r+0x6c2>
 8108570:	4620      	mov	r0, r4
 8108572:	ee18 1a10 	vmov	r1, s16
 8108576:	f001 f893 	bl	81096a0 <_Bfree>
 810857a:	2300      	movs	r3, #0
 810857c:	9800      	ldr	r0, [sp, #0]
 810857e:	702b      	strb	r3, [r5, #0]
 8108580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108582:	3001      	adds	r0, #1
 8108584:	6018      	str	r0, [r3, #0]
 8108586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108588:	2b00      	cmp	r3, #0
 810858a:	f43f acf1 	beq.w	8107f70 <_dtoa_r+0xa0>
 810858e:	601d      	str	r5, [r3, #0]
 8108590:	e4ee      	b.n	8107f70 <_dtoa_r+0xa0>
 8108592:	9f00      	ldr	r7, [sp, #0]
 8108594:	462b      	mov	r3, r5
 8108596:	461d      	mov	r5, r3
 8108598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810859c:	2a39      	cmp	r2, #57	; 0x39
 810859e:	d106      	bne.n	81085ae <_dtoa_r+0x6de>
 81085a0:	9a01      	ldr	r2, [sp, #4]
 81085a2:	429a      	cmp	r2, r3
 81085a4:	d1f7      	bne.n	8108596 <_dtoa_r+0x6c6>
 81085a6:	9901      	ldr	r1, [sp, #4]
 81085a8:	2230      	movs	r2, #48	; 0x30
 81085aa:	3701      	adds	r7, #1
 81085ac:	700a      	strb	r2, [r1, #0]
 81085ae:	781a      	ldrb	r2, [r3, #0]
 81085b0:	3201      	adds	r2, #1
 81085b2:	701a      	strb	r2, [r3, #0]
 81085b4:	e790      	b.n	81084d8 <_dtoa_r+0x608>
 81085b6:	4ba6      	ldr	r3, [pc, #664]	; (8108850 <_dtoa_r+0x980>)
 81085b8:	2200      	movs	r2, #0
 81085ba:	f7f8 f8a5 	bl	8100708 <__aeabi_dmul>
 81085be:	2200      	movs	r2, #0
 81085c0:	2300      	movs	r3, #0
 81085c2:	4606      	mov	r6, r0
 81085c4:	460f      	mov	r7, r1
 81085c6:	f7f8 fb07 	bl	8100bd8 <__aeabi_dcmpeq>
 81085ca:	2800      	cmp	r0, #0
 81085cc:	d09d      	beq.n	810850a <_dtoa_r+0x63a>
 81085ce:	e7cf      	b.n	8108570 <_dtoa_r+0x6a0>
 81085d0:	9a08      	ldr	r2, [sp, #32]
 81085d2:	2a00      	cmp	r2, #0
 81085d4:	f000 80d7 	beq.w	8108786 <_dtoa_r+0x8b6>
 81085d8:	9a06      	ldr	r2, [sp, #24]
 81085da:	2a01      	cmp	r2, #1
 81085dc:	f300 80ba 	bgt.w	8108754 <_dtoa_r+0x884>
 81085e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81085e2:	2a00      	cmp	r2, #0
 81085e4:	f000 80b2 	beq.w	810874c <_dtoa_r+0x87c>
 81085e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 81085ec:	9e07      	ldr	r6, [sp, #28]
 81085ee:	9d04      	ldr	r5, [sp, #16]
 81085f0:	9a04      	ldr	r2, [sp, #16]
 81085f2:	441a      	add	r2, r3
 81085f4:	9204      	str	r2, [sp, #16]
 81085f6:	9a05      	ldr	r2, [sp, #20]
 81085f8:	2101      	movs	r1, #1
 81085fa:	441a      	add	r2, r3
 81085fc:	4620      	mov	r0, r4
 81085fe:	9205      	str	r2, [sp, #20]
 8108600:	f001 f950 	bl	81098a4 <__i2b>
 8108604:	4607      	mov	r7, r0
 8108606:	2d00      	cmp	r5, #0
 8108608:	dd0c      	ble.n	8108624 <_dtoa_r+0x754>
 810860a:	9b05      	ldr	r3, [sp, #20]
 810860c:	2b00      	cmp	r3, #0
 810860e:	dd09      	ble.n	8108624 <_dtoa_r+0x754>
 8108610:	42ab      	cmp	r3, r5
 8108612:	9a04      	ldr	r2, [sp, #16]
 8108614:	bfa8      	it	ge
 8108616:	462b      	movge	r3, r5
 8108618:	1ad2      	subs	r2, r2, r3
 810861a:	9204      	str	r2, [sp, #16]
 810861c:	9a05      	ldr	r2, [sp, #20]
 810861e:	1aed      	subs	r5, r5, r3
 8108620:	1ad3      	subs	r3, r2, r3
 8108622:	9305      	str	r3, [sp, #20]
 8108624:	9b07      	ldr	r3, [sp, #28]
 8108626:	b31b      	cbz	r3, 8108670 <_dtoa_r+0x7a0>
 8108628:	9b08      	ldr	r3, [sp, #32]
 810862a:	2b00      	cmp	r3, #0
 810862c:	f000 80af 	beq.w	810878e <_dtoa_r+0x8be>
 8108630:	2e00      	cmp	r6, #0
 8108632:	dd13      	ble.n	810865c <_dtoa_r+0x78c>
 8108634:	4639      	mov	r1, r7
 8108636:	4632      	mov	r2, r6
 8108638:	4620      	mov	r0, r4
 810863a:	f001 f9f3 	bl	8109a24 <__pow5mult>
 810863e:	ee18 2a10 	vmov	r2, s16
 8108642:	4601      	mov	r1, r0
 8108644:	4607      	mov	r7, r0
 8108646:	4620      	mov	r0, r4
 8108648:	f001 f942 	bl	81098d0 <__multiply>
 810864c:	ee18 1a10 	vmov	r1, s16
 8108650:	4680      	mov	r8, r0
 8108652:	4620      	mov	r0, r4
 8108654:	f001 f824 	bl	81096a0 <_Bfree>
 8108658:	ee08 8a10 	vmov	s16, r8
 810865c:	9b07      	ldr	r3, [sp, #28]
 810865e:	1b9a      	subs	r2, r3, r6
 8108660:	d006      	beq.n	8108670 <_dtoa_r+0x7a0>
 8108662:	ee18 1a10 	vmov	r1, s16
 8108666:	4620      	mov	r0, r4
 8108668:	f001 f9dc 	bl	8109a24 <__pow5mult>
 810866c:	ee08 0a10 	vmov	s16, r0
 8108670:	2101      	movs	r1, #1
 8108672:	4620      	mov	r0, r4
 8108674:	f001 f916 	bl	81098a4 <__i2b>
 8108678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810867a:	2b00      	cmp	r3, #0
 810867c:	4606      	mov	r6, r0
 810867e:	f340 8088 	ble.w	8108792 <_dtoa_r+0x8c2>
 8108682:	461a      	mov	r2, r3
 8108684:	4601      	mov	r1, r0
 8108686:	4620      	mov	r0, r4
 8108688:	f001 f9cc 	bl	8109a24 <__pow5mult>
 810868c:	9b06      	ldr	r3, [sp, #24]
 810868e:	2b01      	cmp	r3, #1
 8108690:	4606      	mov	r6, r0
 8108692:	f340 8081 	ble.w	8108798 <_dtoa_r+0x8c8>
 8108696:	f04f 0800 	mov.w	r8, #0
 810869a:	6933      	ldr	r3, [r6, #16]
 810869c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 81086a0:	6918      	ldr	r0, [r3, #16]
 81086a2:	f001 f8af 	bl	8109804 <__hi0bits>
 81086a6:	f1c0 0020 	rsb	r0, r0, #32
 81086aa:	9b05      	ldr	r3, [sp, #20]
 81086ac:	4418      	add	r0, r3
 81086ae:	f010 001f 	ands.w	r0, r0, #31
 81086b2:	f000 8092 	beq.w	81087da <_dtoa_r+0x90a>
 81086b6:	f1c0 0320 	rsb	r3, r0, #32
 81086ba:	2b04      	cmp	r3, #4
 81086bc:	f340 808a 	ble.w	81087d4 <_dtoa_r+0x904>
 81086c0:	f1c0 001c 	rsb	r0, r0, #28
 81086c4:	9b04      	ldr	r3, [sp, #16]
 81086c6:	4403      	add	r3, r0
 81086c8:	9304      	str	r3, [sp, #16]
 81086ca:	9b05      	ldr	r3, [sp, #20]
 81086cc:	4403      	add	r3, r0
 81086ce:	4405      	add	r5, r0
 81086d0:	9305      	str	r3, [sp, #20]
 81086d2:	9b04      	ldr	r3, [sp, #16]
 81086d4:	2b00      	cmp	r3, #0
 81086d6:	dd07      	ble.n	81086e8 <_dtoa_r+0x818>
 81086d8:	ee18 1a10 	vmov	r1, s16
 81086dc:	461a      	mov	r2, r3
 81086de:	4620      	mov	r0, r4
 81086e0:	f001 f9fa 	bl	8109ad8 <__lshift>
 81086e4:	ee08 0a10 	vmov	s16, r0
 81086e8:	9b05      	ldr	r3, [sp, #20]
 81086ea:	2b00      	cmp	r3, #0
 81086ec:	dd05      	ble.n	81086fa <_dtoa_r+0x82a>
 81086ee:	4631      	mov	r1, r6
 81086f0:	461a      	mov	r2, r3
 81086f2:	4620      	mov	r0, r4
 81086f4:	f001 f9f0 	bl	8109ad8 <__lshift>
 81086f8:	4606      	mov	r6, r0
 81086fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81086fc:	2b00      	cmp	r3, #0
 81086fe:	d06e      	beq.n	81087de <_dtoa_r+0x90e>
 8108700:	ee18 0a10 	vmov	r0, s16
 8108704:	4631      	mov	r1, r6
 8108706:	f001 fa57 	bl	8109bb8 <__mcmp>
 810870a:	2800      	cmp	r0, #0
 810870c:	da67      	bge.n	81087de <_dtoa_r+0x90e>
 810870e:	9b00      	ldr	r3, [sp, #0]
 8108710:	3b01      	subs	r3, #1
 8108712:	ee18 1a10 	vmov	r1, s16
 8108716:	9300      	str	r3, [sp, #0]
 8108718:	220a      	movs	r2, #10
 810871a:	2300      	movs	r3, #0
 810871c:	4620      	mov	r0, r4
 810871e:	f000 ffe1 	bl	81096e4 <__multadd>
 8108722:	9b08      	ldr	r3, [sp, #32]
 8108724:	ee08 0a10 	vmov	s16, r0
 8108728:	2b00      	cmp	r3, #0
 810872a:	f000 81b1 	beq.w	8108a90 <_dtoa_r+0xbc0>
 810872e:	2300      	movs	r3, #0
 8108730:	4639      	mov	r1, r7
 8108732:	220a      	movs	r2, #10
 8108734:	4620      	mov	r0, r4
 8108736:	f000 ffd5 	bl	81096e4 <__multadd>
 810873a:	9b02      	ldr	r3, [sp, #8]
 810873c:	2b00      	cmp	r3, #0
 810873e:	4607      	mov	r7, r0
 8108740:	f300 808e 	bgt.w	8108860 <_dtoa_r+0x990>
 8108744:	9b06      	ldr	r3, [sp, #24]
 8108746:	2b02      	cmp	r3, #2
 8108748:	dc51      	bgt.n	81087ee <_dtoa_r+0x91e>
 810874a:	e089      	b.n	8108860 <_dtoa_r+0x990>
 810874c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810874e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8108752:	e74b      	b.n	81085ec <_dtoa_r+0x71c>
 8108754:	9b03      	ldr	r3, [sp, #12]
 8108756:	1e5e      	subs	r6, r3, #1
 8108758:	9b07      	ldr	r3, [sp, #28]
 810875a:	42b3      	cmp	r3, r6
 810875c:	bfbf      	itttt	lt
 810875e:	9b07      	ldrlt	r3, [sp, #28]
 8108760:	9607      	strlt	r6, [sp, #28]
 8108762:	1af2      	sublt	r2, r6, r3
 8108764:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8108766:	bfb6      	itet	lt
 8108768:	189b      	addlt	r3, r3, r2
 810876a:	1b9e      	subge	r6, r3, r6
 810876c:	930a      	strlt	r3, [sp, #40]	; 0x28
 810876e:	9b03      	ldr	r3, [sp, #12]
 8108770:	bfb8      	it	lt
 8108772:	2600      	movlt	r6, #0
 8108774:	2b00      	cmp	r3, #0
 8108776:	bfb7      	itett	lt
 8108778:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 810877c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8108780:	1a9d      	sublt	r5, r3, r2
 8108782:	2300      	movlt	r3, #0
 8108784:	e734      	b.n	81085f0 <_dtoa_r+0x720>
 8108786:	9e07      	ldr	r6, [sp, #28]
 8108788:	9d04      	ldr	r5, [sp, #16]
 810878a:	9f08      	ldr	r7, [sp, #32]
 810878c:	e73b      	b.n	8108606 <_dtoa_r+0x736>
 810878e:	9a07      	ldr	r2, [sp, #28]
 8108790:	e767      	b.n	8108662 <_dtoa_r+0x792>
 8108792:	9b06      	ldr	r3, [sp, #24]
 8108794:	2b01      	cmp	r3, #1
 8108796:	dc18      	bgt.n	81087ca <_dtoa_r+0x8fa>
 8108798:	f1ba 0f00 	cmp.w	sl, #0
 810879c:	d115      	bne.n	81087ca <_dtoa_r+0x8fa>
 810879e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81087a2:	b993      	cbnz	r3, 81087ca <_dtoa_r+0x8fa>
 81087a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 81087a8:	0d1b      	lsrs	r3, r3, #20
 81087aa:	051b      	lsls	r3, r3, #20
 81087ac:	b183      	cbz	r3, 81087d0 <_dtoa_r+0x900>
 81087ae:	9b04      	ldr	r3, [sp, #16]
 81087b0:	3301      	adds	r3, #1
 81087b2:	9304      	str	r3, [sp, #16]
 81087b4:	9b05      	ldr	r3, [sp, #20]
 81087b6:	3301      	adds	r3, #1
 81087b8:	9305      	str	r3, [sp, #20]
 81087ba:	f04f 0801 	mov.w	r8, #1
 81087be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81087c0:	2b00      	cmp	r3, #0
 81087c2:	f47f af6a 	bne.w	810869a <_dtoa_r+0x7ca>
 81087c6:	2001      	movs	r0, #1
 81087c8:	e76f      	b.n	81086aa <_dtoa_r+0x7da>
 81087ca:	f04f 0800 	mov.w	r8, #0
 81087ce:	e7f6      	b.n	81087be <_dtoa_r+0x8ee>
 81087d0:	4698      	mov	r8, r3
 81087d2:	e7f4      	b.n	81087be <_dtoa_r+0x8ee>
 81087d4:	f43f af7d 	beq.w	81086d2 <_dtoa_r+0x802>
 81087d8:	4618      	mov	r0, r3
 81087da:	301c      	adds	r0, #28
 81087dc:	e772      	b.n	81086c4 <_dtoa_r+0x7f4>
 81087de:	9b03      	ldr	r3, [sp, #12]
 81087e0:	2b00      	cmp	r3, #0
 81087e2:	dc37      	bgt.n	8108854 <_dtoa_r+0x984>
 81087e4:	9b06      	ldr	r3, [sp, #24]
 81087e6:	2b02      	cmp	r3, #2
 81087e8:	dd34      	ble.n	8108854 <_dtoa_r+0x984>
 81087ea:	9b03      	ldr	r3, [sp, #12]
 81087ec:	9302      	str	r3, [sp, #8]
 81087ee:	9b02      	ldr	r3, [sp, #8]
 81087f0:	b96b      	cbnz	r3, 810880e <_dtoa_r+0x93e>
 81087f2:	4631      	mov	r1, r6
 81087f4:	2205      	movs	r2, #5
 81087f6:	4620      	mov	r0, r4
 81087f8:	f000 ff74 	bl	81096e4 <__multadd>
 81087fc:	4601      	mov	r1, r0
 81087fe:	4606      	mov	r6, r0
 8108800:	ee18 0a10 	vmov	r0, s16
 8108804:	f001 f9d8 	bl	8109bb8 <__mcmp>
 8108808:	2800      	cmp	r0, #0
 810880a:	f73f adbb 	bgt.w	8108384 <_dtoa_r+0x4b4>
 810880e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108810:	9d01      	ldr	r5, [sp, #4]
 8108812:	43db      	mvns	r3, r3
 8108814:	9300      	str	r3, [sp, #0]
 8108816:	f04f 0800 	mov.w	r8, #0
 810881a:	4631      	mov	r1, r6
 810881c:	4620      	mov	r0, r4
 810881e:	f000 ff3f 	bl	81096a0 <_Bfree>
 8108822:	2f00      	cmp	r7, #0
 8108824:	f43f aea4 	beq.w	8108570 <_dtoa_r+0x6a0>
 8108828:	f1b8 0f00 	cmp.w	r8, #0
 810882c:	d005      	beq.n	810883a <_dtoa_r+0x96a>
 810882e:	45b8      	cmp	r8, r7
 8108830:	d003      	beq.n	810883a <_dtoa_r+0x96a>
 8108832:	4641      	mov	r1, r8
 8108834:	4620      	mov	r0, r4
 8108836:	f000 ff33 	bl	81096a0 <_Bfree>
 810883a:	4639      	mov	r1, r7
 810883c:	4620      	mov	r0, r4
 810883e:	f000 ff2f 	bl	81096a0 <_Bfree>
 8108842:	e695      	b.n	8108570 <_dtoa_r+0x6a0>
 8108844:	2600      	movs	r6, #0
 8108846:	4637      	mov	r7, r6
 8108848:	e7e1      	b.n	810880e <_dtoa_r+0x93e>
 810884a:	9700      	str	r7, [sp, #0]
 810884c:	4637      	mov	r7, r6
 810884e:	e599      	b.n	8108384 <_dtoa_r+0x4b4>
 8108850:	40240000 	.word	0x40240000
 8108854:	9b08      	ldr	r3, [sp, #32]
 8108856:	2b00      	cmp	r3, #0
 8108858:	f000 80ca 	beq.w	81089f0 <_dtoa_r+0xb20>
 810885c:	9b03      	ldr	r3, [sp, #12]
 810885e:	9302      	str	r3, [sp, #8]
 8108860:	2d00      	cmp	r5, #0
 8108862:	dd05      	ble.n	8108870 <_dtoa_r+0x9a0>
 8108864:	4639      	mov	r1, r7
 8108866:	462a      	mov	r2, r5
 8108868:	4620      	mov	r0, r4
 810886a:	f001 f935 	bl	8109ad8 <__lshift>
 810886e:	4607      	mov	r7, r0
 8108870:	f1b8 0f00 	cmp.w	r8, #0
 8108874:	d05b      	beq.n	810892e <_dtoa_r+0xa5e>
 8108876:	6879      	ldr	r1, [r7, #4]
 8108878:	4620      	mov	r0, r4
 810887a:	f000 fed1 	bl	8109620 <_Balloc>
 810887e:	4605      	mov	r5, r0
 8108880:	b928      	cbnz	r0, 810888e <_dtoa_r+0x9be>
 8108882:	4b87      	ldr	r3, [pc, #540]	; (8108aa0 <_dtoa_r+0xbd0>)
 8108884:	4602      	mov	r2, r0
 8108886:	f240 21ea 	movw	r1, #746	; 0x2ea
 810888a:	f7ff bb3b 	b.w	8107f04 <_dtoa_r+0x34>
 810888e:	693a      	ldr	r2, [r7, #16]
 8108890:	3202      	adds	r2, #2
 8108892:	0092      	lsls	r2, r2, #2
 8108894:	f107 010c 	add.w	r1, r7, #12
 8108898:	300c      	adds	r0, #12
 810889a:	f000 feb3 	bl	8109604 <memcpy>
 810889e:	2201      	movs	r2, #1
 81088a0:	4629      	mov	r1, r5
 81088a2:	4620      	mov	r0, r4
 81088a4:	f001 f918 	bl	8109ad8 <__lshift>
 81088a8:	9b01      	ldr	r3, [sp, #4]
 81088aa:	f103 0901 	add.w	r9, r3, #1
 81088ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 81088b2:	4413      	add	r3, r2
 81088b4:	9305      	str	r3, [sp, #20]
 81088b6:	f00a 0301 	and.w	r3, sl, #1
 81088ba:	46b8      	mov	r8, r7
 81088bc:	9304      	str	r3, [sp, #16]
 81088be:	4607      	mov	r7, r0
 81088c0:	4631      	mov	r1, r6
 81088c2:	ee18 0a10 	vmov	r0, s16
 81088c6:	f7ff fa77 	bl	8107db8 <quorem>
 81088ca:	4641      	mov	r1, r8
 81088cc:	9002      	str	r0, [sp, #8]
 81088ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 81088d2:	ee18 0a10 	vmov	r0, s16
 81088d6:	f001 f96f 	bl	8109bb8 <__mcmp>
 81088da:	463a      	mov	r2, r7
 81088dc:	9003      	str	r0, [sp, #12]
 81088de:	4631      	mov	r1, r6
 81088e0:	4620      	mov	r0, r4
 81088e2:	f001 f985 	bl	8109bf0 <__mdiff>
 81088e6:	68c2      	ldr	r2, [r0, #12]
 81088e8:	f109 3bff 	add.w	fp, r9, #4294967295
 81088ec:	4605      	mov	r5, r0
 81088ee:	bb02      	cbnz	r2, 8108932 <_dtoa_r+0xa62>
 81088f0:	4601      	mov	r1, r0
 81088f2:	ee18 0a10 	vmov	r0, s16
 81088f6:	f001 f95f 	bl	8109bb8 <__mcmp>
 81088fa:	4602      	mov	r2, r0
 81088fc:	4629      	mov	r1, r5
 81088fe:	4620      	mov	r0, r4
 8108900:	9207      	str	r2, [sp, #28]
 8108902:	f000 fecd 	bl	81096a0 <_Bfree>
 8108906:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 810890a:	ea43 0102 	orr.w	r1, r3, r2
 810890e:	9b04      	ldr	r3, [sp, #16]
 8108910:	430b      	orrs	r3, r1
 8108912:	464d      	mov	r5, r9
 8108914:	d10f      	bne.n	8108936 <_dtoa_r+0xa66>
 8108916:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 810891a:	d02a      	beq.n	8108972 <_dtoa_r+0xaa2>
 810891c:	9b03      	ldr	r3, [sp, #12]
 810891e:	2b00      	cmp	r3, #0
 8108920:	dd02      	ble.n	8108928 <_dtoa_r+0xa58>
 8108922:	9b02      	ldr	r3, [sp, #8]
 8108924:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8108928:	f88b a000 	strb.w	sl, [fp]
 810892c:	e775      	b.n	810881a <_dtoa_r+0x94a>
 810892e:	4638      	mov	r0, r7
 8108930:	e7ba      	b.n	81088a8 <_dtoa_r+0x9d8>
 8108932:	2201      	movs	r2, #1
 8108934:	e7e2      	b.n	81088fc <_dtoa_r+0xa2c>
 8108936:	9b03      	ldr	r3, [sp, #12]
 8108938:	2b00      	cmp	r3, #0
 810893a:	db04      	blt.n	8108946 <_dtoa_r+0xa76>
 810893c:	9906      	ldr	r1, [sp, #24]
 810893e:	430b      	orrs	r3, r1
 8108940:	9904      	ldr	r1, [sp, #16]
 8108942:	430b      	orrs	r3, r1
 8108944:	d122      	bne.n	810898c <_dtoa_r+0xabc>
 8108946:	2a00      	cmp	r2, #0
 8108948:	ddee      	ble.n	8108928 <_dtoa_r+0xa58>
 810894a:	ee18 1a10 	vmov	r1, s16
 810894e:	2201      	movs	r2, #1
 8108950:	4620      	mov	r0, r4
 8108952:	f001 f8c1 	bl	8109ad8 <__lshift>
 8108956:	4631      	mov	r1, r6
 8108958:	ee08 0a10 	vmov	s16, r0
 810895c:	f001 f92c 	bl	8109bb8 <__mcmp>
 8108960:	2800      	cmp	r0, #0
 8108962:	dc03      	bgt.n	810896c <_dtoa_r+0xa9c>
 8108964:	d1e0      	bne.n	8108928 <_dtoa_r+0xa58>
 8108966:	f01a 0f01 	tst.w	sl, #1
 810896a:	d0dd      	beq.n	8108928 <_dtoa_r+0xa58>
 810896c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8108970:	d1d7      	bne.n	8108922 <_dtoa_r+0xa52>
 8108972:	2339      	movs	r3, #57	; 0x39
 8108974:	f88b 3000 	strb.w	r3, [fp]
 8108978:	462b      	mov	r3, r5
 810897a:	461d      	mov	r5, r3
 810897c:	3b01      	subs	r3, #1
 810897e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8108982:	2a39      	cmp	r2, #57	; 0x39
 8108984:	d071      	beq.n	8108a6a <_dtoa_r+0xb9a>
 8108986:	3201      	adds	r2, #1
 8108988:	701a      	strb	r2, [r3, #0]
 810898a:	e746      	b.n	810881a <_dtoa_r+0x94a>
 810898c:	2a00      	cmp	r2, #0
 810898e:	dd07      	ble.n	81089a0 <_dtoa_r+0xad0>
 8108990:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8108994:	d0ed      	beq.n	8108972 <_dtoa_r+0xaa2>
 8108996:	f10a 0301 	add.w	r3, sl, #1
 810899a:	f88b 3000 	strb.w	r3, [fp]
 810899e:	e73c      	b.n	810881a <_dtoa_r+0x94a>
 81089a0:	9b05      	ldr	r3, [sp, #20]
 81089a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 81089a6:	4599      	cmp	r9, r3
 81089a8:	d047      	beq.n	8108a3a <_dtoa_r+0xb6a>
 81089aa:	ee18 1a10 	vmov	r1, s16
 81089ae:	2300      	movs	r3, #0
 81089b0:	220a      	movs	r2, #10
 81089b2:	4620      	mov	r0, r4
 81089b4:	f000 fe96 	bl	81096e4 <__multadd>
 81089b8:	45b8      	cmp	r8, r7
 81089ba:	ee08 0a10 	vmov	s16, r0
 81089be:	f04f 0300 	mov.w	r3, #0
 81089c2:	f04f 020a 	mov.w	r2, #10
 81089c6:	4641      	mov	r1, r8
 81089c8:	4620      	mov	r0, r4
 81089ca:	d106      	bne.n	81089da <_dtoa_r+0xb0a>
 81089cc:	f000 fe8a 	bl	81096e4 <__multadd>
 81089d0:	4680      	mov	r8, r0
 81089d2:	4607      	mov	r7, r0
 81089d4:	f109 0901 	add.w	r9, r9, #1
 81089d8:	e772      	b.n	81088c0 <_dtoa_r+0x9f0>
 81089da:	f000 fe83 	bl	81096e4 <__multadd>
 81089de:	4639      	mov	r1, r7
 81089e0:	4680      	mov	r8, r0
 81089e2:	2300      	movs	r3, #0
 81089e4:	220a      	movs	r2, #10
 81089e6:	4620      	mov	r0, r4
 81089e8:	f000 fe7c 	bl	81096e4 <__multadd>
 81089ec:	4607      	mov	r7, r0
 81089ee:	e7f1      	b.n	81089d4 <_dtoa_r+0xb04>
 81089f0:	9b03      	ldr	r3, [sp, #12]
 81089f2:	9302      	str	r3, [sp, #8]
 81089f4:	9d01      	ldr	r5, [sp, #4]
 81089f6:	ee18 0a10 	vmov	r0, s16
 81089fa:	4631      	mov	r1, r6
 81089fc:	f7ff f9dc 	bl	8107db8 <quorem>
 8108a00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8108a04:	9b01      	ldr	r3, [sp, #4]
 8108a06:	f805 ab01 	strb.w	sl, [r5], #1
 8108a0a:	1aea      	subs	r2, r5, r3
 8108a0c:	9b02      	ldr	r3, [sp, #8]
 8108a0e:	4293      	cmp	r3, r2
 8108a10:	dd09      	ble.n	8108a26 <_dtoa_r+0xb56>
 8108a12:	ee18 1a10 	vmov	r1, s16
 8108a16:	2300      	movs	r3, #0
 8108a18:	220a      	movs	r2, #10
 8108a1a:	4620      	mov	r0, r4
 8108a1c:	f000 fe62 	bl	81096e4 <__multadd>
 8108a20:	ee08 0a10 	vmov	s16, r0
 8108a24:	e7e7      	b.n	81089f6 <_dtoa_r+0xb26>
 8108a26:	9b02      	ldr	r3, [sp, #8]
 8108a28:	2b00      	cmp	r3, #0
 8108a2a:	bfc8      	it	gt
 8108a2c:	461d      	movgt	r5, r3
 8108a2e:	9b01      	ldr	r3, [sp, #4]
 8108a30:	bfd8      	it	le
 8108a32:	2501      	movle	r5, #1
 8108a34:	441d      	add	r5, r3
 8108a36:	f04f 0800 	mov.w	r8, #0
 8108a3a:	ee18 1a10 	vmov	r1, s16
 8108a3e:	2201      	movs	r2, #1
 8108a40:	4620      	mov	r0, r4
 8108a42:	f001 f849 	bl	8109ad8 <__lshift>
 8108a46:	4631      	mov	r1, r6
 8108a48:	ee08 0a10 	vmov	s16, r0
 8108a4c:	f001 f8b4 	bl	8109bb8 <__mcmp>
 8108a50:	2800      	cmp	r0, #0
 8108a52:	dc91      	bgt.n	8108978 <_dtoa_r+0xaa8>
 8108a54:	d102      	bne.n	8108a5c <_dtoa_r+0xb8c>
 8108a56:	f01a 0f01 	tst.w	sl, #1
 8108a5a:	d18d      	bne.n	8108978 <_dtoa_r+0xaa8>
 8108a5c:	462b      	mov	r3, r5
 8108a5e:	461d      	mov	r5, r3
 8108a60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8108a64:	2a30      	cmp	r2, #48	; 0x30
 8108a66:	d0fa      	beq.n	8108a5e <_dtoa_r+0xb8e>
 8108a68:	e6d7      	b.n	810881a <_dtoa_r+0x94a>
 8108a6a:	9a01      	ldr	r2, [sp, #4]
 8108a6c:	429a      	cmp	r2, r3
 8108a6e:	d184      	bne.n	810897a <_dtoa_r+0xaaa>
 8108a70:	9b00      	ldr	r3, [sp, #0]
 8108a72:	3301      	adds	r3, #1
 8108a74:	9300      	str	r3, [sp, #0]
 8108a76:	2331      	movs	r3, #49	; 0x31
 8108a78:	7013      	strb	r3, [r2, #0]
 8108a7a:	e6ce      	b.n	810881a <_dtoa_r+0x94a>
 8108a7c:	4b09      	ldr	r3, [pc, #36]	; (8108aa4 <_dtoa_r+0xbd4>)
 8108a7e:	f7ff ba95 	b.w	8107fac <_dtoa_r+0xdc>
 8108a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108a84:	2b00      	cmp	r3, #0
 8108a86:	f47f aa6e 	bne.w	8107f66 <_dtoa_r+0x96>
 8108a8a:	4b07      	ldr	r3, [pc, #28]	; (8108aa8 <_dtoa_r+0xbd8>)
 8108a8c:	f7ff ba8e 	b.w	8107fac <_dtoa_r+0xdc>
 8108a90:	9b02      	ldr	r3, [sp, #8]
 8108a92:	2b00      	cmp	r3, #0
 8108a94:	dcae      	bgt.n	81089f4 <_dtoa_r+0xb24>
 8108a96:	9b06      	ldr	r3, [sp, #24]
 8108a98:	2b02      	cmp	r3, #2
 8108a9a:	f73f aea8 	bgt.w	81087ee <_dtoa_r+0x91e>
 8108a9e:	e7a9      	b.n	81089f4 <_dtoa_r+0xb24>
 8108aa0:	0810ad90 	.word	0x0810ad90
 8108aa4:	0810ab94 	.word	0x0810ab94
 8108aa8:	0810ad11 	.word	0x0810ad11

08108aac <__sflush_r>:
 8108aac:	898a      	ldrh	r2, [r1, #12]
 8108aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108ab2:	4605      	mov	r5, r0
 8108ab4:	0710      	lsls	r0, r2, #28
 8108ab6:	460c      	mov	r4, r1
 8108ab8:	d458      	bmi.n	8108b6c <__sflush_r+0xc0>
 8108aba:	684b      	ldr	r3, [r1, #4]
 8108abc:	2b00      	cmp	r3, #0
 8108abe:	dc05      	bgt.n	8108acc <__sflush_r+0x20>
 8108ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8108ac2:	2b00      	cmp	r3, #0
 8108ac4:	dc02      	bgt.n	8108acc <__sflush_r+0x20>
 8108ac6:	2000      	movs	r0, #0
 8108ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8108ace:	2e00      	cmp	r6, #0
 8108ad0:	d0f9      	beq.n	8108ac6 <__sflush_r+0x1a>
 8108ad2:	2300      	movs	r3, #0
 8108ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8108ad8:	682f      	ldr	r7, [r5, #0]
 8108ada:	602b      	str	r3, [r5, #0]
 8108adc:	d032      	beq.n	8108b44 <__sflush_r+0x98>
 8108ade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8108ae0:	89a3      	ldrh	r3, [r4, #12]
 8108ae2:	075a      	lsls	r2, r3, #29
 8108ae4:	d505      	bpl.n	8108af2 <__sflush_r+0x46>
 8108ae6:	6863      	ldr	r3, [r4, #4]
 8108ae8:	1ac0      	subs	r0, r0, r3
 8108aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8108aec:	b10b      	cbz	r3, 8108af2 <__sflush_r+0x46>
 8108aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8108af0:	1ac0      	subs	r0, r0, r3
 8108af2:	2300      	movs	r3, #0
 8108af4:	4602      	mov	r2, r0
 8108af6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8108af8:	6a21      	ldr	r1, [r4, #32]
 8108afa:	4628      	mov	r0, r5
 8108afc:	47b0      	blx	r6
 8108afe:	1c43      	adds	r3, r0, #1
 8108b00:	89a3      	ldrh	r3, [r4, #12]
 8108b02:	d106      	bne.n	8108b12 <__sflush_r+0x66>
 8108b04:	6829      	ldr	r1, [r5, #0]
 8108b06:	291d      	cmp	r1, #29
 8108b08:	d82c      	bhi.n	8108b64 <__sflush_r+0xb8>
 8108b0a:	4a2a      	ldr	r2, [pc, #168]	; (8108bb4 <__sflush_r+0x108>)
 8108b0c:	40ca      	lsrs	r2, r1
 8108b0e:	07d6      	lsls	r6, r2, #31
 8108b10:	d528      	bpl.n	8108b64 <__sflush_r+0xb8>
 8108b12:	2200      	movs	r2, #0
 8108b14:	6062      	str	r2, [r4, #4]
 8108b16:	04d9      	lsls	r1, r3, #19
 8108b18:	6922      	ldr	r2, [r4, #16]
 8108b1a:	6022      	str	r2, [r4, #0]
 8108b1c:	d504      	bpl.n	8108b28 <__sflush_r+0x7c>
 8108b1e:	1c42      	adds	r2, r0, #1
 8108b20:	d101      	bne.n	8108b26 <__sflush_r+0x7a>
 8108b22:	682b      	ldr	r3, [r5, #0]
 8108b24:	b903      	cbnz	r3, 8108b28 <__sflush_r+0x7c>
 8108b26:	6560      	str	r0, [r4, #84]	; 0x54
 8108b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8108b2a:	602f      	str	r7, [r5, #0]
 8108b2c:	2900      	cmp	r1, #0
 8108b2e:	d0ca      	beq.n	8108ac6 <__sflush_r+0x1a>
 8108b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8108b34:	4299      	cmp	r1, r3
 8108b36:	d002      	beq.n	8108b3e <__sflush_r+0x92>
 8108b38:	4628      	mov	r0, r5
 8108b3a:	f001 fa49 	bl	8109fd0 <_free_r>
 8108b3e:	2000      	movs	r0, #0
 8108b40:	6360      	str	r0, [r4, #52]	; 0x34
 8108b42:	e7c1      	b.n	8108ac8 <__sflush_r+0x1c>
 8108b44:	6a21      	ldr	r1, [r4, #32]
 8108b46:	2301      	movs	r3, #1
 8108b48:	4628      	mov	r0, r5
 8108b4a:	47b0      	blx	r6
 8108b4c:	1c41      	adds	r1, r0, #1
 8108b4e:	d1c7      	bne.n	8108ae0 <__sflush_r+0x34>
 8108b50:	682b      	ldr	r3, [r5, #0]
 8108b52:	2b00      	cmp	r3, #0
 8108b54:	d0c4      	beq.n	8108ae0 <__sflush_r+0x34>
 8108b56:	2b1d      	cmp	r3, #29
 8108b58:	d001      	beq.n	8108b5e <__sflush_r+0xb2>
 8108b5a:	2b16      	cmp	r3, #22
 8108b5c:	d101      	bne.n	8108b62 <__sflush_r+0xb6>
 8108b5e:	602f      	str	r7, [r5, #0]
 8108b60:	e7b1      	b.n	8108ac6 <__sflush_r+0x1a>
 8108b62:	89a3      	ldrh	r3, [r4, #12]
 8108b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108b68:	81a3      	strh	r3, [r4, #12]
 8108b6a:	e7ad      	b.n	8108ac8 <__sflush_r+0x1c>
 8108b6c:	690f      	ldr	r7, [r1, #16]
 8108b6e:	2f00      	cmp	r7, #0
 8108b70:	d0a9      	beq.n	8108ac6 <__sflush_r+0x1a>
 8108b72:	0793      	lsls	r3, r2, #30
 8108b74:	680e      	ldr	r6, [r1, #0]
 8108b76:	bf08      	it	eq
 8108b78:	694b      	ldreq	r3, [r1, #20]
 8108b7a:	600f      	str	r7, [r1, #0]
 8108b7c:	bf18      	it	ne
 8108b7e:	2300      	movne	r3, #0
 8108b80:	eba6 0807 	sub.w	r8, r6, r7
 8108b84:	608b      	str	r3, [r1, #8]
 8108b86:	f1b8 0f00 	cmp.w	r8, #0
 8108b8a:	dd9c      	ble.n	8108ac6 <__sflush_r+0x1a>
 8108b8c:	6a21      	ldr	r1, [r4, #32]
 8108b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8108b90:	4643      	mov	r3, r8
 8108b92:	463a      	mov	r2, r7
 8108b94:	4628      	mov	r0, r5
 8108b96:	47b0      	blx	r6
 8108b98:	2800      	cmp	r0, #0
 8108b9a:	dc06      	bgt.n	8108baa <__sflush_r+0xfe>
 8108b9c:	89a3      	ldrh	r3, [r4, #12]
 8108b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8108ba2:	81a3      	strh	r3, [r4, #12]
 8108ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8108ba8:	e78e      	b.n	8108ac8 <__sflush_r+0x1c>
 8108baa:	4407      	add	r7, r0
 8108bac:	eba8 0800 	sub.w	r8, r8, r0
 8108bb0:	e7e9      	b.n	8108b86 <__sflush_r+0xda>
 8108bb2:	bf00      	nop
 8108bb4:	20400001 	.word	0x20400001

08108bb8 <_fflush_r>:
 8108bb8:	b538      	push	{r3, r4, r5, lr}
 8108bba:	690b      	ldr	r3, [r1, #16]
 8108bbc:	4605      	mov	r5, r0
 8108bbe:	460c      	mov	r4, r1
 8108bc0:	b913      	cbnz	r3, 8108bc8 <_fflush_r+0x10>
 8108bc2:	2500      	movs	r5, #0
 8108bc4:	4628      	mov	r0, r5
 8108bc6:	bd38      	pop	{r3, r4, r5, pc}
 8108bc8:	b118      	cbz	r0, 8108bd2 <_fflush_r+0x1a>
 8108bca:	6983      	ldr	r3, [r0, #24]
 8108bcc:	b90b      	cbnz	r3, 8108bd2 <_fflush_r+0x1a>
 8108bce:	f000 f887 	bl	8108ce0 <__sinit>
 8108bd2:	4b14      	ldr	r3, [pc, #80]	; (8108c24 <_fflush_r+0x6c>)
 8108bd4:	429c      	cmp	r4, r3
 8108bd6:	d11b      	bne.n	8108c10 <_fflush_r+0x58>
 8108bd8:	686c      	ldr	r4, [r5, #4]
 8108bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108bde:	2b00      	cmp	r3, #0
 8108be0:	d0ef      	beq.n	8108bc2 <_fflush_r+0xa>
 8108be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8108be4:	07d0      	lsls	r0, r2, #31
 8108be6:	d404      	bmi.n	8108bf2 <_fflush_r+0x3a>
 8108be8:	0599      	lsls	r1, r3, #22
 8108bea:	d402      	bmi.n	8108bf2 <_fflush_r+0x3a>
 8108bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8108bee:	f000 fc88 	bl	8109502 <__retarget_lock_acquire_recursive>
 8108bf2:	4628      	mov	r0, r5
 8108bf4:	4621      	mov	r1, r4
 8108bf6:	f7ff ff59 	bl	8108aac <__sflush_r>
 8108bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8108bfc:	07da      	lsls	r2, r3, #31
 8108bfe:	4605      	mov	r5, r0
 8108c00:	d4e0      	bmi.n	8108bc4 <_fflush_r+0xc>
 8108c02:	89a3      	ldrh	r3, [r4, #12]
 8108c04:	059b      	lsls	r3, r3, #22
 8108c06:	d4dd      	bmi.n	8108bc4 <_fflush_r+0xc>
 8108c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8108c0a:	f000 fc7b 	bl	8109504 <__retarget_lock_release_recursive>
 8108c0e:	e7d9      	b.n	8108bc4 <_fflush_r+0xc>
 8108c10:	4b05      	ldr	r3, [pc, #20]	; (8108c28 <_fflush_r+0x70>)
 8108c12:	429c      	cmp	r4, r3
 8108c14:	d101      	bne.n	8108c1a <_fflush_r+0x62>
 8108c16:	68ac      	ldr	r4, [r5, #8]
 8108c18:	e7df      	b.n	8108bda <_fflush_r+0x22>
 8108c1a:	4b04      	ldr	r3, [pc, #16]	; (8108c2c <_fflush_r+0x74>)
 8108c1c:	429c      	cmp	r4, r3
 8108c1e:	bf08      	it	eq
 8108c20:	68ec      	ldreq	r4, [r5, #12]
 8108c22:	e7da      	b.n	8108bda <_fflush_r+0x22>
 8108c24:	0810adc4 	.word	0x0810adc4
 8108c28:	0810ade4 	.word	0x0810ade4
 8108c2c:	0810ada4 	.word	0x0810ada4

08108c30 <std>:
 8108c30:	2300      	movs	r3, #0
 8108c32:	b510      	push	{r4, lr}
 8108c34:	4604      	mov	r4, r0
 8108c36:	e9c0 3300 	strd	r3, r3, [r0]
 8108c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8108c3e:	6083      	str	r3, [r0, #8]
 8108c40:	8181      	strh	r1, [r0, #12]
 8108c42:	6643      	str	r3, [r0, #100]	; 0x64
 8108c44:	81c2      	strh	r2, [r0, #14]
 8108c46:	6183      	str	r3, [r0, #24]
 8108c48:	4619      	mov	r1, r3
 8108c4a:	2208      	movs	r2, #8
 8108c4c:	305c      	adds	r0, #92	; 0x5c
 8108c4e:	f7fd fa11 	bl	8106074 <memset>
 8108c52:	4b05      	ldr	r3, [pc, #20]	; (8108c68 <std+0x38>)
 8108c54:	6263      	str	r3, [r4, #36]	; 0x24
 8108c56:	4b05      	ldr	r3, [pc, #20]	; (8108c6c <std+0x3c>)
 8108c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8108c5a:	4b05      	ldr	r3, [pc, #20]	; (8108c70 <std+0x40>)
 8108c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8108c5e:	4b05      	ldr	r3, [pc, #20]	; (8108c74 <std+0x44>)
 8108c60:	6224      	str	r4, [r4, #32]
 8108c62:	6323      	str	r3, [r4, #48]	; 0x30
 8108c64:	bd10      	pop	{r4, pc}
 8108c66:	bf00      	nop
 8108c68:	0810a731 	.word	0x0810a731
 8108c6c:	0810a753 	.word	0x0810a753
 8108c70:	0810a78b 	.word	0x0810a78b
 8108c74:	0810a7af 	.word	0x0810a7af

08108c78 <_cleanup_r>:
 8108c78:	4901      	ldr	r1, [pc, #4]	; (8108c80 <_cleanup_r+0x8>)
 8108c7a:	f000 b8af 	b.w	8108ddc <_fwalk_reent>
 8108c7e:	bf00      	nop
 8108c80:	08108bb9 	.word	0x08108bb9

08108c84 <__sfmoreglue>:
 8108c84:	b570      	push	{r4, r5, r6, lr}
 8108c86:	2268      	movs	r2, #104	; 0x68
 8108c88:	1e4d      	subs	r5, r1, #1
 8108c8a:	4355      	muls	r5, r2
 8108c8c:	460e      	mov	r6, r1
 8108c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8108c92:	f001 fa09 	bl	810a0a8 <_malloc_r>
 8108c96:	4604      	mov	r4, r0
 8108c98:	b140      	cbz	r0, 8108cac <__sfmoreglue+0x28>
 8108c9a:	2100      	movs	r1, #0
 8108c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8108ca0:	300c      	adds	r0, #12
 8108ca2:	60a0      	str	r0, [r4, #8]
 8108ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8108ca8:	f7fd f9e4 	bl	8106074 <memset>
 8108cac:	4620      	mov	r0, r4
 8108cae:	bd70      	pop	{r4, r5, r6, pc}

08108cb0 <__sfp_lock_acquire>:
 8108cb0:	4801      	ldr	r0, [pc, #4]	; (8108cb8 <__sfp_lock_acquire+0x8>)
 8108cb2:	f000 bc26 	b.w	8109502 <__retarget_lock_acquire_recursive>
 8108cb6:	bf00      	nop
 8108cb8:	100002f5 	.word	0x100002f5

08108cbc <__sfp_lock_release>:
 8108cbc:	4801      	ldr	r0, [pc, #4]	; (8108cc4 <__sfp_lock_release+0x8>)
 8108cbe:	f000 bc21 	b.w	8109504 <__retarget_lock_release_recursive>
 8108cc2:	bf00      	nop
 8108cc4:	100002f5 	.word	0x100002f5

08108cc8 <__sinit_lock_acquire>:
 8108cc8:	4801      	ldr	r0, [pc, #4]	; (8108cd0 <__sinit_lock_acquire+0x8>)
 8108cca:	f000 bc1a 	b.w	8109502 <__retarget_lock_acquire_recursive>
 8108cce:	bf00      	nop
 8108cd0:	100002f6 	.word	0x100002f6

08108cd4 <__sinit_lock_release>:
 8108cd4:	4801      	ldr	r0, [pc, #4]	; (8108cdc <__sinit_lock_release+0x8>)
 8108cd6:	f000 bc15 	b.w	8109504 <__retarget_lock_release_recursive>
 8108cda:	bf00      	nop
 8108cdc:	100002f6 	.word	0x100002f6

08108ce0 <__sinit>:
 8108ce0:	b510      	push	{r4, lr}
 8108ce2:	4604      	mov	r4, r0
 8108ce4:	f7ff fff0 	bl	8108cc8 <__sinit_lock_acquire>
 8108ce8:	69a3      	ldr	r3, [r4, #24]
 8108cea:	b11b      	cbz	r3, 8108cf4 <__sinit+0x14>
 8108cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108cf0:	f7ff bff0 	b.w	8108cd4 <__sinit_lock_release>
 8108cf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8108cf8:	6523      	str	r3, [r4, #80]	; 0x50
 8108cfa:	4b13      	ldr	r3, [pc, #76]	; (8108d48 <__sinit+0x68>)
 8108cfc:	4a13      	ldr	r2, [pc, #76]	; (8108d4c <__sinit+0x6c>)
 8108cfe:	681b      	ldr	r3, [r3, #0]
 8108d00:	62a2      	str	r2, [r4, #40]	; 0x28
 8108d02:	42a3      	cmp	r3, r4
 8108d04:	bf04      	itt	eq
 8108d06:	2301      	moveq	r3, #1
 8108d08:	61a3      	streq	r3, [r4, #24]
 8108d0a:	4620      	mov	r0, r4
 8108d0c:	f000 f820 	bl	8108d50 <__sfp>
 8108d10:	6060      	str	r0, [r4, #4]
 8108d12:	4620      	mov	r0, r4
 8108d14:	f000 f81c 	bl	8108d50 <__sfp>
 8108d18:	60a0      	str	r0, [r4, #8]
 8108d1a:	4620      	mov	r0, r4
 8108d1c:	f000 f818 	bl	8108d50 <__sfp>
 8108d20:	2200      	movs	r2, #0
 8108d22:	60e0      	str	r0, [r4, #12]
 8108d24:	2104      	movs	r1, #4
 8108d26:	6860      	ldr	r0, [r4, #4]
 8108d28:	f7ff ff82 	bl	8108c30 <std>
 8108d2c:	68a0      	ldr	r0, [r4, #8]
 8108d2e:	2201      	movs	r2, #1
 8108d30:	2109      	movs	r1, #9
 8108d32:	f7ff ff7d 	bl	8108c30 <std>
 8108d36:	68e0      	ldr	r0, [r4, #12]
 8108d38:	2202      	movs	r2, #2
 8108d3a:	2112      	movs	r1, #18
 8108d3c:	f7ff ff78 	bl	8108c30 <std>
 8108d40:	2301      	movs	r3, #1
 8108d42:	61a3      	str	r3, [r4, #24]
 8108d44:	e7d2      	b.n	8108cec <__sinit+0xc>
 8108d46:	bf00      	nop
 8108d48:	0810ab80 	.word	0x0810ab80
 8108d4c:	08108c79 	.word	0x08108c79

08108d50 <__sfp>:
 8108d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108d52:	4607      	mov	r7, r0
 8108d54:	f7ff ffac 	bl	8108cb0 <__sfp_lock_acquire>
 8108d58:	4b1e      	ldr	r3, [pc, #120]	; (8108dd4 <__sfp+0x84>)
 8108d5a:	681e      	ldr	r6, [r3, #0]
 8108d5c:	69b3      	ldr	r3, [r6, #24]
 8108d5e:	b913      	cbnz	r3, 8108d66 <__sfp+0x16>
 8108d60:	4630      	mov	r0, r6
 8108d62:	f7ff ffbd 	bl	8108ce0 <__sinit>
 8108d66:	3648      	adds	r6, #72	; 0x48
 8108d68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8108d6c:	3b01      	subs	r3, #1
 8108d6e:	d503      	bpl.n	8108d78 <__sfp+0x28>
 8108d70:	6833      	ldr	r3, [r6, #0]
 8108d72:	b30b      	cbz	r3, 8108db8 <__sfp+0x68>
 8108d74:	6836      	ldr	r6, [r6, #0]
 8108d76:	e7f7      	b.n	8108d68 <__sfp+0x18>
 8108d78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8108d7c:	b9d5      	cbnz	r5, 8108db4 <__sfp+0x64>
 8108d7e:	4b16      	ldr	r3, [pc, #88]	; (8108dd8 <__sfp+0x88>)
 8108d80:	60e3      	str	r3, [r4, #12]
 8108d82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8108d86:	6665      	str	r5, [r4, #100]	; 0x64
 8108d88:	f000 fbba 	bl	8109500 <__retarget_lock_init_recursive>
 8108d8c:	f7ff ff96 	bl	8108cbc <__sfp_lock_release>
 8108d90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8108d94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8108d98:	6025      	str	r5, [r4, #0]
 8108d9a:	61a5      	str	r5, [r4, #24]
 8108d9c:	2208      	movs	r2, #8
 8108d9e:	4629      	mov	r1, r5
 8108da0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8108da4:	f7fd f966 	bl	8106074 <memset>
 8108da8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8108dac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8108db0:	4620      	mov	r0, r4
 8108db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108db4:	3468      	adds	r4, #104	; 0x68
 8108db6:	e7d9      	b.n	8108d6c <__sfp+0x1c>
 8108db8:	2104      	movs	r1, #4
 8108dba:	4638      	mov	r0, r7
 8108dbc:	f7ff ff62 	bl	8108c84 <__sfmoreglue>
 8108dc0:	4604      	mov	r4, r0
 8108dc2:	6030      	str	r0, [r6, #0]
 8108dc4:	2800      	cmp	r0, #0
 8108dc6:	d1d5      	bne.n	8108d74 <__sfp+0x24>
 8108dc8:	f7ff ff78 	bl	8108cbc <__sfp_lock_release>
 8108dcc:	230c      	movs	r3, #12
 8108dce:	603b      	str	r3, [r7, #0]
 8108dd0:	e7ee      	b.n	8108db0 <__sfp+0x60>
 8108dd2:	bf00      	nop
 8108dd4:	0810ab80 	.word	0x0810ab80
 8108dd8:	ffff0001 	.word	0xffff0001

08108ddc <_fwalk_reent>:
 8108ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108de0:	4606      	mov	r6, r0
 8108de2:	4688      	mov	r8, r1
 8108de4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8108de8:	2700      	movs	r7, #0
 8108dea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8108dee:	f1b9 0901 	subs.w	r9, r9, #1
 8108df2:	d505      	bpl.n	8108e00 <_fwalk_reent+0x24>
 8108df4:	6824      	ldr	r4, [r4, #0]
 8108df6:	2c00      	cmp	r4, #0
 8108df8:	d1f7      	bne.n	8108dea <_fwalk_reent+0xe>
 8108dfa:	4638      	mov	r0, r7
 8108dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108e00:	89ab      	ldrh	r3, [r5, #12]
 8108e02:	2b01      	cmp	r3, #1
 8108e04:	d907      	bls.n	8108e16 <_fwalk_reent+0x3a>
 8108e06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8108e0a:	3301      	adds	r3, #1
 8108e0c:	d003      	beq.n	8108e16 <_fwalk_reent+0x3a>
 8108e0e:	4629      	mov	r1, r5
 8108e10:	4630      	mov	r0, r6
 8108e12:	47c0      	blx	r8
 8108e14:	4307      	orrs	r7, r0
 8108e16:	3568      	adds	r5, #104	; 0x68
 8108e18:	e7e9      	b.n	8108dee <_fwalk_reent+0x12>

08108e1a <rshift>:
 8108e1a:	6903      	ldr	r3, [r0, #16]
 8108e1c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8108e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8108e24:	ea4f 1261 	mov.w	r2, r1, asr #5
 8108e28:	f100 0414 	add.w	r4, r0, #20
 8108e2c:	dd45      	ble.n	8108eba <rshift+0xa0>
 8108e2e:	f011 011f 	ands.w	r1, r1, #31
 8108e32:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8108e36:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8108e3a:	d10c      	bne.n	8108e56 <rshift+0x3c>
 8108e3c:	f100 0710 	add.w	r7, r0, #16
 8108e40:	4629      	mov	r1, r5
 8108e42:	42b1      	cmp	r1, r6
 8108e44:	d334      	bcc.n	8108eb0 <rshift+0x96>
 8108e46:	1a9b      	subs	r3, r3, r2
 8108e48:	009b      	lsls	r3, r3, #2
 8108e4a:	1eea      	subs	r2, r5, #3
 8108e4c:	4296      	cmp	r6, r2
 8108e4e:	bf38      	it	cc
 8108e50:	2300      	movcc	r3, #0
 8108e52:	4423      	add	r3, r4
 8108e54:	e015      	b.n	8108e82 <rshift+0x68>
 8108e56:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8108e5a:	f1c1 0820 	rsb	r8, r1, #32
 8108e5e:	40cf      	lsrs	r7, r1
 8108e60:	f105 0e04 	add.w	lr, r5, #4
 8108e64:	46a1      	mov	r9, r4
 8108e66:	4576      	cmp	r6, lr
 8108e68:	46f4      	mov	ip, lr
 8108e6a:	d815      	bhi.n	8108e98 <rshift+0x7e>
 8108e6c:	1a9a      	subs	r2, r3, r2
 8108e6e:	0092      	lsls	r2, r2, #2
 8108e70:	3a04      	subs	r2, #4
 8108e72:	3501      	adds	r5, #1
 8108e74:	42ae      	cmp	r6, r5
 8108e76:	bf38      	it	cc
 8108e78:	2200      	movcc	r2, #0
 8108e7a:	18a3      	adds	r3, r4, r2
 8108e7c:	50a7      	str	r7, [r4, r2]
 8108e7e:	b107      	cbz	r7, 8108e82 <rshift+0x68>
 8108e80:	3304      	adds	r3, #4
 8108e82:	1b1a      	subs	r2, r3, r4
 8108e84:	42a3      	cmp	r3, r4
 8108e86:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8108e8a:	bf08      	it	eq
 8108e8c:	2300      	moveq	r3, #0
 8108e8e:	6102      	str	r2, [r0, #16]
 8108e90:	bf08      	it	eq
 8108e92:	6143      	streq	r3, [r0, #20]
 8108e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108e98:	f8dc c000 	ldr.w	ip, [ip]
 8108e9c:	fa0c fc08 	lsl.w	ip, ip, r8
 8108ea0:	ea4c 0707 	orr.w	r7, ip, r7
 8108ea4:	f849 7b04 	str.w	r7, [r9], #4
 8108ea8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8108eac:	40cf      	lsrs	r7, r1
 8108eae:	e7da      	b.n	8108e66 <rshift+0x4c>
 8108eb0:	f851 cb04 	ldr.w	ip, [r1], #4
 8108eb4:	f847 cf04 	str.w	ip, [r7, #4]!
 8108eb8:	e7c3      	b.n	8108e42 <rshift+0x28>
 8108eba:	4623      	mov	r3, r4
 8108ebc:	e7e1      	b.n	8108e82 <rshift+0x68>

08108ebe <__hexdig_fun>:
 8108ebe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8108ec2:	2b09      	cmp	r3, #9
 8108ec4:	d802      	bhi.n	8108ecc <__hexdig_fun+0xe>
 8108ec6:	3820      	subs	r0, #32
 8108ec8:	b2c0      	uxtb	r0, r0
 8108eca:	4770      	bx	lr
 8108ecc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8108ed0:	2b05      	cmp	r3, #5
 8108ed2:	d801      	bhi.n	8108ed8 <__hexdig_fun+0x1a>
 8108ed4:	3847      	subs	r0, #71	; 0x47
 8108ed6:	e7f7      	b.n	8108ec8 <__hexdig_fun+0xa>
 8108ed8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8108edc:	2b05      	cmp	r3, #5
 8108ede:	d801      	bhi.n	8108ee4 <__hexdig_fun+0x26>
 8108ee0:	3827      	subs	r0, #39	; 0x27
 8108ee2:	e7f1      	b.n	8108ec8 <__hexdig_fun+0xa>
 8108ee4:	2000      	movs	r0, #0
 8108ee6:	4770      	bx	lr

08108ee8 <__gethex>:
 8108ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108eec:	ed2d 8b02 	vpush	{d8}
 8108ef0:	b089      	sub	sp, #36	; 0x24
 8108ef2:	ee08 0a10 	vmov	s16, r0
 8108ef6:	9304      	str	r3, [sp, #16]
 8108ef8:	4bb4      	ldr	r3, [pc, #720]	; (81091cc <__gethex+0x2e4>)
 8108efa:	681b      	ldr	r3, [r3, #0]
 8108efc:	9301      	str	r3, [sp, #4]
 8108efe:	4618      	mov	r0, r3
 8108f00:	468b      	mov	fp, r1
 8108f02:	4690      	mov	r8, r2
 8108f04:	f7f7 f9ec 	bl	81002e0 <strlen>
 8108f08:	9b01      	ldr	r3, [sp, #4]
 8108f0a:	f8db 2000 	ldr.w	r2, [fp]
 8108f0e:	4403      	add	r3, r0
 8108f10:	4682      	mov	sl, r0
 8108f12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8108f16:	9305      	str	r3, [sp, #20]
 8108f18:	1c93      	adds	r3, r2, #2
 8108f1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8108f1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8108f22:	32fe      	adds	r2, #254	; 0xfe
 8108f24:	18d1      	adds	r1, r2, r3
 8108f26:	461f      	mov	r7, r3
 8108f28:	f813 0b01 	ldrb.w	r0, [r3], #1
 8108f2c:	9100      	str	r1, [sp, #0]
 8108f2e:	2830      	cmp	r0, #48	; 0x30
 8108f30:	d0f8      	beq.n	8108f24 <__gethex+0x3c>
 8108f32:	f7ff ffc4 	bl	8108ebe <__hexdig_fun>
 8108f36:	4604      	mov	r4, r0
 8108f38:	2800      	cmp	r0, #0
 8108f3a:	d13a      	bne.n	8108fb2 <__gethex+0xca>
 8108f3c:	9901      	ldr	r1, [sp, #4]
 8108f3e:	4652      	mov	r2, sl
 8108f40:	4638      	mov	r0, r7
 8108f42:	f001 fc38 	bl	810a7b6 <strncmp>
 8108f46:	4605      	mov	r5, r0
 8108f48:	2800      	cmp	r0, #0
 8108f4a:	d168      	bne.n	810901e <__gethex+0x136>
 8108f4c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8108f50:	eb07 060a 	add.w	r6, r7, sl
 8108f54:	f7ff ffb3 	bl	8108ebe <__hexdig_fun>
 8108f58:	2800      	cmp	r0, #0
 8108f5a:	d062      	beq.n	8109022 <__gethex+0x13a>
 8108f5c:	4633      	mov	r3, r6
 8108f5e:	7818      	ldrb	r0, [r3, #0]
 8108f60:	2830      	cmp	r0, #48	; 0x30
 8108f62:	461f      	mov	r7, r3
 8108f64:	f103 0301 	add.w	r3, r3, #1
 8108f68:	d0f9      	beq.n	8108f5e <__gethex+0x76>
 8108f6a:	f7ff ffa8 	bl	8108ebe <__hexdig_fun>
 8108f6e:	2301      	movs	r3, #1
 8108f70:	fab0 f480 	clz	r4, r0
 8108f74:	0964      	lsrs	r4, r4, #5
 8108f76:	4635      	mov	r5, r6
 8108f78:	9300      	str	r3, [sp, #0]
 8108f7a:	463a      	mov	r2, r7
 8108f7c:	4616      	mov	r6, r2
 8108f7e:	3201      	adds	r2, #1
 8108f80:	7830      	ldrb	r0, [r6, #0]
 8108f82:	f7ff ff9c 	bl	8108ebe <__hexdig_fun>
 8108f86:	2800      	cmp	r0, #0
 8108f88:	d1f8      	bne.n	8108f7c <__gethex+0x94>
 8108f8a:	9901      	ldr	r1, [sp, #4]
 8108f8c:	4652      	mov	r2, sl
 8108f8e:	4630      	mov	r0, r6
 8108f90:	f001 fc11 	bl	810a7b6 <strncmp>
 8108f94:	b980      	cbnz	r0, 8108fb8 <__gethex+0xd0>
 8108f96:	b94d      	cbnz	r5, 8108fac <__gethex+0xc4>
 8108f98:	eb06 050a 	add.w	r5, r6, sl
 8108f9c:	462a      	mov	r2, r5
 8108f9e:	4616      	mov	r6, r2
 8108fa0:	3201      	adds	r2, #1
 8108fa2:	7830      	ldrb	r0, [r6, #0]
 8108fa4:	f7ff ff8b 	bl	8108ebe <__hexdig_fun>
 8108fa8:	2800      	cmp	r0, #0
 8108faa:	d1f8      	bne.n	8108f9e <__gethex+0xb6>
 8108fac:	1bad      	subs	r5, r5, r6
 8108fae:	00ad      	lsls	r5, r5, #2
 8108fb0:	e004      	b.n	8108fbc <__gethex+0xd4>
 8108fb2:	2400      	movs	r4, #0
 8108fb4:	4625      	mov	r5, r4
 8108fb6:	e7e0      	b.n	8108f7a <__gethex+0x92>
 8108fb8:	2d00      	cmp	r5, #0
 8108fba:	d1f7      	bne.n	8108fac <__gethex+0xc4>
 8108fbc:	7833      	ldrb	r3, [r6, #0]
 8108fbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8108fc2:	2b50      	cmp	r3, #80	; 0x50
 8108fc4:	d13b      	bne.n	810903e <__gethex+0x156>
 8108fc6:	7873      	ldrb	r3, [r6, #1]
 8108fc8:	2b2b      	cmp	r3, #43	; 0x2b
 8108fca:	d02c      	beq.n	8109026 <__gethex+0x13e>
 8108fcc:	2b2d      	cmp	r3, #45	; 0x2d
 8108fce:	d02e      	beq.n	810902e <__gethex+0x146>
 8108fd0:	1c71      	adds	r1, r6, #1
 8108fd2:	f04f 0900 	mov.w	r9, #0
 8108fd6:	7808      	ldrb	r0, [r1, #0]
 8108fd8:	f7ff ff71 	bl	8108ebe <__hexdig_fun>
 8108fdc:	1e43      	subs	r3, r0, #1
 8108fde:	b2db      	uxtb	r3, r3
 8108fe0:	2b18      	cmp	r3, #24
 8108fe2:	d82c      	bhi.n	810903e <__gethex+0x156>
 8108fe4:	f1a0 0210 	sub.w	r2, r0, #16
 8108fe8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8108fec:	f7ff ff67 	bl	8108ebe <__hexdig_fun>
 8108ff0:	1e43      	subs	r3, r0, #1
 8108ff2:	b2db      	uxtb	r3, r3
 8108ff4:	2b18      	cmp	r3, #24
 8108ff6:	d91d      	bls.n	8109034 <__gethex+0x14c>
 8108ff8:	f1b9 0f00 	cmp.w	r9, #0
 8108ffc:	d000      	beq.n	8109000 <__gethex+0x118>
 8108ffe:	4252      	negs	r2, r2
 8109000:	4415      	add	r5, r2
 8109002:	f8cb 1000 	str.w	r1, [fp]
 8109006:	b1e4      	cbz	r4, 8109042 <__gethex+0x15a>
 8109008:	9b00      	ldr	r3, [sp, #0]
 810900a:	2b00      	cmp	r3, #0
 810900c:	bf14      	ite	ne
 810900e:	2700      	movne	r7, #0
 8109010:	2706      	moveq	r7, #6
 8109012:	4638      	mov	r0, r7
 8109014:	b009      	add	sp, #36	; 0x24
 8109016:	ecbd 8b02 	vpop	{d8}
 810901a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810901e:	463e      	mov	r6, r7
 8109020:	4625      	mov	r5, r4
 8109022:	2401      	movs	r4, #1
 8109024:	e7ca      	b.n	8108fbc <__gethex+0xd4>
 8109026:	f04f 0900 	mov.w	r9, #0
 810902a:	1cb1      	adds	r1, r6, #2
 810902c:	e7d3      	b.n	8108fd6 <__gethex+0xee>
 810902e:	f04f 0901 	mov.w	r9, #1
 8109032:	e7fa      	b.n	810902a <__gethex+0x142>
 8109034:	230a      	movs	r3, #10
 8109036:	fb03 0202 	mla	r2, r3, r2, r0
 810903a:	3a10      	subs	r2, #16
 810903c:	e7d4      	b.n	8108fe8 <__gethex+0x100>
 810903e:	4631      	mov	r1, r6
 8109040:	e7df      	b.n	8109002 <__gethex+0x11a>
 8109042:	1bf3      	subs	r3, r6, r7
 8109044:	3b01      	subs	r3, #1
 8109046:	4621      	mov	r1, r4
 8109048:	2b07      	cmp	r3, #7
 810904a:	dc0b      	bgt.n	8109064 <__gethex+0x17c>
 810904c:	ee18 0a10 	vmov	r0, s16
 8109050:	f000 fae6 	bl	8109620 <_Balloc>
 8109054:	4604      	mov	r4, r0
 8109056:	b940      	cbnz	r0, 810906a <__gethex+0x182>
 8109058:	4b5d      	ldr	r3, [pc, #372]	; (81091d0 <__gethex+0x2e8>)
 810905a:	4602      	mov	r2, r0
 810905c:	21de      	movs	r1, #222	; 0xde
 810905e:	485d      	ldr	r0, [pc, #372]	; (81091d4 <__gethex+0x2ec>)
 8109060:	f001 fbdc 	bl	810a81c <__assert_func>
 8109064:	3101      	adds	r1, #1
 8109066:	105b      	asrs	r3, r3, #1
 8109068:	e7ee      	b.n	8109048 <__gethex+0x160>
 810906a:	f100 0914 	add.w	r9, r0, #20
 810906e:	f04f 0b00 	mov.w	fp, #0
 8109072:	f1ca 0301 	rsb	r3, sl, #1
 8109076:	f8cd 9008 	str.w	r9, [sp, #8]
 810907a:	f8cd b000 	str.w	fp, [sp]
 810907e:	9306      	str	r3, [sp, #24]
 8109080:	42b7      	cmp	r7, r6
 8109082:	d340      	bcc.n	8109106 <__gethex+0x21e>
 8109084:	9802      	ldr	r0, [sp, #8]
 8109086:	9b00      	ldr	r3, [sp, #0]
 8109088:	f840 3b04 	str.w	r3, [r0], #4
 810908c:	eba0 0009 	sub.w	r0, r0, r9
 8109090:	1080      	asrs	r0, r0, #2
 8109092:	0146      	lsls	r6, r0, #5
 8109094:	6120      	str	r0, [r4, #16]
 8109096:	4618      	mov	r0, r3
 8109098:	f000 fbb4 	bl	8109804 <__hi0bits>
 810909c:	1a30      	subs	r0, r6, r0
 810909e:	f8d8 6000 	ldr.w	r6, [r8]
 81090a2:	42b0      	cmp	r0, r6
 81090a4:	dd63      	ble.n	810916e <__gethex+0x286>
 81090a6:	1b87      	subs	r7, r0, r6
 81090a8:	4639      	mov	r1, r7
 81090aa:	4620      	mov	r0, r4
 81090ac:	f000 ff58 	bl	8109f60 <__any_on>
 81090b0:	4682      	mov	sl, r0
 81090b2:	b1a8      	cbz	r0, 81090e0 <__gethex+0x1f8>
 81090b4:	1e7b      	subs	r3, r7, #1
 81090b6:	1159      	asrs	r1, r3, #5
 81090b8:	f003 021f 	and.w	r2, r3, #31
 81090bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 81090c0:	f04f 0a01 	mov.w	sl, #1
 81090c4:	fa0a f202 	lsl.w	r2, sl, r2
 81090c8:	420a      	tst	r2, r1
 81090ca:	d009      	beq.n	81090e0 <__gethex+0x1f8>
 81090cc:	4553      	cmp	r3, sl
 81090ce:	dd05      	ble.n	81090dc <__gethex+0x1f4>
 81090d0:	1eb9      	subs	r1, r7, #2
 81090d2:	4620      	mov	r0, r4
 81090d4:	f000 ff44 	bl	8109f60 <__any_on>
 81090d8:	2800      	cmp	r0, #0
 81090da:	d145      	bne.n	8109168 <__gethex+0x280>
 81090dc:	f04f 0a02 	mov.w	sl, #2
 81090e0:	4639      	mov	r1, r7
 81090e2:	4620      	mov	r0, r4
 81090e4:	f7ff fe99 	bl	8108e1a <rshift>
 81090e8:	443d      	add	r5, r7
 81090ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 81090ee:	42ab      	cmp	r3, r5
 81090f0:	da4c      	bge.n	810918c <__gethex+0x2a4>
 81090f2:	ee18 0a10 	vmov	r0, s16
 81090f6:	4621      	mov	r1, r4
 81090f8:	f000 fad2 	bl	81096a0 <_Bfree>
 81090fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 81090fe:	2300      	movs	r3, #0
 8109100:	6013      	str	r3, [r2, #0]
 8109102:	27a3      	movs	r7, #163	; 0xa3
 8109104:	e785      	b.n	8109012 <__gethex+0x12a>
 8109106:	1e73      	subs	r3, r6, #1
 8109108:	9a05      	ldr	r2, [sp, #20]
 810910a:	9303      	str	r3, [sp, #12]
 810910c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8109110:	4293      	cmp	r3, r2
 8109112:	d019      	beq.n	8109148 <__gethex+0x260>
 8109114:	f1bb 0f20 	cmp.w	fp, #32
 8109118:	d107      	bne.n	810912a <__gethex+0x242>
 810911a:	9b02      	ldr	r3, [sp, #8]
 810911c:	9a00      	ldr	r2, [sp, #0]
 810911e:	f843 2b04 	str.w	r2, [r3], #4
 8109122:	9302      	str	r3, [sp, #8]
 8109124:	2300      	movs	r3, #0
 8109126:	9300      	str	r3, [sp, #0]
 8109128:	469b      	mov	fp, r3
 810912a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810912e:	f7ff fec6 	bl	8108ebe <__hexdig_fun>
 8109132:	9b00      	ldr	r3, [sp, #0]
 8109134:	f000 000f 	and.w	r0, r0, #15
 8109138:	fa00 f00b 	lsl.w	r0, r0, fp
 810913c:	4303      	orrs	r3, r0
 810913e:	9300      	str	r3, [sp, #0]
 8109140:	f10b 0b04 	add.w	fp, fp, #4
 8109144:	9b03      	ldr	r3, [sp, #12]
 8109146:	e00d      	b.n	8109164 <__gethex+0x27c>
 8109148:	9b03      	ldr	r3, [sp, #12]
 810914a:	9a06      	ldr	r2, [sp, #24]
 810914c:	4413      	add	r3, r2
 810914e:	42bb      	cmp	r3, r7
 8109150:	d3e0      	bcc.n	8109114 <__gethex+0x22c>
 8109152:	4618      	mov	r0, r3
 8109154:	9901      	ldr	r1, [sp, #4]
 8109156:	9307      	str	r3, [sp, #28]
 8109158:	4652      	mov	r2, sl
 810915a:	f001 fb2c 	bl	810a7b6 <strncmp>
 810915e:	9b07      	ldr	r3, [sp, #28]
 8109160:	2800      	cmp	r0, #0
 8109162:	d1d7      	bne.n	8109114 <__gethex+0x22c>
 8109164:	461e      	mov	r6, r3
 8109166:	e78b      	b.n	8109080 <__gethex+0x198>
 8109168:	f04f 0a03 	mov.w	sl, #3
 810916c:	e7b8      	b.n	81090e0 <__gethex+0x1f8>
 810916e:	da0a      	bge.n	8109186 <__gethex+0x29e>
 8109170:	1a37      	subs	r7, r6, r0
 8109172:	4621      	mov	r1, r4
 8109174:	ee18 0a10 	vmov	r0, s16
 8109178:	463a      	mov	r2, r7
 810917a:	f000 fcad 	bl	8109ad8 <__lshift>
 810917e:	1bed      	subs	r5, r5, r7
 8109180:	4604      	mov	r4, r0
 8109182:	f100 0914 	add.w	r9, r0, #20
 8109186:	f04f 0a00 	mov.w	sl, #0
 810918a:	e7ae      	b.n	81090ea <__gethex+0x202>
 810918c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8109190:	42a8      	cmp	r0, r5
 8109192:	dd72      	ble.n	810927a <__gethex+0x392>
 8109194:	1b45      	subs	r5, r0, r5
 8109196:	42ae      	cmp	r6, r5
 8109198:	dc36      	bgt.n	8109208 <__gethex+0x320>
 810919a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810919e:	2b02      	cmp	r3, #2
 81091a0:	d02a      	beq.n	81091f8 <__gethex+0x310>
 81091a2:	2b03      	cmp	r3, #3
 81091a4:	d02c      	beq.n	8109200 <__gethex+0x318>
 81091a6:	2b01      	cmp	r3, #1
 81091a8:	d11c      	bne.n	81091e4 <__gethex+0x2fc>
 81091aa:	42ae      	cmp	r6, r5
 81091ac:	d11a      	bne.n	81091e4 <__gethex+0x2fc>
 81091ae:	2e01      	cmp	r6, #1
 81091b0:	d112      	bne.n	81091d8 <__gethex+0x2f0>
 81091b2:	9a04      	ldr	r2, [sp, #16]
 81091b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 81091b8:	6013      	str	r3, [r2, #0]
 81091ba:	2301      	movs	r3, #1
 81091bc:	6123      	str	r3, [r4, #16]
 81091be:	f8c9 3000 	str.w	r3, [r9]
 81091c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 81091c4:	2762      	movs	r7, #98	; 0x62
 81091c6:	601c      	str	r4, [r3, #0]
 81091c8:	e723      	b.n	8109012 <__gethex+0x12a>
 81091ca:	bf00      	nop
 81091cc:	0810ae6c 	.word	0x0810ae6c
 81091d0:	0810ad90 	.word	0x0810ad90
 81091d4:	0810ae04 	.word	0x0810ae04
 81091d8:	1e71      	subs	r1, r6, #1
 81091da:	4620      	mov	r0, r4
 81091dc:	f000 fec0 	bl	8109f60 <__any_on>
 81091e0:	2800      	cmp	r0, #0
 81091e2:	d1e6      	bne.n	81091b2 <__gethex+0x2ca>
 81091e4:	ee18 0a10 	vmov	r0, s16
 81091e8:	4621      	mov	r1, r4
 81091ea:	f000 fa59 	bl	81096a0 <_Bfree>
 81091ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 81091f0:	2300      	movs	r3, #0
 81091f2:	6013      	str	r3, [r2, #0]
 81091f4:	2750      	movs	r7, #80	; 0x50
 81091f6:	e70c      	b.n	8109012 <__gethex+0x12a>
 81091f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81091fa:	2b00      	cmp	r3, #0
 81091fc:	d1f2      	bne.n	81091e4 <__gethex+0x2fc>
 81091fe:	e7d8      	b.n	81091b2 <__gethex+0x2ca>
 8109200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109202:	2b00      	cmp	r3, #0
 8109204:	d1d5      	bne.n	81091b2 <__gethex+0x2ca>
 8109206:	e7ed      	b.n	81091e4 <__gethex+0x2fc>
 8109208:	1e6f      	subs	r7, r5, #1
 810920a:	f1ba 0f00 	cmp.w	sl, #0
 810920e:	d131      	bne.n	8109274 <__gethex+0x38c>
 8109210:	b127      	cbz	r7, 810921c <__gethex+0x334>
 8109212:	4639      	mov	r1, r7
 8109214:	4620      	mov	r0, r4
 8109216:	f000 fea3 	bl	8109f60 <__any_on>
 810921a:	4682      	mov	sl, r0
 810921c:	117b      	asrs	r3, r7, #5
 810921e:	2101      	movs	r1, #1
 8109220:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8109224:	f007 071f 	and.w	r7, r7, #31
 8109228:	fa01 f707 	lsl.w	r7, r1, r7
 810922c:	421f      	tst	r7, r3
 810922e:	4629      	mov	r1, r5
 8109230:	4620      	mov	r0, r4
 8109232:	bf18      	it	ne
 8109234:	f04a 0a02 	orrne.w	sl, sl, #2
 8109238:	1b76      	subs	r6, r6, r5
 810923a:	f7ff fdee 	bl	8108e1a <rshift>
 810923e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8109242:	2702      	movs	r7, #2
 8109244:	f1ba 0f00 	cmp.w	sl, #0
 8109248:	d048      	beq.n	81092dc <__gethex+0x3f4>
 810924a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810924e:	2b02      	cmp	r3, #2
 8109250:	d015      	beq.n	810927e <__gethex+0x396>
 8109252:	2b03      	cmp	r3, #3
 8109254:	d017      	beq.n	8109286 <__gethex+0x39e>
 8109256:	2b01      	cmp	r3, #1
 8109258:	d109      	bne.n	810926e <__gethex+0x386>
 810925a:	f01a 0f02 	tst.w	sl, #2
 810925e:	d006      	beq.n	810926e <__gethex+0x386>
 8109260:	f8d9 0000 	ldr.w	r0, [r9]
 8109264:	ea4a 0a00 	orr.w	sl, sl, r0
 8109268:	f01a 0f01 	tst.w	sl, #1
 810926c:	d10e      	bne.n	810928c <__gethex+0x3a4>
 810926e:	f047 0710 	orr.w	r7, r7, #16
 8109272:	e033      	b.n	81092dc <__gethex+0x3f4>
 8109274:	f04f 0a01 	mov.w	sl, #1
 8109278:	e7d0      	b.n	810921c <__gethex+0x334>
 810927a:	2701      	movs	r7, #1
 810927c:	e7e2      	b.n	8109244 <__gethex+0x35c>
 810927e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109280:	f1c3 0301 	rsb	r3, r3, #1
 8109284:	9315      	str	r3, [sp, #84]	; 0x54
 8109286:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109288:	2b00      	cmp	r3, #0
 810928a:	d0f0      	beq.n	810926e <__gethex+0x386>
 810928c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8109290:	f104 0314 	add.w	r3, r4, #20
 8109294:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8109298:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810929c:	f04f 0c00 	mov.w	ip, #0
 81092a0:	4618      	mov	r0, r3
 81092a2:	f853 2b04 	ldr.w	r2, [r3], #4
 81092a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 81092aa:	d01c      	beq.n	81092e6 <__gethex+0x3fe>
 81092ac:	3201      	adds	r2, #1
 81092ae:	6002      	str	r2, [r0, #0]
 81092b0:	2f02      	cmp	r7, #2
 81092b2:	f104 0314 	add.w	r3, r4, #20
 81092b6:	d13f      	bne.n	8109338 <__gethex+0x450>
 81092b8:	f8d8 2000 	ldr.w	r2, [r8]
 81092bc:	3a01      	subs	r2, #1
 81092be:	42b2      	cmp	r2, r6
 81092c0:	d10a      	bne.n	81092d8 <__gethex+0x3f0>
 81092c2:	1171      	asrs	r1, r6, #5
 81092c4:	2201      	movs	r2, #1
 81092c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 81092ca:	f006 061f 	and.w	r6, r6, #31
 81092ce:	fa02 f606 	lsl.w	r6, r2, r6
 81092d2:	421e      	tst	r6, r3
 81092d4:	bf18      	it	ne
 81092d6:	4617      	movne	r7, r2
 81092d8:	f047 0720 	orr.w	r7, r7, #32
 81092dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 81092de:	601c      	str	r4, [r3, #0]
 81092e0:	9b04      	ldr	r3, [sp, #16]
 81092e2:	601d      	str	r5, [r3, #0]
 81092e4:	e695      	b.n	8109012 <__gethex+0x12a>
 81092e6:	4299      	cmp	r1, r3
 81092e8:	f843 cc04 	str.w	ip, [r3, #-4]
 81092ec:	d8d8      	bhi.n	81092a0 <__gethex+0x3b8>
 81092ee:	68a3      	ldr	r3, [r4, #8]
 81092f0:	459b      	cmp	fp, r3
 81092f2:	db19      	blt.n	8109328 <__gethex+0x440>
 81092f4:	6861      	ldr	r1, [r4, #4]
 81092f6:	ee18 0a10 	vmov	r0, s16
 81092fa:	3101      	adds	r1, #1
 81092fc:	f000 f990 	bl	8109620 <_Balloc>
 8109300:	4681      	mov	r9, r0
 8109302:	b918      	cbnz	r0, 810930c <__gethex+0x424>
 8109304:	4b1a      	ldr	r3, [pc, #104]	; (8109370 <__gethex+0x488>)
 8109306:	4602      	mov	r2, r0
 8109308:	2184      	movs	r1, #132	; 0x84
 810930a:	e6a8      	b.n	810905e <__gethex+0x176>
 810930c:	6922      	ldr	r2, [r4, #16]
 810930e:	3202      	adds	r2, #2
 8109310:	f104 010c 	add.w	r1, r4, #12
 8109314:	0092      	lsls	r2, r2, #2
 8109316:	300c      	adds	r0, #12
 8109318:	f000 f974 	bl	8109604 <memcpy>
 810931c:	4621      	mov	r1, r4
 810931e:	ee18 0a10 	vmov	r0, s16
 8109322:	f000 f9bd 	bl	81096a0 <_Bfree>
 8109326:	464c      	mov	r4, r9
 8109328:	6923      	ldr	r3, [r4, #16]
 810932a:	1c5a      	adds	r2, r3, #1
 810932c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8109330:	6122      	str	r2, [r4, #16]
 8109332:	2201      	movs	r2, #1
 8109334:	615a      	str	r2, [r3, #20]
 8109336:	e7bb      	b.n	81092b0 <__gethex+0x3c8>
 8109338:	6922      	ldr	r2, [r4, #16]
 810933a:	455a      	cmp	r2, fp
 810933c:	dd0b      	ble.n	8109356 <__gethex+0x46e>
 810933e:	2101      	movs	r1, #1
 8109340:	4620      	mov	r0, r4
 8109342:	f7ff fd6a 	bl	8108e1a <rshift>
 8109346:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810934a:	3501      	adds	r5, #1
 810934c:	42ab      	cmp	r3, r5
 810934e:	f6ff aed0 	blt.w	81090f2 <__gethex+0x20a>
 8109352:	2701      	movs	r7, #1
 8109354:	e7c0      	b.n	81092d8 <__gethex+0x3f0>
 8109356:	f016 061f 	ands.w	r6, r6, #31
 810935a:	d0fa      	beq.n	8109352 <__gethex+0x46a>
 810935c:	4453      	add	r3, sl
 810935e:	f1c6 0620 	rsb	r6, r6, #32
 8109362:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8109366:	f000 fa4d 	bl	8109804 <__hi0bits>
 810936a:	42b0      	cmp	r0, r6
 810936c:	dbe7      	blt.n	810933e <__gethex+0x456>
 810936e:	e7f0      	b.n	8109352 <__gethex+0x46a>
 8109370:	0810ad90 	.word	0x0810ad90

08109374 <L_shift>:
 8109374:	f1c2 0208 	rsb	r2, r2, #8
 8109378:	0092      	lsls	r2, r2, #2
 810937a:	b570      	push	{r4, r5, r6, lr}
 810937c:	f1c2 0620 	rsb	r6, r2, #32
 8109380:	6843      	ldr	r3, [r0, #4]
 8109382:	6804      	ldr	r4, [r0, #0]
 8109384:	fa03 f506 	lsl.w	r5, r3, r6
 8109388:	432c      	orrs	r4, r5
 810938a:	40d3      	lsrs	r3, r2
 810938c:	6004      	str	r4, [r0, #0]
 810938e:	f840 3f04 	str.w	r3, [r0, #4]!
 8109392:	4288      	cmp	r0, r1
 8109394:	d3f4      	bcc.n	8109380 <L_shift+0xc>
 8109396:	bd70      	pop	{r4, r5, r6, pc}

08109398 <__match>:
 8109398:	b530      	push	{r4, r5, lr}
 810939a:	6803      	ldr	r3, [r0, #0]
 810939c:	3301      	adds	r3, #1
 810939e:	f811 4b01 	ldrb.w	r4, [r1], #1
 81093a2:	b914      	cbnz	r4, 81093aa <__match+0x12>
 81093a4:	6003      	str	r3, [r0, #0]
 81093a6:	2001      	movs	r0, #1
 81093a8:	bd30      	pop	{r4, r5, pc}
 81093aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 81093ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 81093b2:	2d19      	cmp	r5, #25
 81093b4:	bf98      	it	ls
 81093b6:	3220      	addls	r2, #32
 81093b8:	42a2      	cmp	r2, r4
 81093ba:	d0f0      	beq.n	810939e <__match+0x6>
 81093bc:	2000      	movs	r0, #0
 81093be:	e7f3      	b.n	81093a8 <__match+0x10>

081093c0 <__hexnan>:
 81093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81093c4:	680b      	ldr	r3, [r1, #0]
 81093c6:	115e      	asrs	r6, r3, #5
 81093c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 81093cc:	f013 031f 	ands.w	r3, r3, #31
 81093d0:	b087      	sub	sp, #28
 81093d2:	bf18      	it	ne
 81093d4:	3604      	addne	r6, #4
 81093d6:	2500      	movs	r5, #0
 81093d8:	1f37      	subs	r7, r6, #4
 81093da:	4690      	mov	r8, r2
 81093dc:	6802      	ldr	r2, [r0, #0]
 81093de:	9301      	str	r3, [sp, #4]
 81093e0:	4682      	mov	sl, r0
 81093e2:	f846 5c04 	str.w	r5, [r6, #-4]
 81093e6:	46b9      	mov	r9, r7
 81093e8:	463c      	mov	r4, r7
 81093ea:	9502      	str	r5, [sp, #8]
 81093ec:	46ab      	mov	fp, r5
 81093ee:	7851      	ldrb	r1, [r2, #1]
 81093f0:	1c53      	adds	r3, r2, #1
 81093f2:	9303      	str	r3, [sp, #12]
 81093f4:	b341      	cbz	r1, 8109448 <__hexnan+0x88>
 81093f6:	4608      	mov	r0, r1
 81093f8:	9205      	str	r2, [sp, #20]
 81093fa:	9104      	str	r1, [sp, #16]
 81093fc:	f7ff fd5f 	bl	8108ebe <__hexdig_fun>
 8109400:	2800      	cmp	r0, #0
 8109402:	d14f      	bne.n	81094a4 <__hexnan+0xe4>
 8109404:	9904      	ldr	r1, [sp, #16]
 8109406:	9a05      	ldr	r2, [sp, #20]
 8109408:	2920      	cmp	r1, #32
 810940a:	d818      	bhi.n	810943e <__hexnan+0x7e>
 810940c:	9b02      	ldr	r3, [sp, #8]
 810940e:	459b      	cmp	fp, r3
 8109410:	dd13      	ble.n	810943a <__hexnan+0x7a>
 8109412:	454c      	cmp	r4, r9
 8109414:	d206      	bcs.n	8109424 <__hexnan+0x64>
 8109416:	2d07      	cmp	r5, #7
 8109418:	dc04      	bgt.n	8109424 <__hexnan+0x64>
 810941a:	462a      	mov	r2, r5
 810941c:	4649      	mov	r1, r9
 810941e:	4620      	mov	r0, r4
 8109420:	f7ff ffa8 	bl	8109374 <L_shift>
 8109424:	4544      	cmp	r4, r8
 8109426:	d950      	bls.n	81094ca <__hexnan+0x10a>
 8109428:	2300      	movs	r3, #0
 810942a:	f1a4 0904 	sub.w	r9, r4, #4
 810942e:	f844 3c04 	str.w	r3, [r4, #-4]
 8109432:	f8cd b008 	str.w	fp, [sp, #8]
 8109436:	464c      	mov	r4, r9
 8109438:	461d      	mov	r5, r3
 810943a:	9a03      	ldr	r2, [sp, #12]
 810943c:	e7d7      	b.n	81093ee <__hexnan+0x2e>
 810943e:	2929      	cmp	r1, #41	; 0x29
 8109440:	d156      	bne.n	81094f0 <__hexnan+0x130>
 8109442:	3202      	adds	r2, #2
 8109444:	f8ca 2000 	str.w	r2, [sl]
 8109448:	f1bb 0f00 	cmp.w	fp, #0
 810944c:	d050      	beq.n	81094f0 <__hexnan+0x130>
 810944e:	454c      	cmp	r4, r9
 8109450:	d206      	bcs.n	8109460 <__hexnan+0xa0>
 8109452:	2d07      	cmp	r5, #7
 8109454:	dc04      	bgt.n	8109460 <__hexnan+0xa0>
 8109456:	462a      	mov	r2, r5
 8109458:	4649      	mov	r1, r9
 810945a:	4620      	mov	r0, r4
 810945c:	f7ff ff8a 	bl	8109374 <L_shift>
 8109460:	4544      	cmp	r4, r8
 8109462:	d934      	bls.n	81094ce <__hexnan+0x10e>
 8109464:	f1a8 0204 	sub.w	r2, r8, #4
 8109468:	4623      	mov	r3, r4
 810946a:	f853 1b04 	ldr.w	r1, [r3], #4
 810946e:	f842 1f04 	str.w	r1, [r2, #4]!
 8109472:	429f      	cmp	r7, r3
 8109474:	d2f9      	bcs.n	810946a <__hexnan+0xaa>
 8109476:	1b3b      	subs	r3, r7, r4
 8109478:	f023 0303 	bic.w	r3, r3, #3
 810947c:	3304      	adds	r3, #4
 810947e:	3401      	adds	r4, #1
 8109480:	3e03      	subs	r6, #3
 8109482:	42b4      	cmp	r4, r6
 8109484:	bf88      	it	hi
 8109486:	2304      	movhi	r3, #4
 8109488:	4443      	add	r3, r8
 810948a:	2200      	movs	r2, #0
 810948c:	f843 2b04 	str.w	r2, [r3], #4
 8109490:	429f      	cmp	r7, r3
 8109492:	d2fb      	bcs.n	810948c <__hexnan+0xcc>
 8109494:	683b      	ldr	r3, [r7, #0]
 8109496:	b91b      	cbnz	r3, 81094a0 <__hexnan+0xe0>
 8109498:	4547      	cmp	r7, r8
 810949a:	d127      	bne.n	81094ec <__hexnan+0x12c>
 810949c:	2301      	movs	r3, #1
 810949e:	603b      	str	r3, [r7, #0]
 81094a0:	2005      	movs	r0, #5
 81094a2:	e026      	b.n	81094f2 <__hexnan+0x132>
 81094a4:	3501      	adds	r5, #1
 81094a6:	2d08      	cmp	r5, #8
 81094a8:	f10b 0b01 	add.w	fp, fp, #1
 81094ac:	dd06      	ble.n	81094bc <__hexnan+0xfc>
 81094ae:	4544      	cmp	r4, r8
 81094b0:	d9c3      	bls.n	810943a <__hexnan+0x7a>
 81094b2:	2300      	movs	r3, #0
 81094b4:	f844 3c04 	str.w	r3, [r4, #-4]
 81094b8:	2501      	movs	r5, #1
 81094ba:	3c04      	subs	r4, #4
 81094bc:	6822      	ldr	r2, [r4, #0]
 81094be:	f000 000f 	and.w	r0, r0, #15
 81094c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 81094c6:	6022      	str	r2, [r4, #0]
 81094c8:	e7b7      	b.n	810943a <__hexnan+0x7a>
 81094ca:	2508      	movs	r5, #8
 81094cc:	e7b5      	b.n	810943a <__hexnan+0x7a>
 81094ce:	9b01      	ldr	r3, [sp, #4]
 81094d0:	2b00      	cmp	r3, #0
 81094d2:	d0df      	beq.n	8109494 <__hexnan+0xd4>
 81094d4:	f04f 32ff 	mov.w	r2, #4294967295
 81094d8:	f1c3 0320 	rsb	r3, r3, #32
 81094dc:	fa22 f303 	lsr.w	r3, r2, r3
 81094e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 81094e4:	401a      	ands	r2, r3
 81094e6:	f846 2c04 	str.w	r2, [r6, #-4]
 81094ea:	e7d3      	b.n	8109494 <__hexnan+0xd4>
 81094ec:	3f04      	subs	r7, #4
 81094ee:	e7d1      	b.n	8109494 <__hexnan+0xd4>
 81094f0:	2004      	movs	r0, #4
 81094f2:	b007      	add	sp, #28
 81094f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

081094f8 <_localeconv_r>:
 81094f8:	4800      	ldr	r0, [pc, #0]	; (81094fc <_localeconv_r+0x4>)
 81094fa:	4770      	bx	lr
 81094fc:	10000174 	.word	0x10000174

08109500 <__retarget_lock_init_recursive>:
 8109500:	4770      	bx	lr

08109502 <__retarget_lock_acquire_recursive>:
 8109502:	4770      	bx	lr

08109504 <__retarget_lock_release_recursive>:
 8109504:	4770      	bx	lr

08109506 <__swhatbuf_r>:
 8109506:	b570      	push	{r4, r5, r6, lr}
 8109508:	460e      	mov	r6, r1
 810950a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810950e:	2900      	cmp	r1, #0
 8109510:	b096      	sub	sp, #88	; 0x58
 8109512:	4614      	mov	r4, r2
 8109514:	461d      	mov	r5, r3
 8109516:	da08      	bge.n	810952a <__swhatbuf_r+0x24>
 8109518:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810951c:	2200      	movs	r2, #0
 810951e:	602a      	str	r2, [r5, #0]
 8109520:	061a      	lsls	r2, r3, #24
 8109522:	d410      	bmi.n	8109546 <__swhatbuf_r+0x40>
 8109524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8109528:	e00e      	b.n	8109548 <__swhatbuf_r+0x42>
 810952a:	466a      	mov	r2, sp
 810952c:	f001 f9b6 	bl	810a89c <_fstat_r>
 8109530:	2800      	cmp	r0, #0
 8109532:	dbf1      	blt.n	8109518 <__swhatbuf_r+0x12>
 8109534:	9a01      	ldr	r2, [sp, #4]
 8109536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810953a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810953e:	425a      	negs	r2, r3
 8109540:	415a      	adcs	r2, r3
 8109542:	602a      	str	r2, [r5, #0]
 8109544:	e7ee      	b.n	8109524 <__swhatbuf_r+0x1e>
 8109546:	2340      	movs	r3, #64	; 0x40
 8109548:	2000      	movs	r0, #0
 810954a:	6023      	str	r3, [r4, #0]
 810954c:	b016      	add	sp, #88	; 0x58
 810954e:	bd70      	pop	{r4, r5, r6, pc}

08109550 <__smakebuf_r>:
 8109550:	898b      	ldrh	r3, [r1, #12]
 8109552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8109554:	079d      	lsls	r5, r3, #30
 8109556:	4606      	mov	r6, r0
 8109558:	460c      	mov	r4, r1
 810955a:	d507      	bpl.n	810956c <__smakebuf_r+0x1c>
 810955c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8109560:	6023      	str	r3, [r4, #0]
 8109562:	6123      	str	r3, [r4, #16]
 8109564:	2301      	movs	r3, #1
 8109566:	6163      	str	r3, [r4, #20]
 8109568:	b002      	add	sp, #8
 810956a:	bd70      	pop	{r4, r5, r6, pc}
 810956c:	ab01      	add	r3, sp, #4
 810956e:	466a      	mov	r2, sp
 8109570:	f7ff ffc9 	bl	8109506 <__swhatbuf_r>
 8109574:	9900      	ldr	r1, [sp, #0]
 8109576:	4605      	mov	r5, r0
 8109578:	4630      	mov	r0, r6
 810957a:	f000 fd95 	bl	810a0a8 <_malloc_r>
 810957e:	b948      	cbnz	r0, 8109594 <__smakebuf_r+0x44>
 8109580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109584:	059a      	lsls	r2, r3, #22
 8109586:	d4ef      	bmi.n	8109568 <__smakebuf_r+0x18>
 8109588:	f023 0303 	bic.w	r3, r3, #3
 810958c:	f043 0302 	orr.w	r3, r3, #2
 8109590:	81a3      	strh	r3, [r4, #12]
 8109592:	e7e3      	b.n	810955c <__smakebuf_r+0xc>
 8109594:	4b0d      	ldr	r3, [pc, #52]	; (81095cc <__smakebuf_r+0x7c>)
 8109596:	62b3      	str	r3, [r6, #40]	; 0x28
 8109598:	89a3      	ldrh	r3, [r4, #12]
 810959a:	6020      	str	r0, [r4, #0]
 810959c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81095a0:	81a3      	strh	r3, [r4, #12]
 81095a2:	9b00      	ldr	r3, [sp, #0]
 81095a4:	6163      	str	r3, [r4, #20]
 81095a6:	9b01      	ldr	r3, [sp, #4]
 81095a8:	6120      	str	r0, [r4, #16]
 81095aa:	b15b      	cbz	r3, 81095c4 <__smakebuf_r+0x74>
 81095ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81095b0:	4630      	mov	r0, r6
 81095b2:	f001 f985 	bl	810a8c0 <_isatty_r>
 81095b6:	b128      	cbz	r0, 81095c4 <__smakebuf_r+0x74>
 81095b8:	89a3      	ldrh	r3, [r4, #12]
 81095ba:	f023 0303 	bic.w	r3, r3, #3
 81095be:	f043 0301 	orr.w	r3, r3, #1
 81095c2:	81a3      	strh	r3, [r4, #12]
 81095c4:	89a0      	ldrh	r0, [r4, #12]
 81095c6:	4305      	orrs	r5, r0
 81095c8:	81a5      	strh	r5, [r4, #12]
 81095ca:	e7cd      	b.n	8109568 <__smakebuf_r+0x18>
 81095cc:	08108c79 	.word	0x08108c79

081095d0 <malloc>:
 81095d0:	4b02      	ldr	r3, [pc, #8]	; (81095dc <malloc+0xc>)
 81095d2:	4601      	mov	r1, r0
 81095d4:	6818      	ldr	r0, [r3, #0]
 81095d6:	f000 bd67 	b.w	810a0a8 <_malloc_r>
 81095da:	bf00      	nop
 81095dc:	1000001c 	.word	0x1000001c

081095e0 <__ascii_mbtowc>:
 81095e0:	b082      	sub	sp, #8
 81095e2:	b901      	cbnz	r1, 81095e6 <__ascii_mbtowc+0x6>
 81095e4:	a901      	add	r1, sp, #4
 81095e6:	b142      	cbz	r2, 81095fa <__ascii_mbtowc+0x1a>
 81095e8:	b14b      	cbz	r3, 81095fe <__ascii_mbtowc+0x1e>
 81095ea:	7813      	ldrb	r3, [r2, #0]
 81095ec:	600b      	str	r3, [r1, #0]
 81095ee:	7812      	ldrb	r2, [r2, #0]
 81095f0:	1e10      	subs	r0, r2, #0
 81095f2:	bf18      	it	ne
 81095f4:	2001      	movne	r0, #1
 81095f6:	b002      	add	sp, #8
 81095f8:	4770      	bx	lr
 81095fa:	4610      	mov	r0, r2
 81095fc:	e7fb      	b.n	81095f6 <__ascii_mbtowc+0x16>
 81095fe:	f06f 0001 	mvn.w	r0, #1
 8109602:	e7f8      	b.n	81095f6 <__ascii_mbtowc+0x16>

08109604 <memcpy>:
 8109604:	440a      	add	r2, r1
 8109606:	4291      	cmp	r1, r2
 8109608:	f100 33ff 	add.w	r3, r0, #4294967295
 810960c:	d100      	bne.n	8109610 <memcpy+0xc>
 810960e:	4770      	bx	lr
 8109610:	b510      	push	{r4, lr}
 8109612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8109616:	f803 4f01 	strb.w	r4, [r3, #1]!
 810961a:	4291      	cmp	r1, r2
 810961c:	d1f9      	bne.n	8109612 <memcpy+0xe>
 810961e:	bd10      	pop	{r4, pc}

08109620 <_Balloc>:
 8109620:	b570      	push	{r4, r5, r6, lr}
 8109622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8109624:	4604      	mov	r4, r0
 8109626:	460d      	mov	r5, r1
 8109628:	b976      	cbnz	r6, 8109648 <_Balloc+0x28>
 810962a:	2010      	movs	r0, #16
 810962c:	f7ff ffd0 	bl	81095d0 <malloc>
 8109630:	4602      	mov	r2, r0
 8109632:	6260      	str	r0, [r4, #36]	; 0x24
 8109634:	b920      	cbnz	r0, 8109640 <_Balloc+0x20>
 8109636:	4b18      	ldr	r3, [pc, #96]	; (8109698 <_Balloc+0x78>)
 8109638:	4818      	ldr	r0, [pc, #96]	; (810969c <_Balloc+0x7c>)
 810963a:	2166      	movs	r1, #102	; 0x66
 810963c:	f001 f8ee 	bl	810a81c <__assert_func>
 8109640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8109644:	6006      	str	r6, [r0, #0]
 8109646:	60c6      	str	r6, [r0, #12]
 8109648:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810964a:	68f3      	ldr	r3, [r6, #12]
 810964c:	b183      	cbz	r3, 8109670 <_Balloc+0x50>
 810964e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109650:	68db      	ldr	r3, [r3, #12]
 8109652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8109656:	b9b8      	cbnz	r0, 8109688 <_Balloc+0x68>
 8109658:	2101      	movs	r1, #1
 810965a:	fa01 f605 	lsl.w	r6, r1, r5
 810965e:	1d72      	adds	r2, r6, #5
 8109660:	0092      	lsls	r2, r2, #2
 8109662:	4620      	mov	r0, r4
 8109664:	f000 fc9d 	bl	8109fa2 <_calloc_r>
 8109668:	b160      	cbz	r0, 8109684 <_Balloc+0x64>
 810966a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810966e:	e00e      	b.n	810968e <_Balloc+0x6e>
 8109670:	2221      	movs	r2, #33	; 0x21
 8109672:	2104      	movs	r1, #4
 8109674:	4620      	mov	r0, r4
 8109676:	f000 fc94 	bl	8109fa2 <_calloc_r>
 810967a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810967c:	60f0      	str	r0, [r6, #12]
 810967e:	68db      	ldr	r3, [r3, #12]
 8109680:	2b00      	cmp	r3, #0
 8109682:	d1e4      	bne.n	810964e <_Balloc+0x2e>
 8109684:	2000      	movs	r0, #0
 8109686:	bd70      	pop	{r4, r5, r6, pc}
 8109688:	6802      	ldr	r2, [r0, #0]
 810968a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810968e:	2300      	movs	r3, #0
 8109690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8109694:	e7f7      	b.n	8109686 <_Balloc+0x66>
 8109696:	bf00      	nop
 8109698:	0810ad1e 	.word	0x0810ad1e
 810969c:	0810ae80 	.word	0x0810ae80

081096a0 <_Bfree>:
 81096a0:	b570      	push	{r4, r5, r6, lr}
 81096a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 81096a4:	4605      	mov	r5, r0
 81096a6:	460c      	mov	r4, r1
 81096a8:	b976      	cbnz	r6, 81096c8 <_Bfree+0x28>
 81096aa:	2010      	movs	r0, #16
 81096ac:	f7ff ff90 	bl	81095d0 <malloc>
 81096b0:	4602      	mov	r2, r0
 81096b2:	6268      	str	r0, [r5, #36]	; 0x24
 81096b4:	b920      	cbnz	r0, 81096c0 <_Bfree+0x20>
 81096b6:	4b09      	ldr	r3, [pc, #36]	; (81096dc <_Bfree+0x3c>)
 81096b8:	4809      	ldr	r0, [pc, #36]	; (81096e0 <_Bfree+0x40>)
 81096ba:	218a      	movs	r1, #138	; 0x8a
 81096bc:	f001 f8ae 	bl	810a81c <__assert_func>
 81096c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81096c4:	6006      	str	r6, [r0, #0]
 81096c6:	60c6      	str	r6, [r0, #12]
 81096c8:	b13c      	cbz	r4, 81096da <_Bfree+0x3a>
 81096ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 81096cc:	6862      	ldr	r2, [r4, #4]
 81096ce:	68db      	ldr	r3, [r3, #12]
 81096d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81096d4:	6021      	str	r1, [r4, #0]
 81096d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 81096da:	bd70      	pop	{r4, r5, r6, pc}
 81096dc:	0810ad1e 	.word	0x0810ad1e
 81096e0:	0810ae80 	.word	0x0810ae80

081096e4 <__multadd>:
 81096e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81096e8:	690d      	ldr	r5, [r1, #16]
 81096ea:	4607      	mov	r7, r0
 81096ec:	460c      	mov	r4, r1
 81096ee:	461e      	mov	r6, r3
 81096f0:	f101 0c14 	add.w	ip, r1, #20
 81096f4:	2000      	movs	r0, #0
 81096f6:	f8dc 3000 	ldr.w	r3, [ip]
 81096fa:	b299      	uxth	r1, r3
 81096fc:	fb02 6101 	mla	r1, r2, r1, r6
 8109700:	0c1e      	lsrs	r6, r3, #16
 8109702:	0c0b      	lsrs	r3, r1, #16
 8109704:	fb02 3306 	mla	r3, r2, r6, r3
 8109708:	b289      	uxth	r1, r1
 810970a:	3001      	adds	r0, #1
 810970c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8109710:	4285      	cmp	r5, r0
 8109712:	f84c 1b04 	str.w	r1, [ip], #4
 8109716:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810971a:	dcec      	bgt.n	81096f6 <__multadd+0x12>
 810971c:	b30e      	cbz	r6, 8109762 <__multadd+0x7e>
 810971e:	68a3      	ldr	r3, [r4, #8]
 8109720:	42ab      	cmp	r3, r5
 8109722:	dc19      	bgt.n	8109758 <__multadd+0x74>
 8109724:	6861      	ldr	r1, [r4, #4]
 8109726:	4638      	mov	r0, r7
 8109728:	3101      	adds	r1, #1
 810972a:	f7ff ff79 	bl	8109620 <_Balloc>
 810972e:	4680      	mov	r8, r0
 8109730:	b928      	cbnz	r0, 810973e <__multadd+0x5a>
 8109732:	4602      	mov	r2, r0
 8109734:	4b0c      	ldr	r3, [pc, #48]	; (8109768 <__multadd+0x84>)
 8109736:	480d      	ldr	r0, [pc, #52]	; (810976c <__multadd+0x88>)
 8109738:	21b5      	movs	r1, #181	; 0xb5
 810973a:	f001 f86f 	bl	810a81c <__assert_func>
 810973e:	6922      	ldr	r2, [r4, #16]
 8109740:	3202      	adds	r2, #2
 8109742:	f104 010c 	add.w	r1, r4, #12
 8109746:	0092      	lsls	r2, r2, #2
 8109748:	300c      	adds	r0, #12
 810974a:	f7ff ff5b 	bl	8109604 <memcpy>
 810974e:	4621      	mov	r1, r4
 8109750:	4638      	mov	r0, r7
 8109752:	f7ff ffa5 	bl	81096a0 <_Bfree>
 8109756:	4644      	mov	r4, r8
 8109758:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810975c:	3501      	adds	r5, #1
 810975e:	615e      	str	r6, [r3, #20]
 8109760:	6125      	str	r5, [r4, #16]
 8109762:	4620      	mov	r0, r4
 8109764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109768:	0810ad90 	.word	0x0810ad90
 810976c:	0810ae80 	.word	0x0810ae80

08109770 <__s2b>:
 8109770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109774:	460c      	mov	r4, r1
 8109776:	4615      	mov	r5, r2
 8109778:	461f      	mov	r7, r3
 810977a:	2209      	movs	r2, #9
 810977c:	3308      	adds	r3, #8
 810977e:	4606      	mov	r6, r0
 8109780:	fb93 f3f2 	sdiv	r3, r3, r2
 8109784:	2100      	movs	r1, #0
 8109786:	2201      	movs	r2, #1
 8109788:	429a      	cmp	r2, r3
 810978a:	db09      	blt.n	81097a0 <__s2b+0x30>
 810978c:	4630      	mov	r0, r6
 810978e:	f7ff ff47 	bl	8109620 <_Balloc>
 8109792:	b940      	cbnz	r0, 81097a6 <__s2b+0x36>
 8109794:	4602      	mov	r2, r0
 8109796:	4b19      	ldr	r3, [pc, #100]	; (81097fc <__s2b+0x8c>)
 8109798:	4819      	ldr	r0, [pc, #100]	; (8109800 <__s2b+0x90>)
 810979a:	21ce      	movs	r1, #206	; 0xce
 810979c:	f001 f83e 	bl	810a81c <__assert_func>
 81097a0:	0052      	lsls	r2, r2, #1
 81097a2:	3101      	adds	r1, #1
 81097a4:	e7f0      	b.n	8109788 <__s2b+0x18>
 81097a6:	9b08      	ldr	r3, [sp, #32]
 81097a8:	6143      	str	r3, [r0, #20]
 81097aa:	2d09      	cmp	r5, #9
 81097ac:	f04f 0301 	mov.w	r3, #1
 81097b0:	6103      	str	r3, [r0, #16]
 81097b2:	dd16      	ble.n	81097e2 <__s2b+0x72>
 81097b4:	f104 0909 	add.w	r9, r4, #9
 81097b8:	46c8      	mov	r8, r9
 81097ba:	442c      	add	r4, r5
 81097bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 81097c0:	4601      	mov	r1, r0
 81097c2:	3b30      	subs	r3, #48	; 0x30
 81097c4:	220a      	movs	r2, #10
 81097c6:	4630      	mov	r0, r6
 81097c8:	f7ff ff8c 	bl	81096e4 <__multadd>
 81097cc:	45a0      	cmp	r8, r4
 81097ce:	d1f5      	bne.n	81097bc <__s2b+0x4c>
 81097d0:	f1a5 0408 	sub.w	r4, r5, #8
 81097d4:	444c      	add	r4, r9
 81097d6:	1b2d      	subs	r5, r5, r4
 81097d8:	1963      	adds	r3, r4, r5
 81097da:	42bb      	cmp	r3, r7
 81097dc:	db04      	blt.n	81097e8 <__s2b+0x78>
 81097de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81097e2:	340a      	adds	r4, #10
 81097e4:	2509      	movs	r5, #9
 81097e6:	e7f6      	b.n	81097d6 <__s2b+0x66>
 81097e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 81097ec:	4601      	mov	r1, r0
 81097ee:	3b30      	subs	r3, #48	; 0x30
 81097f0:	220a      	movs	r2, #10
 81097f2:	4630      	mov	r0, r6
 81097f4:	f7ff ff76 	bl	81096e4 <__multadd>
 81097f8:	e7ee      	b.n	81097d8 <__s2b+0x68>
 81097fa:	bf00      	nop
 81097fc:	0810ad90 	.word	0x0810ad90
 8109800:	0810ae80 	.word	0x0810ae80

08109804 <__hi0bits>:
 8109804:	0c03      	lsrs	r3, r0, #16
 8109806:	041b      	lsls	r3, r3, #16
 8109808:	b9d3      	cbnz	r3, 8109840 <__hi0bits+0x3c>
 810980a:	0400      	lsls	r0, r0, #16
 810980c:	2310      	movs	r3, #16
 810980e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8109812:	bf04      	itt	eq
 8109814:	0200      	lsleq	r0, r0, #8
 8109816:	3308      	addeq	r3, #8
 8109818:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810981c:	bf04      	itt	eq
 810981e:	0100      	lsleq	r0, r0, #4
 8109820:	3304      	addeq	r3, #4
 8109822:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8109826:	bf04      	itt	eq
 8109828:	0080      	lsleq	r0, r0, #2
 810982a:	3302      	addeq	r3, #2
 810982c:	2800      	cmp	r0, #0
 810982e:	db05      	blt.n	810983c <__hi0bits+0x38>
 8109830:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8109834:	f103 0301 	add.w	r3, r3, #1
 8109838:	bf08      	it	eq
 810983a:	2320      	moveq	r3, #32
 810983c:	4618      	mov	r0, r3
 810983e:	4770      	bx	lr
 8109840:	2300      	movs	r3, #0
 8109842:	e7e4      	b.n	810980e <__hi0bits+0xa>

08109844 <__lo0bits>:
 8109844:	6803      	ldr	r3, [r0, #0]
 8109846:	f013 0207 	ands.w	r2, r3, #7
 810984a:	4601      	mov	r1, r0
 810984c:	d00b      	beq.n	8109866 <__lo0bits+0x22>
 810984e:	07da      	lsls	r2, r3, #31
 8109850:	d423      	bmi.n	810989a <__lo0bits+0x56>
 8109852:	0798      	lsls	r0, r3, #30
 8109854:	bf49      	itett	mi
 8109856:	085b      	lsrmi	r3, r3, #1
 8109858:	089b      	lsrpl	r3, r3, #2
 810985a:	2001      	movmi	r0, #1
 810985c:	600b      	strmi	r3, [r1, #0]
 810985e:	bf5c      	itt	pl
 8109860:	600b      	strpl	r3, [r1, #0]
 8109862:	2002      	movpl	r0, #2
 8109864:	4770      	bx	lr
 8109866:	b298      	uxth	r0, r3
 8109868:	b9a8      	cbnz	r0, 8109896 <__lo0bits+0x52>
 810986a:	0c1b      	lsrs	r3, r3, #16
 810986c:	2010      	movs	r0, #16
 810986e:	b2da      	uxtb	r2, r3
 8109870:	b90a      	cbnz	r2, 8109876 <__lo0bits+0x32>
 8109872:	3008      	adds	r0, #8
 8109874:	0a1b      	lsrs	r3, r3, #8
 8109876:	071a      	lsls	r2, r3, #28
 8109878:	bf04      	itt	eq
 810987a:	091b      	lsreq	r3, r3, #4
 810987c:	3004      	addeq	r0, #4
 810987e:	079a      	lsls	r2, r3, #30
 8109880:	bf04      	itt	eq
 8109882:	089b      	lsreq	r3, r3, #2
 8109884:	3002      	addeq	r0, #2
 8109886:	07da      	lsls	r2, r3, #31
 8109888:	d403      	bmi.n	8109892 <__lo0bits+0x4e>
 810988a:	085b      	lsrs	r3, r3, #1
 810988c:	f100 0001 	add.w	r0, r0, #1
 8109890:	d005      	beq.n	810989e <__lo0bits+0x5a>
 8109892:	600b      	str	r3, [r1, #0]
 8109894:	4770      	bx	lr
 8109896:	4610      	mov	r0, r2
 8109898:	e7e9      	b.n	810986e <__lo0bits+0x2a>
 810989a:	2000      	movs	r0, #0
 810989c:	4770      	bx	lr
 810989e:	2020      	movs	r0, #32
 81098a0:	4770      	bx	lr
	...

081098a4 <__i2b>:
 81098a4:	b510      	push	{r4, lr}
 81098a6:	460c      	mov	r4, r1
 81098a8:	2101      	movs	r1, #1
 81098aa:	f7ff feb9 	bl	8109620 <_Balloc>
 81098ae:	4602      	mov	r2, r0
 81098b0:	b928      	cbnz	r0, 81098be <__i2b+0x1a>
 81098b2:	4b05      	ldr	r3, [pc, #20]	; (81098c8 <__i2b+0x24>)
 81098b4:	4805      	ldr	r0, [pc, #20]	; (81098cc <__i2b+0x28>)
 81098b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 81098ba:	f000 ffaf 	bl	810a81c <__assert_func>
 81098be:	2301      	movs	r3, #1
 81098c0:	6144      	str	r4, [r0, #20]
 81098c2:	6103      	str	r3, [r0, #16]
 81098c4:	bd10      	pop	{r4, pc}
 81098c6:	bf00      	nop
 81098c8:	0810ad90 	.word	0x0810ad90
 81098cc:	0810ae80 	.word	0x0810ae80

081098d0 <__multiply>:
 81098d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81098d4:	4691      	mov	r9, r2
 81098d6:	690a      	ldr	r2, [r1, #16]
 81098d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 81098dc:	429a      	cmp	r2, r3
 81098de:	bfb8      	it	lt
 81098e0:	460b      	movlt	r3, r1
 81098e2:	460c      	mov	r4, r1
 81098e4:	bfbc      	itt	lt
 81098e6:	464c      	movlt	r4, r9
 81098e8:	4699      	movlt	r9, r3
 81098ea:	6927      	ldr	r7, [r4, #16]
 81098ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 81098f0:	68a3      	ldr	r3, [r4, #8]
 81098f2:	6861      	ldr	r1, [r4, #4]
 81098f4:	eb07 060a 	add.w	r6, r7, sl
 81098f8:	42b3      	cmp	r3, r6
 81098fa:	b085      	sub	sp, #20
 81098fc:	bfb8      	it	lt
 81098fe:	3101      	addlt	r1, #1
 8109900:	f7ff fe8e 	bl	8109620 <_Balloc>
 8109904:	b930      	cbnz	r0, 8109914 <__multiply+0x44>
 8109906:	4602      	mov	r2, r0
 8109908:	4b44      	ldr	r3, [pc, #272]	; (8109a1c <__multiply+0x14c>)
 810990a:	4845      	ldr	r0, [pc, #276]	; (8109a20 <__multiply+0x150>)
 810990c:	f240 115d 	movw	r1, #349	; 0x15d
 8109910:	f000 ff84 	bl	810a81c <__assert_func>
 8109914:	f100 0514 	add.w	r5, r0, #20
 8109918:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810991c:	462b      	mov	r3, r5
 810991e:	2200      	movs	r2, #0
 8109920:	4543      	cmp	r3, r8
 8109922:	d321      	bcc.n	8109968 <__multiply+0x98>
 8109924:	f104 0314 	add.w	r3, r4, #20
 8109928:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810992c:	f109 0314 	add.w	r3, r9, #20
 8109930:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8109934:	9202      	str	r2, [sp, #8]
 8109936:	1b3a      	subs	r2, r7, r4
 8109938:	3a15      	subs	r2, #21
 810993a:	f022 0203 	bic.w	r2, r2, #3
 810993e:	3204      	adds	r2, #4
 8109940:	f104 0115 	add.w	r1, r4, #21
 8109944:	428f      	cmp	r7, r1
 8109946:	bf38      	it	cc
 8109948:	2204      	movcc	r2, #4
 810994a:	9201      	str	r2, [sp, #4]
 810994c:	9a02      	ldr	r2, [sp, #8]
 810994e:	9303      	str	r3, [sp, #12]
 8109950:	429a      	cmp	r2, r3
 8109952:	d80c      	bhi.n	810996e <__multiply+0x9e>
 8109954:	2e00      	cmp	r6, #0
 8109956:	dd03      	ble.n	8109960 <__multiply+0x90>
 8109958:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810995c:	2b00      	cmp	r3, #0
 810995e:	d05a      	beq.n	8109a16 <__multiply+0x146>
 8109960:	6106      	str	r6, [r0, #16]
 8109962:	b005      	add	sp, #20
 8109964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109968:	f843 2b04 	str.w	r2, [r3], #4
 810996c:	e7d8      	b.n	8109920 <__multiply+0x50>
 810996e:	f8b3 a000 	ldrh.w	sl, [r3]
 8109972:	f1ba 0f00 	cmp.w	sl, #0
 8109976:	d024      	beq.n	81099c2 <__multiply+0xf2>
 8109978:	f104 0e14 	add.w	lr, r4, #20
 810997c:	46a9      	mov	r9, r5
 810997e:	f04f 0c00 	mov.w	ip, #0
 8109982:	f85e 2b04 	ldr.w	r2, [lr], #4
 8109986:	f8d9 1000 	ldr.w	r1, [r9]
 810998a:	fa1f fb82 	uxth.w	fp, r2
 810998e:	b289      	uxth	r1, r1
 8109990:	fb0a 110b 	mla	r1, sl, fp, r1
 8109994:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8109998:	f8d9 2000 	ldr.w	r2, [r9]
 810999c:	4461      	add	r1, ip
 810999e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 81099a2:	fb0a c20b 	mla	r2, sl, fp, ip
 81099a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 81099aa:	b289      	uxth	r1, r1
 81099ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 81099b0:	4577      	cmp	r7, lr
 81099b2:	f849 1b04 	str.w	r1, [r9], #4
 81099b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 81099ba:	d8e2      	bhi.n	8109982 <__multiply+0xb2>
 81099bc:	9a01      	ldr	r2, [sp, #4]
 81099be:	f845 c002 	str.w	ip, [r5, r2]
 81099c2:	9a03      	ldr	r2, [sp, #12]
 81099c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 81099c8:	3304      	adds	r3, #4
 81099ca:	f1b9 0f00 	cmp.w	r9, #0
 81099ce:	d020      	beq.n	8109a12 <__multiply+0x142>
 81099d0:	6829      	ldr	r1, [r5, #0]
 81099d2:	f104 0c14 	add.w	ip, r4, #20
 81099d6:	46ae      	mov	lr, r5
 81099d8:	f04f 0a00 	mov.w	sl, #0
 81099dc:	f8bc b000 	ldrh.w	fp, [ip]
 81099e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 81099e4:	fb09 220b 	mla	r2, r9, fp, r2
 81099e8:	4492      	add	sl, r2
 81099ea:	b289      	uxth	r1, r1
 81099ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 81099f0:	f84e 1b04 	str.w	r1, [lr], #4
 81099f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 81099f8:	f8be 1000 	ldrh.w	r1, [lr]
 81099fc:	0c12      	lsrs	r2, r2, #16
 81099fe:	fb09 1102 	mla	r1, r9, r2, r1
 8109a02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8109a06:	4567      	cmp	r7, ip
 8109a08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8109a0c:	d8e6      	bhi.n	81099dc <__multiply+0x10c>
 8109a0e:	9a01      	ldr	r2, [sp, #4]
 8109a10:	50a9      	str	r1, [r5, r2]
 8109a12:	3504      	adds	r5, #4
 8109a14:	e79a      	b.n	810994c <__multiply+0x7c>
 8109a16:	3e01      	subs	r6, #1
 8109a18:	e79c      	b.n	8109954 <__multiply+0x84>
 8109a1a:	bf00      	nop
 8109a1c:	0810ad90 	.word	0x0810ad90
 8109a20:	0810ae80 	.word	0x0810ae80

08109a24 <__pow5mult>:
 8109a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109a28:	4615      	mov	r5, r2
 8109a2a:	f012 0203 	ands.w	r2, r2, #3
 8109a2e:	4606      	mov	r6, r0
 8109a30:	460f      	mov	r7, r1
 8109a32:	d007      	beq.n	8109a44 <__pow5mult+0x20>
 8109a34:	4c25      	ldr	r4, [pc, #148]	; (8109acc <__pow5mult+0xa8>)
 8109a36:	3a01      	subs	r2, #1
 8109a38:	2300      	movs	r3, #0
 8109a3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8109a3e:	f7ff fe51 	bl	81096e4 <__multadd>
 8109a42:	4607      	mov	r7, r0
 8109a44:	10ad      	asrs	r5, r5, #2
 8109a46:	d03d      	beq.n	8109ac4 <__pow5mult+0xa0>
 8109a48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8109a4a:	b97c      	cbnz	r4, 8109a6c <__pow5mult+0x48>
 8109a4c:	2010      	movs	r0, #16
 8109a4e:	f7ff fdbf 	bl	81095d0 <malloc>
 8109a52:	4602      	mov	r2, r0
 8109a54:	6270      	str	r0, [r6, #36]	; 0x24
 8109a56:	b928      	cbnz	r0, 8109a64 <__pow5mult+0x40>
 8109a58:	4b1d      	ldr	r3, [pc, #116]	; (8109ad0 <__pow5mult+0xac>)
 8109a5a:	481e      	ldr	r0, [pc, #120]	; (8109ad4 <__pow5mult+0xb0>)
 8109a5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8109a60:	f000 fedc 	bl	810a81c <__assert_func>
 8109a64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8109a68:	6004      	str	r4, [r0, #0]
 8109a6a:	60c4      	str	r4, [r0, #12]
 8109a6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8109a70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8109a74:	b94c      	cbnz	r4, 8109a8a <__pow5mult+0x66>
 8109a76:	f240 2171 	movw	r1, #625	; 0x271
 8109a7a:	4630      	mov	r0, r6
 8109a7c:	f7ff ff12 	bl	81098a4 <__i2b>
 8109a80:	2300      	movs	r3, #0
 8109a82:	f8c8 0008 	str.w	r0, [r8, #8]
 8109a86:	4604      	mov	r4, r0
 8109a88:	6003      	str	r3, [r0, #0]
 8109a8a:	f04f 0900 	mov.w	r9, #0
 8109a8e:	07eb      	lsls	r3, r5, #31
 8109a90:	d50a      	bpl.n	8109aa8 <__pow5mult+0x84>
 8109a92:	4639      	mov	r1, r7
 8109a94:	4622      	mov	r2, r4
 8109a96:	4630      	mov	r0, r6
 8109a98:	f7ff ff1a 	bl	81098d0 <__multiply>
 8109a9c:	4639      	mov	r1, r7
 8109a9e:	4680      	mov	r8, r0
 8109aa0:	4630      	mov	r0, r6
 8109aa2:	f7ff fdfd 	bl	81096a0 <_Bfree>
 8109aa6:	4647      	mov	r7, r8
 8109aa8:	106d      	asrs	r5, r5, #1
 8109aaa:	d00b      	beq.n	8109ac4 <__pow5mult+0xa0>
 8109aac:	6820      	ldr	r0, [r4, #0]
 8109aae:	b938      	cbnz	r0, 8109ac0 <__pow5mult+0x9c>
 8109ab0:	4622      	mov	r2, r4
 8109ab2:	4621      	mov	r1, r4
 8109ab4:	4630      	mov	r0, r6
 8109ab6:	f7ff ff0b 	bl	81098d0 <__multiply>
 8109aba:	6020      	str	r0, [r4, #0]
 8109abc:	f8c0 9000 	str.w	r9, [r0]
 8109ac0:	4604      	mov	r4, r0
 8109ac2:	e7e4      	b.n	8109a8e <__pow5mult+0x6a>
 8109ac4:	4638      	mov	r0, r7
 8109ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8109aca:	bf00      	nop
 8109acc:	0810afd0 	.word	0x0810afd0
 8109ad0:	0810ad1e 	.word	0x0810ad1e
 8109ad4:	0810ae80 	.word	0x0810ae80

08109ad8 <__lshift>:
 8109ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109adc:	460c      	mov	r4, r1
 8109ade:	6849      	ldr	r1, [r1, #4]
 8109ae0:	6923      	ldr	r3, [r4, #16]
 8109ae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8109ae6:	68a3      	ldr	r3, [r4, #8]
 8109ae8:	4607      	mov	r7, r0
 8109aea:	4691      	mov	r9, r2
 8109aec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8109af0:	f108 0601 	add.w	r6, r8, #1
 8109af4:	42b3      	cmp	r3, r6
 8109af6:	db0b      	blt.n	8109b10 <__lshift+0x38>
 8109af8:	4638      	mov	r0, r7
 8109afa:	f7ff fd91 	bl	8109620 <_Balloc>
 8109afe:	4605      	mov	r5, r0
 8109b00:	b948      	cbnz	r0, 8109b16 <__lshift+0x3e>
 8109b02:	4602      	mov	r2, r0
 8109b04:	4b2a      	ldr	r3, [pc, #168]	; (8109bb0 <__lshift+0xd8>)
 8109b06:	482b      	ldr	r0, [pc, #172]	; (8109bb4 <__lshift+0xdc>)
 8109b08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8109b0c:	f000 fe86 	bl	810a81c <__assert_func>
 8109b10:	3101      	adds	r1, #1
 8109b12:	005b      	lsls	r3, r3, #1
 8109b14:	e7ee      	b.n	8109af4 <__lshift+0x1c>
 8109b16:	2300      	movs	r3, #0
 8109b18:	f100 0114 	add.w	r1, r0, #20
 8109b1c:	f100 0210 	add.w	r2, r0, #16
 8109b20:	4618      	mov	r0, r3
 8109b22:	4553      	cmp	r3, sl
 8109b24:	db37      	blt.n	8109b96 <__lshift+0xbe>
 8109b26:	6920      	ldr	r0, [r4, #16]
 8109b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8109b2c:	f104 0314 	add.w	r3, r4, #20
 8109b30:	f019 091f 	ands.w	r9, r9, #31
 8109b34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8109b38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8109b3c:	d02f      	beq.n	8109b9e <__lshift+0xc6>
 8109b3e:	f1c9 0e20 	rsb	lr, r9, #32
 8109b42:	468a      	mov	sl, r1
 8109b44:	f04f 0c00 	mov.w	ip, #0
 8109b48:	681a      	ldr	r2, [r3, #0]
 8109b4a:	fa02 f209 	lsl.w	r2, r2, r9
 8109b4e:	ea42 020c 	orr.w	r2, r2, ip
 8109b52:	f84a 2b04 	str.w	r2, [sl], #4
 8109b56:	f853 2b04 	ldr.w	r2, [r3], #4
 8109b5a:	4298      	cmp	r0, r3
 8109b5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8109b60:	d8f2      	bhi.n	8109b48 <__lshift+0x70>
 8109b62:	1b03      	subs	r3, r0, r4
 8109b64:	3b15      	subs	r3, #21
 8109b66:	f023 0303 	bic.w	r3, r3, #3
 8109b6a:	3304      	adds	r3, #4
 8109b6c:	f104 0215 	add.w	r2, r4, #21
 8109b70:	4290      	cmp	r0, r2
 8109b72:	bf38      	it	cc
 8109b74:	2304      	movcc	r3, #4
 8109b76:	f841 c003 	str.w	ip, [r1, r3]
 8109b7a:	f1bc 0f00 	cmp.w	ip, #0
 8109b7e:	d001      	beq.n	8109b84 <__lshift+0xac>
 8109b80:	f108 0602 	add.w	r6, r8, #2
 8109b84:	3e01      	subs	r6, #1
 8109b86:	4638      	mov	r0, r7
 8109b88:	612e      	str	r6, [r5, #16]
 8109b8a:	4621      	mov	r1, r4
 8109b8c:	f7ff fd88 	bl	81096a0 <_Bfree>
 8109b90:	4628      	mov	r0, r5
 8109b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109b96:	f842 0f04 	str.w	r0, [r2, #4]!
 8109b9a:	3301      	adds	r3, #1
 8109b9c:	e7c1      	b.n	8109b22 <__lshift+0x4a>
 8109b9e:	3904      	subs	r1, #4
 8109ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8109ba4:	f841 2f04 	str.w	r2, [r1, #4]!
 8109ba8:	4298      	cmp	r0, r3
 8109baa:	d8f9      	bhi.n	8109ba0 <__lshift+0xc8>
 8109bac:	e7ea      	b.n	8109b84 <__lshift+0xac>
 8109bae:	bf00      	nop
 8109bb0:	0810ad90 	.word	0x0810ad90
 8109bb4:	0810ae80 	.word	0x0810ae80

08109bb8 <__mcmp>:
 8109bb8:	b530      	push	{r4, r5, lr}
 8109bba:	6902      	ldr	r2, [r0, #16]
 8109bbc:	690c      	ldr	r4, [r1, #16]
 8109bbe:	1b12      	subs	r2, r2, r4
 8109bc0:	d10e      	bne.n	8109be0 <__mcmp+0x28>
 8109bc2:	f100 0314 	add.w	r3, r0, #20
 8109bc6:	3114      	adds	r1, #20
 8109bc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8109bcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8109bd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8109bd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8109bd8:	42a5      	cmp	r5, r4
 8109bda:	d003      	beq.n	8109be4 <__mcmp+0x2c>
 8109bdc:	d305      	bcc.n	8109bea <__mcmp+0x32>
 8109bde:	2201      	movs	r2, #1
 8109be0:	4610      	mov	r0, r2
 8109be2:	bd30      	pop	{r4, r5, pc}
 8109be4:	4283      	cmp	r3, r0
 8109be6:	d3f3      	bcc.n	8109bd0 <__mcmp+0x18>
 8109be8:	e7fa      	b.n	8109be0 <__mcmp+0x28>
 8109bea:	f04f 32ff 	mov.w	r2, #4294967295
 8109bee:	e7f7      	b.n	8109be0 <__mcmp+0x28>

08109bf0 <__mdiff>:
 8109bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109bf4:	460c      	mov	r4, r1
 8109bf6:	4606      	mov	r6, r0
 8109bf8:	4611      	mov	r1, r2
 8109bfa:	4620      	mov	r0, r4
 8109bfc:	4690      	mov	r8, r2
 8109bfe:	f7ff ffdb 	bl	8109bb8 <__mcmp>
 8109c02:	1e05      	subs	r5, r0, #0
 8109c04:	d110      	bne.n	8109c28 <__mdiff+0x38>
 8109c06:	4629      	mov	r1, r5
 8109c08:	4630      	mov	r0, r6
 8109c0a:	f7ff fd09 	bl	8109620 <_Balloc>
 8109c0e:	b930      	cbnz	r0, 8109c1e <__mdiff+0x2e>
 8109c10:	4b3a      	ldr	r3, [pc, #232]	; (8109cfc <__mdiff+0x10c>)
 8109c12:	4602      	mov	r2, r0
 8109c14:	f240 2132 	movw	r1, #562	; 0x232
 8109c18:	4839      	ldr	r0, [pc, #228]	; (8109d00 <__mdiff+0x110>)
 8109c1a:	f000 fdff 	bl	810a81c <__assert_func>
 8109c1e:	2301      	movs	r3, #1
 8109c20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8109c24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109c28:	bfa4      	itt	ge
 8109c2a:	4643      	movge	r3, r8
 8109c2c:	46a0      	movge	r8, r4
 8109c2e:	4630      	mov	r0, r6
 8109c30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8109c34:	bfa6      	itte	ge
 8109c36:	461c      	movge	r4, r3
 8109c38:	2500      	movge	r5, #0
 8109c3a:	2501      	movlt	r5, #1
 8109c3c:	f7ff fcf0 	bl	8109620 <_Balloc>
 8109c40:	b920      	cbnz	r0, 8109c4c <__mdiff+0x5c>
 8109c42:	4b2e      	ldr	r3, [pc, #184]	; (8109cfc <__mdiff+0x10c>)
 8109c44:	4602      	mov	r2, r0
 8109c46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8109c4a:	e7e5      	b.n	8109c18 <__mdiff+0x28>
 8109c4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8109c50:	6926      	ldr	r6, [r4, #16]
 8109c52:	60c5      	str	r5, [r0, #12]
 8109c54:	f104 0914 	add.w	r9, r4, #20
 8109c58:	f108 0514 	add.w	r5, r8, #20
 8109c5c:	f100 0e14 	add.w	lr, r0, #20
 8109c60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8109c64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8109c68:	f108 0210 	add.w	r2, r8, #16
 8109c6c:	46f2      	mov	sl, lr
 8109c6e:	2100      	movs	r1, #0
 8109c70:	f859 3b04 	ldr.w	r3, [r9], #4
 8109c74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8109c78:	fa1f f883 	uxth.w	r8, r3
 8109c7c:	fa11 f18b 	uxtah	r1, r1, fp
 8109c80:	0c1b      	lsrs	r3, r3, #16
 8109c82:	eba1 0808 	sub.w	r8, r1, r8
 8109c86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8109c8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8109c8e:	fa1f f888 	uxth.w	r8, r8
 8109c92:	1419      	asrs	r1, r3, #16
 8109c94:	454e      	cmp	r6, r9
 8109c96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8109c9a:	f84a 3b04 	str.w	r3, [sl], #4
 8109c9e:	d8e7      	bhi.n	8109c70 <__mdiff+0x80>
 8109ca0:	1b33      	subs	r3, r6, r4
 8109ca2:	3b15      	subs	r3, #21
 8109ca4:	f023 0303 	bic.w	r3, r3, #3
 8109ca8:	3304      	adds	r3, #4
 8109caa:	3415      	adds	r4, #21
 8109cac:	42a6      	cmp	r6, r4
 8109cae:	bf38      	it	cc
 8109cb0:	2304      	movcc	r3, #4
 8109cb2:	441d      	add	r5, r3
 8109cb4:	4473      	add	r3, lr
 8109cb6:	469e      	mov	lr, r3
 8109cb8:	462e      	mov	r6, r5
 8109cba:	4566      	cmp	r6, ip
 8109cbc:	d30e      	bcc.n	8109cdc <__mdiff+0xec>
 8109cbe:	f10c 0203 	add.w	r2, ip, #3
 8109cc2:	1b52      	subs	r2, r2, r5
 8109cc4:	f022 0203 	bic.w	r2, r2, #3
 8109cc8:	3d03      	subs	r5, #3
 8109cca:	45ac      	cmp	ip, r5
 8109ccc:	bf38      	it	cc
 8109cce:	2200      	movcc	r2, #0
 8109cd0:	441a      	add	r2, r3
 8109cd2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8109cd6:	b17b      	cbz	r3, 8109cf8 <__mdiff+0x108>
 8109cd8:	6107      	str	r7, [r0, #16]
 8109cda:	e7a3      	b.n	8109c24 <__mdiff+0x34>
 8109cdc:	f856 8b04 	ldr.w	r8, [r6], #4
 8109ce0:	fa11 f288 	uxtah	r2, r1, r8
 8109ce4:	1414      	asrs	r4, r2, #16
 8109ce6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8109cea:	b292      	uxth	r2, r2
 8109cec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8109cf0:	f84e 2b04 	str.w	r2, [lr], #4
 8109cf4:	1421      	asrs	r1, r4, #16
 8109cf6:	e7e0      	b.n	8109cba <__mdiff+0xca>
 8109cf8:	3f01      	subs	r7, #1
 8109cfa:	e7ea      	b.n	8109cd2 <__mdiff+0xe2>
 8109cfc:	0810ad90 	.word	0x0810ad90
 8109d00:	0810ae80 	.word	0x0810ae80

08109d04 <__ulp>:
 8109d04:	b082      	sub	sp, #8
 8109d06:	ed8d 0b00 	vstr	d0, [sp]
 8109d0a:	9b01      	ldr	r3, [sp, #4]
 8109d0c:	4912      	ldr	r1, [pc, #72]	; (8109d58 <__ulp+0x54>)
 8109d0e:	4019      	ands	r1, r3
 8109d10:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8109d14:	2900      	cmp	r1, #0
 8109d16:	dd05      	ble.n	8109d24 <__ulp+0x20>
 8109d18:	2200      	movs	r2, #0
 8109d1a:	460b      	mov	r3, r1
 8109d1c:	ec43 2b10 	vmov	d0, r2, r3
 8109d20:	b002      	add	sp, #8
 8109d22:	4770      	bx	lr
 8109d24:	4249      	negs	r1, r1
 8109d26:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8109d2a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8109d2e:	f04f 0200 	mov.w	r2, #0
 8109d32:	f04f 0300 	mov.w	r3, #0
 8109d36:	da04      	bge.n	8109d42 <__ulp+0x3e>
 8109d38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8109d3c:	fa41 f300 	asr.w	r3, r1, r0
 8109d40:	e7ec      	b.n	8109d1c <__ulp+0x18>
 8109d42:	f1a0 0114 	sub.w	r1, r0, #20
 8109d46:	291e      	cmp	r1, #30
 8109d48:	bfda      	itte	le
 8109d4a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8109d4e:	fa20 f101 	lsrle.w	r1, r0, r1
 8109d52:	2101      	movgt	r1, #1
 8109d54:	460a      	mov	r2, r1
 8109d56:	e7e1      	b.n	8109d1c <__ulp+0x18>
 8109d58:	7ff00000 	.word	0x7ff00000

08109d5c <__b2d>:
 8109d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109d5e:	6905      	ldr	r5, [r0, #16]
 8109d60:	f100 0714 	add.w	r7, r0, #20
 8109d64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8109d68:	1f2e      	subs	r6, r5, #4
 8109d6a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8109d6e:	4620      	mov	r0, r4
 8109d70:	f7ff fd48 	bl	8109804 <__hi0bits>
 8109d74:	f1c0 0320 	rsb	r3, r0, #32
 8109d78:	280a      	cmp	r0, #10
 8109d7a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8109df8 <__b2d+0x9c>
 8109d7e:	600b      	str	r3, [r1, #0]
 8109d80:	dc14      	bgt.n	8109dac <__b2d+0x50>
 8109d82:	f1c0 0e0b 	rsb	lr, r0, #11
 8109d86:	fa24 f10e 	lsr.w	r1, r4, lr
 8109d8a:	42b7      	cmp	r7, r6
 8109d8c:	ea41 030c 	orr.w	r3, r1, ip
 8109d90:	bf34      	ite	cc
 8109d92:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8109d96:	2100      	movcs	r1, #0
 8109d98:	3015      	adds	r0, #21
 8109d9a:	fa04 f000 	lsl.w	r0, r4, r0
 8109d9e:	fa21 f10e 	lsr.w	r1, r1, lr
 8109da2:	ea40 0201 	orr.w	r2, r0, r1
 8109da6:	ec43 2b10 	vmov	d0, r2, r3
 8109daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109dac:	42b7      	cmp	r7, r6
 8109dae:	bf3a      	itte	cc
 8109db0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8109db4:	f1a5 0608 	subcc.w	r6, r5, #8
 8109db8:	2100      	movcs	r1, #0
 8109dba:	380b      	subs	r0, #11
 8109dbc:	d017      	beq.n	8109dee <__b2d+0x92>
 8109dbe:	f1c0 0c20 	rsb	ip, r0, #32
 8109dc2:	fa04 f500 	lsl.w	r5, r4, r0
 8109dc6:	42be      	cmp	r6, r7
 8109dc8:	fa21 f40c 	lsr.w	r4, r1, ip
 8109dcc:	ea45 0504 	orr.w	r5, r5, r4
 8109dd0:	bf8c      	ite	hi
 8109dd2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8109dd6:	2400      	movls	r4, #0
 8109dd8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8109ddc:	fa01 f000 	lsl.w	r0, r1, r0
 8109de0:	fa24 f40c 	lsr.w	r4, r4, ip
 8109de4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8109de8:	ea40 0204 	orr.w	r2, r0, r4
 8109dec:	e7db      	b.n	8109da6 <__b2d+0x4a>
 8109dee:	ea44 030c 	orr.w	r3, r4, ip
 8109df2:	460a      	mov	r2, r1
 8109df4:	e7d7      	b.n	8109da6 <__b2d+0x4a>
 8109df6:	bf00      	nop
 8109df8:	3ff00000 	.word	0x3ff00000

08109dfc <__d2b>:
 8109dfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8109e00:	4689      	mov	r9, r1
 8109e02:	2101      	movs	r1, #1
 8109e04:	ec57 6b10 	vmov	r6, r7, d0
 8109e08:	4690      	mov	r8, r2
 8109e0a:	f7ff fc09 	bl	8109620 <_Balloc>
 8109e0e:	4604      	mov	r4, r0
 8109e10:	b930      	cbnz	r0, 8109e20 <__d2b+0x24>
 8109e12:	4602      	mov	r2, r0
 8109e14:	4b25      	ldr	r3, [pc, #148]	; (8109eac <__d2b+0xb0>)
 8109e16:	4826      	ldr	r0, [pc, #152]	; (8109eb0 <__d2b+0xb4>)
 8109e18:	f240 310a 	movw	r1, #778	; 0x30a
 8109e1c:	f000 fcfe 	bl	810a81c <__assert_func>
 8109e20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8109e24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8109e28:	bb35      	cbnz	r5, 8109e78 <__d2b+0x7c>
 8109e2a:	2e00      	cmp	r6, #0
 8109e2c:	9301      	str	r3, [sp, #4]
 8109e2e:	d028      	beq.n	8109e82 <__d2b+0x86>
 8109e30:	4668      	mov	r0, sp
 8109e32:	9600      	str	r6, [sp, #0]
 8109e34:	f7ff fd06 	bl	8109844 <__lo0bits>
 8109e38:	9900      	ldr	r1, [sp, #0]
 8109e3a:	b300      	cbz	r0, 8109e7e <__d2b+0x82>
 8109e3c:	9a01      	ldr	r2, [sp, #4]
 8109e3e:	f1c0 0320 	rsb	r3, r0, #32
 8109e42:	fa02 f303 	lsl.w	r3, r2, r3
 8109e46:	430b      	orrs	r3, r1
 8109e48:	40c2      	lsrs	r2, r0
 8109e4a:	6163      	str	r3, [r4, #20]
 8109e4c:	9201      	str	r2, [sp, #4]
 8109e4e:	9b01      	ldr	r3, [sp, #4]
 8109e50:	61a3      	str	r3, [r4, #24]
 8109e52:	2b00      	cmp	r3, #0
 8109e54:	bf14      	ite	ne
 8109e56:	2202      	movne	r2, #2
 8109e58:	2201      	moveq	r2, #1
 8109e5a:	6122      	str	r2, [r4, #16]
 8109e5c:	b1d5      	cbz	r5, 8109e94 <__d2b+0x98>
 8109e5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8109e62:	4405      	add	r5, r0
 8109e64:	f8c9 5000 	str.w	r5, [r9]
 8109e68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8109e6c:	f8c8 0000 	str.w	r0, [r8]
 8109e70:	4620      	mov	r0, r4
 8109e72:	b003      	add	sp, #12
 8109e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8109e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8109e7c:	e7d5      	b.n	8109e2a <__d2b+0x2e>
 8109e7e:	6161      	str	r1, [r4, #20]
 8109e80:	e7e5      	b.n	8109e4e <__d2b+0x52>
 8109e82:	a801      	add	r0, sp, #4
 8109e84:	f7ff fcde 	bl	8109844 <__lo0bits>
 8109e88:	9b01      	ldr	r3, [sp, #4]
 8109e8a:	6163      	str	r3, [r4, #20]
 8109e8c:	2201      	movs	r2, #1
 8109e8e:	6122      	str	r2, [r4, #16]
 8109e90:	3020      	adds	r0, #32
 8109e92:	e7e3      	b.n	8109e5c <__d2b+0x60>
 8109e94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8109e98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8109e9c:	f8c9 0000 	str.w	r0, [r9]
 8109ea0:	6918      	ldr	r0, [r3, #16]
 8109ea2:	f7ff fcaf 	bl	8109804 <__hi0bits>
 8109ea6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8109eaa:	e7df      	b.n	8109e6c <__d2b+0x70>
 8109eac:	0810ad90 	.word	0x0810ad90
 8109eb0:	0810ae80 	.word	0x0810ae80

08109eb4 <__ratio>:
 8109eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109eb8:	4688      	mov	r8, r1
 8109eba:	4669      	mov	r1, sp
 8109ebc:	4681      	mov	r9, r0
 8109ebe:	f7ff ff4d 	bl	8109d5c <__b2d>
 8109ec2:	a901      	add	r1, sp, #4
 8109ec4:	4640      	mov	r0, r8
 8109ec6:	ec55 4b10 	vmov	r4, r5, d0
 8109eca:	f7ff ff47 	bl	8109d5c <__b2d>
 8109ece:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8109ed2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8109ed6:	eba3 0c02 	sub.w	ip, r3, r2
 8109eda:	e9dd 3200 	ldrd	r3, r2, [sp]
 8109ede:	1a9b      	subs	r3, r3, r2
 8109ee0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8109ee4:	ec51 0b10 	vmov	r0, r1, d0
 8109ee8:	2b00      	cmp	r3, #0
 8109eea:	bfd6      	itet	le
 8109eec:	460a      	movle	r2, r1
 8109eee:	462a      	movgt	r2, r5
 8109ef0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8109ef4:	468b      	mov	fp, r1
 8109ef6:	462f      	mov	r7, r5
 8109ef8:	bfd4      	ite	le
 8109efa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8109efe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8109f02:	4620      	mov	r0, r4
 8109f04:	ee10 2a10 	vmov	r2, s0
 8109f08:	465b      	mov	r3, fp
 8109f0a:	4639      	mov	r1, r7
 8109f0c:	f7f6 fd26 	bl	810095c <__aeabi_ddiv>
 8109f10:	ec41 0b10 	vmov	d0, r0, r1
 8109f14:	b003      	add	sp, #12
 8109f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08109f1a <__copybits>:
 8109f1a:	3901      	subs	r1, #1
 8109f1c:	b570      	push	{r4, r5, r6, lr}
 8109f1e:	1149      	asrs	r1, r1, #5
 8109f20:	6914      	ldr	r4, [r2, #16]
 8109f22:	3101      	adds	r1, #1
 8109f24:	f102 0314 	add.w	r3, r2, #20
 8109f28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8109f2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8109f30:	1f05      	subs	r5, r0, #4
 8109f32:	42a3      	cmp	r3, r4
 8109f34:	d30c      	bcc.n	8109f50 <__copybits+0x36>
 8109f36:	1aa3      	subs	r3, r4, r2
 8109f38:	3b11      	subs	r3, #17
 8109f3a:	f023 0303 	bic.w	r3, r3, #3
 8109f3e:	3211      	adds	r2, #17
 8109f40:	42a2      	cmp	r2, r4
 8109f42:	bf88      	it	hi
 8109f44:	2300      	movhi	r3, #0
 8109f46:	4418      	add	r0, r3
 8109f48:	2300      	movs	r3, #0
 8109f4a:	4288      	cmp	r0, r1
 8109f4c:	d305      	bcc.n	8109f5a <__copybits+0x40>
 8109f4e:	bd70      	pop	{r4, r5, r6, pc}
 8109f50:	f853 6b04 	ldr.w	r6, [r3], #4
 8109f54:	f845 6f04 	str.w	r6, [r5, #4]!
 8109f58:	e7eb      	b.n	8109f32 <__copybits+0x18>
 8109f5a:	f840 3b04 	str.w	r3, [r0], #4
 8109f5e:	e7f4      	b.n	8109f4a <__copybits+0x30>

08109f60 <__any_on>:
 8109f60:	f100 0214 	add.w	r2, r0, #20
 8109f64:	6900      	ldr	r0, [r0, #16]
 8109f66:	114b      	asrs	r3, r1, #5
 8109f68:	4298      	cmp	r0, r3
 8109f6a:	b510      	push	{r4, lr}
 8109f6c:	db11      	blt.n	8109f92 <__any_on+0x32>
 8109f6e:	dd0a      	ble.n	8109f86 <__any_on+0x26>
 8109f70:	f011 011f 	ands.w	r1, r1, #31
 8109f74:	d007      	beq.n	8109f86 <__any_on+0x26>
 8109f76:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8109f7a:	fa24 f001 	lsr.w	r0, r4, r1
 8109f7e:	fa00 f101 	lsl.w	r1, r0, r1
 8109f82:	428c      	cmp	r4, r1
 8109f84:	d10b      	bne.n	8109f9e <__any_on+0x3e>
 8109f86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8109f8a:	4293      	cmp	r3, r2
 8109f8c:	d803      	bhi.n	8109f96 <__any_on+0x36>
 8109f8e:	2000      	movs	r0, #0
 8109f90:	bd10      	pop	{r4, pc}
 8109f92:	4603      	mov	r3, r0
 8109f94:	e7f7      	b.n	8109f86 <__any_on+0x26>
 8109f96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8109f9a:	2900      	cmp	r1, #0
 8109f9c:	d0f5      	beq.n	8109f8a <__any_on+0x2a>
 8109f9e:	2001      	movs	r0, #1
 8109fa0:	e7f6      	b.n	8109f90 <__any_on+0x30>

08109fa2 <_calloc_r>:
 8109fa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8109fa4:	fba1 2402 	umull	r2, r4, r1, r2
 8109fa8:	b94c      	cbnz	r4, 8109fbe <_calloc_r+0x1c>
 8109faa:	4611      	mov	r1, r2
 8109fac:	9201      	str	r2, [sp, #4]
 8109fae:	f000 f87b 	bl	810a0a8 <_malloc_r>
 8109fb2:	9a01      	ldr	r2, [sp, #4]
 8109fb4:	4605      	mov	r5, r0
 8109fb6:	b930      	cbnz	r0, 8109fc6 <_calloc_r+0x24>
 8109fb8:	4628      	mov	r0, r5
 8109fba:	b003      	add	sp, #12
 8109fbc:	bd30      	pop	{r4, r5, pc}
 8109fbe:	220c      	movs	r2, #12
 8109fc0:	6002      	str	r2, [r0, #0]
 8109fc2:	2500      	movs	r5, #0
 8109fc4:	e7f8      	b.n	8109fb8 <_calloc_r+0x16>
 8109fc6:	4621      	mov	r1, r4
 8109fc8:	f7fc f854 	bl	8106074 <memset>
 8109fcc:	e7f4      	b.n	8109fb8 <_calloc_r+0x16>
	...

08109fd0 <_free_r>:
 8109fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8109fd2:	2900      	cmp	r1, #0
 8109fd4:	d044      	beq.n	810a060 <_free_r+0x90>
 8109fd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8109fda:	9001      	str	r0, [sp, #4]
 8109fdc:	2b00      	cmp	r3, #0
 8109fde:	f1a1 0404 	sub.w	r4, r1, #4
 8109fe2:	bfb8      	it	lt
 8109fe4:	18e4      	addlt	r4, r4, r3
 8109fe6:	f000 fca7 	bl	810a938 <__malloc_lock>
 8109fea:	4a1e      	ldr	r2, [pc, #120]	; (810a064 <_free_r+0x94>)
 8109fec:	9801      	ldr	r0, [sp, #4]
 8109fee:	6813      	ldr	r3, [r2, #0]
 8109ff0:	b933      	cbnz	r3, 810a000 <_free_r+0x30>
 8109ff2:	6063      	str	r3, [r4, #4]
 8109ff4:	6014      	str	r4, [r2, #0]
 8109ff6:	b003      	add	sp, #12
 8109ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8109ffc:	f000 bca2 	b.w	810a944 <__malloc_unlock>
 810a000:	42a3      	cmp	r3, r4
 810a002:	d908      	bls.n	810a016 <_free_r+0x46>
 810a004:	6825      	ldr	r5, [r4, #0]
 810a006:	1961      	adds	r1, r4, r5
 810a008:	428b      	cmp	r3, r1
 810a00a:	bf01      	itttt	eq
 810a00c:	6819      	ldreq	r1, [r3, #0]
 810a00e:	685b      	ldreq	r3, [r3, #4]
 810a010:	1949      	addeq	r1, r1, r5
 810a012:	6021      	streq	r1, [r4, #0]
 810a014:	e7ed      	b.n	8109ff2 <_free_r+0x22>
 810a016:	461a      	mov	r2, r3
 810a018:	685b      	ldr	r3, [r3, #4]
 810a01a:	b10b      	cbz	r3, 810a020 <_free_r+0x50>
 810a01c:	42a3      	cmp	r3, r4
 810a01e:	d9fa      	bls.n	810a016 <_free_r+0x46>
 810a020:	6811      	ldr	r1, [r2, #0]
 810a022:	1855      	adds	r5, r2, r1
 810a024:	42a5      	cmp	r5, r4
 810a026:	d10b      	bne.n	810a040 <_free_r+0x70>
 810a028:	6824      	ldr	r4, [r4, #0]
 810a02a:	4421      	add	r1, r4
 810a02c:	1854      	adds	r4, r2, r1
 810a02e:	42a3      	cmp	r3, r4
 810a030:	6011      	str	r1, [r2, #0]
 810a032:	d1e0      	bne.n	8109ff6 <_free_r+0x26>
 810a034:	681c      	ldr	r4, [r3, #0]
 810a036:	685b      	ldr	r3, [r3, #4]
 810a038:	6053      	str	r3, [r2, #4]
 810a03a:	4421      	add	r1, r4
 810a03c:	6011      	str	r1, [r2, #0]
 810a03e:	e7da      	b.n	8109ff6 <_free_r+0x26>
 810a040:	d902      	bls.n	810a048 <_free_r+0x78>
 810a042:	230c      	movs	r3, #12
 810a044:	6003      	str	r3, [r0, #0]
 810a046:	e7d6      	b.n	8109ff6 <_free_r+0x26>
 810a048:	6825      	ldr	r5, [r4, #0]
 810a04a:	1961      	adds	r1, r4, r5
 810a04c:	428b      	cmp	r3, r1
 810a04e:	bf04      	itt	eq
 810a050:	6819      	ldreq	r1, [r3, #0]
 810a052:	685b      	ldreq	r3, [r3, #4]
 810a054:	6063      	str	r3, [r4, #4]
 810a056:	bf04      	itt	eq
 810a058:	1949      	addeq	r1, r1, r5
 810a05a:	6021      	streq	r1, [r4, #0]
 810a05c:	6054      	str	r4, [r2, #4]
 810a05e:	e7ca      	b.n	8109ff6 <_free_r+0x26>
 810a060:	b003      	add	sp, #12
 810a062:	bd30      	pop	{r4, r5, pc}
 810a064:	100002f8 	.word	0x100002f8

0810a068 <sbrk_aligned>:
 810a068:	b570      	push	{r4, r5, r6, lr}
 810a06a:	4e0e      	ldr	r6, [pc, #56]	; (810a0a4 <sbrk_aligned+0x3c>)
 810a06c:	460c      	mov	r4, r1
 810a06e:	6831      	ldr	r1, [r6, #0]
 810a070:	4605      	mov	r5, r0
 810a072:	b911      	cbnz	r1, 810a07a <sbrk_aligned+0x12>
 810a074:	f000 fb4c 	bl	810a710 <_sbrk_r>
 810a078:	6030      	str	r0, [r6, #0]
 810a07a:	4621      	mov	r1, r4
 810a07c:	4628      	mov	r0, r5
 810a07e:	f000 fb47 	bl	810a710 <_sbrk_r>
 810a082:	1c43      	adds	r3, r0, #1
 810a084:	d00a      	beq.n	810a09c <sbrk_aligned+0x34>
 810a086:	1cc4      	adds	r4, r0, #3
 810a088:	f024 0403 	bic.w	r4, r4, #3
 810a08c:	42a0      	cmp	r0, r4
 810a08e:	d007      	beq.n	810a0a0 <sbrk_aligned+0x38>
 810a090:	1a21      	subs	r1, r4, r0
 810a092:	4628      	mov	r0, r5
 810a094:	f000 fb3c 	bl	810a710 <_sbrk_r>
 810a098:	3001      	adds	r0, #1
 810a09a:	d101      	bne.n	810a0a0 <sbrk_aligned+0x38>
 810a09c:	f04f 34ff 	mov.w	r4, #4294967295
 810a0a0:	4620      	mov	r0, r4
 810a0a2:	bd70      	pop	{r4, r5, r6, pc}
 810a0a4:	100002fc 	.word	0x100002fc

0810a0a8 <_malloc_r>:
 810a0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a0ac:	1ccd      	adds	r5, r1, #3
 810a0ae:	f025 0503 	bic.w	r5, r5, #3
 810a0b2:	3508      	adds	r5, #8
 810a0b4:	2d0c      	cmp	r5, #12
 810a0b6:	bf38      	it	cc
 810a0b8:	250c      	movcc	r5, #12
 810a0ba:	2d00      	cmp	r5, #0
 810a0bc:	4607      	mov	r7, r0
 810a0be:	db01      	blt.n	810a0c4 <_malloc_r+0x1c>
 810a0c0:	42a9      	cmp	r1, r5
 810a0c2:	d905      	bls.n	810a0d0 <_malloc_r+0x28>
 810a0c4:	230c      	movs	r3, #12
 810a0c6:	603b      	str	r3, [r7, #0]
 810a0c8:	2600      	movs	r6, #0
 810a0ca:	4630      	mov	r0, r6
 810a0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a0d0:	4e2e      	ldr	r6, [pc, #184]	; (810a18c <_malloc_r+0xe4>)
 810a0d2:	f000 fc31 	bl	810a938 <__malloc_lock>
 810a0d6:	6833      	ldr	r3, [r6, #0]
 810a0d8:	461c      	mov	r4, r3
 810a0da:	bb34      	cbnz	r4, 810a12a <_malloc_r+0x82>
 810a0dc:	4629      	mov	r1, r5
 810a0de:	4638      	mov	r0, r7
 810a0e0:	f7ff ffc2 	bl	810a068 <sbrk_aligned>
 810a0e4:	1c43      	adds	r3, r0, #1
 810a0e6:	4604      	mov	r4, r0
 810a0e8:	d14d      	bne.n	810a186 <_malloc_r+0xde>
 810a0ea:	6834      	ldr	r4, [r6, #0]
 810a0ec:	4626      	mov	r6, r4
 810a0ee:	2e00      	cmp	r6, #0
 810a0f0:	d140      	bne.n	810a174 <_malloc_r+0xcc>
 810a0f2:	6823      	ldr	r3, [r4, #0]
 810a0f4:	4631      	mov	r1, r6
 810a0f6:	4638      	mov	r0, r7
 810a0f8:	eb04 0803 	add.w	r8, r4, r3
 810a0fc:	f000 fb08 	bl	810a710 <_sbrk_r>
 810a100:	4580      	cmp	r8, r0
 810a102:	d13a      	bne.n	810a17a <_malloc_r+0xd2>
 810a104:	6821      	ldr	r1, [r4, #0]
 810a106:	3503      	adds	r5, #3
 810a108:	1a6d      	subs	r5, r5, r1
 810a10a:	f025 0503 	bic.w	r5, r5, #3
 810a10e:	3508      	adds	r5, #8
 810a110:	2d0c      	cmp	r5, #12
 810a112:	bf38      	it	cc
 810a114:	250c      	movcc	r5, #12
 810a116:	4629      	mov	r1, r5
 810a118:	4638      	mov	r0, r7
 810a11a:	f7ff ffa5 	bl	810a068 <sbrk_aligned>
 810a11e:	3001      	adds	r0, #1
 810a120:	d02b      	beq.n	810a17a <_malloc_r+0xd2>
 810a122:	6823      	ldr	r3, [r4, #0]
 810a124:	442b      	add	r3, r5
 810a126:	6023      	str	r3, [r4, #0]
 810a128:	e00e      	b.n	810a148 <_malloc_r+0xa0>
 810a12a:	6822      	ldr	r2, [r4, #0]
 810a12c:	1b52      	subs	r2, r2, r5
 810a12e:	d41e      	bmi.n	810a16e <_malloc_r+0xc6>
 810a130:	2a0b      	cmp	r2, #11
 810a132:	d916      	bls.n	810a162 <_malloc_r+0xba>
 810a134:	1961      	adds	r1, r4, r5
 810a136:	42a3      	cmp	r3, r4
 810a138:	6025      	str	r5, [r4, #0]
 810a13a:	bf18      	it	ne
 810a13c:	6059      	strne	r1, [r3, #4]
 810a13e:	6863      	ldr	r3, [r4, #4]
 810a140:	bf08      	it	eq
 810a142:	6031      	streq	r1, [r6, #0]
 810a144:	5162      	str	r2, [r4, r5]
 810a146:	604b      	str	r3, [r1, #4]
 810a148:	4638      	mov	r0, r7
 810a14a:	f104 060b 	add.w	r6, r4, #11
 810a14e:	f000 fbf9 	bl	810a944 <__malloc_unlock>
 810a152:	f026 0607 	bic.w	r6, r6, #7
 810a156:	1d23      	adds	r3, r4, #4
 810a158:	1af2      	subs	r2, r6, r3
 810a15a:	d0b6      	beq.n	810a0ca <_malloc_r+0x22>
 810a15c:	1b9b      	subs	r3, r3, r6
 810a15e:	50a3      	str	r3, [r4, r2]
 810a160:	e7b3      	b.n	810a0ca <_malloc_r+0x22>
 810a162:	6862      	ldr	r2, [r4, #4]
 810a164:	42a3      	cmp	r3, r4
 810a166:	bf0c      	ite	eq
 810a168:	6032      	streq	r2, [r6, #0]
 810a16a:	605a      	strne	r2, [r3, #4]
 810a16c:	e7ec      	b.n	810a148 <_malloc_r+0xa0>
 810a16e:	4623      	mov	r3, r4
 810a170:	6864      	ldr	r4, [r4, #4]
 810a172:	e7b2      	b.n	810a0da <_malloc_r+0x32>
 810a174:	4634      	mov	r4, r6
 810a176:	6876      	ldr	r6, [r6, #4]
 810a178:	e7b9      	b.n	810a0ee <_malloc_r+0x46>
 810a17a:	230c      	movs	r3, #12
 810a17c:	603b      	str	r3, [r7, #0]
 810a17e:	4638      	mov	r0, r7
 810a180:	f000 fbe0 	bl	810a944 <__malloc_unlock>
 810a184:	e7a1      	b.n	810a0ca <_malloc_r+0x22>
 810a186:	6025      	str	r5, [r4, #0]
 810a188:	e7de      	b.n	810a148 <_malloc_r+0xa0>
 810a18a:	bf00      	nop
 810a18c:	100002f8 	.word	0x100002f8

0810a190 <__ssputs_r>:
 810a190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a194:	688e      	ldr	r6, [r1, #8]
 810a196:	429e      	cmp	r6, r3
 810a198:	4682      	mov	sl, r0
 810a19a:	460c      	mov	r4, r1
 810a19c:	4690      	mov	r8, r2
 810a19e:	461f      	mov	r7, r3
 810a1a0:	d838      	bhi.n	810a214 <__ssputs_r+0x84>
 810a1a2:	898a      	ldrh	r2, [r1, #12]
 810a1a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810a1a8:	d032      	beq.n	810a210 <__ssputs_r+0x80>
 810a1aa:	6825      	ldr	r5, [r4, #0]
 810a1ac:	6909      	ldr	r1, [r1, #16]
 810a1ae:	eba5 0901 	sub.w	r9, r5, r1
 810a1b2:	6965      	ldr	r5, [r4, #20]
 810a1b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810a1b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810a1bc:	3301      	adds	r3, #1
 810a1be:	444b      	add	r3, r9
 810a1c0:	106d      	asrs	r5, r5, #1
 810a1c2:	429d      	cmp	r5, r3
 810a1c4:	bf38      	it	cc
 810a1c6:	461d      	movcc	r5, r3
 810a1c8:	0553      	lsls	r3, r2, #21
 810a1ca:	d531      	bpl.n	810a230 <__ssputs_r+0xa0>
 810a1cc:	4629      	mov	r1, r5
 810a1ce:	f7ff ff6b 	bl	810a0a8 <_malloc_r>
 810a1d2:	4606      	mov	r6, r0
 810a1d4:	b950      	cbnz	r0, 810a1ec <__ssputs_r+0x5c>
 810a1d6:	230c      	movs	r3, #12
 810a1d8:	f8ca 3000 	str.w	r3, [sl]
 810a1dc:	89a3      	ldrh	r3, [r4, #12]
 810a1de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a1e2:	81a3      	strh	r3, [r4, #12]
 810a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 810a1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a1ec:	6921      	ldr	r1, [r4, #16]
 810a1ee:	464a      	mov	r2, r9
 810a1f0:	f7ff fa08 	bl	8109604 <memcpy>
 810a1f4:	89a3      	ldrh	r3, [r4, #12]
 810a1f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810a1fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a1fe:	81a3      	strh	r3, [r4, #12]
 810a200:	6126      	str	r6, [r4, #16]
 810a202:	6165      	str	r5, [r4, #20]
 810a204:	444e      	add	r6, r9
 810a206:	eba5 0509 	sub.w	r5, r5, r9
 810a20a:	6026      	str	r6, [r4, #0]
 810a20c:	60a5      	str	r5, [r4, #8]
 810a20e:	463e      	mov	r6, r7
 810a210:	42be      	cmp	r6, r7
 810a212:	d900      	bls.n	810a216 <__ssputs_r+0x86>
 810a214:	463e      	mov	r6, r7
 810a216:	6820      	ldr	r0, [r4, #0]
 810a218:	4632      	mov	r2, r6
 810a21a:	4641      	mov	r1, r8
 810a21c:	f000 fb72 	bl	810a904 <memmove>
 810a220:	68a3      	ldr	r3, [r4, #8]
 810a222:	1b9b      	subs	r3, r3, r6
 810a224:	60a3      	str	r3, [r4, #8]
 810a226:	6823      	ldr	r3, [r4, #0]
 810a228:	4433      	add	r3, r6
 810a22a:	6023      	str	r3, [r4, #0]
 810a22c:	2000      	movs	r0, #0
 810a22e:	e7db      	b.n	810a1e8 <__ssputs_r+0x58>
 810a230:	462a      	mov	r2, r5
 810a232:	f000 fb8d 	bl	810a950 <_realloc_r>
 810a236:	4606      	mov	r6, r0
 810a238:	2800      	cmp	r0, #0
 810a23a:	d1e1      	bne.n	810a200 <__ssputs_r+0x70>
 810a23c:	6921      	ldr	r1, [r4, #16]
 810a23e:	4650      	mov	r0, sl
 810a240:	f7ff fec6 	bl	8109fd0 <_free_r>
 810a244:	e7c7      	b.n	810a1d6 <__ssputs_r+0x46>
	...

0810a248 <_svfiprintf_r>:
 810a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a24c:	4698      	mov	r8, r3
 810a24e:	898b      	ldrh	r3, [r1, #12]
 810a250:	061b      	lsls	r3, r3, #24
 810a252:	b09d      	sub	sp, #116	; 0x74
 810a254:	4607      	mov	r7, r0
 810a256:	460d      	mov	r5, r1
 810a258:	4614      	mov	r4, r2
 810a25a:	d50e      	bpl.n	810a27a <_svfiprintf_r+0x32>
 810a25c:	690b      	ldr	r3, [r1, #16]
 810a25e:	b963      	cbnz	r3, 810a27a <_svfiprintf_r+0x32>
 810a260:	2140      	movs	r1, #64	; 0x40
 810a262:	f7ff ff21 	bl	810a0a8 <_malloc_r>
 810a266:	6028      	str	r0, [r5, #0]
 810a268:	6128      	str	r0, [r5, #16]
 810a26a:	b920      	cbnz	r0, 810a276 <_svfiprintf_r+0x2e>
 810a26c:	230c      	movs	r3, #12
 810a26e:	603b      	str	r3, [r7, #0]
 810a270:	f04f 30ff 	mov.w	r0, #4294967295
 810a274:	e0d1      	b.n	810a41a <_svfiprintf_r+0x1d2>
 810a276:	2340      	movs	r3, #64	; 0x40
 810a278:	616b      	str	r3, [r5, #20]
 810a27a:	2300      	movs	r3, #0
 810a27c:	9309      	str	r3, [sp, #36]	; 0x24
 810a27e:	2320      	movs	r3, #32
 810a280:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a284:	f8cd 800c 	str.w	r8, [sp, #12]
 810a288:	2330      	movs	r3, #48	; 0x30
 810a28a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810a434 <_svfiprintf_r+0x1ec>
 810a28e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a292:	f04f 0901 	mov.w	r9, #1
 810a296:	4623      	mov	r3, r4
 810a298:	469a      	mov	sl, r3
 810a29a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a29e:	b10a      	cbz	r2, 810a2a4 <_svfiprintf_r+0x5c>
 810a2a0:	2a25      	cmp	r2, #37	; 0x25
 810a2a2:	d1f9      	bne.n	810a298 <_svfiprintf_r+0x50>
 810a2a4:	ebba 0b04 	subs.w	fp, sl, r4
 810a2a8:	d00b      	beq.n	810a2c2 <_svfiprintf_r+0x7a>
 810a2aa:	465b      	mov	r3, fp
 810a2ac:	4622      	mov	r2, r4
 810a2ae:	4629      	mov	r1, r5
 810a2b0:	4638      	mov	r0, r7
 810a2b2:	f7ff ff6d 	bl	810a190 <__ssputs_r>
 810a2b6:	3001      	adds	r0, #1
 810a2b8:	f000 80aa 	beq.w	810a410 <_svfiprintf_r+0x1c8>
 810a2bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a2be:	445a      	add	r2, fp
 810a2c0:	9209      	str	r2, [sp, #36]	; 0x24
 810a2c2:	f89a 3000 	ldrb.w	r3, [sl]
 810a2c6:	2b00      	cmp	r3, #0
 810a2c8:	f000 80a2 	beq.w	810a410 <_svfiprintf_r+0x1c8>
 810a2cc:	2300      	movs	r3, #0
 810a2ce:	f04f 32ff 	mov.w	r2, #4294967295
 810a2d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a2d6:	f10a 0a01 	add.w	sl, sl, #1
 810a2da:	9304      	str	r3, [sp, #16]
 810a2dc:	9307      	str	r3, [sp, #28]
 810a2de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a2e2:	931a      	str	r3, [sp, #104]	; 0x68
 810a2e4:	4654      	mov	r4, sl
 810a2e6:	2205      	movs	r2, #5
 810a2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a2ec:	4851      	ldr	r0, [pc, #324]	; (810a434 <_svfiprintf_r+0x1ec>)
 810a2ee:	f7f5 ffff 	bl	81002f0 <memchr>
 810a2f2:	9a04      	ldr	r2, [sp, #16]
 810a2f4:	b9d8      	cbnz	r0, 810a32e <_svfiprintf_r+0xe6>
 810a2f6:	06d0      	lsls	r0, r2, #27
 810a2f8:	bf44      	itt	mi
 810a2fa:	2320      	movmi	r3, #32
 810a2fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a300:	0711      	lsls	r1, r2, #28
 810a302:	bf44      	itt	mi
 810a304:	232b      	movmi	r3, #43	; 0x2b
 810a306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a30a:	f89a 3000 	ldrb.w	r3, [sl]
 810a30e:	2b2a      	cmp	r3, #42	; 0x2a
 810a310:	d015      	beq.n	810a33e <_svfiprintf_r+0xf6>
 810a312:	9a07      	ldr	r2, [sp, #28]
 810a314:	4654      	mov	r4, sl
 810a316:	2000      	movs	r0, #0
 810a318:	f04f 0c0a 	mov.w	ip, #10
 810a31c:	4621      	mov	r1, r4
 810a31e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a322:	3b30      	subs	r3, #48	; 0x30
 810a324:	2b09      	cmp	r3, #9
 810a326:	d94e      	bls.n	810a3c6 <_svfiprintf_r+0x17e>
 810a328:	b1b0      	cbz	r0, 810a358 <_svfiprintf_r+0x110>
 810a32a:	9207      	str	r2, [sp, #28]
 810a32c:	e014      	b.n	810a358 <_svfiprintf_r+0x110>
 810a32e:	eba0 0308 	sub.w	r3, r0, r8
 810a332:	fa09 f303 	lsl.w	r3, r9, r3
 810a336:	4313      	orrs	r3, r2
 810a338:	9304      	str	r3, [sp, #16]
 810a33a:	46a2      	mov	sl, r4
 810a33c:	e7d2      	b.n	810a2e4 <_svfiprintf_r+0x9c>
 810a33e:	9b03      	ldr	r3, [sp, #12]
 810a340:	1d19      	adds	r1, r3, #4
 810a342:	681b      	ldr	r3, [r3, #0]
 810a344:	9103      	str	r1, [sp, #12]
 810a346:	2b00      	cmp	r3, #0
 810a348:	bfbb      	ittet	lt
 810a34a:	425b      	neglt	r3, r3
 810a34c:	f042 0202 	orrlt.w	r2, r2, #2
 810a350:	9307      	strge	r3, [sp, #28]
 810a352:	9307      	strlt	r3, [sp, #28]
 810a354:	bfb8      	it	lt
 810a356:	9204      	strlt	r2, [sp, #16]
 810a358:	7823      	ldrb	r3, [r4, #0]
 810a35a:	2b2e      	cmp	r3, #46	; 0x2e
 810a35c:	d10c      	bne.n	810a378 <_svfiprintf_r+0x130>
 810a35e:	7863      	ldrb	r3, [r4, #1]
 810a360:	2b2a      	cmp	r3, #42	; 0x2a
 810a362:	d135      	bne.n	810a3d0 <_svfiprintf_r+0x188>
 810a364:	9b03      	ldr	r3, [sp, #12]
 810a366:	1d1a      	adds	r2, r3, #4
 810a368:	681b      	ldr	r3, [r3, #0]
 810a36a:	9203      	str	r2, [sp, #12]
 810a36c:	2b00      	cmp	r3, #0
 810a36e:	bfb8      	it	lt
 810a370:	f04f 33ff 	movlt.w	r3, #4294967295
 810a374:	3402      	adds	r4, #2
 810a376:	9305      	str	r3, [sp, #20]
 810a378:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810a444 <_svfiprintf_r+0x1fc>
 810a37c:	7821      	ldrb	r1, [r4, #0]
 810a37e:	2203      	movs	r2, #3
 810a380:	4650      	mov	r0, sl
 810a382:	f7f5 ffb5 	bl	81002f0 <memchr>
 810a386:	b140      	cbz	r0, 810a39a <_svfiprintf_r+0x152>
 810a388:	2340      	movs	r3, #64	; 0x40
 810a38a:	eba0 000a 	sub.w	r0, r0, sl
 810a38e:	fa03 f000 	lsl.w	r0, r3, r0
 810a392:	9b04      	ldr	r3, [sp, #16]
 810a394:	4303      	orrs	r3, r0
 810a396:	3401      	adds	r4, #1
 810a398:	9304      	str	r3, [sp, #16]
 810a39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a39e:	4826      	ldr	r0, [pc, #152]	; (810a438 <_svfiprintf_r+0x1f0>)
 810a3a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a3a4:	2206      	movs	r2, #6
 810a3a6:	f7f5 ffa3 	bl	81002f0 <memchr>
 810a3aa:	2800      	cmp	r0, #0
 810a3ac:	d038      	beq.n	810a420 <_svfiprintf_r+0x1d8>
 810a3ae:	4b23      	ldr	r3, [pc, #140]	; (810a43c <_svfiprintf_r+0x1f4>)
 810a3b0:	bb1b      	cbnz	r3, 810a3fa <_svfiprintf_r+0x1b2>
 810a3b2:	9b03      	ldr	r3, [sp, #12]
 810a3b4:	3307      	adds	r3, #7
 810a3b6:	f023 0307 	bic.w	r3, r3, #7
 810a3ba:	3308      	adds	r3, #8
 810a3bc:	9303      	str	r3, [sp, #12]
 810a3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a3c0:	4433      	add	r3, r6
 810a3c2:	9309      	str	r3, [sp, #36]	; 0x24
 810a3c4:	e767      	b.n	810a296 <_svfiprintf_r+0x4e>
 810a3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 810a3ca:	460c      	mov	r4, r1
 810a3cc:	2001      	movs	r0, #1
 810a3ce:	e7a5      	b.n	810a31c <_svfiprintf_r+0xd4>
 810a3d0:	2300      	movs	r3, #0
 810a3d2:	3401      	adds	r4, #1
 810a3d4:	9305      	str	r3, [sp, #20]
 810a3d6:	4619      	mov	r1, r3
 810a3d8:	f04f 0c0a 	mov.w	ip, #10
 810a3dc:	4620      	mov	r0, r4
 810a3de:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a3e2:	3a30      	subs	r2, #48	; 0x30
 810a3e4:	2a09      	cmp	r2, #9
 810a3e6:	d903      	bls.n	810a3f0 <_svfiprintf_r+0x1a8>
 810a3e8:	2b00      	cmp	r3, #0
 810a3ea:	d0c5      	beq.n	810a378 <_svfiprintf_r+0x130>
 810a3ec:	9105      	str	r1, [sp, #20]
 810a3ee:	e7c3      	b.n	810a378 <_svfiprintf_r+0x130>
 810a3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 810a3f4:	4604      	mov	r4, r0
 810a3f6:	2301      	movs	r3, #1
 810a3f8:	e7f0      	b.n	810a3dc <_svfiprintf_r+0x194>
 810a3fa:	ab03      	add	r3, sp, #12
 810a3fc:	9300      	str	r3, [sp, #0]
 810a3fe:	462a      	mov	r2, r5
 810a400:	4b0f      	ldr	r3, [pc, #60]	; (810a440 <_svfiprintf_r+0x1f8>)
 810a402:	a904      	add	r1, sp, #16
 810a404:	4638      	mov	r0, r7
 810a406:	f7fb fedd 	bl	81061c4 <_printf_float>
 810a40a:	1c42      	adds	r2, r0, #1
 810a40c:	4606      	mov	r6, r0
 810a40e:	d1d6      	bne.n	810a3be <_svfiprintf_r+0x176>
 810a410:	89ab      	ldrh	r3, [r5, #12]
 810a412:	065b      	lsls	r3, r3, #25
 810a414:	f53f af2c 	bmi.w	810a270 <_svfiprintf_r+0x28>
 810a418:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a41a:	b01d      	add	sp, #116	; 0x74
 810a41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a420:	ab03      	add	r3, sp, #12
 810a422:	9300      	str	r3, [sp, #0]
 810a424:	462a      	mov	r2, r5
 810a426:	4b06      	ldr	r3, [pc, #24]	; (810a440 <_svfiprintf_r+0x1f8>)
 810a428:	a904      	add	r1, sp, #16
 810a42a:	4638      	mov	r0, r7
 810a42c:	f7fc f96e 	bl	810670c <_printf_i>
 810a430:	e7eb      	b.n	810a40a <_svfiprintf_r+0x1c2>
 810a432:	bf00      	nop
 810a434:	0810afdc 	.word	0x0810afdc
 810a438:	0810afe6 	.word	0x0810afe6
 810a43c:	081061c5 	.word	0x081061c5
 810a440:	0810a191 	.word	0x0810a191
 810a444:	0810afe2 	.word	0x0810afe2

0810a448 <__sfputc_r>:
 810a448:	6893      	ldr	r3, [r2, #8]
 810a44a:	3b01      	subs	r3, #1
 810a44c:	2b00      	cmp	r3, #0
 810a44e:	b410      	push	{r4}
 810a450:	6093      	str	r3, [r2, #8]
 810a452:	da08      	bge.n	810a466 <__sfputc_r+0x1e>
 810a454:	6994      	ldr	r4, [r2, #24]
 810a456:	42a3      	cmp	r3, r4
 810a458:	db01      	blt.n	810a45e <__sfputc_r+0x16>
 810a45a:	290a      	cmp	r1, #10
 810a45c:	d103      	bne.n	810a466 <__sfputc_r+0x1e>
 810a45e:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a462:	f7fd bbe9 	b.w	8107c38 <__swbuf_r>
 810a466:	6813      	ldr	r3, [r2, #0]
 810a468:	1c58      	adds	r0, r3, #1
 810a46a:	6010      	str	r0, [r2, #0]
 810a46c:	7019      	strb	r1, [r3, #0]
 810a46e:	4608      	mov	r0, r1
 810a470:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a474:	4770      	bx	lr

0810a476 <__sfputs_r>:
 810a476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a478:	4606      	mov	r6, r0
 810a47a:	460f      	mov	r7, r1
 810a47c:	4614      	mov	r4, r2
 810a47e:	18d5      	adds	r5, r2, r3
 810a480:	42ac      	cmp	r4, r5
 810a482:	d101      	bne.n	810a488 <__sfputs_r+0x12>
 810a484:	2000      	movs	r0, #0
 810a486:	e007      	b.n	810a498 <__sfputs_r+0x22>
 810a488:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a48c:	463a      	mov	r2, r7
 810a48e:	4630      	mov	r0, r6
 810a490:	f7ff ffda 	bl	810a448 <__sfputc_r>
 810a494:	1c43      	adds	r3, r0, #1
 810a496:	d1f3      	bne.n	810a480 <__sfputs_r+0xa>
 810a498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810a49c <_vfiprintf_r>:
 810a49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a4a0:	460d      	mov	r5, r1
 810a4a2:	b09d      	sub	sp, #116	; 0x74
 810a4a4:	4614      	mov	r4, r2
 810a4a6:	4698      	mov	r8, r3
 810a4a8:	4606      	mov	r6, r0
 810a4aa:	b118      	cbz	r0, 810a4b4 <_vfiprintf_r+0x18>
 810a4ac:	6983      	ldr	r3, [r0, #24]
 810a4ae:	b90b      	cbnz	r3, 810a4b4 <_vfiprintf_r+0x18>
 810a4b0:	f7fe fc16 	bl	8108ce0 <__sinit>
 810a4b4:	4b89      	ldr	r3, [pc, #548]	; (810a6dc <_vfiprintf_r+0x240>)
 810a4b6:	429d      	cmp	r5, r3
 810a4b8:	d11b      	bne.n	810a4f2 <_vfiprintf_r+0x56>
 810a4ba:	6875      	ldr	r5, [r6, #4]
 810a4bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a4be:	07d9      	lsls	r1, r3, #31
 810a4c0:	d405      	bmi.n	810a4ce <_vfiprintf_r+0x32>
 810a4c2:	89ab      	ldrh	r3, [r5, #12]
 810a4c4:	059a      	lsls	r2, r3, #22
 810a4c6:	d402      	bmi.n	810a4ce <_vfiprintf_r+0x32>
 810a4c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a4ca:	f7ff f81a 	bl	8109502 <__retarget_lock_acquire_recursive>
 810a4ce:	89ab      	ldrh	r3, [r5, #12]
 810a4d0:	071b      	lsls	r3, r3, #28
 810a4d2:	d501      	bpl.n	810a4d8 <_vfiprintf_r+0x3c>
 810a4d4:	692b      	ldr	r3, [r5, #16]
 810a4d6:	b9eb      	cbnz	r3, 810a514 <_vfiprintf_r+0x78>
 810a4d8:	4629      	mov	r1, r5
 810a4da:	4630      	mov	r0, r6
 810a4dc:	f7fd fbfe 	bl	8107cdc <__swsetup_r>
 810a4e0:	b1c0      	cbz	r0, 810a514 <_vfiprintf_r+0x78>
 810a4e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a4e4:	07dc      	lsls	r4, r3, #31
 810a4e6:	d50e      	bpl.n	810a506 <_vfiprintf_r+0x6a>
 810a4e8:	f04f 30ff 	mov.w	r0, #4294967295
 810a4ec:	b01d      	add	sp, #116	; 0x74
 810a4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a4f2:	4b7b      	ldr	r3, [pc, #492]	; (810a6e0 <_vfiprintf_r+0x244>)
 810a4f4:	429d      	cmp	r5, r3
 810a4f6:	d101      	bne.n	810a4fc <_vfiprintf_r+0x60>
 810a4f8:	68b5      	ldr	r5, [r6, #8]
 810a4fa:	e7df      	b.n	810a4bc <_vfiprintf_r+0x20>
 810a4fc:	4b79      	ldr	r3, [pc, #484]	; (810a6e4 <_vfiprintf_r+0x248>)
 810a4fe:	429d      	cmp	r5, r3
 810a500:	bf08      	it	eq
 810a502:	68f5      	ldreq	r5, [r6, #12]
 810a504:	e7da      	b.n	810a4bc <_vfiprintf_r+0x20>
 810a506:	89ab      	ldrh	r3, [r5, #12]
 810a508:	0598      	lsls	r0, r3, #22
 810a50a:	d4ed      	bmi.n	810a4e8 <_vfiprintf_r+0x4c>
 810a50c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a50e:	f7fe fff9 	bl	8109504 <__retarget_lock_release_recursive>
 810a512:	e7e9      	b.n	810a4e8 <_vfiprintf_r+0x4c>
 810a514:	2300      	movs	r3, #0
 810a516:	9309      	str	r3, [sp, #36]	; 0x24
 810a518:	2320      	movs	r3, #32
 810a51a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a51e:	f8cd 800c 	str.w	r8, [sp, #12]
 810a522:	2330      	movs	r3, #48	; 0x30
 810a524:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810a6e8 <_vfiprintf_r+0x24c>
 810a528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a52c:	f04f 0901 	mov.w	r9, #1
 810a530:	4623      	mov	r3, r4
 810a532:	469a      	mov	sl, r3
 810a534:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a538:	b10a      	cbz	r2, 810a53e <_vfiprintf_r+0xa2>
 810a53a:	2a25      	cmp	r2, #37	; 0x25
 810a53c:	d1f9      	bne.n	810a532 <_vfiprintf_r+0x96>
 810a53e:	ebba 0b04 	subs.w	fp, sl, r4
 810a542:	d00b      	beq.n	810a55c <_vfiprintf_r+0xc0>
 810a544:	465b      	mov	r3, fp
 810a546:	4622      	mov	r2, r4
 810a548:	4629      	mov	r1, r5
 810a54a:	4630      	mov	r0, r6
 810a54c:	f7ff ff93 	bl	810a476 <__sfputs_r>
 810a550:	3001      	adds	r0, #1
 810a552:	f000 80aa 	beq.w	810a6aa <_vfiprintf_r+0x20e>
 810a556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a558:	445a      	add	r2, fp
 810a55a:	9209      	str	r2, [sp, #36]	; 0x24
 810a55c:	f89a 3000 	ldrb.w	r3, [sl]
 810a560:	2b00      	cmp	r3, #0
 810a562:	f000 80a2 	beq.w	810a6aa <_vfiprintf_r+0x20e>
 810a566:	2300      	movs	r3, #0
 810a568:	f04f 32ff 	mov.w	r2, #4294967295
 810a56c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a570:	f10a 0a01 	add.w	sl, sl, #1
 810a574:	9304      	str	r3, [sp, #16]
 810a576:	9307      	str	r3, [sp, #28]
 810a578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a57c:	931a      	str	r3, [sp, #104]	; 0x68
 810a57e:	4654      	mov	r4, sl
 810a580:	2205      	movs	r2, #5
 810a582:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a586:	4858      	ldr	r0, [pc, #352]	; (810a6e8 <_vfiprintf_r+0x24c>)
 810a588:	f7f5 feb2 	bl	81002f0 <memchr>
 810a58c:	9a04      	ldr	r2, [sp, #16]
 810a58e:	b9d8      	cbnz	r0, 810a5c8 <_vfiprintf_r+0x12c>
 810a590:	06d1      	lsls	r1, r2, #27
 810a592:	bf44      	itt	mi
 810a594:	2320      	movmi	r3, #32
 810a596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a59a:	0713      	lsls	r3, r2, #28
 810a59c:	bf44      	itt	mi
 810a59e:	232b      	movmi	r3, #43	; 0x2b
 810a5a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a5a4:	f89a 3000 	ldrb.w	r3, [sl]
 810a5a8:	2b2a      	cmp	r3, #42	; 0x2a
 810a5aa:	d015      	beq.n	810a5d8 <_vfiprintf_r+0x13c>
 810a5ac:	9a07      	ldr	r2, [sp, #28]
 810a5ae:	4654      	mov	r4, sl
 810a5b0:	2000      	movs	r0, #0
 810a5b2:	f04f 0c0a 	mov.w	ip, #10
 810a5b6:	4621      	mov	r1, r4
 810a5b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a5bc:	3b30      	subs	r3, #48	; 0x30
 810a5be:	2b09      	cmp	r3, #9
 810a5c0:	d94e      	bls.n	810a660 <_vfiprintf_r+0x1c4>
 810a5c2:	b1b0      	cbz	r0, 810a5f2 <_vfiprintf_r+0x156>
 810a5c4:	9207      	str	r2, [sp, #28]
 810a5c6:	e014      	b.n	810a5f2 <_vfiprintf_r+0x156>
 810a5c8:	eba0 0308 	sub.w	r3, r0, r8
 810a5cc:	fa09 f303 	lsl.w	r3, r9, r3
 810a5d0:	4313      	orrs	r3, r2
 810a5d2:	9304      	str	r3, [sp, #16]
 810a5d4:	46a2      	mov	sl, r4
 810a5d6:	e7d2      	b.n	810a57e <_vfiprintf_r+0xe2>
 810a5d8:	9b03      	ldr	r3, [sp, #12]
 810a5da:	1d19      	adds	r1, r3, #4
 810a5dc:	681b      	ldr	r3, [r3, #0]
 810a5de:	9103      	str	r1, [sp, #12]
 810a5e0:	2b00      	cmp	r3, #0
 810a5e2:	bfbb      	ittet	lt
 810a5e4:	425b      	neglt	r3, r3
 810a5e6:	f042 0202 	orrlt.w	r2, r2, #2
 810a5ea:	9307      	strge	r3, [sp, #28]
 810a5ec:	9307      	strlt	r3, [sp, #28]
 810a5ee:	bfb8      	it	lt
 810a5f0:	9204      	strlt	r2, [sp, #16]
 810a5f2:	7823      	ldrb	r3, [r4, #0]
 810a5f4:	2b2e      	cmp	r3, #46	; 0x2e
 810a5f6:	d10c      	bne.n	810a612 <_vfiprintf_r+0x176>
 810a5f8:	7863      	ldrb	r3, [r4, #1]
 810a5fa:	2b2a      	cmp	r3, #42	; 0x2a
 810a5fc:	d135      	bne.n	810a66a <_vfiprintf_r+0x1ce>
 810a5fe:	9b03      	ldr	r3, [sp, #12]
 810a600:	1d1a      	adds	r2, r3, #4
 810a602:	681b      	ldr	r3, [r3, #0]
 810a604:	9203      	str	r2, [sp, #12]
 810a606:	2b00      	cmp	r3, #0
 810a608:	bfb8      	it	lt
 810a60a:	f04f 33ff 	movlt.w	r3, #4294967295
 810a60e:	3402      	adds	r4, #2
 810a610:	9305      	str	r3, [sp, #20]
 810a612:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810a6f8 <_vfiprintf_r+0x25c>
 810a616:	7821      	ldrb	r1, [r4, #0]
 810a618:	2203      	movs	r2, #3
 810a61a:	4650      	mov	r0, sl
 810a61c:	f7f5 fe68 	bl	81002f0 <memchr>
 810a620:	b140      	cbz	r0, 810a634 <_vfiprintf_r+0x198>
 810a622:	2340      	movs	r3, #64	; 0x40
 810a624:	eba0 000a 	sub.w	r0, r0, sl
 810a628:	fa03 f000 	lsl.w	r0, r3, r0
 810a62c:	9b04      	ldr	r3, [sp, #16]
 810a62e:	4303      	orrs	r3, r0
 810a630:	3401      	adds	r4, #1
 810a632:	9304      	str	r3, [sp, #16]
 810a634:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a638:	482c      	ldr	r0, [pc, #176]	; (810a6ec <_vfiprintf_r+0x250>)
 810a63a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a63e:	2206      	movs	r2, #6
 810a640:	f7f5 fe56 	bl	81002f0 <memchr>
 810a644:	2800      	cmp	r0, #0
 810a646:	d03f      	beq.n	810a6c8 <_vfiprintf_r+0x22c>
 810a648:	4b29      	ldr	r3, [pc, #164]	; (810a6f0 <_vfiprintf_r+0x254>)
 810a64a:	bb1b      	cbnz	r3, 810a694 <_vfiprintf_r+0x1f8>
 810a64c:	9b03      	ldr	r3, [sp, #12]
 810a64e:	3307      	adds	r3, #7
 810a650:	f023 0307 	bic.w	r3, r3, #7
 810a654:	3308      	adds	r3, #8
 810a656:	9303      	str	r3, [sp, #12]
 810a658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a65a:	443b      	add	r3, r7
 810a65c:	9309      	str	r3, [sp, #36]	; 0x24
 810a65e:	e767      	b.n	810a530 <_vfiprintf_r+0x94>
 810a660:	fb0c 3202 	mla	r2, ip, r2, r3
 810a664:	460c      	mov	r4, r1
 810a666:	2001      	movs	r0, #1
 810a668:	e7a5      	b.n	810a5b6 <_vfiprintf_r+0x11a>
 810a66a:	2300      	movs	r3, #0
 810a66c:	3401      	adds	r4, #1
 810a66e:	9305      	str	r3, [sp, #20]
 810a670:	4619      	mov	r1, r3
 810a672:	f04f 0c0a 	mov.w	ip, #10
 810a676:	4620      	mov	r0, r4
 810a678:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a67c:	3a30      	subs	r2, #48	; 0x30
 810a67e:	2a09      	cmp	r2, #9
 810a680:	d903      	bls.n	810a68a <_vfiprintf_r+0x1ee>
 810a682:	2b00      	cmp	r3, #0
 810a684:	d0c5      	beq.n	810a612 <_vfiprintf_r+0x176>
 810a686:	9105      	str	r1, [sp, #20]
 810a688:	e7c3      	b.n	810a612 <_vfiprintf_r+0x176>
 810a68a:	fb0c 2101 	mla	r1, ip, r1, r2
 810a68e:	4604      	mov	r4, r0
 810a690:	2301      	movs	r3, #1
 810a692:	e7f0      	b.n	810a676 <_vfiprintf_r+0x1da>
 810a694:	ab03      	add	r3, sp, #12
 810a696:	9300      	str	r3, [sp, #0]
 810a698:	462a      	mov	r2, r5
 810a69a:	4b16      	ldr	r3, [pc, #88]	; (810a6f4 <_vfiprintf_r+0x258>)
 810a69c:	a904      	add	r1, sp, #16
 810a69e:	4630      	mov	r0, r6
 810a6a0:	f7fb fd90 	bl	81061c4 <_printf_float>
 810a6a4:	4607      	mov	r7, r0
 810a6a6:	1c78      	adds	r0, r7, #1
 810a6a8:	d1d6      	bne.n	810a658 <_vfiprintf_r+0x1bc>
 810a6aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a6ac:	07d9      	lsls	r1, r3, #31
 810a6ae:	d405      	bmi.n	810a6bc <_vfiprintf_r+0x220>
 810a6b0:	89ab      	ldrh	r3, [r5, #12]
 810a6b2:	059a      	lsls	r2, r3, #22
 810a6b4:	d402      	bmi.n	810a6bc <_vfiprintf_r+0x220>
 810a6b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a6b8:	f7fe ff24 	bl	8109504 <__retarget_lock_release_recursive>
 810a6bc:	89ab      	ldrh	r3, [r5, #12]
 810a6be:	065b      	lsls	r3, r3, #25
 810a6c0:	f53f af12 	bmi.w	810a4e8 <_vfiprintf_r+0x4c>
 810a6c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a6c6:	e711      	b.n	810a4ec <_vfiprintf_r+0x50>
 810a6c8:	ab03      	add	r3, sp, #12
 810a6ca:	9300      	str	r3, [sp, #0]
 810a6cc:	462a      	mov	r2, r5
 810a6ce:	4b09      	ldr	r3, [pc, #36]	; (810a6f4 <_vfiprintf_r+0x258>)
 810a6d0:	a904      	add	r1, sp, #16
 810a6d2:	4630      	mov	r0, r6
 810a6d4:	f7fc f81a 	bl	810670c <_printf_i>
 810a6d8:	e7e4      	b.n	810a6a4 <_vfiprintf_r+0x208>
 810a6da:	bf00      	nop
 810a6dc:	0810adc4 	.word	0x0810adc4
 810a6e0:	0810ade4 	.word	0x0810ade4
 810a6e4:	0810ada4 	.word	0x0810ada4
 810a6e8:	0810afdc 	.word	0x0810afdc
 810a6ec:	0810afe6 	.word	0x0810afe6
 810a6f0:	081061c5 	.word	0x081061c5
 810a6f4:	0810a477 	.word	0x0810a477
 810a6f8:	0810afe2 	.word	0x0810afe2
 810a6fc:	00000000 	.word	0x00000000

0810a700 <nan>:
 810a700:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810a708 <nan+0x8>
 810a704:	4770      	bx	lr
 810a706:	bf00      	nop
 810a708:	00000000 	.word	0x00000000
 810a70c:	7ff80000 	.word	0x7ff80000

0810a710 <_sbrk_r>:
 810a710:	b538      	push	{r3, r4, r5, lr}
 810a712:	4d06      	ldr	r5, [pc, #24]	; (810a72c <_sbrk_r+0x1c>)
 810a714:	2300      	movs	r3, #0
 810a716:	4604      	mov	r4, r0
 810a718:	4608      	mov	r0, r1
 810a71a:	602b      	str	r3, [r5, #0]
 810a71c:	f7f7 fa76 	bl	8101c0c <_sbrk>
 810a720:	1c43      	adds	r3, r0, #1
 810a722:	d102      	bne.n	810a72a <_sbrk_r+0x1a>
 810a724:	682b      	ldr	r3, [r5, #0]
 810a726:	b103      	cbz	r3, 810a72a <_sbrk_r+0x1a>
 810a728:	6023      	str	r3, [r4, #0]
 810a72a:	bd38      	pop	{r3, r4, r5, pc}
 810a72c:	10000300 	.word	0x10000300

0810a730 <__sread>:
 810a730:	b510      	push	{r4, lr}
 810a732:	460c      	mov	r4, r1
 810a734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a738:	f000 f93a 	bl	810a9b0 <_read_r>
 810a73c:	2800      	cmp	r0, #0
 810a73e:	bfab      	itete	ge
 810a740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810a742:	89a3      	ldrhlt	r3, [r4, #12]
 810a744:	181b      	addge	r3, r3, r0
 810a746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810a74a:	bfac      	ite	ge
 810a74c:	6563      	strge	r3, [r4, #84]	; 0x54
 810a74e:	81a3      	strhlt	r3, [r4, #12]
 810a750:	bd10      	pop	{r4, pc}

0810a752 <__swrite>:
 810a752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a756:	461f      	mov	r7, r3
 810a758:	898b      	ldrh	r3, [r1, #12]
 810a75a:	05db      	lsls	r3, r3, #23
 810a75c:	4605      	mov	r5, r0
 810a75e:	460c      	mov	r4, r1
 810a760:	4616      	mov	r6, r2
 810a762:	d505      	bpl.n	810a770 <__swrite+0x1e>
 810a764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a768:	2302      	movs	r3, #2
 810a76a:	2200      	movs	r2, #0
 810a76c:	f000 f8b8 	bl	810a8e0 <_lseek_r>
 810a770:	89a3      	ldrh	r3, [r4, #12]
 810a772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810a77a:	81a3      	strh	r3, [r4, #12]
 810a77c:	4632      	mov	r2, r6
 810a77e:	463b      	mov	r3, r7
 810a780:	4628      	mov	r0, r5
 810a782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a786:	f000 b837 	b.w	810a7f8 <_write_r>

0810a78a <__sseek>:
 810a78a:	b510      	push	{r4, lr}
 810a78c:	460c      	mov	r4, r1
 810a78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a792:	f000 f8a5 	bl	810a8e0 <_lseek_r>
 810a796:	1c43      	adds	r3, r0, #1
 810a798:	89a3      	ldrh	r3, [r4, #12]
 810a79a:	bf15      	itete	ne
 810a79c:	6560      	strne	r0, [r4, #84]	; 0x54
 810a79e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810a7a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810a7a6:	81a3      	strheq	r3, [r4, #12]
 810a7a8:	bf18      	it	ne
 810a7aa:	81a3      	strhne	r3, [r4, #12]
 810a7ac:	bd10      	pop	{r4, pc}

0810a7ae <__sclose>:
 810a7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a7b2:	f000 b851 	b.w	810a858 <_close_r>

0810a7b6 <strncmp>:
 810a7b6:	b510      	push	{r4, lr}
 810a7b8:	b17a      	cbz	r2, 810a7da <strncmp+0x24>
 810a7ba:	4603      	mov	r3, r0
 810a7bc:	3901      	subs	r1, #1
 810a7be:	1884      	adds	r4, r0, r2
 810a7c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 810a7c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810a7c8:	4290      	cmp	r0, r2
 810a7ca:	d101      	bne.n	810a7d0 <strncmp+0x1a>
 810a7cc:	42a3      	cmp	r3, r4
 810a7ce:	d101      	bne.n	810a7d4 <strncmp+0x1e>
 810a7d0:	1a80      	subs	r0, r0, r2
 810a7d2:	bd10      	pop	{r4, pc}
 810a7d4:	2800      	cmp	r0, #0
 810a7d6:	d1f3      	bne.n	810a7c0 <strncmp+0xa>
 810a7d8:	e7fa      	b.n	810a7d0 <strncmp+0x1a>
 810a7da:	4610      	mov	r0, r2
 810a7dc:	e7f9      	b.n	810a7d2 <strncmp+0x1c>

0810a7de <__ascii_wctomb>:
 810a7de:	b149      	cbz	r1, 810a7f4 <__ascii_wctomb+0x16>
 810a7e0:	2aff      	cmp	r2, #255	; 0xff
 810a7e2:	bf85      	ittet	hi
 810a7e4:	238a      	movhi	r3, #138	; 0x8a
 810a7e6:	6003      	strhi	r3, [r0, #0]
 810a7e8:	700a      	strbls	r2, [r1, #0]
 810a7ea:	f04f 30ff 	movhi.w	r0, #4294967295
 810a7ee:	bf98      	it	ls
 810a7f0:	2001      	movls	r0, #1
 810a7f2:	4770      	bx	lr
 810a7f4:	4608      	mov	r0, r1
 810a7f6:	4770      	bx	lr

0810a7f8 <_write_r>:
 810a7f8:	b538      	push	{r3, r4, r5, lr}
 810a7fa:	4d07      	ldr	r5, [pc, #28]	; (810a818 <_write_r+0x20>)
 810a7fc:	4604      	mov	r4, r0
 810a7fe:	4608      	mov	r0, r1
 810a800:	4611      	mov	r1, r2
 810a802:	2200      	movs	r2, #0
 810a804:	602a      	str	r2, [r5, #0]
 810a806:	461a      	mov	r2, r3
 810a808:	f7f7 f9b0 	bl	8101b6c <_write>
 810a80c:	1c43      	adds	r3, r0, #1
 810a80e:	d102      	bne.n	810a816 <_write_r+0x1e>
 810a810:	682b      	ldr	r3, [r5, #0]
 810a812:	b103      	cbz	r3, 810a816 <_write_r+0x1e>
 810a814:	6023      	str	r3, [r4, #0]
 810a816:	bd38      	pop	{r3, r4, r5, pc}
 810a818:	10000300 	.word	0x10000300

0810a81c <__assert_func>:
 810a81c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810a81e:	4614      	mov	r4, r2
 810a820:	461a      	mov	r2, r3
 810a822:	4b09      	ldr	r3, [pc, #36]	; (810a848 <__assert_func+0x2c>)
 810a824:	681b      	ldr	r3, [r3, #0]
 810a826:	4605      	mov	r5, r0
 810a828:	68d8      	ldr	r0, [r3, #12]
 810a82a:	b14c      	cbz	r4, 810a840 <__assert_func+0x24>
 810a82c:	4b07      	ldr	r3, [pc, #28]	; (810a84c <__assert_func+0x30>)
 810a82e:	9100      	str	r1, [sp, #0]
 810a830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810a834:	4906      	ldr	r1, [pc, #24]	; (810a850 <__assert_func+0x34>)
 810a836:	462b      	mov	r3, r5
 810a838:	f000 f81e 	bl	810a878 <fiprintf>
 810a83c:	f000 f8ca 	bl	810a9d4 <abort>
 810a840:	4b04      	ldr	r3, [pc, #16]	; (810a854 <__assert_func+0x38>)
 810a842:	461c      	mov	r4, r3
 810a844:	e7f3      	b.n	810a82e <__assert_func+0x12>
 810a846:	bf00      	nop
 810a848:	1000001c 	.word	0x1000001c
 810a84c:	0810afed 	.word	0x0810afed
 810a850:	0810affa 	.word	0x0810affa
 810a854:	0810b028 	.word	0x0810b028

0810a858 <_close_r>:
 810a858:	b538      	push	{r3, r4, r5, lr}
 810a85a:	4d06      	ldr	r5, [pc, #24]	; (810a874 <_close_r+0x1c>)
 810a85c:	2300      	movs	r3, #0
 810a85e:	4604      	mov	r4, r0
 810a860:	4608      	mov	r0, r1
 810a862:	602b      	str	r3, [r5, #0]
 810a864:	f7f7 f99e 	bl	8101ba4 <_close>
 810a868:	1c43      	adds	r3, r0, #1
 810a86a:	d102      	bne.n	810a872 <_close_r+0x1a>
 810a86c:	682b      	ldr	r3, [r5, #0]
 810a86e:	b103      	cbz	r3, 810a872 <_close_r+0x1a>
 810a870:	6023      	str	r3, [r4, #0]
 810a872:	bd38      	pop	{r3, r4, r5, pc}
 810a874:	10000300 	.word	0x10000300

0810a878 <fiprintf>:
 810a878:	b40e      	push	{r1, r2, r3}
 810a87a:	b503      	push	{r0, r1, lr}
 810a87c:	4601      	mov	r1, r0
 810a87e:	ab03      	add	r3, sp, #12
 810a880:	4805      	ldr	r0, [pc, #20]	; (810a898 <fiprintf+0x20>)
 810a882:	f853 2b04 	ldr.w	r2, [r3], #4
 810a886:	6800      	ldr	r0, [r0, #0]
 810a888:	9301      	str	r3, [sp, #4]
 810a88a:	f7ff fe07 	bl	810a49c <_vfiprintf_r>
 810a88e:	b002      	add	sp, #8
 810a890:	f85d eb04 	ldr.w	lr, [sp], #4
 810a894:	b003      	add	sp, #12
 810a896:	4770      	bx	lr
 810a898:	1000001c 	.word	0x1000001c

0810a89c <_fstat_r>:
 810a89c:	b538      	push	{r3, r4, r5, lr}
 810a89e:	4d07      	ldr	r5, [pc, #28]	; (810a8bc <_fstat_r+0x20>)
 810a8a0:	2300      	movs	r3, #0
 810a8a2:	4604      	mov	r4, r0
 810a8a4:	4608      	mov	r0, r1
 810a8a6:	4611      	mov	r1, r2
 810a8a8:	602b      	str	r3, [r5, #0]
 810a8aa:	f7f7 f987 	bl	8101bbc <_fstat>
 810a8ae:	1c43      	adds	r3, r0, #1
 810a8b0:	d102      	bne.n	810a8b8 <_fstat_r+0x1c>
 810a8b2:	682b      	ldr	r3, [r5, #0]
 810a8b4:	b103      	cbz	r3, 810a8b8 <_fstat_r+0x1c>
 810a8b6:	6023      	str	r3, [r4, #0]
 810a8b8:	bd38      	pop	{r3, r4, r5, pc}
 810a8ba:	bf00      	nop
 810a8bc:	10000300 	.word	0x10000300

0810a8c0 <_isatty_r>:
 810a8c0:	b538      	push	{r3, r4, r5, lr}
 810a8c2:	4d06      	ldr	r5, [pc, #24]	; (810a8dc <_isatty_r+0x1c>)
 810a8c4:	2300      	movs	r3, #0
 810a8c6:	4604      	mov	r4, r0
 810a8c8:	4608      	mov	r0, r1
 810a8ca:	602b      	str	r3, [r5, #0]
 810a8cc:	f7f7 f986 	bl	8101bdc <_isatty>
 810a8d0:	1c43      	adds	r3, r0, #1
 810a8d2:	d102      	bne.n	810a8da <_isatty_r+0x1a>
 810a8d4:	682b      	ldr	r3, [r5, #0]
 810a8d6:	b103      	cbz	r3, 810a8da <_isatty_r+0x1a>
 810a8d8:	6023      	str	r3, [r4, #0]
 810a8da:	bd38      	pop	{r3, r4, r5, pc}
 810a8dc:	10000300 	.word	0x10000300

0810a8e0 <_lseek_r>:
 810a8e0:	b538      	push	{r3, r4, r5, lr}
 810a8e2:	4d07      	ldr	r5, [pc, #28]	; (810a900 <_lseek_r+0x20>)
 810a8e4:	4604      	mov	r4, r0
 810a8e6:	4608      	mov	r0, r1
 810a8e8:	4611      	mov	r1, r2
 810a8ea:	2200      	movs	r2, #0
 810a8ec:	602a      	str	r2, [r5, #0]
 810a8ee:	461a      	mov	r2, r3
 810a8f0:	f7f7 f97f 	bl	8101bf2 <_lseek>
 810a8f4:	1c43      	adds	r3, r0, #1
 810a8f6:	d102      	bne.n	810a8fe <_lseek_r+0x1e>
 810a8f8:	682b      	ldr	r3, [r5, #0]
 810a8fa:	b103      	cbz	r3, 810a8fe <_lseek_r+0x1e>
 810a8fc:	6023      	str	r3, [r4, #0]
 810a8fe:	bd38      	pop	{r3, r4, r5, pc}
 810a900:	10000300 	.word	0x10000300

0810a904 <memmove>:
 810a904:	4288      	cmp	r0, r1
 810a906:	b510      	push	{r4, lr}
 810a908:	eb01 0402 	add.w	r4, r1, r2
 810a90c:	d902      	bls.n	810a914 <memmove+0x10>
 810a90e:	4284      	cmp	r4, r0
 810a910:	4623      	mov	r3, r4
 810a912:	d807      	bhi.n	810a924 <memmove+0x20>
 810a914:	1e43      	subs	r3, r0, #1
 810a916:	42a1      	cmp	r1, r4
 810a918:	d008      	beq.n	810a92c <memmove+0x28>
 810a91a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810a91e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810a922:	e7f8      	b.n	810a916 <memmove+0x12>
 810a924:	4402      	add	r2, r0
 810a926:	4601      	mov	r1, r0
 810a928:	428a      	cmp	r2, r1
 810a92a:	d100      	bne.n	810a92e <memmove+0x2a>
 810a92c:	bd10      	pop	{r4, pc}
 810a92e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810a932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810a936:	e7f7      	b.n	810a928 <memmove+0x24>

0810a938 <__malloc_lock>:
 810a938:	4801      	ldr	r0, [pc, #4]	; (810a940 <__malloc_lock+0x8>)
 810a93a:	f7fe bde2 	b.w	8109502 <__retarget_lock_acquire_recursive>
 810a93e:	bf00      	nop
 810a940:	100002f4 	.word	0x100002f4

0810a944 <__malloc_unlock>:
 810a944:	4801      	ldr	r0, [pc, #4]	; (810a94c <__malloc_unlock+0x8>)
 810a946:	f7fe bddd 	b.w	8109504 <__retarget_lock_release_recursive>
 810a94a:	bf00      	nop
 810a94c:	100002f4 	.word	0x100002f4

0810a950 <_realloc_r>:
 810a950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a954:	4680      	mov	r8, r0
 810a956:	4614      	mov	r4, r2
 810a958:	460e      	mov	r6, r1
 810a95a:	b921      	cbnz	r1, 810a966 <_realloc_r+0x16>
 810a95c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810a960:	4611      	mov	r1, r2
 810a962:	f7ff bba1 	b.w	810a0a8 <_malloc_r>
 810a966:	b92a      	cbnz	r2, 810a974 <_realloc_r+0x24>
 810a968:	f7ff fb32 	bl	8109fd0 <_free_r>
 810a96c:	4625      	mov	r5, r4
 810a96e:	4628      	mov	r0, r5
 810a970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a974:	f000 f835 	bl	810a9e2 <_malloc_usable_size_r>
 810a978:	4284      	cmp	r4, r0
 810a97a:	4607      	mov	r7, r0
 810a97c:	d802      	bhi.n	810a984 <_realloc_r+0x34>
 810a97e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810a982:	d812      	bhi.n	810a9aa <_realloc_r+0x5a>
 810a984:	4621      	mov	r1, r4
 810a986:	4640      	mov	r0, r8
 810a988:	f7ff fb8e 	bl	810a0a8 <_malloc_r>
 810a98c:	4605      	mov	r5, r0
 810a98e:	2800      	cmp	r0, #0
 810a990:	d0ed      	beq.n	810a96e <_realloc_r+0x1e>
 810a992:	42bc      	cmp	r4, r7
 810a994:	4622      	mov	r2, r4
 810a996:	4631      	mov	r1, r6
 810a998:	bf28      	it	cs
 810a99a:	463a      	movcs	r2, r7
 810a99c:	f7fe fe32 	bl	8109604 <memcpy>
 810a9a0:	4631      	mov	r1, r6
 810a9a2:	4640      	mov	r0, r8
 810a9a4:	f7ff fb14 	bl	8109fd0 <_free_r>
 810a9a8:	e7e1      	b.n	810a96e <_realloc_r+0x1e>
 810a9aa:	4635      	mov	r5, r6
 810a9ac:	e7df      	b.n	810a96e <_realloc_r+0x1e>
	...

0810a9b0 <_read_r>:
 810a9b0:	b538      	push	{r3, r4, r5, lr}
 810a9b2:	4d07      	ldr	r5, [pc, #28]	; (810a9d0 <_read_r+0x20>)
 810a9b4:	4604      	mov	r4, r0
 810a9b6:	4608      	mov	r0, r1
 810a9b8:	4611      	mov	r1, r2
 810a9ba:	2200      	movs	r2, #0
 810a9bc:	602a      	str	r2, [r5, #0]
 810a9be:	461a      	mov	r2, r3
 810a9c0:	f7f7 f8b7 	bl	8101b32 <_read>
 810a9c4:	1c43      	adds	r3, r0, #1
 810a9c6:	d102      	bne.n	810a9ce <_read_r+0x1e>
 810a9c8:	682b      	ldr	r3, [r5, #0]
 810a9ca:	b103      	cbz	r3, 810a9ce <_read_r+0x1e>
 810a9cc:	6023      	str	r3, [r4, #0]
 810a9ce:	bd38      	pop	{r3, r4, r5, pc}
 810a9d0:	10000300 	.word	0x10000300

0810a9d4 <abort>:
 810a9d4:	b508      	push	{r3, lr}
 810a9d6:	2006      	movs	r0, #6
 810a9d8:	f000 f834 	bl	810aa44 <raise>
 810a9dc:	2001      	movs	r0, #1
 810a9de:	f7f7 f89e 	bl	8101b1e <_exit>

0810a9e2 <_malloc_usable_size_r>:
 810a9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810a9e6:	1f18      	subs	r0, r3, #4
 810a9e8:	2b00      	cmp	r3, #0
 810a9ea:	bfbc      	itt	lt
 810a9ec:	580b      	ldrlt	r3, [r1, r0]
 810a9ee:	18c0      	addlt	r0, r0, r3
 810a9f0:	4770      	bx	lr

0810a9f2 <_raise_r>:
 810a9f2:	291f      	cmp	r1, #31
 810a9f4:	b538      	push	{r3, r4, r5, lr}
 810a9f6:	4604      	mov	r4, r0
 810a9f8:	460d      	mov	r5, r1
 810a9fa:	d904      	bls.n	810aa06 <_raise_r+0x14>
 810a9fc:	2316      	movs	r3, #22
 810a9fe:	6003      	str	r3, [r0, #0]
 810aa00:	f04f 30ff 	mov.w	r0, #4294967295
 810aa04:	bd38      	pop	{r3, r4, r5, pc}
 810aa06:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810aa08:	b112      	cbz	r2, 810aa10 <_raise_r+0x1e>
 810aa0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810aa0e:	b94b      	cbnz	r3, 810aa24 <_raise_r+0x32>
 810aa10:	4620      	mov	r0, r4
 810aa12:	f000 f831 	bl	810aa78 <_getpid_r>
 810aa16:	462a      	mov	r2, r5
 810aa18:	4601      	mov	r1, r0
 810aa1a:	4620      	mov	r0, r4
 810aa1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810aa20:	f000 b818 	b.w	810aa54 <_kill_r>
 810aa24:	2b01      	cmp	r3, #1
 810aa26:	d00a      	beq.n	810aa3e <_raise_r+0x4c>
 810aa28:	1c59      	adds	r1, r3, #1
 810aa2a:	d103      	bne.n	810aa34 <_raise_r+0x42>
 810aa2c:	2316      	movs	r3, #22
 810aa2e:	6003      	str	r3, [r0, #0]
 810aa30:	2001      	movs	r0, #1
 810aa32:	e7e7      	b.n	810aa04 <_raise_r+0x12>
 810aa34:	2400      	movs	r4, #0
 810aa36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810aa3a:	4628      	mov	r0, r5
 810aa3c:	4798      	blx	r3
 810aa3e:	2000      	movs	r0, #0
 810aa40:	e7e0      	b.n	810aa04 <_raise_r+0x12>
	...

0810aa44 <raise>:
 810aa44:	4b02      	ldr	r3, [pc, #8]	; (810aa50 <raise+0xc>)
 810aa46:	4601      	mov	r1, r0
 810aa48:	6818      	ldr	r0, [r3, #0]
 810aa4a:	f7ff bfd2 	b.w	810a9f2 <_raise_r>
 810aa4e:	bf00      	nop
 810aa50:	1000001c 	.word	0x1000001c

0810aa54 <_kill_r>:
 810aa54:	b538      	push	{r3, r4, r5, lr}
 810aa56:	4d07      	ldr	r5, [pc, #28]	; (810aa74 <_kill_r+0x20>)
 810aa58:	2300      	movs	r3, #0
 810aa5a:	4604      	mov	r4, r0
 810aa5c:	4608      	mov	r0, r1
 810aa5e:	4611      	mov	r1, r2
 810aa60:	602b      	str	r3, [r5, #0]
 810aa62:	f7f7 f84c 	bl	8101afe <_kill>
 810aa66:	1c43      	adds	r3, r0, #1
 810aa68:	d102      	bne.n	810aa70 <_kill_r+0x1c>
 810aa6a:	682b      	ldr	r3, [r5, #0]
 810aa6c:	b103      	cbz	r3, 810aa70 <_kill_r+0x1c>
 810aa6e:	6023      	str	r3, [r4, #0]
 810aa70:	bd38      	pop	{r3, r4, r5, pc}
 810aa72:	bf00      	nop
 810aa74:	10000300 	.word	0x10000300

0810aa78 <_getpid_r>:
 810aa78:	f7f7 b839 	b.w	8101aee <_getpid>

0810aa7c <_init>:
 810aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810aa7e:	bf00      	nop
 810aa80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810aa82:	bc08      	pop	{r3}
 810aa84:	469e      	mov	lr, r3
 810aa86:	4770      	bx	lr

0810aa88 <_fini>:
 810aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810aa8a:	bf00      	nop
 810aa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810aa8e:	bc08      	pop	{r3}
 810aa90:	469e      	mov	lr, r3
 810aa92:	4770      	bx	lr
